; Neto - https://www.neto-games.com.br/
; Assembly gerado utilizando o Neto Assembler Editor v0.14a
; Concluído em 10/01/2020
; Sonic 2 Beta 14/09/1992 Disassembly (Version 1.0) By Esrael L. G. Neto 
; 
; 
; "Sonic The Hedgehog 2 (Sep 14, 1992) (hidden-palace.org).bin" Rom by drx (http://www.hidden-palace.org/)
;  
;
; Hidden Palace usa uma cópia do leiaute da fase of Oil Ocean ato 1
;
; Gráficos do Rhinobot foram editados para usar outra paleta 
;
; Title card object references the Oval and Final Zone mappings fron Sonic 1
align macro
	cnop 0,\1
	endm
                include 'vars.asm'
                include 'macros.asm'
                                               
                dc.l    StackPointer            ; Initial stack pointer value
                dc.l    ROM_Prog_Start          ; Start of our program in ROM
                dc.l    BusError                ; Bus error
                dc.l    AddressError            ; Address error
                dc.l    IllegalInstr            ; Illegal instruction
                dc.l    ZeroDivide              ; Division by zero
                dc.l    ChkInstr                ; CHK exception
                dc.l    TrapvInstr              ; TRAPV exception
                dc.l    PrivilegeViolation      ; Privilege violation
                dc.l    Trace                   ; TRACE exception
                dc.l    Line1010Emu             ; Line-A emulator
                dc.l    Line1111Emu             ; Line-F emulator
                dc.l    ErrorException          ; Unused (reserved)
                dc.l    ErrorException          ; Unused (reserved)
                dc.l    ErrorException          ; Unused (reserved)
                dc.l    ErrorException          ; Unused (reserved)
                dc.l    ErrorException          ; Unused (reserved)
                dc.l    ErrorException          ; Unused (reserved)
                dc.l    ErrorException          ; Unused (reserved)
                dc.l    ErrorException          ; Unused (reserved)
                dc.l    ErrorException          ; Unused (reserved)
                dc.l    ErrorException          ; Unused (reserved)
                dc.l    ErrorException          ; Unused (reserved)
                dc.l    ErrorException          ; Unused (reserved)
                dc.l    ErrorException          ; Spurious exception
                dc.l    ErrorTrap               ; IRQ level 1
                dc.l    ErrorTrap               ; IRQ level 2
                dc.l    ErrorTrap               ; IRQ level 3
                dc.l    HBlank                  ; IRQ level 4 -> HBlankInterrupt (horizontal retrace interrupt)
                dc.l    ErrorTrap               ; IRQ level 5
                dc.l    VBlank                  ; IRQ level 6 -> VBlankInterrupt (vertical retrace interrupt)
                dc.l    ErrorTrap               ; IRQ level 7
                dc.l    ErrorTrap               ; TRAP #$00 exception
                dc.l    ErrorTrap               ; TRAP #$01 exception
                dc.l    ErrorTrap               ; TRAP #$02 exception
                dc.l    ErrorTrap               ; TRAP #$03 exception
                dc.l    ErrorTrap               ; TRAP #$04 exception
                dc.l    ErrorTrap               ; TRAP #$05 exception
                dc.l    ErrorTrap               ; TRAP #$06 exception
                dc.l    ErrorTrap               ; TRAP #$07 exception
                dc.l    ErrorTrap               ; TRAP #$08 exception
                dc.l    ErrorTrap               ; TRAP #$09 exception
                dc.l    ErrorTrap               ; TRAP #$0A exception
                dc.l    ErrorTrap               ; TRAP #$0B exception
                dc.l    ErrorTrap               ; TRAP #$0C exception
                dc.l    ErrorTrap               ; TRAP #$0D exception
                dc.l    ErrorTrap               ; TRAP #$0E exception
                dc.l    ErrorTrap               ; TRAP #$0F exception
                dc.l    ErrorTrap               ; Unused (reserved)
                dc.l    ErrorTrap               ; Unused (reserved)
                dc.l    ErrorTrap               ; Unused (reserved)
                dc.l    ErrorTrap               ; Unused (reserved)
                dc.l    ErrorTrap               ; Unused (reserved)
                dc.l    ErrorTrap               ; Unused (reserved)
                dc.l    ErrorTrap               ; Unused (reserved)
                dc.l    ErrorTrap               ; Unused (reserved)
                dc.l    ErrorTrap               ; Unused (reserved)
                dc.l    ErrorTrap               ; Unused (reserved)
                dc.l    ErrorTrap               ; Unused (reserved)
                dc.l    ErrorTrap               ; Unused (reserved)
                dc.l    ErrorTrap               ; Unused (reserved)
                dc.l    ErrorTrap               ; Unused (reserved)
                dc.l    ErrorTrap               ; Unused (reserved)
                dc.l    ErrorTrap               ; Unused (reserved)
                dc.b    'SEGA MEGA DRIVE '
                dc.b    '(C)SEGA 1991.APR'
                dc.b    'SONIC THE             HEDGEHOG 2                '
                dc.b    'SONIC THE             HEDGEHOG 2                '
                dc.b    'GM 00001051-00'
ROM_Checksum:	dc.w    $264A
                dc.b    'J               '
                dc.l    $00000000
ROM_End:                
                dc.l    $000FFFFF
                dc.l    $00FF0000
                dc.l    $00FFFFFF
                dc.b    '                '
                dc.b    '                                                '
                dc.b    'JUE             '

;-------------------------------------------------------------------------------                                
ErrorTrap:                                                     ; Offset_0x000200
                nop                                                             
                nop                                                             
                bra.s   ErrorTrap                              ; Offset_0x000200
ROM_Prog_Start:                                                ; Offset_0x000206
                tst.l   (IO_Port_0_Control)                          ; $00A10008
                bne.s   PortA_OK                               ; Offset_0x000214                                         
                tst.w   (IO_Expansion_Control)                       ; $00A1000C
PortA_OK:                                                      ; Offset_0x000214
                bne.s   PortC_OK                               ; Offset_0x000292                                         
                lea     InitValues(PC), A5                     ; Offset_0x000294                         
                movem.w (A5)+, D5-D7                                            
                movem.l (A5)+, A0-A4                                            
                move.b	-$10FF(a1),d0                                         
                andi.b  #$0F, D0                                                
                beq.s   SkipSecurity                           ; Offset_0x000234                                         
                move.l  #'SEGA', $2F00(A1)                                   
SkipSecurity:                                                  ; Offset_0x000234
                move.w  (A4), D0                                                
                moveq   #$00, D0                                                
                move.l  D0, A6                                                  
                move.l  A6, USP                                                 
                moveq   #$17, D1                                                
VDPInitLoop:                                                   ; Offset_0x00023E
                move.b  (A5)+, D5                                               
                move.w  D5, (A4)                                                
                add.w   D7, D5                                                  
                dbra    D1, VDPInitLoop                        ; Offset_0x00023E                                     
                move.l  (A5)+, (A4)                                             
                move.w  D0, (A3)                                                
                move.w  D7, (A1)                                                
                move.w  D7, (A2)                                                
WaitForZ80:                                                    ; Offset_0x000250
                btst    D0, (A1)                                                
                bne.s   WaitForZ80                             ; Offset_0x000250                                         
                moveq   #$25, D2                                                
Z80InitLoop:                                                   ; Offset_0x000256
                move.b  (A5)+, (A0)+                                            
                dbra    D2, Z80InitLoop                        ; Offset_0x000256                                     
                move.w  D0, (A2)                                                
                move.w  D0, (A1)                                                
                move.w  D7, (A2)                                                
ClearRAMLoop:                                                  ; Offset_0x000262
                move.l  D0, -(A6)                                               
                dbra    D6, ClearRAMLoop                       ; Offset_0x000262                                     
                move.l  (A5)+, (A4)                                             
                move.l  (A5)+, (A4)                                             
                moveq   #$1F, D3                                                
ClearCRAMLoop:                                                 ; Offset_0x00026E
                move.l  D0, (A3)                                                
                dbra    D3, ClearCRAMLoop                      ; Offset_0x00026E                                     
                move.l  (A5)+, (A4)                                             
                moveq   #$13, D4                                                
ClearVSRAMLoop:                                                ; Offset_0x000278
                move.l  D0, (A3)                                                
                dbra    D4, ClearVSRAMLoop                     ; Offset_0x000278                                     
                moveq   #$03, D5                                                
PSGInitLoop:                                                   ; Offset_0x000280
                move.b  (A5)+, $0011(A3)                                        
                dbra    D5, PSGInitLoop                        ; Offset_0x000280                                     
                move.w  D0, (A2)                                                
                movem.l (A6), D0-D7/A0-A6                                       
                move    #$2700, SR                                              
PortC_OK:                                                      ; Offset_0x000292
                bra.s   Game_Program                           ; Offset_0x000300    
;-------------------------------------------------------------------------------
InitValues:                                                    ; Offset_0x000294                 
                dc.w    $8000, $3FFF, $0100 
                dc.l    Z80_RAM_Start               ; $00A00000
                dc.l    Z80_Bus_Request             ; $00A11100
                dc.l    Z80_Reset                   ; $00A11200
                dc.l    VDP_Data_Port               ; $00C00000
                dc.l    VDP_Control_Port            ; $00C00004                      
                dc.b    $04, $14, $30, $3C, $07, $6C, $00, $00
                dc.b    $00, $00, $FF, $00, $81, $37, $00, $01
                dc.b    $01, $00, $00, $FF, $FF, $00, $00, $80
                dc.b    $40, $00, $00, $80, $AF, $01, $D9, $1F 
                dc.b    $11, $27, $00, $21, $26, $00, $F9, $77
                dc.b    $ED, $B0, $DD, $E1, $FD, $E1, $ED, $47 
                dc.b    $ED, $4F, $D1, $E1, $F1, $08, $D9, $C1
                dc.b    $D1, $E1, $F1, $F9, $F3, $ED, $56, $36 
                dc.b    $E9, $E9, $81, $04, $8F, $02
                dc.l    Color_RAM_Address           ; $C0000000
                dc.l    $40000010
                dc.b    $9F, $BF, $DF, $FF          ; PSG Data
;-------------------------------------------------------------------------------                
Game_Program:                                                  ; Offset_0x000300
                tst.w   (VDP_Control_Port)                           ; $00C00004
                btst    #$06, (IO_Expansion_Control+$0001)           ; $00A1000D
                beq.s   ChecksumCheck                          ; Offset_0x00031C                                         
                cmpi.l  #'init', (Init_Flag).w                               
                beq     AlreadyInit                            ; Offset_0x00036A                                         
ChecksumCheck:                                                 ; Offset_0x00031C
                move.l  #ErrorTrap, A0                               ; $00000200                                        
                move.l  #ROM_End, A1                                 ; $000001A4                                      
                move.l  (A1), D0                                                
                move.l  #$0007FFFF, D0                                          
                moveq   #$00, D1                                                
ChksumChkLoop:                                                 ; Offset_0x000332
                add.w   (A0)+, D1                                               
                cmp.l   A0, D0                                                  
                bcc.s   ChksumChkLoop                          ; Offset_0x000332                                         
                move.l  #ROM_Checksum, A1                                          
                cmp.w   (A1), D1                                                
                nop                                                             
                nop                                                             
                lea     ($FFFFFE00).w, A6                                       
                moveq   #$00, D7                                                
                move.w  #$007F, D6                                              
ClearSomeRAMLoop:                                              ; Offset_0x00034E
                move.l  D7, (A6)+                                               
                dbra    D6, ClearSomeRAMLoop                   ; Offset_0x00034E                                     
                move.b  (IO_Hardware_Version), D0                    ; $00A10001
                andi.b  #$C0, D0                                                
                move.b  D0, (Hardware_Id).w                                       
                move.l  #'init', (Init_Flag).w                               
AlreadyInit:                                                   ; Offset_0x00036A
                lea     (M68K_RAM_Start&$00FFFFFF), A6               ; $00FF0000                                    
                moveq   #$00, D7                                                
                move.w  #$3F7F, D6                                              
ClearRemainingRAMLoop:                                         ; Offset_0x000376
                move.l  D7, (A6)+                                               
                dbra    D6, ClearRemainingRAMLoop              ; Offset_0x000376                                     
                bsr     VDPRegSetup                            ; Offset_0x001734                                         
                bsr     J_SoundDriverLoad                       ; Offset_0x0018B8                                         
                bsr     Control_Ports_Init                     ; Offset_0x0016C8                                         
                move.b  #$00, (Game_Mode).w                          ; $FFFFF600
MainGameLoop:                                                  ; Offset_0x00038E
                move.b  (Game_Mode).w, D0                            ; $FFFFF600
                andi.w  #$001C, D0                                              
                jsr     GameModeArray(PC, D0)                  ; Offset_0x00039C                               
                bra.s   MainGameLoop                           ; Offset_0x00038E                                                         
GameModeArray:                                                 ; Offset_0x00039C
                bra     Sega_Screen                            ; Offset_0x003D6C                                         
                bra     Title_Screen                           ; Offset_0x003F44
                bra     Level                                  ; Offset_0x0049A6
                bra     Level                                  ; Offset_0x0049A6
                bra     Special_Stage                          ; Offset_0x005BB0                           
;===============================================================================
; Rotina usada quando o CRC do jogo está incorreto, mostrando uma tela vermelha.
; Left over do Sonic 1
; ->>>
;===============================================================================   
ChecksumError:                                                 ; Offset_0x0003B0 
                bsr     VDPRegSetup                            ; Offset_0x001734
                move.l  #Color_RAM_Address, (VDP_Control_Port) ; $C0000000, $00C00004
                moveq   #$3F, D7                                                
ChksumErr_RedFill:                                             ; Offset_0x0003C0
                move.w  #$000E, (VDP_Data_Port)                      ; $00C00000
                dbra    D7, ChksumErr_RedFill                  ; Offset_0x0003C0                                     
ChksumErr_InfLoop:                                             ; Offset_0x0003CC
                bra.s   ChksumErr_InfLoop                      ; Offset_0x0003CC    
;===============================================================================
; Rotina usada quando o CRC do jogo está incorreto, mostrando uma tela vermelha.
; Left over do Sonic 1
; <<<-
;===============================================================================  

;-------------------------------------------------------------------------------  
; Erro de barramento    
;-------------------------------------------------------------------------------   
BusError:                                                      ; Offset_0x0003CE
                move.b  #$02, (Exception_Index).w                    ; $FFFFFC44
                bra.s   ErrorMsg_TwoAddresses                  ; Offset_0x000432    
;-------------------------------------------------------------------------------  
; Erro de endereçamento     
;-------------------------------------------------------------------------------          
AddressError:                                                  ; Offset_0x0003D6
                move.b  #$04, (Exception_Index).w                    ; $FFFFFC44
                bra.s   ErrorMsg_TwoAddresses                  ; Offset_0x000432                                                                        
;-------------------------------------------------------------------------------  
; Erro de instrução ilegal    
;-------------------------------------------------------------------------------                                             
IllegalInstr:                                                  ; Offset_0x0003DE
                move.b  #$06, (Exception_Index).w                    ; $FFFFFC44
                addq.l  #$02, $0002(A7)                                         
                bra.s   ErrorMessage                           ; Offset_0x00045A                                         
;-------------------------------------------------------------------------------  
; Erro de divisão por zero    
;-------------------------------------------------------------------------------   
ZeroDivide:                                                    ; Offset_0x0003EA
                move.b  #$08, (Exception_Index).w                    ; $FFFFFC44
                bra.s   ErrorMessage                           ; Offset_0x00045A                                         
;-------------------------------------------------------------------------------  
; Erro verificar exceção
;-------------------------------------------------------------------------------                  
ChkInstr:                                                      ; Offset_0x0003F2
                move.b  #$0A, (Exception_Index).w                    ; $FFFFFC44
                bra.s   ErrorMessage                           ; Offset_0x00045A                                         
;-------------------------------------------------------------------------------  
; Erro exceção TRAPV
;-------------------------------------------------------------------------------    
TrapvInstr:                                                    ; Offset_0x0003FA
                move.b  #$0C, (Exception_Index).w                    ; $FFFFFC44
                bra.s   ErrorMessage                           ; Offset_0x00045A                                         
;-------------------------------------------------------------------------------  
; Erro violação de privilégios
;-------------------------------------------------------------------------------   
PrivilegeViolation:                                            ; Offset_0x000402
                move.b  #$0E, (Exception_Index).w                    ; $FFFFFC44
                bra.s   ErrorMessage                           ; Offset_0x00045A                                         
;-------------------------------------------------------------------------------  
; Erro traço
;-------------------------------------------------------------------------------  
Trace:                                                         ; Offset_0x00040A
                move.b  #$10, (Exception_Index).w                    ; $FFFFFC44
                bra.s   ErrorMessage                           ; Offset_0x00045A      
;-------------------------------------------------------------------------------  
; Erro na linha "A" de emulação 
;-------------------------------------------------------------------------------  
Line1010Emu:                                                   ; Offset_0x000412
                move.b  #$12, (Exception_Index).w                    ; $FFFFFC44
                addq.l  #$02, $0002(A7)                                         
                bra.s   ErrorMessage                           ; Offset_0x00045A                                                         
;-------------------------------------------------------------------------------  
; Erro na linha "F" de emulção 
;-------------------------------------------------------------------------------  
Line1111Emu:                                                   ; Offset_0x00041E
                move.b  #$14, (Exception_Index).w                    ; $FFFFFC44
                addq.l  #$02, $0002(A7)                                         
                bra.s   ErrorMessage                           ; Offset_0x00045A
;-------------------------------------------------------------------------------  
; Erro de exceção
;-------------------------------------------------------------------------------                
ErrorException:                                                ; Offset_0x00042A
                move.b  #$00, (Exception_Index).w                    ; $FFFFFC44
                bra.s   ErrorMessage                           ; Offset_0x00045A           
;===============================================================================                  
; Rotina para mostrar a mensagem de erro
; ->>>                           
;===============================================================================  
ErrorMsg_TwoAddresses:                                         ; Offset_0x000432
                move    #$2700, SR                                              
                addq.w  #$02, A7                                                
                move.l  (A7)+, ($FFFFFC40).w                                    
                addq.w  #$02, A7                                                
                movem.l D0-D7/A0-A7, ($FFFFFC00).w                              
                bsr     ShowErrorMsg                           ; Offset_0x000480                                         
                move.l  $0002(A7), D0                                           
                bsr     ShowErrAddress                         ; Offset_0x0005B2                                         
                move.l  ($FFFFFC40).w, D0                                       
                bsr     ShowErrAddress                         ; Offset_0x0005B2                                         
                bra.s   ErrorMsg_Wait                          ; Offset_0x000470                                         
ErrorMessage:                                                  ; Offset_0x00045A
                move    #$2700, SR                                              
                movem.l D0-D7/A0-A7, ($FFFFFC00).w                              
                bsr     ShowErrorMsg                           ; Offset_0x000480                                         
                move.l  $0002(A7), D0                                           
                bsr     ShowErrAddress                         ; Offset_0x0005B2                                         
ErrorMsg_Wait:                                                 ; Offset_0x000470
                bsr     Error_WaitForC                         ; Offset_0x0005D8                                         
                movem.l ($FFFFFC00).w, D0-D7/A0-A7                              
                move    #$2300, SR                                              
                rte                                                             
ShowErrorMsg:                                                  ; Offset_0x000480
                lea     (VDP_Data_Port), A6                          ; $00C00000
                move.l  #$78000003, (VDP_Control_Port)               ; $00C00004
                lea     (Art_Menu_Text), A0                    ; Offset_0x0005E8                              
                move.w  #$027F, D1                                              
Error_LoadGfx:                                                 ; Offset_0x00049A
                move.w  (A0)+, (A6)                                             
                dbra    D1, Error_LoadGfx                      ; Offset_0x00049A                                     
                moveq   #$00, D0                                                
                move.b  (Exception_Index).w, D0                      ; $FFFFFC44
                move.w  Error_Text(PC, D0), D0                 ; Offset_0x0004CA                       
                lea     Error_Text(PC, D0), A0                 ; Offset_0x0004CA                         
                move.l  #$46040003, (VDP_Control_Port)               ; $00C00004
                moveq   #$12, D1                                                
Loop_Show_Error_Text:                                          ; Offset_0x0004BA
                moveq   #$00, D0                                                
                move.b  (A0)+, D0                                               
                addi.w  #$0790, D0                                              
                move.w  D0, (A6)                                                
                dbra    D1, Loop_Show_Error_Text               ; Offset_0x0004BA                                     
                rts  
;-------------------------------------------------------------------------------                                                                                           
Error_Text:                                                    ; Offset_0x0004CA                
                dc.w    ErrTxt_Exception-Error_Text            ; Offset_0x0004E0
                dc.w    ErrTxt_BusError-Error_Text             ; Offset_0x0004F3
                dc.w    ErrTxt_AddressError-Error_Text         ; Offset_0x000506
                dc.w    ErrTxt_IllegalInstruction-Error_Text   ; Offset_0x000519
                dc.w    ErrTxt_ZeroDivide-Error_Text           ; Offset_0x00052C
                dc.w    ErrTxt_ChkIntruction-Error_Text        ; Offset_0x00053F
                dc.w    ErrTxt_TrapvInstruction-Error_Text     ; Offset_0x000552
                dc.w    ErrTxt_PrivilegeViolation-Error_Text   ; Offset_0x000565
                dc.w    ErrTxt_Trace-Error_Text                ; Offset_0x000578
                dc.w    ErrTxt_Line1010Emulator-Error_Text     ; Offset_0x00058B
                dc.w    ErrTxt_Line1111Emulator-Error_Text     ; Offset_0x00059E
ErrTxt_Exception:                                              ; Offset_0x0004E0
                dc.b    'ERROR EXCEPTION    '
ErrTxt_BusError:                                               ; Offset_0x0004F3
                dc.b    'BUS ERROR          ' 
ErrTxt_AddressError:                                           ; Offset_0x000506
                dc.b    'ADDRESS ERROR      '   
ErrTxt_IllegalInstruction:                                     ; Offset_0x000519
                dc.b    'ILLEGAL INSTRUCTION' 
ErrTxt_ZeroDivide:                                             ; Offset_0x00052C
                dc.b    '@ERO DIVIDE        ' 
ErrTxt_ChkIntruction:                                          ; Offset_0x00053F             
                dc.b    'CHK INSTRUCTION    '
ErrTxt_TrapvInstruction:                                       ; Offset_0x000552           
                dc.b    'TRAPV INSTRUCTION  '
ErrTxt_PrivilegeViolation:                                     ; Offset_0x000565            
                dc.b    'PRIVILEGE VIOLATION'
ErrTxt_Trace:                                                  ; Offset_0x000578                
                dc.b    'TRACE              '
ErrTxt_Line1010Emulator:                                       ; Offset_0x00058B             
                dc.b    'LINE 1010 EMULATOR '
ErrTxt_Line1111Emulator:                                       ; Offset_0x00059E             
                dc.b    'LINE 1111 EMULATOR '                                 
                align   $02  
ShowErrAddress:                                                ; Offset_0x0005B2
                move.w  #$07CA, (A6)                                            
                moveq   #$07, D2                                                
ShowErrAddress_DigitLoop:                                      ; Offset_0x0005B8
                rol.l   #$04, D0                                                
                bsr.s   ShowErrDigit                           ; Offset_0x0005C2                                         
                dbra    D2, ShowErrAddress_DigitLoop           ; Offset_0x0005B8                                     
                rts                                                             
ShowErrDigit:                                                  ; Offset_0x0005C2
                move.w  D0, D1                                                  
                andi.w  #$000F, D1                                              
                cmpi.w  #$000A, D1                                              
                bcs.s   ShowErrDigit_NoOverflow                ; Offset_0x0005D0                                         
                addq.w  #$07, D1                                                
ShowErrDigit_NoOverflow:                                       ; Offset_0x0005D0
                addi.w  #$07C0, D1                                              
                move.w  D1, (A6)                                                
                rts
Error_WaitForC:                                                ; Offset_0x0005D8
                bsr     Control_Ports_Read                     ; Offset_0x0016F8                                         
                cmpi.b  #$20, (Control_Ports_Buffer_Data+$0001).w    ; $FFFFF605                                   
                bne     Error_WaitForC                         ; Offset_0x0005D8                                         
                rts                                                             
Art_Menu_Text:                                                 ; Offset_0x0005E8 
                incbin  'data\art\fontmenu.dat'  
;===============================================================================                  
; Rotina para mostrar a mensagem de erro
; <<<-                           
;===============================================================================                          

;===============================================================================                  
; Interrupção Vertical
; ->>>                           
;===============================================================================         
VBlank:                                                        ; Offset_0x000B08
                movem.l D0-D7/A0-A6, -(A7)                                      
                tst.b   (VBlank_Index).w                             ; $FFFFF62A
                beq     Default_VBlank                         ; Offset_0x000B82
Offset_0x000B14:
                move.w  (VDP_Control_Port), D0                       ; $00C00004
                andi.w  #$0008, D0                                              
                beq.s   Offset_0x000B14                                         
                move.l  #$40000010, (VDP_Control_Port)               ; $00C00004
                move.l  ($FFFFF616).w, (VDP_Data_Port)               ; $00C00000
                btst    #$06, (Hardware_Id).w                        ; $FFFFFFF8
                beq.s   Offset_0x000B42                                         
                move.w  #$0700, D0                                              
Offset_0x000B3E:
                dbra    D0, Offset_0x000B3E                                     
Offset_0x000B42:
                move.b  (VBlank_Index).w, D0                         ; $FFFFF62A
                move.b  #$00, (VBlank_Index).w                       ; $FFFFF62A
                move.w  #$0001, ($FFFFF644).w                                   
                andi.w  #$003E, D0                                              
                move.w  VBlank_List(PC, D0), D0                ; Offset_0x000B68                    
                jsr     VBlank_List(PC, D0)                    ; Offset_0x000B68                              
Offset_0x000B5E:
                addq.l  #$01, ($FFFFFE0C).w                                     
                movem.l (A7)+, D0-D7/A0-A6                                      
                rte  
;-------------------------------------------------------------------------------                
VBlank_List:                                                   ; Offset_0x000B68                 
                dc.w    VBlank_00-VBlank_List                  ; Offset_0x000B82
                dc.w    VBlank_02-VBlank_List                  ; Offset_0x000CEC
                dc.w    VBlank_04-VBlank_List                  ; Offset_0x000D5C
                dc.w    VBlank_06-VBlank_List                  ; Offset_0x000D72
                dc.w    VBlank_08-VBlank_List                  ; Offset_0x000D82
                dc.w    VBlank_0A-VBlank_List                  ; Offset_0x000EAA
                dc.w    VBlank_0C-VBlank_List                  ; Offset_0x0012D8
                dc.w    VBlank_0E-VBlank_List                  ; Offset_0x0013C4
                dc.w    VBlank_10-VBlank_List                  ; Offset_0x000D78
                dc.w    VBlank_12-VBlank_List                  ; Offset_0x0013D4
                dc.w    VBlank_14-VBlank_List                  ; Offset_0x000D26
                dc.w    VBlank_16-VBlank_List                  ; Offset_0x0013E0
                dc.w    VBlank_18-VBlank_List                  ; Offset_0x0012D8
;-------------------------------------------------------------------------------
Default_VBlank:
VBlank_00:                                                     ; Offset_0x000B82 
                cmpi.b  #$80|gm_PlayMode, (Game_Mode).w              ; $FFFFF600
                beq.s   Offset_0x000BBC                                         
                cmpi.b  #gm_DemoMode, (Game_Mode).w            ; $08 ; $FFFFF600
                beq.s   Offset_0x000BBC                                         
                cmpi.b  #gm_PlayMode, (Game_Mode).w            ; $0C ; $FFFFF600
                beq.s   Offset_0x000BBC                                         
                move.w  #$0100, (Z80_Bus_Request)                    ; $00A11100
Offset_0x000BA2:
                btst    #$00, (Z80_Bus_Request)                      ; $00A11100
                bne.s   Offset_0x000BA2                                         
                jsr     (Sound_Driver_Input)                   ; Offset_0x00166C                                 
                move.w  #$0000, (Z80_Bus_Request)                    ; $00A11100
                bra.s   Offset_0x000B5E                                         
Offset_0x000BBC:
                tst.b   (Water_Level_Flag).w                         ; $FFFFF730
                beq     Offset_0x000C60                                         
                move.w  (VDP_Control_Port), D0                       ; $00C00004
                btst    #$06, (Hardware_Id).w                        ; $FFFFFFF8
                beq.s   Offset_0x000BDA                                         
                move.w  #$0700, D0                                              
Offset_0x000BD6:
                dbra    D0, Offset_0x000BD6                                     
Offset_0x000BDA:
                move.w  #$0001, ($FFFFF644).w                                   
                move.w  #$0100, (Z80_Bus_Request)                    ; $00A11100
Offset_0x000BE8:
                btst    #$00, (Z80_Bus_Request)                      ; $00A11100
                bne.s   Offset_0x000BE8                                         
                tst.b   ($FFFFF64E).w                                           
                bne.s   Offset_0x000C1E                                         
                lea     (VDP_Control_Port), A5                       ; $00C00004
                move.l  #$94009340, (A5)                                        
                move.l  #$96FD9580, (A5)                                        
                move.w  #$977F, (A5)                                            
                move.w  #$C000, (A5)                                            
                move.w  #$0080, ($FFFFF640).w                                   
                move.w  ($FFFFF640).w, (A5)                                     
                bra.s   Offset_0x000C42                                         
Offset_0x000C1E:
                lea     (VDP_Control_Port), A5                       ; $00C00004
                move.l  #$94009340, (A5)                                        
                move.l  #$96FD9540, (A5)                                        
                move.w  #$977F, (A5)                                            
                move.w  #$C000, (A5)                                            
                move.w  #$0080, ($FFFFF640).w                                   
                move.w  ($FFFFF640).w, (A5)                                     
Offset_0x000C42:                                             
                move.w  ($FFFFF624).w, (A5)                                     
                move.w  #$8230, (VDP_Control_Port)                   ; $00C00004
                jsr     (Sound_Driver_Input)                   ; Offset_0x00166C                                
                move.w  #$0000, (Z80_Bus_Request)                    ; $00A11100
                bra     Offset_0x000B5E                                         
Offset_0x000C60:
                move.w  (VDP_Control_Port), D0                       ; $00C00004
                move.l  #$40000010, (VDP_Control_Port)               ; $00C00004
                move.l  ($FFFFF616).w, (VDP_Data_Port)               ; $00C00000
                btst    #$06, (Hardware_Id).w                        ; $FFFFFFF8
                beq.s   Offset_0x000C88                                         
                move.w  #$0700, D0                                              
Offset_0x000C84:
                dbra    D0, Offset_0x000C84                                     
Offset_0x000C88:
                move.w  #$0001, ($FFFFF644).w                                   
                move.w  ($FFFFF624).w, (VDP_Control_Port)            ; $00C00004
                move.w  #$8230, (VDP_Control_Port)                   ; $00C00004
                move.l  ($FFFFF61E).w, ($FFFFEEEC).w                            
                move.w  #$0100, (Z80_Bus_Request)                    ; $00A11100
Offset_0x000CAC:
                btst    #$00, (Z80_Bus_Request)                      ; $00A11100
                bne.s   Offset_0x000CAC                                         
                lea     (VDP_Control_Port), A5                       ; $00C00004
                move.l  #$94019340, (A5)                                        
                move.l  #$96FC9500, (A5)                                        
                move.w  #$977F, (A5)                                            
                move.w  #$7800, (A5)                                            
                move.w  #$0083, ($FFFFF640).w                                   
                move.w  ($FFFFF640).w, (A5)                                     
                jsr     (Sound_Driver_Input)                   ; Offset_0x00166C                                  
                move.w  #$0000, (Z80_Bus_Request)                    ; $00A11100
                bra     Offset_0x000B5E                                         
;-------------------------------------------------------------------------------
VBlank_02:                                                     ; Offset_0x000CEC   
                bsr     Offset_0x00147E                                         
                lea     (VDP_Control_Port), A5                       ; $00C00004
                move.l  #$940193C0, (A5)                                        
                move.l  #$96F09500, (A5)                                        
                move.w  #$977F, (A5)                                            
                move.w  #$7C00, (A5)                                            
                move.w  #$0083, ($FFFFF640).w                                   
                move.w  ($FFFFF640).w, (A5)                                     
                bsr     J_VBlank_Sonic_SEGA_Logo               ; Offset_0x0016C2                                         
                tst.w   ($FFFFF614).w                                           
                beq     Offset_0x000D24                                         
                subq.w  #$01, ($FFFFF614).w                                     
Offset_0x000D24:
                rts                                                             
;-------------------------------------------------------------------------------
VBlank_14:                                                     ; Offset_0x000D26
                move.b  ($FFFFFE0F).w, D0                                       
                andi.w  #$000F, D0                                              
                bne.s   Offset_0x000D4E                                         
                move.w  #$0100, (Z80_Bus_Request)                    ; $00A11100
Offset_0x000D38:
                btst    #$00, (Z80_Bus_Request)                      ; $00A11100
                bne.s   Offset_0x000D38                                         
                bsr     Control_Ports_Read                     ; Offset_0x0016F8
                move.w  #$0000, (Z80_Bus_Request)                    ; $00A11100
Offset_0x000D4E:
                tst.w   ($FFFFF614).w                                           
                beq     Offset_0x000D5A                                         
                subq.w  #$01, ($FFFFF614).w                                     
Offset_0x000D5A:
                rts                                                             
;-------------------------------------------------------------------------------
VBlank_04:                                                     ; Offset_0x000D5C
                bsr     Offset_0x00147E                                         
                bsr     Offset_0x001C76                                         
                tst.w   ($FFFFF614).w                                           
                beq     Offset_0x000D70                                         
                subq.w  #$01, ($FFFFF614).w                                     
Offset_0x000D70:
                rts                                                             
;-------------------------------------------------------------------------------
VBlank_06:                                                     ; Offset_0x000D72
                bsr     Offset_0x00147E                                         
                rts                                                             
;-------------------------------------------------------------------------------
VBlank_10:                                                     ; Offset_0x000D78   
                cmpi.b  #gm_SpecialStage, (Game_Mode).w        ; $10 ; $FFFFF600
                beq     Offset_0x000EA4                                        
;-------------------------------------------------------------------------------
VBlank_08:                                                     ; Offset_0x000D82                 
                move.w  #$0100, (Z80_Bus_Request)                    ; $00A11100
Offset_0x000D8A:
                btst    #$00, (Z80_Bus_Request)                      ; $00A11100
                bne.s   Offset_0x000D8A                                         
                bsr     Control_Ports_Read                     ; Offset_0x0016F8
                tst.b   ($FFFFF64E).w                                           
                bne.s   Offset_0x000DC4                                         
                lea     (VDP_Control_Port), A5                       ; $00C00004
                move.l  #$94009340, (A5)                                        
                move.l  #$96FD9580, (A5)                                        
                move.w  #$977F, (A5)                                            
                move.w  #$C000, (A5)                                            
                move.w  #$0080, ($FFFFF640).w                                   
                move.w  ($FFFFF640).w, (A5)                                     
                bra.s   Offset_0x000DE8                                         
Offset_0x000DC4:
                lea     (VDP_Control_Port), A5                       ; $00C00004
                move.l  #$94009340, (A5)                                        
                move.l  #$96FD9540, (A5)                                        
                move.w  #$977F, (A5)                                            
                move.w  #$C000, (A5)                                            
                move.w  #$0080, ($FFFFF640).w                                   
                move.w  ($FFFFF640).w, (A5)                                     
Offset_0x000DE8:
                move.w  ($FFFFF624).w, (A5)                                     
                move.w  #$8230, (VDP_Control_Port)                   ; $00C00004
                lea     (VDP_Control_Port), A5                       ; $00C00004
                move.l  #$940193C0, (A5)                                        
                move.l  #$96F09500, (A5)                                        
                move.w  #$977F, (A5)                                            
                move.w  #$7C00, (A5)                                            
                move.w  #$0083, ($FFFFF640).w                                   
                move.w  ($FFFFF640).w, (A5)                                     
                lea     (VDP_Control_Port), A5                       ; $00C00004
                move.l  #$94019340, (A5)                                        
                move.l  #$96FC9500, (A5)                                        
                move.w  #$977F, (A5)                                            
                move.w  #$7800, (A5)                                            
                move.w  #$0083, ($FFFFF640).w                                   
                move.w  ($FFFFF640).w, (A5)                                     
                bsr     Process_DMA                            ; Offset_0x001A42                                         
                jsr     (Sound_Driver_Input)                   ; Offset_0x00166C                                    
                move.w  #$0000, (Z80_Bus_Request)                    ; $00A11100
                movem.l (Camera_X).w, D0-D7                          ; $FFFFEE00                            
                movem.l D0-D7, ($FFFFEE60).w                                    
                movem.l (Camera_X_2).w, D0-D7                        ; $FFFFEE20                           
                movem.l D0-D7, ($FFFFEE80).w                                    
                movem.l (Scroll_Flag_Array).w, D0-D3                 ; $FFFFEE50                            
                movem.l D0-D3, (Scroll_Flag_Array_2).w               ; $FFFFEEA0                   
                move.l  ($FFFFF61E).w, ($FFFFEEEC).w                            
                cmpi.b  #$5C, ($FFFFF625).w                                     
                bcc.s   DemoTime                               ; Offset_0x000E88                                         
                move.b  #$01, ($FFFFF64F).w                                     
                rts                                                             
DemoTime:                                                      ; Offset_0x000E88
                bsr     J_LoadTilesAsYouMove                   ; Offset_0x0016BC                                         
                jsr     (HudUpdate)                            ; Offset_0x03950C                                 
                bsr     Offset_0x001C92                                         
                tst.w   ($FFFFF614).w                                           
                beq     Exit_DemoTime                          ; Offset_0x000EA2                                         
                subq.w  #$01, ($FFFFF614).w                                     
Exit_DemoTime:                                                 ; Offset_0x000EA2
                rts                                                             
Offset_0x000EA4:
                bsr     Control_Ports_Read                     ; Offset_0x0016F8
                rts                                                             
;-------------------------------------------------------------------------------
VBlank_0A:                                                     ; Offset_0x000EAA
                move.w  #$0100, (Z80_Bus_Request)                    ; $00A11100
Offset_0x000EB2:
                btst    #$00, (Z80_Bus_Request)                      ; $00A11100
                bne.s   Offset_0x000EB2                                         
                bsr     Control_Ports_Read                     ; Offset_0x0016F8
                bsr     Offset_0x001114                                         
                lea     (VDP_Control_Port), A5                       ; $00C00004
                move.l  #$94009340, (A5)                                        
                move.l  #$96FD9580, (A5)                                        
                move.w  #$977F, (A5)                                            
                move.w  #$C000, (A5)                                            
                move.w  #$0080, ($FFFFF640).w                                   
                move.w  ($FFFFF640).w, (A5)                                     
                lea     (VDP_Control_Port), A5                       ; $00C00004
                move.l  #$94019340, (A5)                                        
                move.l  #$96FC9500, (A5)                                        
                move.w  #$977F, (A5)                                            
                move.w  #$7800, (A5)                                            
                move.w  #$0083, ($FFFFF640).w                                   
                move.w  ($FFFFF640).w, (A5)                                     
                tst.b   ($FFFF9B0F).w                                           
                beq.s   Offset_0x000F38                                         
                lea     (VDP_Control_Port), A5                       ; $00C00004
                move.l  #$940193C0, (A5)                                        
                move.l  #$96CB9580, (A5)                                        
                move.w  #$977F, (A5)                                            
                move.w  #$7C00, (A5)                                            
                move.w  #$0083, ($FFFFF640).w                                   
                move.w  ($FFFFF640).w, (A5)                                     
                bra.s   Offset_0x000F5C                                         
Offset_0x000F38:
                lea     (VDP_Control_Port), A5                       ; $00C00004
                move.l  #$940193C0, (A5)                                        
                move.l  #$96F09500, (A5)                                        
                move.w  #$977F, (A5)                                            
                move.w  #$7C00, (A5)                                            
                move.w  #$0083, ($FFFFF640).w                                   
                move.w  ($FFFFF640).w, (A5)                                     
Offset_0x000F5C:
                tst.b   ($FFFF9B0E).w                                           
                beq.s   Offset_0x000F82                                         
                moveq   #$00, D0                                                
                move.b  ($FFFF9B0D).w, D0                                       
                cmpi.b  #$04, D0                                                
                bge.s   Offset_0x000F82                                         
                add.b   D0, D0                                                  
                tst.b   ($FFFF9B0C).w                                           
                beq.s   Offset_0x000F7A                                         
                addi.w  #$0008, D0                                              
Offset_0x000F7A:
                move.w  Offset_0x000FAC(PC, D0), D0                             
                jsr     Offset_0x000FAC(PC, D0)                                 
Offset_0x000F82:
                bsr     Offset_0x00112C                                         
                addi.b  #$01, ($FFFF9B0D).w                                     
                move.b  ($FFFF9B0D).w, D0                                       
                cmp.b   D1, D0                                                  
                blt.s   Offset_0x000FC6                                         
                move.b  #$00, ($FFFF9B0D).w                                     
                lea     (VDP_Control_Port), A6                       ; $00C00004
                tst.b   ($FFFF9B0C).w                                           
                beq.s   Offset_0x000FBC                                         
                move.w  #$8230, (A6)                                            
                bra.s   Offset_0x000FC0    
Offset_0x000FAC:
                dc.w    Offset_0x00107C-Offset_0x000FAC
                dc.w    Offset_0x0010A2-Offset_0x000FAC
                dc.w    Offset_0x0010C8-Offset_0x000FAC
                dc.w    Offset_0x0010EE-Offset_0x000FAC
                dc.w    Offset_0x000FE4-Offset_0x000FAC
                dc.w    Offset_0x00100A-Offset_0x000FAC
                dc.w    Offset_0x001030-Offset_0x000FAC
                dc.w    Offset_0x001056-Offset_0x000FAC  
Offset_0x000FBC:
                move.w  #$8220, (A6)    
Offset_0x000FC0:                                                         
                eori.b  #$01, ($FFFF9B0C).w   
Offset_0x000FC6:                                                  
                bsr     Process_DMA                            ; Offset_0x001A42                                         
                move.w  #$0000, (Z80_Bus_Request)                    ; $00A11100
                bsr     Offset_0x001C92                                         
                tst.w   ($FFFFF614).w                                           
                beq     Offset_0x000FE2                                         
                subq.w  #$01, ($FFFFF614).w                                     
Offset_0x000FE2:
                rts                                                             
Offset_0x000FE4:
                lea     (VDP_Control_Port), A5                       ; $00C00004
                move.l  #$94039380, (A5)                                        
                move.l  #$96C89500, (A5)                                        
                move.w  #$977F, (A5)                                            
                move.w  #$4000, (A5)                                            
                move.w  #$0083, ($FFFFF640).w                                   
                move.w  ($FFFFF640).w, (A5)                                     
                rts                                                             
Offset_0x00100A:
                lea     (VDP_Control_Port), A5                       ; $00C00004
                move.l  #$94039380, (A5)                                        
                move.l  #$96C89500, (A5)                                        
                move.w  #$977F, (A5)                                            
                move.w  #$4700, (A5)                                            
                move.w  #$0083, ($FFFFF640).w                                   
                move.w  ($FFFFF640).w, (A5)                                     
                rts                                                             
Offset_0x001030:
                lea     (VDP_Control_Port), A5                       ; $00C00004
                move.l  #$94039380, (A5)                                        
                move.l  #$96C89500, (A5)                                        
                move.w  #$977F, (A5)                                            
                move.w  #$4E00, (A5)                                            
                move.w  #$0083, ($FFFFF640).w                                   
                move.w  ($FFFFF640).w, (A5)                                     
                rts                                                             
Offset_0x001056:
                lea     (VDP_Control_Port), A5                       ; $00C00004
                move.l  #$94039380, (A5)                                        
                move.l  #$96C89500, (A5)                                        
                move.w  #$977F, (A5)                                            
                move.w  #$5500, (A5)                                            
                move.w  #$0083, ($FFFFF640).w                                   
                move.w  ($FFFFF640).w, (A5)                                     
                rts                                                             
Offset_0x00107C:
                lea     (VDP_Control_Port), A5                       ; $00C00004
                move.l  #$94039380, (A5)                                        
                move.l  #$96C89500, (A5)                                        
                move.w  #$977F, (A5)                                            
                move.w  #$4000, (A5)                                            
                move.w  #$0082, ($FFFFF640).w                                   
                move.w  ($FFFFF640).w, (A5)                                     
                rts                                                             
Offset_0x0010A2:
                lea     (VDP_Control_Port), A5                       ; $00C00004
                move.l  #$94039380, (A5)                                        
                move.l  #$96C89500, (A5)                                        
                move.w  #$977F, (A5)                                            
                move.w  #$4700, (A5)                                            
                move.w  #$0082, ($FFFFF640).w                                   
                move.w  ($FFFFF640).w, (A5)                                     
                rts                                                             
Offset_0x0010C8:
                lea     (VDP_Control_Port), A5                       ; $00C00004
                move.l  #$94039380, (A5)                                        
                move.l  #$96C89500, (A5)                                        
                move.w  #$977F, (A5)                                            
                move.w  #$4E00, (A5)                                            
                move.w  #$0082, ($FFFFF640).w                                   
                move.w  ($FFFFF640).w, (A5)                                     
                rts                                                             
Offset_0x0010EE:
                lea     (VDP_Control_Port), A5                       ; $00C00004
                move.l  #$94039380, (A5)                                        
                move.l  #$96C89500, (A5)                                        
                move.w  #$977F, (A5)                                            
                move.w  #$5500, (A5)                                            
                move.w  #$0082, ($FFFFF640).w                                   
                move.w  ($FFFFF640).w, (A5)                                     
                rts         
Offset_0x001114:
                moveq   #$00, D0                                                
                move.w  ($FFFF9B30).w, D0                                       
                move.l  #$40000010, (VDP_Control_Port)               ; $00C00004
                move.l  D0, (VDP_Data_Port)                          ; $00C00000
                rts       
Offset_0x00112C:
                move.w  ($FFFF9B16).w, D0                                       
                cmp.w   ($FFFF9B12).w, D0                                       
                beq.s   Offset_0x001148                                         
                move.l  ($FFFF9B12).w, ($FFFF9B16).w                            
                move.b  #$00, ($FFFF9B1F).w                                     
                move.b  #$00, ($FFFF9B1E).w                                     
Offset_0x001148:
                subi.b  #$01, ($FFFF9B1F).w                                     
                bgt.s   Offset_0x0011AA                                         
                lea     (Offset_0x0011B8), A0                                   
                move.w  ($FFFF9B16).w, D1                                       
                subi.w  #$0008, D1                                              
                cmpi.w  #$0004, D1                                              
                bgt.s   Offset_0x0011B2                                         
                move.w  ($FFFF9B18).w, D2                                       
                add.w   D1, D1                                                  
                rol.w   #$01, D2                                                
                andi.w  #$0001, D2                                              
                add.w   D2, D1                                                  
Offset_0x001172:
                moveq   #$00, D7                                                
                move.b  ($FFFF9B1E).w, D7                                       
                addi.b  #$01, ($FFFF9B1E).w                                     
                move.l  ($FFFF9B16).w, D4                                       
                add.l   D4, D4                                                  
                swap.w  D4                                                      
                cmp.b   ($FFFF9B1E).w, D4                                       
                bne.s   Offset_0x001192                                         
                move.b  #$00, ($FFFF9B1E).w                                     
Offset_0x001192:
                add.w   D1, D1                                                  
                adda.w  $00(A0, D1), A0                                         
                move.b  $00(A0, D7), D1                                         
                move.b  D1, ($FFFF9B21).w                                       
                move.b  D1, ($FFFF9B1F).w                                       
                subq.b  #$01, ($FFFF9B21).w                                     
                rts                                                             
Offset_0x0011AA:
                move.b  ($FFFF9B21).w, D1                                       
                addq.b  #$01, D1                                                
                rts                                                             
Offset_0x0011B2:
                addi.w  #$0004, D1                                              
                bra.s   Offset_0x001172   
Offset_0x0011B8:
                dc.w    Offset_0x0011D0-Offset_0x0011B8
                dc.w    Offset_0x0011E0-Offset_0x0011B8
                dc.w    Offset_0x0011F1-Offset_0x0011B8
                dc.w    Offset_0x001203-Offset_0x0011B8
                dc.w    Offset_0x001216-Offset_0x0011B8
                dc.w    Offset_0x00122A-Offset_0x0011B8
                dc.w    Offset_0x00123F-Offset_0x0011B8
                dc.w    Offset_0x001255-Offset_0x0011B8
                dc.w    Offset_0x00126C-Offset_0x0011B8
                dc.w    Offset_0x001284-Offset_0x0011B8
                dc.w    Offset_0x00129E-Offset_0x0011B8
                dc.w    Offset_0x0012BA-Offset_0x0011B8
Offset_0x0011D0:
                dc.b    $08, $07, $08, $07, $08, $07, $08, $07, $08, $07, $08, $07, $08, $07, $08, $07
Offset_0x0011E0:
                dc.b    $07, $07, $07, $07, $07, $07, $07, $07, $07, $07, $07, $07, $07, $07, $07, $07
                dc.b    $08
Offset_0x0011F1:
                dc.b    $06, $07, $07, $06, $07, $07, $06, $07, $07, $06, $07, $07, $06, $07, $07, $06
                dc.b    $07, $07
Offset_0x001203:
                dc.b    $06, $06, $07, $06, $06, $07, $06, $06, $07, $06, $06, $07, $06, $06, $07, $06
                dc.b    $06, $07, $06
Offset_0x001216:
                dc.b    $06, $06, $06, $06, $06, $06, $06, $06, $06, $06, $06, $06, $06, $06, $06, $06
                dc.b    $06, $06, $06, $06
Offset_0x00122A:
                dc.b    $06, $06, $06, $05, $06, $06, $06, $05, $06, $06, $06, $05, $06, $06, $06, $05
                dc.b    $06, $06, $06, $05, $05
Offset_0x00123F:
                dc.b    $05, $06, $05, $06, $05, $06, $05, $06, $05, $06, $05, $06, $05, $06, $05, $06
                dc.b    $05, $06, $05, $06, $05, $06
Offset_0x001255:
                dc.b    $05, $05, $05, $05, $06, $05, $05, $05, $05, $06, $05, $05, $05, $05, $06, $05
                dc.b    $05, $05, $05, $06, $05, $05, $06
Offset_0x00126C:
                dc.b    $05, $05, $05, $05, $05, $05, $05, $05, $05, $05, $05, $05, $05, $05, $05, $05
                dc.b    $05, $05, $05, $05, $05, $05, $05, $05
Offset_0x001284:
                dc.b    $04, $05, $05, $04, $05, $05, $04, $05, $05, $04, $05, $05, $04, $04, $05, $05
                dc.b    $04, $05, $05, $04, $05, $05, $04, $05, $05, $04
Offset_0x00129E:
                dc.b    $04, $04, $05, $04, $04, $04, $05, $04, $04, $04, $05, $04, $04, $05, $04, $04
                dc.b    $05, $04, $04, $04, $05, $04, $04, $04, $05, $04, $04, $05
Offset_0x0012BA:
                dc.b    $04, $04, $04, $04, $04, $04, $04, $04, $04, $04, $04, $04, $04, $04, $04, $04
                dc.b    $04, $04, $04, $04, $04, $04, $04, $04, $04, $04, $04, $04, $04, $04                                                                                                                                                                                                                                                               
;-------------------------------------------------------------------------------
VBlank_0C:                                                     ; Offset_0x0012D8
VBlank_18: 
                move.w  #$0100, (Z80_Bus_Request)                    ; $00A11100
Offset_0x0012E0:
                btst    #$00, (Z80_Bus_Request)                      ; $00A11100
                bne.s   Offset_0x0012E0                                         
                bsr     Control_Ports_Read                     ; Offset_0x0016F8
                tst.b   ($FFFFF64E).w                                           
                bne.s   Offset_0x00131A                                         
                lea     (VDP_Control_Port), A5                       ; $00C00004
                move.l  #$94009340, (A5)                                        
                move.l  #$96FD9580, (A5)                                        
                move.w  #$977F, (A5)                                            
                move.w  #$C000, (A5)                                            
                move.w  #$0080, ($FFFFF640).w                                   
                move.w  ($FFFFF640).w, (A5)                                     
                bra.s   Offset_0x00133E                                         
Offset_0x00131A:
                lea     (VDP_Control_Port), A5                       ; $00C00004
                move.l  #$94009340, (A5)                                        
                move.l  #$96FD9540, (A5)                                        
                move.w  #$977F, (A5)                                            
                move.w  #$C000, (A5)                                            
                move.w  #$0080, ($FFFFF640).w                                   
                move.w  ($FFFFF640).w, (A5)                                     
Offset_0x00133E:
                move.w  ($FFFFF624).w, (A5)                                     
                lea     (VDP_Control_Port), A5                       ; $00C00004
                move.l  #$940193C0, (A5)                                        
                move.l  #$96F09500, (A5)                                        
                move.w  #$977F, (A5)                                            
                move.w  #$7C00, (A5)                                            
                move.w  #$0083, ($FFFFF640).w                                   
                move.w  ($FFFFF640).w, (A5)                                     
                lea     (VDP_Control_Port), A5                       ; $00C00004
                move.l  #$94019340, (A5)                                        
                move.l  #$96FC9500, (A5)                                        
                move.w  #$977F, (A5)                                            
                move.w  #$7800, (A5)                                            
                move.w  #$0083, ($FFFFF640).w                                   
                move.w  ($FFFFF640).w, (A5)                                     
                bsr     Process_DMA                            ; Offset_0x001A42                                         
                jsr     (Sound_Driver_Input)                   ; Offset_0x00166C
                move.w  #$0000, (Z80_Bus_Request)                    ; $00A11100
                movem.l (Camera_X).w, D0-D7                          ; $FFFFEE00                          
                movem.l D0-D7, ($FFFFEE60).w                                    
                movem.l (Scroll_Flag_Array).w, D0/D1                 ; $FFFFEE50                               
                movem.l D0/D1, (Scroll_Flag_Array_2).w               ; $FFFFEEA0                              
                bsr     J_LoadTilesAsYouMove                   ; Offset_0x0016BC
                jsr     (HudUpdate)                            ; Offset_0x03950C
                bsr     Offset_0x001C76                                         
                rts                                                             
;-------------------------------------------------------------------------------
VBlank_0E:                                                     ; Offset_0x0013C4
                bsr     Offset_0x00147E                                         
                addq.b  #$01, ($FFFFF628).w                                     
                move.b  #$0E, (VBlank_Index).w                       ; $FFFFF62A
                rts                                                             
 ;-------------------------------------------------------------------------------
VBlank_12:                                                     ; Offset_0x0013D4
                bsr     Offset_0x00147E                                         
                move.w  ($FFFFF624).w, (A5)                                     
                bra     Offset_0x001C76                                         
;-------------------------------------------------------------------------------
VBlank_16:                                                     ; Offset_0x0013E0
                move.w  #$0100, (Z80_Bus_Request)                    ; $00A11100
Offset_0x0013E8:
                btst    #$00, (Z80_Bus_Request)                      ; $00A11100
                bne.s   Offset_0x0013E8                                         
                bsr     Control_Ports_Read                     ; Offset_0x0016F8
                lea     (VDP_Control_Port), A5                       ; $00C00004
                move.l  #$94009340, (A5)                                        
                move.l  #$96FD9580, (A5)                                        
                move.w  #$977F, (A5)                                            
                move.w  #$C000, (A5)                                            
                move.w  #$0080, ($FFFFF640).w                                   
                move.w  ($FFFFF640).w, (A5)                                     
                lea     (VDP_Control_Port), A5                       ; $00C00004
                move.l  #$94019340, (A5)                                        
                move.l  #$96FC9500, (A5)                                        
                move.w  #$977F, (A5)                                            
                move.w  #$7800, (A5)                                            
                move.w  #$0083, ($FFFFF640).w                                   
                move.w  ($FFFFF640).w, (A5)                                     
                lea     (VDP_Control_Port), A5                       ; $00C00004
                move.l  #$940193C0, (A5)                                        
                move.l  #$96F09500, (A5)                                        
                move.w  #$977F, (A5)                                            
                move.w  #$7C00, (A5)                                            
                move.w  #$0083, ($FFFFF640).w                                   
                move.w  ($FFFFF640).w, (A5)                                     
                jsr     (Sound_Driver_Input)                   ; Offset_0x00166C
                move.w  #$0000, (Z80_Bus_Request)                    ; $00A11100
                tst.w   ($FFFFF614).w                                           
                beq     Offset_0x00147C                                         
                subq.w  #$01, ($FFFFF614).w                                     
Offset_0x00147C:
                rts                                                             
Offset_0x00147E:
                move.w  #$0100, (Z80_Bus_Request)                    ; $00A11100
Offset_0x001486:
                btst    #$00, (Z80_Bus_Request)                      ; $00A11100
                bne.s   Offset_0x001486                                         
                bsr     Control_Ports_Read                     ; Offset_0x0016F8
                tst.b   ($FFFFF64E).w                                           
                bne.s   Offset_0x0014C0                                         
                lea     (VDP_Control_Port), A5                       ; $00C00004
                move.l  #$94009340, (A5)                                        
                move.l  #$96FD9580, (A5)                                        
                move.w  #$977F, (A5)                                            
                move.w  #$C000, (A5)                                            
                move.w  #$0080, ($FFFFF640).w                                   
                move.w  ($FFFFF640).w, (A5)                                     
                bra.s   Offset_0x0014E4                                         
Offset_0x0014C0:
                lea     (VDP_Control_Port), A5                       ; $00C00004
                move.l  #$94009340, (A5)                                        
                move.l  #$96FD9540, (A5)                                        
                move.w  #$977F, (A5)                                            
                move.w  #$C000, (A5)                                            
                move.w  #$0080, ($FFFFF640).w                                   
                move.w  ($FFFFF640).w, (A5)                                     
Offset_0x0014E4:
                lea     (VDP_Control_Port), A5                       ; $00C00004
                move.l  #$94019340, (A5)                                        
                move.l  #$96FC9500, (A5)                                        
                move.w  #$977F, (A5)                                            
                move.w  #$7800, (A5)                                            
                move.w  #$0083, ($FFFFF640).w                                   
                move.w  ($FFFFF640).w, (A5)                                     
                lea     (VDP_Control_Port), A5                       ; $00C00004
                move.l  #$940193C0, (A5)                                        
                move.l  #$96F09500, (A5)                                        
                move.w  #$977F, (A5)                                            
                move.w  #$7C00, (A5)                                            
                move.w  #$0083, ($FFFFF640).w                                   
                move.w  ($FFFFF640).w, (A5)                                     
                jsr     (Sound_Driver_Input)                   ; Offset_0x00166C
                move.w  #$0000, (Z80_Bus_Request)                    ; $00A11100
                rts                                                                                                                                       
;===============================================================================                  
; Interrupção Vertical
; <<<-                           
;===============================================================================                   

;===============================================================================                  
; Interrupção Horizontal
; ->>>                           
;=============================================================================== 
HBlank:                                                        ; Offset_0x00153C 
                tst.w   ($FFFFF644).w                                           
                beq     Offset_0x0015E6                                         
                tst.w   (Two_Player_Flag).w                          ; $FFFFFFD8
                beq     Pal_To_ColorRAM                        ; Offset_0x0015E8
                move.w  #$0000, ($FFFFF644).w                                   
                move.l  A5, -(A7)                                               
                move.l  D0, -(A7)                                               
Offset_0x001556:
                move.w  (VDP_Control_Port), D0                       ; $00C00004
                andi.w  #$0004, D0                                              
                beq.s   Offset_0x001556                                         
                move.w  ($FFFFF60C).w, D0                                       
                andi.b  #$BF, D0                                                
                move.w  D0, (VDP_Control_Port)                       ; $00C00004
                move.w  #$8228, (VDP_Control_Port)                   ; $00C00004
                move.l  #$40000010, (VDP_Control_Port)               ; $00C00004
                move.l  ($FFFFEEEC).w, (VDP_Data_Port)               ; $00C00000
                move.w  #$0100, (Z80_Bus_Request)                    ; $00A11100
Offset_0x001592:
                btst    #$00, (Z80_Bus_Request)                      ; $00A11100
                bne.s   Offset_0x001592                                         
                lea     (VDP_Control_Port), A5                       ; $00C00004
                move.l  #$94019340, (A5)                                        
                move.l  #$96EE9580, (A5)                                        
                move.w  #$977F, (A5)                                            
                move.w  #$7800, (A5)                                            
                move.w  #$0083, ($FFFFF640).w                                   
                move.w  ($FFFFF640).w, (A5)                                     
                move.w  #$0000, (Z80_Bus_Request)                    ; $00A11100
Offset_0x0015C8:
                move.w  (VDP_Control_Port), D0                       ; $00C00004
                andi.w  #$0004, D0                                              
                beq.s   Offset_0x0015C8                                         
                move.w  ($FFFFF60C).w, D0                                       
                ori.b   #$40, D0                                                
                move.w  D0, (VDP_Control_Port)                       ; $00C00004
                move.l  (A7)+, D0                                               
                move.l  (A7)+, A5                                               
Offset_0x0015E6:
                rte                                                             
;-------------------------------------------------------------------------------
; Rotina para transferir a paleta de cores para a CRAM durante a interrupção 
; horizontal
; ->>> 
;-------------------------------------------------------------------------------                
Pal_To_ColorRAM:                                               ; Offset_0x0015E8
                move    #$2700, SR                                              
                move.w  #$0000, ($FFFFF644).w                                   
                movem.l A0/A1, -(A7)                                            
                lea     (VDP_Data_Port), A1                          ; $00C00000
                lea     ($FFFFFA80).w, A0                                       
                move.l  #Color_RAM_Address, $0004(A1)                ; $C0000000                              
                move.l  (A0)+, (A1)                                             
                move.l  (A0)+, (A1)                                             
                move.l  (A0)+, (A1)                                             
                move.l  (A0)+, (A1)                                             
                move.l  (A0)+, (A1)                                             
                move.l  (A0)+, (A1)                                             
                move.l  (A0)+, (A1)                                             
                move.l  (A0)+, (A1)                                             
                move.l  (A0)+, (A1)                                             
                move.l  (A0)+, (A1)                                             
                move.l  (A0)+, (A1)                                             
                move.l  (A0)+, (A1)                                             
                move.l  (A0)+, (A1)                                             
                move.l  (A0)+, (A1)                                             
                move.l  (A0)+, (A1)                                             
                move.l  (A0)+, (A1)                                             
                move.l  (A0)+, (A1)                                             
                move.l  (A0)+, (A1)                                             
                move.l  (A0)+, (A1)                                             
                move.l  (A0)+, (A1)                                             
                move.l  (A0)+, (A1)                                             
                move.l  (A0)+, (A1)                                             
                move.l  (A0)+, (A1)                                             
                move.l  (A0)+, (A1)                                             
                move.l  (A0)+, (A1)                                             
                move.l  (A0)+, (A1)                                             
                move.l  (A0)+, (A1)                                             
                move.l  (A0)+, (A1)                                             
                move.l  (A0)+, (A1)                                             
                move.l  (A0)+, (A1)                                             
                move.l  (A0)+, (A1)                                             
                move.l  (A0)+, (A1)                                             
                move.w  #$8ADF, $0004(A1)                                       
                movem.l (A7)+, A0/A1                                            
                tst.b   ($FFFFF64F).w                                           
                bne.s   Offset_0x00165A                                         
                rte                                                             
Offset_0x00165A:
                clr.b   ($FFFFF64F).w                                           
                movem.l D0-D7/A0-A6, -(A7)                                      
                bsr     DemoTime                               ; Offset_0x000E88
                movem.l (A7)+, D0-D7/A0-A6                                      
                rte   
;-------------------------------------------------------------------------------
; Rotina para transferir a paleta de cores para a CRAM durante a interrupção 
; horizontal
; <<<- 
;-------------------------------------------------------------------------------                
                                                                           
;===============================================================================                  
; Interrupção Horizontal
; <<<-                           
;=============================================================================== 

;===============================================================================                  
; Rotina para transferir o som selecionado para execução pelo z80
; ->>>                           
;=============================================================================== 
Sound_Driver_Input:                                            ; Offset_0x00166C
                lea     (Sound_Buffer_Id&$00FFFFFF), A0              ; $00FFFFE0
                lea     ($00A01B80), A1                                         
                cmpi.b  #$80, $0008(A1)                                         
                bne.s   Offset_0x0016A0                                         
                move.b  $0000(A0), D0                                           
                beq.s   Offset_0x0016A0                                         
                clr.b   $0000(A0)                                               
                move.b  D0, D1                                                  
                subi.b  #$FE, D1                                                
                bcs.s   Offset_0x00169C                                         
                addi.b  #$7F, D1                                                
                move.b  D1, $0003(A1)                                           
                bra.s   Offset_0x0016A0                                         
Offset_0x00169C:
                move.b  D0, $0008(A1)                                           
Offset_0x0016A0:
                moveq   #$03, D1                                                
Offset_0x0016A2:
                move.b  $01(A0, D1), D0                                         
                beq.s   Offset_0x0016B6                                         
                tst.b   $09(A1, D1)                                             
                bne.s   Offset_0x0016B6                                         
                clr.b   $01(A0, D1)                                             
                move.b  D0, $09(A1, D1)                                         
Offset_0x0016B6:
                dbra    D1, Offset_0x0016A2                                     
                rts                                                             
;===============================================================================                  
; Rotina para transferir o som selecionado para execução pelo z80
; <<<-                           
;=============================================================================== 
J_LoadTilesAsYouMove:                                          ; Offset_0x0016BC
                jmp     (LoadTilesAsYouMove)                   ; Offset_0x00AF88
J_VBlank_Sonic_SEGA_Logo:                                      ; Offset_0x0016C2
                jmp     (VBlank_Sonic_SEGA_Logo)               ; Offset_0x0349F8                                  
;===============================================================================                  
; Inicialização das portas 0, 1 e expansão
; ->>>                           
;===============================================================================  
Control_Ports_Init:                                            ; Offset_0x0016C8     
                move.w  #$0100, (Z80_Bus_Request)                    ; $00A11100
Control_Ports_Init_Z80Wait:                                    ; Offset_0x0016D0
                btst    #$00, (Z80_Bus_Request)                      ; $00A11100
                bne.s   Control_Ports_Init_Z80Wait             ; Offset_0x0016D0                                         
                moveq   #$40, D0                                                
                move.b  D0, (IO_Port_0_Control+$0001)                ; $00A10009
                move.b  D0, (IO_Port_1_Control+$0001)                ; $00A1000B
                move.b  D0, (IO_Expansion_Control+$0001)             ; $00A1000D
                move.w  #$0000, (Z80_Bus_Request)                    ; $00A11100
                rts                                                             
;===============================================================================                  
; Inicialização das portas 0, 1 e expansão
; <<<-                           
;=============================================================================== 

;===============================================================================                  
; Leitura das portas 0, 1 e expansão
; ->>>                           
;=============================================================================== 
Control_Ports_Read:                                            ; Offset_0x0016F8
                lea     (Control_Ports_Buffer_Data).w, A0            ; $FFFFF604                            
                lea     (IO_Joypad_Port_0), A1                       ; $00A10003
                bsr.s   Control_Ports_Read_Data                ; Offset_0x001706                                         
                addq.w  #$02, A1          ; IO_Joypad_Port_1         ; $00A10005                                            
Control_Ports_Read_Data:                                       ; Offset_0x001706
                move.b  #$00, (A1)                                              
                nop                                                             
                nop                                                             
                move.b  (A1), D0                                                
                lsl.b   #$02, D0                                                
                andi.b  #$C0, D0                                                
                move.b  #$40, (A1)                                              
                nop                                                             
                nop                                                             
                move.b  (A1), D1                                                
                andi.b  #$3F, D1                                                
                or.b    D1, D0                                                  
                not.b   D0                                                      
                move.b  (A0), D1                                                
                eor.b   D0, D1                                                  
                move.b  D0, (A0)+                                               
                and.b   D0, D1                                                  
                move.b  D1, (A0)+                                               
                rts                                                            
;===============================================================================                  
; Leitura das portas 0, 1 e expansão
; <<<-                           
;===============================================================================   

;===============================================================================                  
; VDPRegSetup
; ->>>                           
;===============================================================================  
VDPRegSetup:                                                   ; Offset_0x001734
                lea     (VDP_Control_Port), A0                       ; $00C00004
                lea     (VDP_Data_Port), A1                          ; $00C00000
                lea     (VDPRegSetup_Array), A2                ; Offset_0x0017BE                            
                moveq   #$12, D7                                                
Offset_0x001748:
                move.w  (A2)+, (A0)                                             
                dbra    D7, Offset_0x001748                                     
                move.w  (VDPRegSetup_Array+$0002), D0          ; Offset_0x0017C0                           
                move.w  D0, ($FFFFF60C).w                                       
                move.w  #$8ADF, ($FFFFF624).w                                   
                moveq   #$00, D0                                                
                move.l  #$40000010, (VDP_Control_Port)               ; $00C00004
                move.w  D0, (A1)                                                
                move.w  D0, (A1)                                                
                move.l  #$C0000000, (VDP_Control_Port)               ; $00C00004
                move.w  #$003F, D7                                              
Offset_0x00177C:
                move.w  D0, (A1)                                                
                dbra    D7, Offset_0x00177C                                     
                clr.l   ($FFFFF616).w                                           
                clr.l   ($FFFFF61A).w                                           
                move.l  D1, -(A7)                                               
                lea     (VDP_Control_Port), A5                       ; $00C00004
                move.w  #$8F01, (A5)                                            
                move.l  #$94FF93FF, (A5)                                        
                move.w  #$9780, (A5)                                            
                move.l  #$40000080, (A5)                                        
                move.w  #$0000, (VDP_Data_Port)                      ; $00C00000
Offset_0x0017AE:
                move.w  (A5), D1                                                
                btst    #$01, D1                                                
                bne.s   Offset_0x0017AE                                         
                move.w  #$8F02, (A5)                                            
                move.l  (A7)+, D1                                               
                rts    
;-------------------------------------------------------------------------------
VDPRegSetup_Array:                                             ; Offset_0x0017BE  
                dc.w    $8004, $8134, $8230, $8328, $8407, $857C, $8600, $8700
                dc.w    $8800, $8900, $8A00, $8B00, $8C81, $8D3F, $8E00, $8F02
                dc.w    $9001, $9100, $9200                                                                          
;===============================================================================                  
; VDPRegSetup
; <<<-                           
;===============================================================================  

;===============================================================================                  
; ClearScreen
; ->>>                           
;===============================================================================  
ClearScreen:                                                   ; Offset_0x0017E4    
                move.w  #$0100, (Z80_Bus_Request)                    ; $00A11100
ClearScreen_Z80Wait:                                           ; Offset_0x0017EC
                btst    #$00, (Z80_Bus_Request)                      ; $00A11100
                bne.s   ClearScreen_Z80Wait                    ; Offset_0x0017EC                                         
                lea     (VDP_Control_Port), A5                       ; $00C00004
                move.w  #$8F01, (A5)                                            
                move.l  #$940F93FF, (A5)                                        
                move.w  #$9780, (A5)                                            
                move.l  #$40000083, (A5)                                        
                move.w  #$0000, (VDP_Data_Port)                      ; $00C00000
ClearScreen_DMAWait:                                           ; Offset_0x001818 
                move.w  (A5), D1                                                
                btst    #$01, D1                                                
                bne.s   ClearScreen_DMAWait                    ; Offset_0x001818                                         
                move.w  #$8F02, (A5)                                            
                lea     (VDP_Control_Port), A5                       ; $00C00004
                move.w  #$8F01, (A5)                                            
                move.l  #$940F93FF, (A5)                                        
                move.w  #$9780, (A5)                                            
                move.l  #$60000083, (A5)                                        
                move.w  #$0000, (VDP_Data_Port)                      ; $00C00000
ClearScreen_DMAWait_2:                                         ; Offset_0x001846
                move.w  (A5), D1                                                
                btst    #$01, D1                                                
                bne.s   ClearScreen_DMAWait_2                  ; Offset_0x001846                                         
                move.w  #$8F02, (A5)                                            
                tst.w   (Two_Player_Flag).w                          ; $FFFFFFD8
                beq.s   Offset_0x001886                                         
                lea     (VDP_Control_Port), A5                       ; $00C00004
                move.w  #$8F01, (A5)                                            
                move.l  #$940F93FF, (A5)                                        
                move.w  #$9780, (A5)                                            
                move.l  #$60000082, (A5)                                        
                move.w  #$0000, (VDP_Data_Port)                      ; $00C00000
ClearScreen_DMAWait_3:                                         ; Offset_0x00187A
                move.w  (A5), D1                                                
                btst    #$01, D1                                                
                bne.s   ClearScreen_DMAWait_3                  ; Offset_0x00187A                                         
                move.w  #$8F02, (A5)                                            
Offset_0x001886:
                clr.l   ($FFFFF616).w                                           
                clr.l   ($FFFFF61A).w                                           
                lea     ($FFFFF800).w, A1                                       
                moveq   #$00, D0                                                
                move.w  #$00A0, D1                                              
ClearScreen_ClearBuffer1:                                      ; Offset_0x001898
                move.l  D0, (A1)+                                               
                dbra    D1, ClearScreen_ClearBuffer1           ; Offset_0x001898                                     
                lea     (Scroll_Buffer_Data).w, A1                   ; $FFFFE000                                
                moveq   #$00, D0                                                
                move.w  #$0100, D1                                              
ClearScreen_ClearBuffer2:                                      ; Offset_0x0018A8
                move.l  D0, (A1)+                                               
                dbra    D1, ClearScreen_ClearBuffer2           ; Offset_0x0018A8                                     
                move.w  #$0000, (Z80_Bus_Request)                    ; $00A11100
                rts                                                             
;===============================================================================                  
; ClearScreen
; <<<-                           
;=============================================================================== 

J_SoundDriverLoad:                                             ; Offset_0x0018B8  
                nop                                                             
                jmp     (SoundDriverLoad)                      ; Offset_0x0EC000  
;-------------------------------------------------------------------------------
; Z80_Init:   ; Inicialização do z80 não usado                 ; Offset_0x0018C0
                move.w  #$0100, (Z80_Bus_Request)                    ; $00A11100
                move.w  #$0100, (Z80_Reset)                          ; $00A11200
                lea     (Z80_RAM_Start), A1                          ; $00A00000
                move.b  #$F3, (A1)+                                             
                move.b  #$F3, (A1)+                                             
                move.b  #$C3, (A1)+                                             
                move.b  #$00, (A1)+                                             
                move.b  #$00, (A1)+                                             
                move.w  #$0000, (Z80_Reset)                          ; $00A11200
                nop                                                             
                nop                                                             
                nop                                                             
                nop                                                             
                move.w  #$0100, (Z80_Reset)                          ; $00A11200
                move.w  #$0000, (Z80_Bus_Request)                    ; $00A11100
                rts                                                             
;-------------------------------------------------------------------------------
Play_Music:                                                    ; Offset_0x00190C
                move.b  D0, (Sound_Buffer_Id).w                      ; $FFFFFFE0                                   
                rts 
;-------------------------------------------------------------------------------                                                                            
Play_Sfx:                                                      ; Offset_0x001912
                move.b  D0, (Sound_Buffer_Id+$0001).w                ; $FFFFFFE1                                   
                rts 
;-------------------------------------------------------------------------------                      
Play_Music_Ex:                                                 ; Offset_0x001918
                move.b  D0, (Sound_Buffer_Id+$0002).w                ; $FFFFFFE2                                   
                rts    
;-------------------------------------------------------------------------------                                                                         
Play_Sfx_Ex:                                                   ; Offset_0x00191E
                tst.b   $0001(A0)                                               
                bpl.s   Exit_Play_Sfx_Ex                       ; Offset_0x001928                                         
                move.b  D0, (Sound_Buffer_Id+$0001).w                ; $FFFFFFE1                                   
Exit_Play_Sfx_Ex:                                              ; Offset_0x001928
                rts                                                             
;===============================================================================
; Rotina para tratar o Pause
; ->>>
;===============================================================================
Pause:                                                         ; Offset_0x00192A
                nop                                                             
                tst.b   (Life_Count).w                               ; $FFFFFE12
                beq     Unpause                                ; Offset_0x00198E
                tst.w   (Pause_Status).w                             ; $FFFFF63A
                bne.s   Pause_AlreadyPaused                    ; Offset_0x001942
                btst    #$07, (Control_Ports_Buffer_Data+$0001).w    ; $FFFFF605
                beq.s   Pause_DoNothing                        ; Offset_0x001994
Pause_AlreadyPaused:                                           ; Offset_0x001942
                move.w  #$0001, (Pause_Status).w                     ; $FFFFF63A
                move.b  #$FE, (Sound_Buffer_Id).w                    ; $FFFFFFE0
Pause_Loop:                                                    ; Offset_0x00194E
                move.b  #$10, (VBlank_Index).w                       ; $FFFFF62A
                bsr     Wait_For_VSync                         ; Offset_0x003938
                tst.b   ($FFFFFFD1).w                                           
                beq.s   Pause_CheckStart                       ; Offset_0x001980
                btst    #$06, (Control_Ports_Buffer_Data+$0001).w    ; $FFFFF605
                beq.s   Pause_CheckBC                          ; Offset_0x001970
                move.b  #gm_TitleScreen, (Game_Mode).w         ; $04 ; $FFFFF600
                nop                                                             
                bra.s   Offset_0x001988                                         
Pause_CheckBC:                                                 ; Offset_0x001970
                btst    #$04, (Control_Ports_Buffer_Data).w          ; $FFFFF604
                bne.s   Pause_SlowMotion                       ; Offset_0x001996                                         
                btst    #$05, (Control_Ports_Buffer_Data+$0001).w    ; $FFFFF605
                bne.s   Pause_SlowMotion                       ; Offset_0x001996                                         
Pause_CheckStart:                                              ; Offset_0x001980
                btst    #$07, (Control_Ports_Buffer_Data+$0001).w    ; $FFFFF605
                beq.s   Pause_Loop                             ; Offset_0x00194E
Offset_0x001988:
                move.b  #$FF, (Sound_Buffer_Id).w                    ; $FFFFFFE0
Unpause:                                                       ; Offset_0x00198E
                move.w  #$0000, (Pause_Status).w                     ; $FFFFF63A
Pause_DoNothing:                                               ; Offset_0x001994
                rts                                                             
Pause_SlowMotion:                                              ; Offset_0x001996
                move.w  #$0001, (Pause_Status).w                     ; $FFFFF63A
                move.b  #$FF, (Sound_Buffer_Id).w                    ; $FFFFFFE0
                rts                                                             
;===============================================================================
; Rotina para tratar o Pause
; <<<-
;=============================================================================== 

;===============================================================================
; Rotina para carregar os mapeamentos para a VDP
; ->>>
;===============================================================================
ShowVDPGraphics:                                               ; Offset_0x0019A4
                lea     (VDP_Data_Port), A6                          ; $00C00000
                move.l  #$00800000, D4                                          
ShowVDPGraphics_LineLoop:                                      ; Offset_0x0019B0
                move.l  D0, $0004(A6)                                           
                move.w  D1, D3                                                  
ShowVDPGraphics_TileLoop:                                      ; Offset_0x0019B6
                move.w  (A1)+, (A6)                                             
                dbra    D3, ShowVDPGraphics_TileLoop           ; Offset_0x0019B6                                     
                add.l   D4, D0                                                  
                dbra    D2, ShowVDPGraphics_LineLoop           ; Offset_0x0019B0                                     
                rts                                                             
;=============================================================================== 
; Rotina para carregar os mapeamentos para a VDP
; <<<-
;=============================================================================== 

;===============================================================================
; Rotina para carregar os mapeamentos para a VDP no Special Stage
; ->>>
;===============================================================================
ShowVDPGraphics_SS:                                            ; Offset_0x0019C4
                lea     (VDP_Data_Port), A6                          ; $00C00000
                move.l  #$01000000, D4                                          
ShowVDPGraphicsSS_TileLoop:                                    ; Offset_0x0019D0
                move.l  D0, $0004(A6)                                           
                move.w  D1, D3                                                  
ShowVDPGraphicsSS_LineLoop:                                    ; Offset_0x0019D6
                move.w  (A1)+, (A6)                                             
                dbra    D3, ShowVDPGraphicsSS_LineLoop         ; Offset_0x0019D6                                     
                add.l   D4, D0                                                  
                dbra    D2, ShowVDPGraphicsSS_TileLoop         ; Offset_0x0019D0                                     
                rts                                                             
;===============================================================================
; Rotina para carregar os mapeamentos para a VDP no Special Stage
; <<<-
;===============================================================================

;===============================================================================
; Rotina de transferência para a VRAM       
; ->>>
;=============================================================================== 
DMA_68KtoVRAM:                                                 ; Offset_0x0019E4
                move.l  (DMA_Buffer_List_End).w, A1                  ; $FFFFDCFC
                cmpa.w  #DMA_Buffer_List_End, A1                         ; $DCFC                                      
                beq.s   Offset_0x001A40                                         
                move.w  #$9300, D0                                              
                move.b  D3, D0                                                  
                move.w  D0, (A1)+                                               
                move.w  #$9400, D0                                              
                lsr.w   #$08, D3                                                
                move.b  D3, D0                                                  
                move.w  D0, (A1)+                                               
                move.w  #$9500, D0                                              
                lsr.l   #$01, D1                                                
                move.b  D1, D0                                                  
                move.w  D0, (A1)+                                               
                move.w  #$9600, D0                                              
                lsr.l   #$08, D1                                                
                move.b  D1, D0                                                  
                move.w  D0, (A1)+                                               
                move.w  #$9700, D0                                              
                lsr.l   #$08, D1                                                
                move.b  D1, D0                                                  
                move.w  D0, (A1)+                                               
                andi.l  #$0000FFFF, D2                                          
                lsl.l   #$02, D2                                                
                lsr.w   #$02, D2                                                
                swap.w  D2                                                      
                ori.l   #$40000080, D2                                          
                move.l  D2, (A1)+                                               
                move.l  A1, (DMA_Buffer_List_End).w                  ; $FFFFDCFC
                cmpa.w  #DMA_Buffer_List_End, A1                         ; $DCFC                                       
                beq.s   Offset_0x001A40                                         
                move.w  #$0000, (A1)                                            
Offset_0x001A40:
                rts                                                             
;===============================================================================
; Rotina de transferência para a VRAM       
; <<<-
;=============================================================================== 

;===============================================================================
; Rotina de processamento do DMA
; ->>>
;=============================================================================== 
Process_DMA:                                                   ; Offset_0x001A42
                lea     (VDP_Control_Port), A5                       ; $00C00004
                lea     (DMA_Buffer_List).w, A1                      ; $FFFFDC00
Process_DMA_Loop:                                              ; Offset_0x001A4C
                move.w  (A1)+, D0                                               
                beq.s   Process_DMA_End                        ; Offset_0x001A64                                         
                move.w  D0, (A5)                                                
                move.w  (A1)+, (A5)                                             
                move.w  (A1)+, (A5)                                             
                move.w  (A1)+, (A5)                                             
                move.w  (A1)+, (A5)                                             
                move.w  (A1)+, (A5)                                             
                move.w  (A1)+, (A5)                                             
                cmpa.w  #DMA_Buffer_List_End, A1                         ; $DCFC                                        
                bne.s   Process_DMA_Loop                       ; Offset_0x001A4C                                         
Process_DMA_End:                                               ; Offset_0x001A64
                move.w  #$0000, (DMA_Buffer_List).w                  ; $FFFFDC00
                move.l  #DMA_Buffer_List, (DMA_Buffer_List_End).w ; $FFFFDC00, $FFFFDCFC                        
                rts                                                             
;===============================================================================
; Rotina de processamento do DMA
; <<<-
;===============================================================================

;===============================================================================
; Rotina de descompressão no formato Nemesis
; ->>>
;=============================================================================== 
NemesisDec:                                                    ; Offset_0x001A74
                movem.l D0-D7/A0/A1/A3-A5, -(A7)                                
                lea     (NemesisDec_Output), A3                ; Offset_0x001B36
                lea     (VDP_Data_Port), A4                          ; $00C00000
                bra.s   NemesisDec_Main                        ; Offset_0x001A90
;-------------------------------------------------------------------------------  
NemesisDecToRAM:                                               ; Offset_0x001A86
                movem.l D0-D7/A0/A1/A3-A5, -(A7)                                
                lea     (NemesisDec_OutputToRAM), A3           ; Offset_0x001B4C
NemesisDec_Main:                                               ; Offset_0x001A90                
                lea     ($FFFFAA00).w, A1                                       
                move.w  (A0)+, D2                                               
                lsl.w   #$01, D2                                                
                bcc.s   Offset_0x001A9E     
              ; Aponta A3 para NemesisDec_Output_XOR se A3 = NemesisDec_Output ou
              ; Aponta A3 para NemesisDec_OutputRAM_XOR se A3 = NemesisDec_OutputRAM                                      
                adda.w  #(NemesisDec_Output_XOR-NemesisDec_Output), A3   ; $000A                                          
Offset_0x001A9E:
                lsl.w   #$02, D2                                                
                move.w  D2, A5                                                  
                moveq   #$08, D3                                                
                moveq   #$00, D2                                                
                moveq   #$00, D4                                                
                bsr     NemesisDec_4                           ; Offset_0x001B62
                move.b  (A0)+, D5                                               
                asl.w   #$08, D5                                                
                move.b  (A0)+, D5                                               
                move.w  #$0010, D6                                              
                bsr.s   NemesisDec_2                           ; Offset_0x001ABE
                movem.l (A7)+, D0-D7/A0/A1/A3-A5                                
                rts                                                             
;-------------------------------------------------------------------------------                
NemesisDec_2:                                                  ; Offset_0x001ABE
                move.w  D6, D7                                                  
                subq.w  #$08, D7                                                
                move.w  D5, D1                                                  
                lsr.w   D7, D1                                                  
                cmpi.b  #$FC, D1                                                
                bcc.s   Offset_0x001B0A                                         
                andi.w  #$00FF, D1                                              
                add.w   D1, D1                                                  
                move.b  $00(A1, D1), D0                                         
                ext.w   D0                                                      
                sub.w   D0, D6                                                  
                cmpi.w  #$0009, D6                                              
                bcc.s   Offset_0x001AE6                                         
                addq.w  #$08, D6                                                
                asl.w   #$08, D5                                                
                move.b  (A0)+, D5                                               
Offset_0x001AE6:
                move.b  $01(A1, D1), D1                                         
                move.w  D1, D0                                                  
                andi.w  #$000F, D1                                              
                andi.w  #$00F0, D0 
NemesisDec_SubType:                                            ; Offset_0x001AF4                       
                lsr.w   #$04, D0  
NemesisDec_Loop_SubType:                                       ; Offset_0x001AF6                                                               
                lsl.l   #$04, D4                                                
                or.b    D1, D4                                                  
                subq.w  #$01, D3                                                
                bne.s   Offset_0x001B04 
              ; A3 Contém uma das rotinas de descompressão no formato Nemesis.  
              ; ( NemesisDec_Output_XOR ou NemesisDec_OutputRAM_XOR )                                                        
                jmp     (A3)      
;-------------------------------------------------------------------------------
NemesisDec_3                                                   ; Offset_0x001B00
                moveq   #$00, D4                                                
                moveq   #$08, D3    
Offset_0x001B04:                                                            
                dbra    D0, NemesisDec_Loop_SubType            ; Offset_0x001AF6                                     
                bra.s   NemesisDec_2                           ; Offset_0x001ABE  
;-------------------------------------------------------------------------------   
Offset_0x001B0A:
                subq.w  #$06, D6                                                
                cmpi.w  #$0009, D6                                              
                bcc.s   Offset_0x001B18                                         
                addq.w  #$08, D6                                                
                asl.w   #$08, D5                                                
                move.b  (A0)+, D5                                               
Offset_0x001B18:
                subq.w  #$07, D6                                                
                move.w  D5, D1                                                  
                lsr.w   D6, D1                                                  
                move.w  D1, D0                                                  
                andi.w  #$000F, D1                                              
                andi.w  #$0070, D0                                              
                cmpi.w  #$0009, D6                                              
                bcc.s   NemesisDec_SubType                     ; Offset_0x001AF4
                addq.w  #$08, D6                                                
                asl.w   #$08, D5                                                
                move.b  (A0)+, D5                                               
                bra.s   NemesisDec_SubType                     ; Offset_0x001AF4                   
;-------------------------------------------------------------------------------
NemesisDec_Output:                                             ; Offset_0x001B36
                move.l  D4, (A4)                                                
                subq.w  #$01, A5                                                
                move.w  A5, D4                                                  
                bne.s   NemesisDec_3                           ; Offset_0x001B00
                rts           
;-------------------------------------------------------------------------------
NemesisDec_Output_XOR:                                         ; Offset_0x001B40
                eor.l   D4, D2                                                  
                move.l  D2, (A4)                                                
                subq.w  #$01, A5                                                
                move.w  A5, D4                                                  
                bne.s   NemesisDec_3                           ; Offset_0x001B00
                rts                                                                                                                               
;-------------------------------------------------------------------------------
NemesisDec_OutputToRAM:                                        ; Offset_0x001B4C
                move.l  D4, (A4)+                                               
                subq.w  #$01, A5                                                
                move.w  A5, D4                                                  
                bne.s   NemesisDec_3                           ; Offset_0x001B00
                rts                                                             
;-------------------------------------------------------------------------------
NemesisDec_Output_XORToRAM:                                    ; Offset_0x001B56
                eor.l   D4, D2                                                  
                move.l  D2, (A4)+                                               
                subq.w  #$01, A5                                                
                move.w  A5, D4                                                  
                bne.s   NemesisDec_3                           ; Offset_0x001B00
                rts                                                             
;-------------------------------------------------------------------------------
NemesisDec_4:                                                  ; Offset_0x001B62
                move.b  (A0)+, D0                                               
Offset_0x001B64:
                cmpi.b  #$FF, D0                                                
                bne.s   Offset_0x001B6C                                         
                rts                                                             
Offset_0x001B6C:
                move.w  D0, D7                                                  
Offset_0x001B6E:
                move.b  (A0)+, D0                                               
                cmpi.b  #$80, D0                                                
                bcc.s   Offset_0x001B64                                         
                move.b  D0, D1                                                  
                andi.w  #$000F, D7                                              
                andi.w  #$0070, D1                                              
                or.w    D1, D7                                                  
                andi.w  #$000F, D0                                              
                move.b  D0, D1                                                  
                lsl.w   #$08, D1                                                
                or.w    D1, D7                                                  
                moveq   #$08, D1                                                
                sub.w   D0, D1                                                  
                bne.s   Offset_0x001B9C                                         
                move.b  (A0)+, D0                                               
                add.w   D0, D0                                                  
                move.w  D7, $00(A1, D0)                                         
                bra.s   Offset_0x001B6E                                         
Offset_0x001B9C:
                move.b  (A0)+, D0                                               
                lsl.w   D1, D0                                                  
                add.w   D0, D0                                                  
                moveq   #$01, D5                                                
                lsl.w   D1, D5                                                  
                subq.w  #$01, D5                                                
Offset_0x001BA8:
                move.w  D7, $00(A1, D0)                                         
                addq.w  #$02, D0                                                
                dbra    D5, Offset_0x001BA8                                     
                bra.s   Offset_0x001B6E                                                                                                                                                            
;===============================================================================
; Rotina de descompressão no formato Nemesis
; <<<-
;=============================================================================== 

;===============================================================================
; Rotinas para carga dos gráficos no array ArtLoadCues de acordo com o 
; indíce em D0
; ->>>
;=============================================================================== 
LoadPLC:                                                       ; Offset_0x001BB4
                movem.l A1/A2, -(A7)                                            
                lea     (ArtLoadCues), A1                      ; Offset_0x03AC3C
                add.w   D0, D0                                                  
                move.w  $00(A1, D0), D0                                         
                lea     $00(A1, D0), A1                                         
                lea     ($FFFFF680).w, A2                                       
Offset_0x001BCC:
                tst.l   (A2)                                                    
                beq.s   Offset_0x001BD4                                         
                addq.w  #$06, A2                                                
                bra.s   Offset_0x001BCC                                         
Offset_0x001BD4:
                move.w  (A1)+, D0                                               
                bmi.s   Offset_0x001BE0                                         
Offset_0x001BD8:
                move.l  (A1)+, (A2)+                                            
                move.w  (A1)+, (A2)+                                            
                dbra    D0, Offset_0x001BD8                                     
Offset_0x001BE0:
                movem.l (A7)+, A1/A2                                            
                rts    
;-------------------------------------------------------------------------------
LoadPLC2:                                                      ; Offset_0x001BE6
                movem.l A1/A2, -(A7)                                            
                lea     (ArtLoadCues), A1                      ; Offset_0x03AC3C
                add.w   D0, D0                                                  
                move.w  $00(A1, D0), D0                                         
                lea     $00(A1, D0), A1                                         
                bsr.s   ClearPLC                               ; Offset_0x001C12
                lea     ($FFFFF680).w, A2                                       
                move.w  (A1)+, D0                                               
                bmi.s   Offset_0x001C0C                                         
Offset_0x001C04:
                move.l  (A1)+, (A2)+                                            
                move.w  (A1)+, (A2)+                                            
                dbra    D0, Offset_0x001C04                                     
Offset_0x001C0C:
                movem.l (A7)+, A1/A2                                            
                rts                                                                                                                                                                                                
;===============================================================================
; Rotina de para carregar os gráficos no array ArtLoadCues de acordo com o 
; indíce em D0
; <<<-
;=============================================================================== 

;===============================================================================
; Rotina de para limpar os itens na lista de carga dos gráficos
; ->>>
;=============================================================================== 
ClearPLC:                                                      ; Offset_0x001C12
                lea     ($FFFFF680).w, A2                                       
                moveq   #$1F, D0                                                
ClearPLC_Loop:                                                 ; Offset_0x001C18
                clr.l   (A2)+                                                   
                dbra    D0, ClearPLC_Loop                      ; Offset_0x001C18                                     
                rts                                                             
;===============================================================================
; Rotina de para limpar os itens na lista de carga dos gráficos
; <<<-
;=============================================================================== 

;===============================================================================
; Rotina para descompactar os itens na lista de carga dos gráficos
; ->>>
;=============================================================================== 
RunPLC:                                                        ; Offset_0x001C20
                tst.l   ($FFFFF680).w                                           
                beq.s   Offset_0x001C74                                         
                tst.w   ($FFFFF6F8).w                                           
                bne.s   Offset_0x001C74                                         
                move.l  ($FFFFF680).w, A0                                       
                lea     NemesisDec_Output(PC), A3              ; Offset_0x001B36                       
                nop                                                             
                lea     ($FFFFAA00).w, A1                                       
                move.w  (A0)+, D2                                               
                bpl.s   Offset_0x001C42 
              ; Aponta A3 para NemesisDec_Output_XOR se A3 = NemesisDec_Output ou
              ; Aponta A3 para NemesisDec_OutputRAM_XOR se A3 = NemesisDec_OutputRAM                                      
                adda.w  #(NemesisDec_Output_XOR-NemesisDec_Output), A3   ; $000A                                          
Offset_0x001C42:
                andi.w  #$7FFF, D2                                              
                move.w  D2, ($FFFFF6F8).w                                       
                bsr     NemesisDec_4                           ; Offset_0x001B62
                move.b  (A0)+, D5                                               
                asl.w   #$08, D5                                                
                move.b  (A0)+, D5                                               
                moveq   #$10, D6                                                
                moveq   #$00, D0                                                
                move.l  A0, ($FFFFF680).w                                       
                move.l  A3, ($FFFFF6E0).w                                       
                move.l  D0, ($FFFFF6E4).w                                       
                move.l  D0, ($FFFFF6E8).w                                       
                move.l  D0, ($FFFFF6EC).w                                       
                move.l  D5, ($FFFFF6F0).w                                       
                move.l  D6, ($FFFFF6F4).w                                       
Offset_0x001C74:
                rts                                                             
;===============================================================================
; Rotina para descompactar os itens na lista de carga dos gráficos
; <<<-
;=============================================================================== 
Offset_0x001C76:
                tst.w   ($FFFFF6F8).w                                           
                beq     Offset_0x001D0E                                         
                move.w  #$0009, ($FFFFF6FA).w                                   
                moveq   #$00, D0                                                
                move.w  ($FFFFF684).w, D0                                       
                addi.w  #$0120, ($FFFFF684).w                                   
                bra.s   Offset_0x001CAA                                         
;-------------------------------------------------------------------------------   
Offset_0x001C92:
                tst.w   ($FFFFF6F8).w                                           
                beq.s   Offset_0x001D0E                                         
                move.w  #$0003, ($FFFFF6FA).w                                   
                moveq   #$00, D0                                                
                move.w  ($FFFFF684).w, D0                                       
                addi.w  #$0060, ($FFFFF684).w                                   
Offset_0x001CAA:
                lea     (VDP_Control_Port), A4                       ; $00C00004
                lsl.l   #$02, D0                                                
                lsr.w   #$02, D0                                                
                ori.w   #$4000, D0                                              
                swap.w  D0                                                      
                move.l  D0, (A4)                                                
                subq.w  #$04, A4                                                
                move.l  ($FFFFF680).w, A0                                       
                move.l  ($FFFFF6E0).w, A3                                       
                move.l  ($FFFFF6E4).w, D0                                       
                move.l  ($FFFFF6E8).w, D1                                       
                move.l  ($FFFFF6EC).w, D2                                       
                move.l  ($FFFFF6F0).w, D5                                       
                move.l  ($FFFFF6F4).w, D6                                       
                lea     ($FFFFAA00).w, A1                                       
Offset_0x001CDE:
                move.w  #$0008, A5                                              
                bsr     NemesisDec_3                           ; Offset_0x001B00
                subq.w  #$01, ($FFFFF6F8).w                                     
                beq.s   Offset_0x001D10                                         
                subq.w  #$01, ($FFFFF6FA).w                                     
                bne.s   Offset_0x001CDE                                         
                move.l  A0, ($FFFFF680).w                                       
                move.l  A3, ($FFFFF6E0).w                                       
                move.l  D0, ($FFFFF6E4).w                                       
                move.l  D1, ($FFFFF6E8).w                                       
                move.l  D2, ($FFFFF6EC).w                                       
                move.l  D5, ($FFFFF6F0).w                                       
                move.l  D6, ($FFFFF6F4).w                                       
Offset_0x001D0E:
                rts                                                             
Offset_0x001D10:
                lea     ($FFFFF680).w, A0                                       
                moveq   #$15, D0                                                
Offset_0x001D16:
                move.l  $0006(A0), (A0)+                                        
                dbra    D0, Offset_0x001D16                                     
                rts                     
;===============================================================================
; Carrega os dados direto do ROM sem entrar na fila       
; ->>>
;=============================================================================== 
RunPLC_ROM:                                                    ; Offset_0x001D20
                lea     (ArtLoadCues), A1                      ; Offset_0x03AC3C
                add.w   D0, D0                                                  
                move.w  $00(A1, D0), D0                                         
                lea     $00(A1, D0), A1                                         
                move.w  (A1)+, D1                                               
RunPLC_ROM_Loop:                                               ; Offset_0x001D32
                move.l  (A1)+, A0                                               
                moveq   #$00, D0                                                
                move.w  (A1)+, D0                                               
                lsl.l   #$02, D0                                                
                lsr.w   #$02, D0                                                
                ori.w   #$4000, D0                                              
                swap.w  D0                                                      
                move.l  D0, (VDP_Control_Port)                       ; $00C00004
                bsr     NemesisDec                             ; Offset_0x001A74
                dbra    D1, RunPLC_ROM_Loop                    ; Offset_0x001D32                                     
                rts                                                              
;===============================================================================
; Carrega os dados direto do ROM sem entrar na fila       
; <<<-
;===============================================================================
            
;===============================================================================
; Rotina de descompressão no formato Enigma
; ->>>
;===============================================================================  
EnigmaDec:                                                     ; Offset_0x001D52
                movem.l D0-D7/A1-A5, -(A7)                                      
                move.w  D0, A3                                                  
                move.b  (A0)+, D0                                               
                ext.w   D0                                                      
                move.w  D0, A5                                                  
                move.b  (A0)+, D4                                               
                lsl.b   #$03, D4                                                
                move.w  (A0)+, A2                                               
                adda.w  A3, A2                                                  
                move.w  (A0)+, A4                                               
                adda.w  A3, A4                                                  
                move.b  (A0)+, D5                                               
                asl.w   #$08, D5                                                
                move.b  (A0)+, D5                                               
                moveq   #$10, D6   
Offset_0x001D72:                                                             
                moveq   #$07, D0                                                
                move.w  D6, D7                                                  
                sub.w   D0, D7                                                  
                move.w  D5, D1                                                  
                lsr.w   D7, D1                                                  
                andi.w  #$007F, D1                                              
                move.w  D1, D2                                                  
                cmpi.w  #$0040, D1                                              
                bcc.s   Offset_0x001D8C                                         
                moveq   #$06, D0                                                
                lsr.w   #$01, D2                                                
Offset_0x001D8C:
                bsr     Offset_0x001EC0                                         
                andi.w  #$000F, D2                                              
                lsr.w   #$04, D1                                                
                add.w   D1, D1                                                  
                jmp     Offset_0x001DE8(PC, D1)     
;-------------------------------------------------------------------------------
Offset_0x001D9C:
                move.w  A2, (A1)+                                               
                addq.w  #$01, A2                                                
                dbra    D2, Offset_0x001D9C                                     
                bra.s   Offset_0x001D72       
;-------------------------------------------------------------------------------    
Offset_0x001DA6:
                move.w  A4, (A1)+                                               
                dbra    D2, Offset_0x001DA6                                     
                bra.s   Offset_0x001D72   
;-------------------------------------------------------------------------------               
Offset_0x001DAE:
                bsr     Offset_0x001E10                                         
Offset_0x001DB2:
                move.w  D1, (A1)+                                               
                dbra    D2, Offset_0x001DB2                                     
                bra.s   Offset_0x001D72                                         
;-------------------------------------------------------------------------------
Offset_0x001DBA:
                bsr     Offset_0x001E10                                         
Offset_0x001DBE:
                move.w  D1, (A1)+                                               
                addq.w  #$01, D1                                                
                dbra    D2, Offset_0x001DBE                                     
                bra.s   Offset_0x001D72                                         
;-------------------------------------------------------------------------------                
Offset_0x001DC8:
                bsr     Offset_0x001E10                                         
Offset_0x001DCC:
                move.w  D1, (A1)+                                               
                subq.w  #$01, D1                                                
                dbra    D2, Offset_0x001DCC                                     
                bra.s   Offset_0x001D72                                                         
;------------------------------------------------------------------------------- 
Offset_0x001DD6:
                cmpi.w  #$000F, D2                                              
                beq.s   Offset_0x001DF8                                         
Offset_0x001DDC:
                bsr     Offset_0x001E10                                         
                move.w  D1, (A1)+                                               
                dbra    D2, Offset_0x001DDC                                     
                bra.s   Offset_0x001D72                                         
;------------------------------------------------------------------------------- 
Offset_0x001DE8:
                bra.s   Offset_0x001D9C                                         
                bra.s   Offset_0x001D9C                                         
                bra.s   Offset_0x001DA6                                         
                bra.s   Offset_0x001DA6                                         
                bra.s   Offset_0x001DAE                                         
                bra.s   Offset_0x001DBA                                         
                bra.s   Offset_0x001DC8                                         
                bra.s   Offset_0x001DD6                                         
;-------------------------------------------------------------------------------
Offset_0x001DF8:
                subq.w  #$01, A0                                                
                cmpi.w  #$0010, D6                                              
                bne.s   Offset_0x001E02                                         
                subq.w  #$01, A0                                                
Offset_0x001E02:
                move.w  A0, D0                                                  
                lsr.w   #$01, D0                                                
                bcc.s   Offset_0x001E0A                                         
                addq.w  #$01, A0                                                
Offset_0x001E0A:
                movem.l (A7)+, D0-D7/A1-A5                                      
                rts                                                             
Offset_0x001E10:
                move.w  A3, D3                                                  
                move.b  D4, D1                                                  
                add.b   D1, D1                                                  
                bcc.s   Offset_0x001E22                                         
                subq.w  #$01, D6                                                
                btst    D6, D5                                                  
                beq.s   Offset_0x001E22                                         
                ori.w   #$8000, D3                                              
Offset_0x001E22:
                add.b   D1, D1                                                  
                bcc.s   Offset_0x001E30                                         
                subq.w  #$01, D6                                                
                btst    D6, D5                                                  
                beq.s   Offset_0x001E30                                         
                addi.w  #$4000, D3                                              
Offset_0x001E30:
                add.b   D1, D1                                                  
                bcc.s   Offset_0x001E3E                                         
                subq.w  #$01, D6                                                
                btst    D6, D5                                                  
                beq.s   Offset_0x001E3E                                         
                addi.w  #$2000, D3                                              
Offset_0x001E3E:
                add.b   D1, D1                                                  
                bcc.s   Offset_0x001E4C                                         
                subq.w  #$01, D6                                                
                btst    D6, D5                                                  
                beq.s   Offset_0x001E4C                                         
                ori.w   #$1000, D3                                              
Offset_0x001E4C:
                add.b   D1, D1                                                  
                bcc.s   Offset_0x001E5A                                         
                subq.w  #$01, D6                                                
                btst    D6, D5                                                  
                beq.s   Offset_0x001E5A                                         
                ori.w   #$0800, D3                                              
Offset_0x001E5A:
                move.w  D5, D1                                                  
                move.w  D6, D7                                                  
                sub.w   A5, D7                                                  
                bcc.s   Offset_0x001E8A                                         
                move.w  D7, D6                                                  
                addi.w  #$0010, D6                                              
                neg.w   D7                                                      
                lsl.w   D7, D1                                                  
                move.b  (A0), D5                                                
                rol.b   D7, D5                                                  
                add.w   D7, D7                                                  
                and.w   Offset_0x001EA0-$02(PC, D7), D5                             
                add.w   D5, D1                                                  
Offset_0x001E78:
                move.w  A5, D0                                                  
                add.w   D0, D0                                                  
                and.w   Offset_0x001EA0-$02(PC, D0), D1                             
                add.w   D3, D1                                                  
                move.b  (A0)+, D5                                               
                lsl.w   #$08, D5                                                
                move.b  (A0)+, D5                                               
                rts                                                             
Offset_0x001E8A:
                beq.s   Offset_0x001E9C                                         
                lsr.w   D7, D1                                                  
                move.w  A5, D0                                                  
                add.w   D0, D0                                                  
                and.w   Offset_0x001EA0-$02(PC, D0), D1                             
                add.w   D3, D1                                                  
                move.w  A5, D0                                                  
                bra.s   Offset_0x001EC0                                         
Offset_0x001E9C:
                moveq   #$10, D6                                                
                bra.s   Offset_0x001E78                                                          
;-------------------------------------------------------------------------------
Offset_0x001EA0:
                dc.w    $0001, $0003, $0007, $000F, $001F, $003F, $007F, $00FF
                dc.w    $01FF, $03FF, $07FF, $0FFF, $1FFF, $3FFF, $7FFF, $FFFF
;-------------------------------------------------------------------------------
Offset_0x001EC0:
                sub.w   D0, D6                                                  
                cmpi.w  #$0009, D6                                              
                bcc.s   Offset_0x001ECE                                         
                addq.w  #$08, D6                                                
                asl.w   #$08, D5                                                
                move.b  (A0)+, D5                                               
Offset_0x001ECE:
                rts                                                                                                                                                                      
;===============================================================================
; Rotina de descompressão no formato Enigma
; <<<-
;===============================================================================              
                                                                                         
;===============================================================================
; Rotina de descompressão no formato Kosinski
; ->>>
;=============================================================================== 
KosinskiDec:                                                   ; Offset_0x001ED0
                subq.l  #$02, A7                                                
                move.b  (A0)+, $0001(A7)                                        
                move.b  (A0)+, (A7)                                             
                move.w  (A7), D5                                                
                moveq   #$0F, D4                                                
Offset_0x001EDC:
                lsr.w   #$01, D5                                                
                move    SR, D6                                                  
                dbra    D4, Offset_0x001EEE                                     
                move.b  (A0)+, $0001(A7)                                        
                move.b  (A0)+, (A7)                                             
                move.w  (A7), D5                                                
                moveq   #$0F, D4                                                
Offset_0x001EEE:
                move    D6, CCR                                                 
                bcc.s   Offset_0x001EF6                                         
                move.b  (A0)+, (A1)+                                            
                bra.s   Offset_0x001EDC                                         
Offset_0x001EF6:
                moveq   #$00, D3                                                
                lsr.w   #$01, D5                                                
                move    SR, D6                                                  
                dbra    D4, Offset_0x001F0A                                     
                move.b  (A0)+, $0001(A7)                                        
                move.b  (A0)+, (A7)                                             
                move.w  (A7), D5                                                
                moveq   #$0F, D4                                                
Offset_0x001F0A:
                move    D6, CCR                                                 
                bcs.s   Offset_0x001F3A                                         
                lsr.w   #$01, D5                                                
                dbra    D4, Offset_0x001F1E                                     
                move.b  (A0)+, $0001(A7)                                        
                move.b  (A0)+, (A7)                                             
                move.w  (A7), D5                                                
                moveq   #$0F, D4                                                
Offset_0x001F1E:
                roxl.w  #$01, D3                                                
                lsr.w   #$01, D5                                                
                dbra    D4, Offset_0x001F30                                     
                move.b  (A0)+, $0001(A7)                                        
                move.b  (A0)+, (A7)                                             
                move.w  (A7), D5                                                
                moveq   #$0F, D4                                                
Offset_0x001F30:
                roxl.w  #$01, D3                                                
                addq.w  #$01, D3                                                
                moveq   #-$01, D2                                          
                move.b  (A0)+, D2                                               
                bra.s   Offset_0x001F50                                         
Offset_0x001F3A:
                move.b  (A0)+, D0                                               
                move.b  (A0)+, D1                                               
                moveq   #-$01, D2                                          
                move.b  D1, D2                                                  
                lsl.w   #$05, D2                                                
                move.b  D0, D2                                                  
                andi.w  #$0007, D1                                              
                beq.s   Offset_0x001F5C                                         
                move.b  D1, D3                                                  
                addq.w  #$01, D3                                                
Offset_0x001F50:
                move.b  $00(A1, D2), D0                                         
                move.b  D0, (A1)+                                               
                dbra    D3, Offset_0x001F50                                     
                bra.s   Offset_0x001EDC                                         
Offset_0x001F5C:
                move.b  (A0)+, D1                                               
                beq.s   Offset_0x001F6C                                         
                cmpi.b  #$01, D1                                                
                beq     Offset_0x001EDC                                         
                move.b  D1, D3                                                  
                bra.s   Offset_0x001F50                                         
Offset_0x001F6C:
                addq.l  #$02, A7                                                
                rts                                                             
;===============================================================================
; Rotina de descompressão no formato Kosinski
; <<<-
;=============================================================================== 

; Offset_0x001F70:
                moveq   #$00, D0                                                
                move.w  #$07FF, D4                                              
                moveq   #$00, D5                                                
                moveq   #$00, D6                                                
                move.w  A3, D7                                                  
                subq.w  #$01, D2                                                
                beq     Offset_0x002310                                         
                subq.w  #$01, D2                                                
                beq     Offset_0x002292                                         
                subq.w  #$01, D2                                                
                beq     Offset_0x002214                                         
                subq.w  #$01, D2                                                
                beq     Offset_0x002196                                         
                subq.w  #$01, D2                                                
                beq     Offset_0x00211A                                         
                subq.w  #$01, D2                                                
                beq     Offset_0x00209C                                         
                subq.w  #$01, D2                                                
                beq     Offset_0x002022                                         
Offset_0x001FA6:
                move.b  (A0)+, D1                                               
                add.b   D1, D1                                                  
                bcs.s   Offset_0x002020                                         
                move.l  A2, A6                                                  
                add.b   D1, D1                                                  
                bcs.s   Offset_0x001FC8                                         
                move.b  (A1)+, D5                                               
                suba.l  D5, A6                                                  
                add.b   D1, D1                                                  
                bcc.s   Offset_0x001FBC                                         
                move.b  (A6)+, (A2)+                                            
Offset_0x001FBC:
                move.b  (A6)+, (A2)+                                            
                move.b  (A6)+, (A2)+                                            
                cmp.w   A2, D7                                                  
                bls.s   Offset_0x002010                                         
                bra     Offset_0x00211A                                         
Offset_0x001FC8:
                lsl.w   #$03, D1                                                
                move.w  D1, D6                                                  
                and.w   D4, D6                                                  
                move.b  (A1)+, D6                                               
                suba.l  D6, A6                                                  
                add.b   D1, D1                                                  
                bcs.s   Offset_0x001FDC                                         
                add.b   D1, D1                                                  
                bcs.s   Offset_0x001FF2                                         
                bra.s   Offset_0x001FF4                                         
Offset_0x001FDC:
                add.b   D1, D1                                                  
                bcc.s   Offset_0x001FF0                                         
                moveq   #$00, D0                                                
                move.b  (A1)+, D0                                               
                beq.s   Offset_0x002002                                         
                subq.w  #$06, D0                                                
                bmi.s   Offset_0x002008                                         
Offset_0x001FEA:
                move.b  (A6)+, (A2)+                                            
                dbra    D0, Offset_0x001FEA                                     
Offset_0x001FF0:
                move.b  (A6)+, (A2)+                                            
Offset_0x001FF2:
                move.b  (A6)+, (A2)+                                            
Offset_0x001FF4:
                move.b  (A6)+, (A2)+                                            
                move.b  (A6)+, (A2)+                                            
                move.b  (A6)+, (A2)+                                            
                cmp.w   A2, D7                                                  
                bls.s   Offset_0x002018                                         
                bra     Offset_0x002310                                         
Offset_0x002002:
                move.w  #$0000, D0                                              
                rts                                                             
Offset_0x002008:
                move.w  #$FFFF, D0                                              
                moveq   #$01, D2                                                
                rts                                                             
Offset_0x002010:
                move.w  #$0001, D0                                              
                moveq   #$05, D2                                                
                rts                                                             
Offset_0x002018:
                move.w  #$0001, D0                                              
                moveq   #$01, D2                                                
                rts                                                             
Offset_0x002020:
                move.b  (A1)+, (A2)+                                            
Offset_0x002022:
                add.b   D1, D1                                                  
                bcs.s   Offset_0x00209A                                         
                move.l  A2, A6                                                  
                add.b   D1, D1                                                  
                bcs.s   Offset_0x002042                                         
                move.b  (A1)+, D5                                               
                suba.l  D5, A6                                                  
                add.b   D1, D1                                                  
                bcc.s   Offset_0x002036                                         
                move.b  (A6)+, (A2)+                                            
Offset_0x002036:
                move.b  (A6)+, (A2)+                                            
                move.b  (A6)+, (A2)+                                            
                cmp.w   A2, D7                                                  
                bls.s   Offset_0x00208A                                         
                bra     Offset_0x002196                                         
Offset_0x002042:
                lsl.w   #$03, D1                                                
                move.w  D1, D6                                                  
                and.w   D4, D6                                                  
                move.b  (A1)+, D6                                               
                suba.l  D6, A6                                                  
                add.b   D1, D1                                                  
                bcs.s   Offset_0x002056                                         
                add.b   D1, D1                                                  
                bcs.s   Offset_0x00206C                                         
                bra.s   Offset_0x00206E                                         
Offset_0x002056:
                add.b   D1, D1                                                  
                bcc.s   Offset_0x00206A                                         
                moveq   #$00, D0                                                
                move.b  (A1)+, D0                                               
                beq.s   Offset_0x00207C                                         
                subq.w  #$06, D0                                                
                bmi.s   Offset_0x002082                                         
Offset_0x002064:
                move.b  (A6)+, (A2)+                                            
                dbra    D0, Offset_0x002064                                     
Offset_0x00206A:
                move.b  (A6)+, (A2)+                                            
Offset_0x00206C:
                move.b  (A6)+, (A2)+                                            
Offset_0x00206E:
                move.b  (A6)+, (A2)+                                            
                move.b  (A6)+, (A2)+                                            
                move.b  (A6)+, (A2)+                                            
                cmp.w   A2, D7                                                  
                bls.s   Offset_0x002092                                         
                bra     Offset_0x001FA6                                         
Offset_0x00207C:
                move.w  #$0000, D0                                              
                rts                                                             
Offset_0x002082:
                move.w  #$FFFF, D0                                              
                moveq   #$00, D2                                                
                rts                                                             
Offset_0x00208A:
                move.w  #$0001, D0                                              
                moveq   #$04, D2                                                
                rts                                                             
Offset_0x002092:
                move.w  #$0001, D0                                              
                moveq   #$00, D2                                                
                rts                                                             
Offset_0x00209A:
                move.b  (A1)+, (A2)+                                            
Offset_0x00209C:
                add.b   D1, D1                                                  
                bcs.s   Offset_0x002118                                         
                move.l  A2, A6                                                  
                add.b   D1, D1                                                  
                bcs.s   Offset_0x0020BC                                         
                move.b  (A1)+, D5                                               
                suba.l  D5, A6                                                  
                add.b   D1, D1                                                  
                bcc.s   Offset_0x0020B0                                         
                move.b  (A6)+, (A2)+                                            
Offset_0x0020B0:
                move.b  (A6)+, (A2)+                                            
                move.b  (A6)+, (A2)+                                            
                cmp.w   A2, D7                                                  
                bls.s   Offset_0x002108                                         
                bra     Offset_0x002214                                         
Offset_0x0020BC:
                lsl.w   #$03, D1                                                
                move.w  D1, D6                                                  
                and.w   D4, D6                                                  
                move.b  (A1)+, D6                                               
                suba.l  D6, A6                                                  
                add.b   D1, D1                                                  
                bcs.s   Offset_0x0020D2                                         
                move.b  (A0)+, D1                                               
                add.b   D1, D1                                                  
                bcs.s   Offset_0x0020EA                                         
                bra.s   Offset_0x0020EC                                         
Offset_0x0020D2:
                move.b  (A0)+, D1                                               
                add.b   D1, D1                                                  
                bcc.s   Offset_0x0020E8                                         
                moveq   #$00, D0                                                
                move.b  (A1)+, D0                                               
                beq.s   Offset_0x0020FA                                         
                subq.w  #$06, D0                                                
                bmi.s   Offset_0x002100                                         
Offset_0x0020E2:
                move.b  (A6)+, (A2)+                                            
                dbra    D0, Offset_0x0020E2                                     
Offset_0x0020E8:
                move.b  (A6)+, (A2)+                                            
Offset_0x0020EA:
                move.b  (A6)+, (A2)+                                            
Offset_0x0020EC:
                move.b  (A6)+, (A2)+                                            
                move.b  (A6)+, (A2)+                                            
                move.b  (A6)+, (A2)+                                            
                cmp.w   A2, D7                                                  
                bls.s   Offset_0x002110                                         
                bra     Offset_0x002022                                         
Offset_0x0020FA:
                move.w  #$0000, D0                                              
                rts                                                             
Offset_0x002100:
                move.w  #$FFFF, D0                                              
                moveq   #$07, D2                                                
                rts                                                             
Offset_0x002108:
                move.w  #$0001, D0                                              
                moveq   #$03, D2                                                
                rts                                                             
Offset_0x002110:
                move.w  #$0001, D0                                              
                moveq   #$07, D2                                                
                rts                                                             
Offset_0x002118:
                move.b  (A1)+, (A2)+                                            
Offset_0x00211A:
                add.b   D1, D1                                                  
                bcs.s   Offset_0x002194                                         
                move.l  A2, A6                                                  
                add.b   D1, D1                                                  
                bcs.s   Offset_0x00213A                                         
                move.b  (A1)+, D5                                               
                suba.l  D5, A6                                                  
                add.b   D1, D1                                                  
                bcc.s   Offset_0x00212E                                         
                move.b  (A6)+, (A2)+                                            
Offset_0x00212E:
                move.b  (A6)+, (A2)+                                            
                move.b  (A6)+, (A2)+                                            
                cmp.w   A2, D7                                                  
                bls.s   Offset_0x002184                                         
                bra     Offset_0x002292                                         
Offset_0x00213A:
                lsl.w   #$03, D1                                                
                move.b  (A0)+, D1                                               
                move.w  D1, D6                                                  
                and.w   D4, D6                                                  
                move.b  (A1)+, D6                                               
                suba.l  D6, A6                                                  
                add.b   D1, D1                                                  
                bcs.s   Offset_0x002150                                         
                add.b   D1, D1                                                  
                bcs.s   Offset_0x002166                                         
                bra.s   Offset_0x002168                                         
Offset_0x002150:
                add.b   D1, D1                                                  
                bcc.s   Offset_0x002164                                         
                moveq   #$00, D0                                                
                move.b  (A1)+, D0                                               
                beq.s   Offset_0x002176                                         
                subq.w  #$06, D0                                                
                bmi.s   Offset_0x00217C                                         
Offset_0x00215E:
                move.b  (A6)+, (A2)+                                            
                dbra    D0, Offset_0x00215E                                     
Offset_0x002164:
                move.b  (A6)+, (A2)+                                            
Offset_0x002166:
                move.b  (A6)+, (A2)+                                            
Offset_0x002168:
                move.b  (A6)+, (A2)+                                            
                move.b  (A6)+, (A2)+                                            
                move.b  (A6)+, (A2)+                                            
                cmp.w   A2, D7                                                  
                bls.s   Offset_0x00218C                                         
                bra     Offset_0x00209C                                         
Offset_0x002176:
                move.w  #$0000, D0                                              
                rts                                                             
Offset_0x00217C:
                move.w  #$FFFF, D0                                              
                moveq   #$06, D2                                                
                rts                                                             
Offset_0x002184:
                move.w  #$0001, D0                                              
                moveq   #$02, D2                                                
                rts                                                             
Offset_0x00218C:
                move.w  #$0001, D0                                              
                moveq   #$06, D2                                                
                rts                                                             
Offset_0x002194:
                move.b  (A1)+, (A2)+                                            
Offset_0x002196:
                add.b   D1, D1                                                  
                bcs.s   Offset_0x002212                                         
                move.l  A2, A6                                                  
                add.b   D1, D1                                                  
                bcs.s   Offset_0x0021B6                                         
                move.b  (A1)+, D5                                               
                suba.l  D5, A6                                                  
                add.b   D1, D1                                                  
                bcc.s   Offset_0x0021AA                                         
                move.b  (A6)+, (A2)+                                            
Offset_0x0021AA:
                move.b  (A6)+, (A2)+                                            
                move.b  (A6)+, (A2)+                                            
                cmp.w   A2, D7                                                  
                bls.s   Offset_0x002202                                         
                bra     Offset_0x002310                                         
Offset_0x0021B6:
                lsl.w   #$02, D1                                                
                move.b  (A0)+, D1                                               
                add.w   D1, D1                                                  
                move.w  D1, D6                                                  
                and.w   D4, D6                                                  
                move.b  (A1)+, D6                                               
                suba.l  D6, A6                                                  
                add.b   D1, D1                                                  
                bcs.s   Offset_0x0021CE                                         
                add.b   D1, D1                                                  
                bcs.s   Offset_0x0021E4                                         
                bra.s   Offset_0x0021E6                                         
Offset_0x0021CE:
                add.b   D1, D1                                                  
                bcc.s   Offset_0x0021E2                                         
                moveq   #$00, D0                                                
                move.b  (A1)+, D0                                               
                beq.s   Offset_0x0021F4                                         
                subq.w  #$06, D0                                                
                bmi.s   Offset_0x0021FA                                         
Offset_0x0021DC:
                move.b  (A6)+, (A2)+                                            
                dbra    D0, Offset_0x0021DC                                     
Offset_0x0021E2:
                move.b  (A6)+, (A2)+                                            
Offset_0x0021E4:
                move.b  (A6)+, (A2)+                                            
Offset_0x0021E6:
                move.b  (A6)+, (A2)+                                            
                move.b  (A6)+, (A2)+                                            
                move.b  (A6)+, (A2)+                                            
                cmp.w   A2, D7                                                  
                bls.s   Offset_0x00220A                                         
                bra     Offset_0x00211A                                         
Offset_0x0021F4:
                move.w  #$0000, D0                                              
                rts                                                             
Offset_0x0021FA:
                move.w  #$FFFF, D0                                              
                moveq   #$05, D2                                                
                rts                                                             
Offset_0x002202:
                move.w  #$0001, D0                                              
                moveq   #$01, D2                                                
                rts                                                             
Offset_0x00220A:
                move.w  #$0001, D0                                              
                moveq   #$05, D2                                                
                rts                                                             
Offset_0x002212:
                move.b  (A1)+, (A2)+                                            
Offset_0x002214:
                add.b   D1, D1                                                  
                bcs.s   Offset_0x002290                                         
                move.l  A2, A6                                                  
                add.b   D1, D1                                                  
                bcs.s   Offset_0x002234                                         
                move.b  (A1)+, D5                                               
                suba.l  D5, A6                                                  
                add.b   D1, D1                                                  
                bcc.s   Offset_0x002228                                         
                move.b  (A6)+, (A2)+                                            
Offset_0x002228:
                move.b  (A6)+, (A2)+                                            
                move.b  (A6)+, (A2)+                                            
                cmp.w   A2, D7                                                  
                bls.s   Offset_0x002280                                         
                bra     Offset_0x001FA6                                         
Offset_0x002234:
                add.w   D1, D1                                                  
                move.b  (A0)+, D1                                               
                lsl.w   #$02, D1                                                
                move.w  D1, D6                                                  
                and.w   D4, D6                                                  
                move.b  (A1)+, D6                                               
                suba.l  D6, A6                                                  
                add.b   D1, D1                                                  
                bcs.s   Offset_0x00224C                                         
                add.b   D1, D1                                                  
                bcs.s   Offset_0x002262                                         
                bra.s   Offset_0x002264                                         
Offset_0x00224C:
                add.b   D1, D1                                                  
                bcc.s   Offset_0x002260                                         
                moveq   #$00, D0                                                
                move.b  (A1)+, D0                                               
                beq.s   Offset_0x002272                                         
                subq.w  #$06, D0                                                
                bmi.s   Offset_0x002278                                         
Offset_0x00225A:
                move.b  (A6)+, (A2)+                                            
                dbra    D0, Offset_0x00225A                                     
Offset_0x002260:
                move.b  (A6)+, (A2)+                                            
Offset_0x002262:
                move.b  (A6)+, (A2)+                                            
Offset_0x002264:
                move.b  (A6)+, (A2)+                                            
                move.b  (A6)+, (A2)+                                            
                move.b  (A6)+, (A2)+                                            
                cmp.w   A2, D7                                                  
                bls.s   Offset_0x002288                                         
                bra     Offset_0x002196                                         
Offset_0x002272:
                move.w  #$0000, D0                                              
                rts                                                             
Offset_0x002278:
                move.w  #$FFFF, D0                                              
                moveq   #$04, D2                                                
                rts                                                             
Offset_0x002280:
                move.w  #$0001, D0                                              
                moveq   #$08, D2                                                
                rts                                                             
Offset_0x002288:
                move.w  #$0001, D0                                              
                moveq   #$04, D2                                                
                rts                                                             
Offset_0x002290:
                move.b  (A1)+, (A2)+                                            
Offset_0x002292:
                add.b   D1, D1                                                  
                bcs.s   Offset_0x00230E                                         
                move.l  A2, A6                                                  
                add.b   D1, D1                                                  
                bcs.s   Offset_0x0022B4                                         
                move.b  (A0)+, D1                                               
                move.b  (A1)+, D5                                               
                suba.l  D5, A6                                                  
                add.b   D1, D1                                                  
                bcc.s   Offset_0x0022A8                                         
                move.b  (A6)+, (A2)+                                            
Offset_0x0022A8:
                move.b  (A6)+, (A2)+                                            
                move.b  (A6)+, (A2)+                                            
                cmp.w   A2, D7                                                  
                bls.s   Offset_0x0022FE                                         
                bra     Offset_0x002022                                         
Offset_0x0022B4:
                move.b  (A0)+, D1                                               
                lsl.w   #$03, D1                                                
                move.w  D1, D6                                                  
                and.w   D4, D6                                                  
                move.b  (A1)+, D6                                               
                suba.l  D6, A6                                                  
                add.b   D1, D1                                                  
                bcs.s   Offset_0x0022CA                                         
                add.b   D1, D1                                                  
                bcs.s   Offset_0x0022E0                                         
                bra.s   Offset_0x0022E2                                         
Offset_0x0022CA:
                add.b   D1, D1                                                  
                bcc.s   Offset_0x0022DE                                         
                moveq   #$00, D0                                                
                move.b  (A1)+, D0                                               
                beq.s   Offset_0x0022F0                                         
                subq.w  #$06, D0                                                
                bmi.s   Offset_0x0022F6                                         
Offset_0x0022D8:
                move.b  (A6)+, (A2)+                                            
                dbra    D0, Offset_0x0022D8                                     
Offset_0x0022DE:
                move.b  (A6)+, (A2)+                                            
Offset_0x0022E0:
                move.b  (A6)+, (A2)+                                            
Offset_0x0022E2:
                move.b  (A6)+, (A2)+                                            
                move.b  (A6)+, (A2)+                                            
                move.b  (A6)+, (A2)+                                            
                cmp.w   A2, D7                                                  
                bls.s   Offset_0x002306                                         
                bra     Offset_0x002214                                         
Offset_0x0022F0:
                move.w  #$0000, D0                                              
                rts                                                             
Offset_0x0022F6:
                move.w  #$FFFF, D0                                              
                moveq   #$03, D2                                                
                rts                                                             
Offset_0x0022FE:
                move.w  #$0001, D0                                              
                moveq   #$07, D2                                                
                rts                                                             
Offset_0x002306:
                move.w  #$0001, D0                                              
                moveq   #$03, D2                                                
                rts                                                             
Offset_0x00230E:
                move.b  (A1)+, (A2)+                                            
Offset_0x002310:
                add.b   D1, D1                                                  
                bcs.s   Offset_0x00238A                                         
                move.b  (A0)+, D1                                               
                move.l  A2, A6                                                  
                add.b   D1, D1                                                  
                bcs.s   Offset_0x002332                                         
                move.b  (A1)+, D5                                               
                suba.l  D5, A6                                                  
                add.b   D1, D1                                                  
                bcc.s   Offset_0x002326                                         
                move.b  (A6)+, (A2)+                                            
Offset_0x002326:
                move.b  (A6)+, (A2)+                                            
                move.b  (A6)+, (A2)+                                            
                cmp.w   A2, D7                                                  
                bls.s   Offset_0x00237A                                         
                bra     Offset_0x00209C                                         
Offset_0x002332:
                lsl.w   #$03, D1                                                
                move.w  D1, D6                                                  
                and.w   D4, D6                                                  
                move.b  (A1)+, D6                                               
                suba.l  D6, A6                                                  
                add.b   D1, D1                                                  
                bcs.s   Offset_0x002346                                         
                add.b   D1, D1                                                  
                bcs.s   Offset_0x00235C                                         
                bra.s   Offset_0x00235E                                         
Offset_0x002346:
                add.b   D1, D1                                                  
                bcc.s   Offset_0x00235A                                         
                moveq   #$00, D0                                                
                move.b  (A1)+, D0                                               
                beq.s   Offset_0x00236C                                         
                subq.w  #$06, D0                                                
                bmi.s   Offset_0x002372                                         
Offset_0x002354:
                move.b  (A6)+, (A2)+                                            
                dbra    D0, Offset_0x002354                                     
Offset_0x00235A:
                move.b  (A6)+, (A2)+                                            
Offset_0x00235C:
                move.b  (A6)+, (A2)+                                            
Offset_0x00235E:
                move.b  (A6)+, (A2)+                                            
                move.b  (A6)+, (A2)+                                            
                move.b  (A6)+, (A2)+                                            
                cmp.w   A2, D7                                                  
                bls.s   Offset_0x002382                                         
                bra     Offset_0x002292                                         
Offset_0x00236C:
                move.w  #$0000, D0                                              
                rts                                                             
Offset_0x002372:
                move.w  #$FFFF, D0                                              
                moveq   #$02, D2                                                
                rts                                                             
Offset_0x00237A:
                move.w  #$0001, D0                                              
                moveq   #$06, D2                                                
                rts                                                             
Offset_0x002382:
                move.w  #$0001, D0                                              
                moveq   #$02, D2                                                
                rts                                                             
Offset_0x00238A:
                move.b  (A1)+, (A2)+                                            
                bra     Offset_0x001FA6                                         

;===============================================================================
; Rotina de alternação de paleta de cores
; ->>>
;=============================================================================== 
PalCycle_Load:                                                 ; Offset_0x002390 
                bsr     PalCycle_SuperSonic                    ; Offset_0x002AEC                                         
                moveq   #$00, D2                                                
                moveq   #$00, D0                                                
                move.b  (Level_Id).w, D0                             ; $FFFFFE10
                add.w   D0, D0                                                  
                move.w  PalCycle_Load_List(PC, D0), D0         ; Offset_0x0023A8                     
                jmp     PalCycle_Load_List(PC, D0)             ; Offset_0x0023A8 
                rts
PalCycle_Load_List:                                            ; Offset_0x0023A8 
                dc.w    PalCycle_GHz-PalCycle_Load_List        ; Offset_0x0023CC
                dc.w    PalCycle_Lvl1-PalCycle_Load_List       ; Offset_0x0023CA
                dc.w    PalCycle_Wz-PalCycle_Load_List         ; Offset_0x0023FA
                dc.w    PalCycle_Lvl3-PalCycle_Load_List       ; Offset_0x0023CA
                dc.w    PalCycle_Mz-PalCycle_Load_List         ; Offset_0x00242A
                dc.w    PalCycle_Mz-PalCycle_Load_List         ; Offset_0x00242A
                dc.w    PalCycle_SFz-PalCycle_Load_List        ; Offset_0x002764
                dc.w    PalCycle_HTz-PalCycle_Load_List        ; Offset_0x0024C0
                dc.w    PalCycle_HPz-PalCycle_Load_List        ; Offset_0x002504
                dc.w    PalCycle_Lvl9-PalCycle_Load_List       ; Offset_0x0023CA
                dc.w    PalCycle_OOz-PalCycle_Load_List        ; Offset_0x002546
                dc.w    PalCycle_DHz-PalCycle_Load_List        ; Offset_0x002574
                dc.w    PalCycle_CNz-PalCycle_Load_List        ; Offset_0x00259C
                dc.w    PalCycle_CPz-PalCycle_Load_List        ; Offset_0x0026C4
                dc.w    PalCycle_DEz-PalCycle_Load_List        ; Offset_0x0026C4
                dc.w    PalCycle_NGHz-PalCycle_Load_List       ; Offset_0x002736
                dc.w    PalCycle_SCz-PalCycle_Load_List        ; Offset_0x002764
;-------------------------------------------------------------------------------
; Rotina para as fases sem paleta ciclíca
; ->>>
;-------------------------------------------------------------------------------          
PalCycle_Lvl1:                                                 ; Offset_0x0023CA
PalCycle_Lvl3:
PalCycle_Lvl9:  
                rts   
;-------------------------------------------------------------------------------
; Rotina para as fases sem paleta ciclíca
; <<<-
;-------------------------------------------------------------------------------                                

;-------------------------------------------------------------------------------
; Rotina para as paletas ciclícas da Green Hill
; ->>>
;-------------------------------------------------------------------------------  
PalCycle_GHz:                                                  ; Offset_0x0023CC
                lea     (Pal_GHzCyc), A0                       ; Offset_0x002828                      
                subq.w  #$01, ($FFFFF634).w                                     
                bpl.s   Offset_0x0023F8                                         
                move.w  #$0007, ($FFFFF634).w                                   
                move.w  ($FFFFF632).w, D0                                       
                addq.w  #$01, ($FFFFF632).w                                     
                andi.w  #$0003, D0                                              
                lsl.w   #$03, D0                                                
                move.l  $00(A0, D0), ($FFFFFB26).w                              
                move.l  $04(A0, D0), ($FFFFFB3C).w                              
Offset_0x0023F8:
                rts                                                               
;-------------------------------------------------------------------------------
; Rotina para as paletas ciclícas da Green Hill
; <<<-
;-------------------------------------------------------------------------------  

;-------------------------------------------------------------------------------
; Rotina para as paletas ciclícas da Wood
; ->>>
;-------------------------------------------------------------------------------      
PalCycle_Wz:                                                   ; Offset_0x0023FA
                subq.w  #$01, ($FFFFF634).w                                     
                bpl.s   Offset_0x002428                                         
                move.w  #$0002, ($FFFFF634).w                                   
                lea     (Pal_WzCyc), A0                        ; Offset_0x0028C8                      
                move.w  ($FFFFF632).w, D0                                       
                subq.w  #$02, ($FFFFF632).w                                     
                bcc.s   Offset_0x00241C                                         
                move.w  #$0006, ($FFFFF632).w                                   
Offset_0x00241C:
                lea     ($FFFFFB66).w, A1                                       
                move.l  $00(A0, D0), (A1)+                                      
                move.l  $04(A0, D0), (A1)                                       
Offset_0x002428:
                rts                                                             
;-------------------------------------------------------------------------------
; Rotina para as paletas ciclícas da Wood
; <<<-
;-------------------------------------------------------------------------------  

;-------------------------------------------------------------------------------
; Rotina para as paletas ciclícas da Metropolis
; ->>>
;-------------------------------------------------------------------------------  
PalCycle_Mz:                                                   ; Offset_0x00242A
                subq.w  #$01, ($FFFFF634).w                                     
                bpl.s   Offset_0x00245A                                         
                move.w  #$0011, ($FFFFF634).w                                   
                lea     (Pal_MzCyc1), A0                       ; Offset_0x0028D8                 
                move.w  ($FFFFF632).w, D0                                       
                addq.w  #$02, ($FFFFF632).w                                     
                cmpi.w  #$000C, ($FFFFF632).w                                   
                bcs.s   Offset_0x002452                                         
                move.w  #$0000, ($FFFFF632).w                                   
Offset_0x002452:
                lea     ($FFFFFB4A).w, A1                                       
                move.w  $00(A0, D0), (A1)                                       
Offset_0x00245A:
                subq.w  #$01, ($FFFFF666).w                                     
                bpl.s   Offset_0x00248E                                         
                move.w  #$0002, ($FFFFF666).w                                   
                lea     (Pal_MzCyc2), A0                       ; Offset_0x0028E4                
                move.w  ($FFFFF652).w, D0                                       
                addq.w  #$02, ($FFFFF652).w                                     
                cmpi.w  #$0006, ($FFFFF652).w                                   
                bcs.s   Offset_0x002482                                         
                move.w  #$0000, ($FFFFF652).w                                   
Offset_0x002482:
                lea     ($FFFFFB42).w, A1                                       
                move.l  $00(A0, D0), (A1)+                                      
                move.w  $04(A0, D0), (A1)                                       
Offset_0x00248E:
                subq.w  #$01, ($FFFFF668).w                                     
                bpl.s   Offset_0x0024BE                                         
                move.w  #$0009, ($FFFFF668).w                                   
                lea     (Pal_MzCyc3), A0                       ; Offset_0x0028F0                 
                move.w  ($FFFFF654).w, D0                                       
                addq.w  #$02, ($FFFFF654).w                                     
                cmpi.w  #$0014, ($FFFFF654).w                                   
                bcs.s   Offset_0x0024B6                                         
                move.w  #$0000, ($FFFFF654).w                                   
Offset_0x0024B6:
                lea     ($FFFFFB5E).w, A1                                       
                move.w  $00(A0, D0), (A1)                                       
Offset_0x0024BE:
                rts                                                             
;-------------------------------------------------------------------------------
; Rotina para as paletas ciclícas da Metropolis
; <<<-
;-------------------------------------------------------------------------------

;-------------------------------------------------------------------------------
; Rotina para as paletas ciclícas da Hill Top
; ->>>
;-------------------------------------------------------------------------------
PalCycle_HTz:                                                  ; Offset_0x0024C0  
                lea     (Pal_HTzCyc), A0                       ; Offset_0x002848                     
                subq.w  #$01, ($FFFFF634).w                                     
                bpl.s   Offset_0x0024F2                                         
                move.w  #$0000, ($FFFFF634).w                                   
                move.w  ($FFFFF632).w, D0                                       
                addq.w  #$01, ($FFFFF632).w                                     
                andi.w  #$000F, D0                                              
                move.b  Pal_HTzCyc_Data(PC, D0), ($FFFFF635).w ; Offset_0x0024F4                
                lsl.w   #$03, D0                                                
                move.l  $00(A0, D0), ($FFFFFB26).w                              
                move.l  $04(A0, D0), ($FFFFFB3C).w                              
Offset_0x0024F2:
                rts    
;-------------------------------------------------------------------------------                
Pal_HTzCyc_Data:                                               ; Offset_0x0024F4
                dc.b    $0B, $0B, $0B, $0A, $08, $0A, $0B, $0B
                dc.b    $0B, $0B, $0D, $0F, $0D, $0B, $0B, $0B                                                                    
;-------------------------------------------------------------------------------
; Rotina para as paletas ciclícas da Hill Top
; <<<-
;-------------------------------------------------------------------------------

;-------------------------------------------------------------------------------
; Rotina para as paletas ciclícas da Hidden Palace
; ->>>
;-------------------------------------------------------------------------------
PalCycle_HPz:                                                  ; Offset_0x002504
                subq.w  #$01, ($FFFFF634).w                                     
                bpl.s   Offset_0x002544                                         
                move.w  #$0004, ($FFFFF634).w                                   
                lea     (Pal_HPzCyc1), A0                      ; Offset_0x002904                           
                move.w  ($FFFFF632).w, D0                                       
                subq.w  #$02, ($FFFFF632).w                                     
                bcc.s   Offset_0x002526                                         
                move.w  #$0006, ($FFFFF632).w                                   
Offset_0x002526:
                lea     ($FFFFFB72).w, A1                                       
                move.l  $00(A0, D0), (A1)+                                      
                move.l  $04(A0, D0), (A1)                                       
                lea     (Pal_HPzCyc2), A0                      ; Offset_0x002914                      
                lea     ($FFFFFAF2).w, A1                                       
                move.l  $00(A0, D0), (A1)+                                      
                move.l  $04(A0, D0), (A1)                                       
Offset_0x002544:
                rts                                                             
;-------------------------------------------------------------------------------
; Rotina para as paletas ciclícas da Hidden Palace
; <<<-
;-------------------------------------------------------------------------------

;-------------------------------------------------------------------------------
; Rotina para as paletas ciclícas da Oil Ocean
; ->>>
;-------------------------------------------------------------------------------
PalCycle_OOz:                                                  ; Offset_0x002546    
                subq.w  #$01, ($FFFFF634).w                                     
                bpl.s   Offset_0x002572                                         
                move.w  #$0007, ($FFFFF634).w                                   
                lea     (Pal_OOzCyc), A0                       ; Offset_0x002924                            
                move.w  ($FFFFF632).w, D0                                       
                addq.w  #$02, ($FFFFF632).w                                     
                andi.w  #$0006, ($FFFFF632).w                                   
                lea     ($FFFFFB54).w, A1                                       
                move.l  $00(A0, D0), (A1)+                                      
                move.l  $04(A0, D0), (A1)                                       
Offset_0x002572:
                rts                                                             
;-------------------------------------------------------------------------------
; Rotina para as paletas ciclícas da Oil Ocean
; <<<-
;-------------------------------------------------------------------------------

;-------------------------------------------------------------------------------
; Rotina para as paletas ciclícas da Dust Hill
; ->>>
;-------------------------------------------------------------------------------
PalCycle_DHz:                                                  ; Offset_0x002574   
                subq.w  #$01, ($FFFFF634).w                                     
                bpl.s   Offset_0x00259A                                         
                move.w  #$0001, ($FFFFF634).w                                   
                lea     (Pal_DHzCyc), A0                       ; Offset_0x002934                 
                move.w  ($FFFFF632).w, D0                                       
                addq.w  #$02, ($FFFFF632).w                                     
                andi.w  #$0006, ($FFFFF632).w                                   
                move.w  $00(A0, D0), ($FFFFFB36).w                              
Offset_0x00259A:
                rts                                                             
;-------------------------------------------------------------------------------
; Rotina para as paletas ciclícas da Dust Hill
; <<<-
;-------------------------------------------------------------------------------

;-------------------------------------------------------------------------------
; Rotina para as paletas ciclícas da Casino Night
; ->>>
;-------------------------------------------------------------------------------
PalCycle_CNz:                                                  ; Offset_0x00259C
                subq.w  #$01, ($FFFFF634).w                                     
                bpl     Offset_0x00263A                                         
                move.w  #$0007, ($FFFFF634).w                                   
                lea     (Pal_CNzCyc1), A0                      ; Offset_0x00293C                      
                move.w  ($FFFFF632).w, D0                                       
                addq.w  #$02, ($FFFFF632).w                                     
                cmpi.w  #$0006, ($FFFFF632).w                                   
                bcs.s   Offset_0x0025C6                                         
                move.w  #$0000, ($FFFFF632).w                                   
Offset_0x0025C6:
                lea     $00(A0, D0), A0                                         
                lea     ($FFFFFB00).w, A1                                       
                move.w  $0000(A0), $004A(A1)                                    
                move.w  $0006(A0), $004C(A1)                                    
                move.w  $000C(A0), $004E(A1)                                    
                move.w  $0012(A0), $0056(A1)                                    
                move.w  $0018(A0), $0058(A1)                                    
                move.w  $001E(A0), $005A(A1)                                    
                lea     (Pal_CNzCyc2), A0                      ; Offset_0x002960                            
                lea     $00(A0, D0), A0                                         
                move.w  $0000(A0), $0064(A1)                                    
                move.w  $0006(A0), $0066(A1)                                    
                move.w  $000C(A0), $0068(A1)                                    
                lea     (Pal_CNzCyc3), A0                      ; Offset_0x002972                        
                move.w  ($FFFFF650).w, D0                                       
                addq.w  #$02, ($FFFFF650).w                                     
                cmpi.w  #$0024, ($FFFFF650).w                                   
                bcs.s   Offset_0x00262A                                         
                move.w  #$0000, ($FFFFF650).w                                   
Offset_0x00262A:
                lea     ($FFFFFB72).w, A1                                       
                move.w  $04(A0, D0), (A1)+                                      
                move.w  $02(A0, D0), (A1)+                                      
                move.w  $00(A0, D0), (A1)+                                      
Offset_0x00263A:
                tst.b   (Boss_Flag).w                                ; $FFFFF7AA                                    
                beq     Offset_0x0026C2                                         
                subq.w  #$01, ($FFFFF666).w                                     
                bpl     Offset_0x0026C2                                         
                move.w  #$0003, ($FFFFF666).w                                   
                move.w  ($FFFFF652).w, D0                                       
                addq.w  #$02, ($FFFFF652).w                                     
                cmpi.w  #$0006, ($FFFFF652).w                                   
                bcs.s   Offset_0x002666                                         
                move.w  #$0000, ($FFFFF652).w                                   
Offset_0x002666:
                lea     (Pal_CNzCyc4), A0                      ; Offset_0x00299A                          
                lea     $00(A0, D0), A0                                         
                lea     ($FFFFFB00).w, A1                                       
                move.w  $0000(A0), $0024(A1)                                    
                move.w  $0006(A0), $0026(A1)                                    
                move.w  $000C(A0), $0028(A1)                                    
                lea     (Pal_CNzCyc5), A0                      ; Offset_0x0029AC                      
                move.w  ($FFFFF654).w, D0                                       
                addq.w  #$02, ($FFFFF654).w                                     
                cmpi.w  #$0014, ($FFFFF654).w                                   
                bcs.s   Offset_0x0026A2                                         
                move.w  #$0000, ($FFFFF654).w                                   
Offset_0x0026A2:
                move.w  $00(A0, D0), $003C(A1)                                  
                lea     (Pal_CNzCyc6), A0                      ; Offset_0x0029C0                    
                move.w  ($FFFFF656).w, D0                                       
                addq.w  #$02, ($FFFFF656).w                                     
                andi.w  #$000E, ($FFFFF656).w                                   
                move.w  $00(A0, D0), $003E(A1)                                  
Offset_0x0026C2:
                rts                                                             
;-------------------------------------------------------------------------------
; Rotina para as paletas ciclícas da Casino Night
; <<<-
;-------------------------------------------------------------------------------

;-------------------------------------------------------------------------------
; Rotina para as paletas ciclícas da Chemical Plant / Death Egg
; ->>>
;-------------------------------------------------------------------------------
PalCycle_CPz:                                                  ; Offset_0x0026C4
PalCycle_DEz:
                subq.w  #$01, ($FFFFF634).w                                     
                bpl.s   Offset_0x002734                                         
                move.w  #$0007, ($FFFFF634).w                                   
                lea     (Pal_CPzCyc1), A0                      ; Offset_0x0029D0                     
                move.w  ($FFFFF632).w, D0                                       
                addq.w  #$06, ($FFFFF632).w                                     
                cmpi.w  #$0036, ($FFFFF632).w                                   
                bcs.s   Offset_0x0026EC                                         
                move.w  #$0000, ($FFFFF632).w                                   
Offset_0x0026EC:
                lea     ($FFFFFB78).w, A1                                       
                move.l  $00(A0, D0), (A1)+                                      
                move.w  $04(A0, D0), (A1)                                       
                lea     (Pal_CPzCyc2), A0                      ; Offset_0x002A06                       
                move.w  ($FFFFF652).w, D0                                       
                addq.w  #$02, ($FFFFF652).w                                     
                cmpi.w  #$002A, ($FFFFF652).w                                   
                bcs.s   Offset_0x002714                                         
                move.w  #$0000, ($FFFFF652).w                                   
Offset_0x002714:
                move.w  $00(A0, D0), ($FFFFFB7E).w                              
                lea     (Pal_CPzCyc3), A0                      ; Offset_0x002A30                            
                move.w  ($FFFFF654).w, D0                                       
                addq.w  #$02, ($FFFFF654).w                                     
                andi.w  #$001E, ($FFFFF654).w                                   
                move.w  $00(A0, D0), ($FFFFFB5E).w                              
Offset_0x002734:
                rts                                                             
;-------------------------------------------------------------------------------
; Rotina para as paletas ciclícas da Chemical Plant / Death Egg
; <<<-
;-------------------------------------------------------------------------------

;-------------------------------------------------------------------------------
; Rotina para as paletas ciclícas da Neo Green Hill
; ->>>
;-------------------------------------------------------------------------------
PalCycle_NGHz:                                                 ; Offset_0x002736
                lea     (Pal_NGHzCyc), A0                      ; Offset_0x002828                             
                subq.w  #$01, ($FFFFF634).w                                     
                bpl.s   Offset_0x002762                                         
                move.w  #$0005, ($FFFFF634).w                                   
                move.w  ($FFFFF632).w, D0                                       
                addq.w  #$01, ($FFFFF632).w                                     
                andi.w  #$0003, D0                                              
                lsl.w   #$03, D0                                                
                lea     ($FFFFFB44).w, A1                                       
                move.l  $00(A0, D0), (A1)+                                      
                move.l  $04(A0, D0), (A1)                                       
Offset_0x002762:
                rts                                                             
;-------------------------------------------------------------------------------
; Rotina para as paletas ciclícas da Neo Green Hill
; <<<-
;-------------------------------------------------------------------------------

;-------------------------------------------------------------------------------
; Rotina para as paletas ciclícas da Sky Fortress / Sky Chase
; ->>>
;-------------------------------------------------------------------------------
PalCycle_SFz:                                                  ; Offset_0x002764
PalCycle_SCz:                                                            
                subq.w  #$01, ($FFFFF634).w                                     
                bpl.s   Offset_0x0027AA                                         
                move.w  #$0001, ($FFFFF634).w                                   
                lea     (Pal_SFzCyc1), A0                      ; Offset_0x002A50                         
                tst.b   ($FFFFF72E).w                                           
                beq.s   Offset_0x002788                                         
                move.w  #$0005, ($FFFFF634).w                                   
                lea     (Pal_SFzCyc2), A0                      ; Offset_0x002A70                         
Offset_0x002788:
                move.w  ($FFFFF632).w, D0                                       
                addq.w  #$08, ($FFFFF632).w                                     
                cmpi.w  #$0020, ($FFFFF632).w                                   
                bcs.s   Offset_0x00279E                                         
                move.w  #$0000, ($FFFFF632).w                                   
Offset_0x00279E:
                lea     ($FFFFFB4E).w, A1                                       
                move.l  $00(A0, D0), (A1)+                                      
                move.l  $04(A0, D0), (A1)                                       
Offset_0x0027AA:
                subq.w  #$01, ($FFFFF666).w                                     
                bpl.s   Offset_0x0027D8                                         
                move.w  #$0003, ($FFFFF666).w                                   
                lea     (Pal_SFzCyc3), A0                      ; Offset_0x002A90                     
                move.w  ($FFFFF652).w, D0                                       
                addq.w  #$02, ($FFFFF652).w                                     
                cmpi.w  #$0044, ($FFFFF652).w                                   
                bcs.s   Offset_0x0027D2                                         
                move.w  #$0000, ($FFFFF652).w                                   
Offset_0x0027D2:
                move.w  $00(A0, D0), ($FFFFFB5C).w                              
Offset_0x0027D8:
                subq.w  #$01, ($FFFFF668).w                                     
                bpl.s   Offset_0x002806                                         
                move.w  #$0005, ($FFFFF668).w                                   
                lea     (Pal_SFzCyc4), A0                      ; Offset_0x002AD4                       
                move.w  ($FFFFF654).w, D0                                       
                addq.w  #$02, ($FFFFF654).w                                     
                cmpi.w  #$0018, ($FFFFF654).w                                   
                bcs.s   Offset_0x002800                                         
                move.w  #$0000, ($FFFFF654).w                                   
Offset_0x002800:
                move.w  $00(A0, D0), ($FFFFFB5E).w                              
Offset_0x002806:
                rts                                                             
;-------------------------------------------------------------------------------
; Rotina para as paletas ciclícas da Sky Fortress / Sky Chase
; <<<-
;-------------------------------------------------------------------------------
; Pal_S1_Title_Screen: ; Left over                             ; Offset_0x002808
                dc.w    $0C42, $0E86, $0ECA, $0EEC, $0EEC, $0C42, $0E86, $0ECA
                dc.w    $0ECA, $0EEC, $0C42, $0E86, $0E86, $0ECA, $0EEC, $0C42
;-------------------------------------------------------------------------------                
Pal_GHzCyc:                                                    ; Offset_0x002828
Pal_NGHzCyc:                                                                      
                dc.w    $0A86, $0E86, $0EA8, $0ECA, $0ECA, $0A86, $0E86, $0EA8
                dc.w    $0EA8, $0ECA, $0A86, $0E86, $0E86, $0EA8, $0ECA, $0A86
;-------------------------------------------------------------------------------                
Pal_HTzCyc:                                                    ; Offset_0x002848
                dc.w    $000E, $006E, $00AE, $00EE, $00EE, $000E, $006E, $00AE
                dc.w    $02CE, $00EE, $000E, $006E, $006E, $04EE, $08EE, $002E
                dc.w    $004E, $008E, $06EE, $0AEE, $08EE, $002E, $006E, $04EE
                dc.w    $02CE, $00EE, $000E, $006E, $006E, $02CE, $00EE, $000E
                dc.w    $000E, $006E, $00AE, $00EE, $00CE, $000C, $004E, $008E
                dc.w    $006E, $00AC, $000A, $002E, $000C, $004C, $008E, $0008
                dc.w    $000A, $002E, $006E, $00AC, $00CE, $000C, $004E, $008E
                dc.w    $00AE, $00EE, $000E, $006E, $006E, $00AE, $00EE, $000E 
;-------------------------------------------------------------------------------  
Pal_WzCyc:                                                     ; Offset_0x0028C8
                dc.w    $0248, $046A, $048C, $06CE, $0248, $046A, $048C, $06CE
;------------------------------------------------------------------------------- 
Pal_MzCyc1:                                                    ; Offset_0x0028D8
                dc.w    $0006, $0008, $000A, $000C, $000A, $0008 
;------------------------------------------------------------------------------- 
Pal_MzCyc2:                                                    ; Offset_0x0028E4
                dc.w    $0422, $0866, $0ECC, $0422, $0866, $0ECC  
;------------------------------------------------------------------------------- 
Pal_MzCyc3:                                                    ; Offset_0x0028F0
                dc.w    $00A0, $0000, $00EE, $0000, $002E, $0000, $0E2E, $0000
                dc.w    $0E80, $0000 
;------------------------------------------------------------------------------- 
Pal_HPzCyc1:                                                   ; Offset_0x002904
                dc.w    $0E44, $0E82, $0EA8, $0EEE, $0E44, $0E82, $0EA8, $0EEE 
;------------------------------------------------------------------------------- 
Pal_HPzCyc2:                                                   ; Offset_0x002914
                dc.w    $0E84, $0EA6, $0EC6, $0EE6, $0E84, $0EA6, $0EC6, $0EE6
;------------------------------------------------------------------------------- 
Pal_OOzCyc:                                                    ; Offset_0x002924 
                dc.w    $0400, $0602, $0804, $0806, $0400, $0602, $0804, $0806 
;-------------------------------------------------------------------------------  
Pal_DHzCyc:                                                    ; Offset_0x002934
                dc.w    $000C, $006E, $00CE, $08EE  
;-------------------------------------------------------------------------------   
Pal_CNzCyc1:                                                   ; Offset_0x00293C 
                dc.w    $000E, $00EE, $006E, $006E, $000E, $00EE, $00EE, $006E
                dc.w    $000E, $00EC, $0080, $00C4, $00C4, $00EC, $0080, $0080
                dc.w    $00C4, $00EC  
;-------------------------------------------------------------------------------  
Pal_CNzCyc2:                                                   ; Offset_0x002960
                dc.w    $0C06, $0C0A, $0C2E, $0C0A, $0C2E, $0C06, $0C2E, $0C06
                dc.w    $0C0A 
;------------------------------------------------------------------------------- 
Pal_CNzCyc3:                                                   ; Offset_0x002972  
                dc.w    $008E, $00AE, $00EC, $0EEE, $00EA, $00E4, $06C0, $0CC4
                dc.w    $0E80, $0E40, $0E04, $0C08, $0C2E, $080E, $040E, $000E
                dc.w    $004E, $006E, $008E, $00AE
;------------------------------------------------------------------------------- 
Pal_CNzCyc4:                                                   ; Offset_0x00299A    
                dc.w    $006E, $00AE, $00EE, $00AE, $00EE, $006E, $00EE, $006E
                dc.w    $00AE
;-------------------------------------------------------------------------------  
Pal_CNzCyc5:                                                   ; Offset_0x0029AC    
                dc.w    $0A0E, $0C0C, $0EA0, $00AE, $00EA, $0AE0, $00EA, $00AE
                dc.w    $0EA0, $0C0C
;-------------------------------------------------------------------------------  
Pal_CNzCyc6:                                                   ; Offset_0x0029C0    
                dc.w    $000E, $000C, $000A, $0008, $0006, $0008, $000A, $000C
;-------------------------------------------------------------------------------   
Pal_CPzCyc1:                                                   ; Offset_0x0029D0 
                dc.w    $0E40, $0C00, $0C00, $0E60, $0C20, $0C00, $0E40, $0E40
                dc.w    $0C00, $0C20, $0E60, $0C20, $0C00, $0E40, $0C40, $0C00
                dc.w    $0C20, $0E40, $0C00, $0C00, $0E60, $0C20, $0C00, $0E40
                dc.w    $0E20, $0C00, $0C20
;------------------------------------------------------------------------------- 
Pal_CPzCyc2:                                                   ; Offset_0x002A06   
                dc.w    $00E0, $00C2, $00A4, $0086, $0068, $004A, $002C, $000E
                dc.w    $020C, $040A, $0608, $0806, $0A04, $0C02, $0E00, $0C20
                dc.w    $0A40, $0860, $0680, $04A0, $02C0
;------------------------------------------------------------------------------- 
Pal_CPzCyc3:                                                   ; Offset_0x002A30   
                dc.w    $000E, $000C, $000A, $0008, $0006, $0004, $0002, $0004
                dc.w    $0006, $0008, $000A, $000C, $000E, $002E, $004E, $002E
;------------------------------------------------------------------------------- 
Pal_SFzCyc1:                                                   ; Offset_0x002A50  
                dc.w    $04EE, $02AE, $006E, $002C, $0EEE, $04EE, $02AE, $006E
                dc.w    $04EE, $02AE, $006E, $002C, $02AE, $006E, $002C, $0028
;------------------------------------------------------------------------------- 
Pal_SFzCyc2:                                                   ; Offset_0x002A70  
                dc.w    $0000, $0444, $0444, $0444, $0444, $0000, $0444, $0444
                dc.w    $0444, $0444, $0000, $0444, $0444, $0444, $0444, $0000
;------------------------------------------------------------------------------- 
Pal_SFzCyc3:                                                   ; Offset_0x002A90  
                dc.w    $00E0, $00A0, $0060, $0020, $0000, $0200, $0600, $0A20
                dc.w    $0E60, $0A20, $0600, $0200, $0000, $0002, $0006, $000A
                dc.w    $000E, $004E, $000E, $000A, $0006, $0002, $0000, $0022
                dc.w    $0066, $00AA, $00EE, $00AA, $0066, $0022, $0000, $0020
                dc.w    $0060, $00A0
;------------------------------------------------------------------------------- 
Pal_SFzCyc4:                                                   ; Offset_0x002AD4   
                dc.w    $0EC0, $0000, $0E0E, $0000, $00EE, $0000, $00E0, $0000
                dc.w    $008E, $0000, $0EEE, $0000
;-------------------------------------------------------------------------------
; Rotina para as paletas ciclícas do Super Sonic
; ->>>
;-------------------------------------------------------------------------------
PalCycle_SuperSonic:                                           ; Offset_0x002AEC   
                tst.b   ($FFFFF65F).w                                           
                beq.s   Offset_0x002B2E                                         
                bmi.s   Offset_0x002B30                                         
                subq.b  #$01, ($FFFFF65E).w                                     
                bpl.s   Offset_0x002B2E                                         
                move.b  #$03, ($FFFFF65E).w                                     
                lea     (Pal_SuperSonic_Cyc), A0               ; Offset_0x002B66                     
                move.w  ($FFFFF65C).w, D0                                       
                addq.w  #$08, ($FFFFF65C).w                                     
                cmpi.w  #$0030, ($FFFFF65C).w                                   
                bcs.s   Offset_0x002B22                                         
                move.b  #$FF, ($FFFFF65F).w                                     
                move.b  #$00, ($FFFFB02A).w                                     
Offset_0x002B22:
                lea     ($FFFFFB04).w, A1                                       
                move.l  $00(A0, D0), (A1)+                                      
                move.l  $04(A0, D0), (A1)                                       
Offset_0x002B2E:
                rts                                                             
Offset_0x002B30:
                subq.b  #$01, ($FFFFF65E).w                                     
                bpl.s   Offset_0x002B2E                                         
                move.b  #$07, ($FFFFF65E).w                                     
                lea     (Pal_SuperSonic_Cyc), A0               ; Offset_0x002B66                    
                move.w  ($FFFFF65C).w, D0                                       
                addq.w  #$08, ($FFFFF65C).w                                     
                cmpi.w  #$0078, ($FFFFF65C).w                                   
                bcs.s   Offset_0x002B58                                         
                move.w  #$0030, ($FFFFF65C).w                                   
Offset_0x002B58:
                lea     ($FFFFFB04).w, A1                                       
                move.l  $00(A0, D0), (A1)+                                      
                move.l  $04(A0, D0), (A1)                                       
                rts 
;-------------------------------------------------------------------------------                
Pal_SuperSonic_Cyc:                                            ; Offset_0x002B66
                dc.w    $0A22, $0C42, $0E44, $0E66, $0844, $0A64, $0E66, $0E88
                dc.w    $0666, $0A86, $0E88, $0EAA, $0488, $0AA8, $0EAA, $0ECC
                dc.w    $04AA, $0ACA, $0ECC, $0EEE, $04CC, $0AEC, $0EEE, $0EEE
                dc.w    $04EE, $0AEE, $0EEE, $0EEE, $06EE, $0EEE, $0EEE, $0EEE
                dc.w    $08EE, $0EEE, $0EEE, $0EEE, $06EE, $0CEE, $0EEE, $0EEE
                dc.w    $04EE, $0AEE, $0EEE, $0EEE, $02EE, $08EE, $0CEE, $0EEE
                dc.w    $00EE, $06EE, $0AEE, $0EEE, $00EE, $04EE, $08EE, $0CEE
                dc.w    $00EE, $06EE, $0AEE, $0EEE, $00EE, $08EE, $0CEE, $0EEE                                                                            
;-------------------------------------------------------------------------------
; Rotina para as paletas ciclícas do Super Sonic
; <<<-
;-------------------------------------------------------------------------------
    
;===============================================================================
; Rotina de alternação de paleta de cores
; <<<-
;=============================================================================== 

;===============================================================================
; Rotinas para escurecer / clarear a tela progressivamente
; ->>>
;=============================================================================== 
Pal_FadeTo:                                                    ; Offset_0x002BE6
                move.w  #$003F, ($FFFFF626).w
Pal_FadeTo_2:                                                  ; Offset_0x002BEC
                moveq   #$00, D0                                                
                lea     (Palette_Buffer).w, A0                       ; $FFFFFB00
                move.b  ($FFFFF626).w, D0                                       
                adda.w  D0, A0                                                  
                moveq   #$00, D1                                                
                move.b  ($FFFFF627).w, D0                                       
Offset_0x002BFE:
                move.w  D1, (A0)+                                               
                dbra    D0, Offset_0x002BFE                                     
                move.w  #$0015, D4                                              
Pal_FadeTo_Loop:                                               ; Offset_0x002C08
                move.b  #$12, (VBlank_Index).w                       ; $FFFFF62A
                bsr     Wait_For_VSync                         ; Offset_0x003938
                bsr.s   Pal_FadeIn                             ; Offset_0x002C1E
                bsr     RunPLC                                 ; Offset_0x001C20
                dbra    D4, Pal_FadeTo_Loop                    ; Offset_0x002C08                                     
                rts    
;-------------------------------------------------------------------------------                                                                         
Pal_FadeIn:                                                    ; Offset_0x002C1E
                moveq   #$00, D0                                                
                lea     (Palette_Buffer).w, A0                       ; $FFFFFB00
                lea     (Palette_Underwater_Buffer).w, A1            ; $FFFFFB80
                move.b  ($FFFFF626).w, D0                                       
                adda.w  D0, A0                                                  
                adda.w  D0, A1                                                  
                move.b  ($FFFFF627).w, D0                                       
Offset_0x002C34:
                bsr.s   Pal_AddColor                           ; Offset_0x002C5E                                         
                dbra    D0, Offset_0x002C34                                     
                tst.b   (Water_Level_Flag).w                         ; $FFFFF730
                beq.s   Offset_0x002C5C                                         
                moveq   #$00, D0                                                
                lea     ($FFFFFA80).w, A0                                       
                lea     ($FFFFFA00).w, A1                                       
                move.b  ($FFFFF626).w, D0                                       
                adda.w  D0, A0                                                  
                adda.w  D0, A1                                                  
                move.b  ($FFFFF627).w, D0                                       
Offset_0x002C56:
                bsr.s   Pal_AddColor                           ; Offset_0x002C5E                                         
                dbra    D0, Offset_0x002C56                                     
Offset_0x002C5C:
                rts   
;-------------------------------------------------------------------------------                                                                            
Pal_AddColor:                                                  ; Offset_0x002C5E
                move.w  (A1)+, D2                                               
                move.w  (A0), D3                                                
                cmp.w   D2, D3                                                  
                beq.s   Pal_NoAdd                              ; Offset_0x002C86   
Pal_AddBlue:                                                      
                move.w  D3, D1                                                  
                addi.w  #$0200, D1                                              
                cmp.w   D2, D1                                                  
                bhi.s   Pal_AddGreen                           ; Offset_0x002C74                                         
                move.w  D1, (A0)+                                               
                rts                                                             
Pal_AddGreen:                                                  ; Offset_0x002C74
                move.w  D3, D1                                                  
                addi.w  #$0020, D1                                              
                cmp.w   D2, D1                                                  
                bhi.s   Pal_AddRed                             ; Offset_0x002C82                                         
                move.w  D1, (A0)+                                               
                rts                                                             
Pal_AddRed:                                                    ; Offset_0x002C82
                addq.w  #$02, (A0)+                                             
                rts                                                             
Pal_NoAdd:                                                     ; Offset_0x002C86
                addq.w  #$02, A0                                                
                rts                                                             
;-------------------------------------------------------------------------------
Pal_FadeFrom:                                                  ; Offset_0x002C8A      
                move.w  #$003F, ($FFFFF626).w                                   
                move.w  #$0015, D4                                              
Pal_FadeFrom_Loop:                                             ; Offset_0x002C94
                move.b  #$12, (VBlank_Index).w                       ; $FFFFF62A
                bsr     Wait_For_VSync                         ; Offset_0x003938
                bsr.s   Pal_FadeOut                            ; Offset_0x002CAA
                bsr     RunPLC                                 ; Offset_0x001C20
                dbra    D4, Pal_FadeFrom_Loop                  ; Offset_0x002C94                                     
                rts  
;-------------------------------------------------------------------------------                
Pal_FadeOut:                                                   ; Offset_0x002CAA
                moveq   #$00, D0                                                
                lea     (Palette_Buffer).w, A0                       ; $FFFFFB00
                move.b  ($FFFFF626).w, D0                                       
                adda.w  D0, A0                                                  
                move.b  ($FFFFF627).w, D0                                       
Offset_0x002CBA:
                bsr.s   Pal_DecColor                           ; Offset_0x002CD8                                         
                dbra    D0, Offset_0x002CBA                                     
                moveq   #$00, D0                                                
                lea     ($FFFFFA80).w, A0                                       
                move.b  ($FFFFF626).w, D0                                       
                adda.w  D0, A0                                                  
                move.b  ($FFFFF627).w, D0                                       
Offset_0x002CD0:
                bsr.s   Pal_DecColor                           ; Offset_0x002CD8                                         
                dbra    D0, Offset_0x002CD0                                     
                rts  
;-------------------------------------------------------------------------------                                                                            
Pal_DecColor:                                                  ; Offset_0x002CD8
                move.w  (A0), D2                                                
                beq.s   Pal_NoDec                              ; Offset_0x002D04    
Pal_DecRed:                                                     
                move.w  D2, D1                                                  
                andi.w  #$000E, D1                                              
                beq.s   Pal_DecGreen                           ; Offset_0x002CE8                                         
                subq.w  #$02, (A0)+                                             
                rts                                                             
Pal_DecGreen:                                                  ; Offset_0x002CE8
                move.w  D2, D1                                                  
                andi.w  #$00E0, D1                                              
                beq.s   Pal_DecBlue                            ; Offset_0x002CF6                                         
                subi.w  #$0020, (A0)+                                           
                rts                                                             
Pal_DecBlue:                                                   ; Offset_0x002CF6
                move.w  D2, D1                                                  
                andi.w  #$0E00, D1                                              
                beq.s   Pal_NoDec                              ; Offset_0x002D04                                         
                subi.w  #$0200, (A0)+                                           
                rts                                                             
Pal_NoDec:                                                     ; Offset_0x002D04
                addq.w  #$02, A0                                                
                rts   
;------------------------------------------------------------------------------- 
Pal_MakeWhite: ; Usado pelo Special Stage                      ; Offset_0x002D08
                move.w  #$003F, ($FFFFF626).w                                   
                moveq   #$00, D0                                                
                lea     (Palette_Buffer).w, A0                       ; $FFFFFB00
                move.b  ($FFFFF626).w, D0                                       
                adda.w  D0, A0                                                  
                move.w  #$0EEE, D1                                              
                move.b  ($FFFFF627).w, D0                                       
Offset_0x002D22:
                move.w  D1, (A0)+                                               
                dbra    D0, Offset_0x002D22                                     
                move.w  #$0015, D4                                              
Offset_0x002D2C:
                move.b  #$12, (VBlank_Index).w                       ; $FFFFF62A
                bsr     Wait_For_VSync                         ; Offset_0x003938
                bsr.s   Pal_WhiteToBlack                       ; Offset_0x002D42                                         
                bsr     RunPLC                                 ; Offset_0x001C20
                dbra    D4, Offset_0x002D2C                                     
                rts   
;-------------------------------------------------------------------------------                                                                           
Pal_WhiteToBlack:                                              ; Offset_0x002D42
                moveq   #$00, D0                                                
                lea     (Palette_Buffer).w, A0                       ; $FFFFFB00
                lea     (Palette_Underwater_Buffer).w, A1            ; $FFFFFB80
                move.b  ($FFFFF626).w, D0                                       
                adda.w  D0, A0                                                  
                adda.w  D0, A1                                                  
                move.b  ($FFFFF627).w, D0                                       
Offset_0x002D58:
                bsr.s   Pal_DecColor_2                         ; Offset_0x002D82                                         
                dbra    D0, Offset_0x002D58                                     
                tst.b   (Water_Level_Flag).w                         ; $FFFFF730
                beq.s   Offset_0x002D80                                         
                moveq   #$00, D0                                                
                lea     ($FFFFFA80).w, A0                                       
                lea     ($FFFFFA00).w, A1                                       
                move.b  ($FFFFF626).w, D0                                       
                adda.w  D0, A0                                                  
                adda.w  D0, A1                                                  
                move.b  ($FFFFF627).w, D0                                       
Offset_0x002D7A:
                bsr.s   Pal_DecColor_2                         ; Offset_0x002D82                                         
                dbra    D0, Offset_0x002D7A                                     
Offset_0x002D80:
                rts                                                             
;-------------------------------------------------------------------------------  
Pal_DecColor_2:                                                ; Offset_0x002D82
                move.w  (A1)+, D2                                               
                move.w  (A0), D3                                                
                cmp.w   D2, D3                                                  
                beq.s   Pal_NoDec_2                            ; Offset_0x002DAE 
Pal_DecBlue_2:                                                        
                move.w  D3, D1                                                  
                subi.w  #$0200, D1                                              
                bcs.s   Pal_DecGreen_2                         ; Offset_0x002D9A                                         
                cmp.w   D2, D1                                                  
                bcs.s   Pal_DecGreen_2                         ; Offset_0x002D9A                                         
                move.w  D1, (A0)+                                               
                rts                                                             
Pal_DecGreen_2:                                                ; Offset_0x002D9A
                move.w  D3, D1                                                  
                subi.w  #$0020, D1                                              
                bcs.s   Pal_DecRed_2                           ; Offset_0x002DAA                                         
                cmp.w   D2, D1                                                  
                bcs.s   Pal_DecRed_2                           ; Offset_0x002DAA                                         
                move.w  D1, (A0)+                                               
                rts                                                             
Pal_DecRed_2:                                                  ; Offset_0x002DAA
                subq.w  #$02, (A0)+                                             
                rts                                                             
Pal_NoDec_2:                                                   ; Offset_0x002DAE
                addq.w  #$02, A0                                                
                rts                                                                                                                                   
;-------------------------------------------------------------------------------  
Pal_MakeFlash:  ; Usado pelo Special Stage                     ; Offset_0x002DB2
                move.w  #$003F, ($FFFFF626).w                                   
                move.w  #$0015, D4                                              
Offset_0x002DBC:
                move.b  #$12, (VBlank_Index).w                       ; $FFFFF62A
                bsr     Wait_For_VSync                         ; Offset_0x003938
                bsr.s   Pal_ToWhite                            ; Offset_0x002DD2                                         
                bsr     RunPLC                                 ; Offset_0x001C20
                dbra    D4, Offset_0x002DBC                                     
                rts                                                             
Pal_ToWhite:                                                   ; Offset_0x002DD2
                moveq   #$00, D0                                                
                lea     (Palette_Buffer).w, A0                       ; $FFFFFB00
                move.b  ($FFFFF626).w, D0                                       
                adda.w  D0, A0                                                  
                move.b  ($FFFFF627).w, D0                                       
Offset_0x002DE2:
                bsr.s   Pal_AddColor_2                         ; Offset_0x002E00                                         
                dbra    D0, Offset_0x002DE2                                     
                moveq   #$00, D0                                                
                lea     ($FFFFFA80).w, A0                                       
                move.b  ($FFFFF626).w, D0                                       
                adda.w  D0, A0                                                  
                move.b  ($FFFFF627).w, D0                                       
Offset_0x002DF8:
                bsr.s   Pal_AddColor_2                         ; Offset_0x002E00                                         
                dbra    D0, Offset_0x002DF8                                     
                rts   
;-------------------------------------------------------------------------------                                                                          
; Usado pelo objeto 0xC7 - Chefe final na Death Egg (Robo gigante)
Pal_AddColor_2:                                                ; Offset_0x002E00
                move.w  (A0), D2                                                
                cmpi.w  #$0EEE, D2                                              
                beq.s   Pal_NoAdd_2                            ; Offset_0x002E3C   
Pal_AddRed_2:                                                      
                move.w  D2, D1                                                  
                andi.w  #$000E, D1                                              
                cmpi.w  #$000E, D1                                              
                beq.s   Pal_AddGreen_2                         ; Offset_0x002E18                                         
                addq.w  #$02, (A0)+                                             
                rts                                                             
Pal_AddGreen_2:                                                ; Offset_0x002E18
                move.w  D2, D1                                                  
                andi.w  #$00E0, D1                                              
                cmpi.w  #$00E0, D1                                              
                beq.s   Pal_AddBlue_2                          ; Offset_0x002E2A                                         
                addi.w  #$0020, (A0)+                                           
                rts                                                             
Pal_AddBlue_2:                                                 ; Offset_0x002E2A
                move.w  D2, D1                                                  
                andi.w  #$0E00, D1                                              
                cmpi.w  #$0E00, D1                                              
                beq.s   Pal_NoAdd_2                            ; Offset_0x002E3C                                         
                addi.w  #$0200, (A0)+                                           
                rts                                                             
Pal_NoAdd_2:                                                   ; Offset_0x002E3C
                addq.w  #$02, A0                                                
                rts                                                                           
;===============================================================================
; Rotinas para escurecer / clarear a tela progressivamente
; <<<-
;=============================================================================== 

;-------------------------------------------------------------------------------  
; Paleta ciclíca do logo da SEGA usado no Sonic 1
; Left over
; ->>>
;-------------------------------------------------------------------------------  
; PalCycle_Sega:                                               ; Offset_0x002E40
                tst.b   ($FFFFF635).w                                           
                bne.s   Offset_0x002EA0                                         
                lea     ($FFFFFB20).w, A1                                       
                lea     (Pal_SegaCyc1), A0                     ; Offset_0x002EF6                        
                moveq   #$05, D1                                                
                move.w  ($FFFFF632).w, D0                                       
Offset_0x002E56:
                bpl.s   Offset_0x002E60                                         
                addq.w  #$02, A0                                                
                subq.w  #$01, D1                                                
                addq.w  #$02, D0                                                
                bra.s   Offset_0x002E56                                         
Offset_0x002E60:
                move.w  D0, D2                                                  
                andi.w  #$001E, D2                                              
                bne.s   Offset_0x002E6A                                         
                addq.w  #$02, D0                                                
Offset_0x002E6A:
                cmpi.w  #$0060, D0                                              
                bcc.s   Offset_0x002E74                                         
                move.w  (A0)+, $00(A1, D0)                                      
Offset_0x002E74:
                addq.w  #$02, D0                                                
                dbra    D1, Offset_0x002E60                                     
                move.w  ($FFFFF632).w, D0                                       
                addq.w  #$02, D0                                                
                move.w  D0, D2                                                  
                andi.w  #$001E, D2                                              
                bne.s   Offset_0x002E8A                                         
                addq.w  #$02, D0                                                
Offset_0x002E8A:
                cmpi.w  #$0064, D0                                              
                blt.s   Offset_0x002E98                                         
                move.w  #$0401, ($FFFFF634).w                                   
                moveq   #-$0C, D0                                               
Offset_0x002E98:
                move.w  D0, ($FFFFF632).w                                       
                moveq   #$01, D0                                                
                rts                                                             
Offset_0x002EA0:
                subq.b  #$01, ($FFFFF634).w                                     
                bpl.s   Offset_0x002EF2                                         
                move.b  #$04, ($FFFFF634).w                                     
                move.w  ($FFFFF632).w, D0                                       
                addi.w  #$000C, D0                                              
                cmpi.w  #$0030, D0                                              
                bcs.s   Offset_0x002EBE                                         
                moveq   #$00, D0                                                
                rts                                                             
Offset_0x002EBE:
                move.w  D0, ($FFFFF632).w                                       
                lea     (Pal_SegaCyc2), A0                     ; Offset_0x002F02                        
                lea     $00(A0, D0), A0                                         
                lea     ($FFFFFB04).w, A1                                       
                move.l  (A0)+, (A1)+                                            
                move.l  (A0)+, (A1)+                                            
                move.w  (A0)+, (A1)                                             
                lea     ($FFFFFB20).w, A1                                       
                moveq   #$00, D0                                                
                moveq   #$2C, D1                                                
Offset_0x002EDE:
                move.w  D0, D2                                                  
                andi.w  #$001E, D2                                              
                bne.s   Offset_0x002EE8                                         
                addq.w  #$02, D0                                                
Offset_0x002EE8:
                move.w  (A0), $00(A1, D0)                                       
                addq.w  #$02, D0                                                
                dbra    D1, Offset_0x002EDE                                     
Offset_0x002EF2:
                moveq   #$01, D0                                                
                rts 
;-------------------------------------------------------------------------------
Pal_SegaCyc1:                                                  ; Offset_0x002EF6                  
                dc.w    $0EEE, $0EEA, $0EE4, $0EC0, $0EE4, $0EEA
;-------------------------------------------------------------------------------
Pal_SegaCyc2:                                                  ; Offset_0x002F02  
                dc.w    $0EEC, $0EEA, $0EEA, $0EEA, $0EEA, $0EEA, $0EEC, $0EEA
                dc.w    $0EE4, $0EC0, $0EC0, $0EC0, $0EEC, $0EEA, $0EE4, $0EC0
                dc.w    $0EA0, $0E60, $0EEA, $0EE4, $0EC0, $0EA0, $0E80, $0E00               
;-------------------------------------------------------------------------------  
; Paleta ciclíca do logo da SEGA usado no Sonic 1
; Left over
; <<<-
;-------------------------------------------------------------------------------
                                                                             
;===============================================================================
; Rotinas para carga da paleta selecionada em D0 no buffer de paletas
; ->>>
;===============================================================================  
PalLoad1:                                                      ; Offset_0x002F32
                lea     (PalPointers), A1                      ; Offset_0x002F9E
                lsl.w   #$03, D0                                                
                adda.w  D0, A1                                                  
                move.l  (A1)+, A2               ; Localização da paleta no ROM                            
                move.w  (A1)+, A3               ; Destino da paleta na RAM                                
                adda.w  #$0080, A3              ; Adiciona $80 no Destino da RAM                                
                move.w  (A1)+, D7               ; Quantidade de cores a ser lido                                
PalLoad1_Loop:                                                 ; Offset_0x002F46
                move.l  (A2)+, (A3)+                                            
                dbra    D7, PalLoad1_Loop                      ; Offset_0x002F46                                     
                rts    
;-------------------------------------------------------------------------------    
PalLoad2:                                                      ; Offset_0x002F4E
                lea     (PalPointers), A1                      ; Offset_0x002F9E
                lsl.w   #$03, D0                                                
                adda.w  D0, A1                                                  
                move.l  (A1)+, A2               ; Localização da paleta no ROM                              
                move.w  (A1)+, A3               ; Destino da paleta na RAM                              
                move.w  (A1)+, D7               ; Quantidade de cores a ser lido                                   
PalLoad2_Loop:                                                 ; Offset_0x002F5E
                move.l  (A2)+, (A3)+                                            
                dbra    D7, PalLoad2_Loop                      ; Offset_0x002F5E                                     
                rts    
;-------------------------------------------------------------------------------  
PalLoad3_Water:                                                ; Offset_0x002F66
                lea     (PalPointers), A1                      ; Offset_0x002F9E
                lsl.w   #$03, D0                                                
                adda.w  D0, A1                                                  
                move.l  (A1)+, A2                                               
                move.w  (A1)+, A3                                               
                suba.w  #$0080, A3             ; Subtrai $0080 no Destino da RAM                                    
                move.w  (A1)+, D7                                               
Offset_0x002F7A:
                move.l  (A2)+, (A3)+                                            
                dbra    D7, Offset_0x002F7A                                     
                rts   
;-------------------------------------------------------------------------------
PalLoad4_Water:                                                ; Offset_0x002F82  
                lea     (PalPointers), A1                      ; Offset_0x002F9E
                lsl.w   #$03, D0                                                
                adda.w  D0, A1                                                  
                move.l  (A1)+, A2                                               
                move.w  (A1)+, A3                                               
                suba.w  #$0100, A3             ; Subtrai $0100 no Destino da RAM                                   
                move.w  (A1)+, D7                                               
Offset_0x002F96:
                move.l  (A2)+, (A3)+                                            
                dbra    D7, Offset_0x002F96                                     
                rts   
;-------------------------------------------------------------------------------  
PalPointers:                                                   ; Offset_0x002F9E    
                dc.l    Pal_Sega_Bg                            ; Offset_0x003076
                dc.w    $FB00, $001F
                dc.l    Pal_Title_Screen                       ; Offset_0x0030F6
                dc.w    $FB00, $001F
                dc.l    Pal_Level_Select_Menu                  ; Offset_0x003176
                dc.w    $FB00, $001F
                dc.l    Pal_Sonic_And_Miles                    ; Offset_0x0031F6
                dc.w    $FB00, $0007
                dc.l    Pal_GHz                                ; Offset_0x003216
                dc.w    $FB20, $0017
                dc.l    Pal_Lvl1                               ; Offset_0x003216
                dc.w    $FB20, $0017
                dc.l    Pal_Wz                                 ; Offset_0x003276
                dc.w    $FB20, $0017
                dc.l    Pal_Lvl3                               ; Offset_0x003216
                dc.w    $FB20, $0017
                dc.l    Pal_Mz                                 ; Offset_0x0032D6
                dc.w    $FB20, $0017
                dc.l    Pal_Mz                                 ; Offset_0x0032D6
                dc.w    $FB20, $0017
                dc.l    Pal_SFz                                ; Offset_0x003336
                dc.w    $FB20, $0017
                dc.l    Pal_HTz                                ; Offset_0x003396
                dc.w    $FB20, $0017
                dc.l    Pal_HPz                                ; Offset_0x0033F6
                dc.w    $FB20, $0017
                dc.l    Pal_Lvl9                               ; Offset_0x003216
                dc.w    $FB20, $0017
                dc.l    Pal_OOz                                ; Offset_0x0034D6
                dc.w    $FB20, $0017
                dc.l    Pal_DHz                                ; Offset_0x003536
                dc.w    $FB20, $0017
                dc.l    Pal_CNz                                ; Offset_0x003596
                dc.w    $FB20, $0017
                dc.l    Pal_CPz                                ; Offset_0x0035F6
                dc.w    $FB20, $0017
                dc.l    Pal_DEz                                ; Offset_0x0036D6
                dc.w    $FB20, $0017
                dc.l    Pal_NGHz                               ; Offset_0x003736
                dc.w    $FB20, $0017
                dc.l    Pal_SCz                                ; Offset_0x003816
                dc.w    $FB20, $0017
                dc.l    Pal_HPz_Water                          ; Offset_0x003456
                dc.w    $FB00, $001F
                dc.l    Pal_CPz_Water                          ; Offset_0x003656
                dc.w    $FB00, $001F
                dc.l    Pal_NGHz_Water                         ; Offset_0x003796
                dc.w    $FB00, $001F
                dc.l    Pal_Special_Stage_Main                 ; Offset_0x003876
                dc.w    $FB00, $001F
                dc.l    Pal_DHz_Boss                           ; Offset_0x0038F6
                dc.w    $FB20, $0007
                dc.l    Offset_0x003916
                dc.w    $FB20, $0007   

Pal_Sega_Bg:                                                   ; Offset_0x003076
                incbin  'data\all\sega_bg.pal' 
Pal_Title_Screen:                                              ; Offset_0x0030F6
                incbin  'data\all\titlscrn.pal'
Pal_Level_Select_Menu:                                         ; Offset_0x003176
                incbin  'data\all\lvl_menu.pal' 
Pal_Sonic_And_Miles:                                           ; Offset_0x0031F6
                incbin  'data\all\sonic.pal'
Pal_GHz:                                                       ; Offset_0x003216
Pal_Lvl1:                                                      ; Offset_0x003216
Pal_Lvl3:                                                      ; Offset_0x003216
Pal_Lvl9:                                                      ; Offset_0x003216
                incbin  'data\ghz\ghz.pal'
Pal_Wz:                                                        ; Offset_0x003276
                incbin  'data\wz\wz.pal'
Pal_Mz:                                                        ; Offset_0x0032D6
                incbin  'data\mz\mz.pal'
Pal_SFz:                                                       ; Offset_0x003336
                incbin  'data\sfz\sfz.pal'                          
Pal_HTz:                                                       ; Offset_0x003396
                incbin  'data\htz\htz.pal'  
Pal_HPz:                                                       ; Offset_0x0033F6
                incbin  'data\hpz\hpz.pal'  
Pal_HPz_Water:                                                 ; Offset_0x003456
                incbin  'data\hpz\hpz_uw.pal' 
Pal_OOz:                                                       ; Offset_0x0034D6
                incbin  'data\ooz\ooz.pal' 
Pal_DHz:                                                       ; Offset_0x003536
                incbin  'data\dhz\dhz.pal' 
Pal_CNz:                                                       ; Offset_0x003596
                incbin  'data\cnz\cnz.pal' 
Pal_CPz:                                                       ; Offset_0x0035F6
                incbin  'data\cpz\cpz.pal'
Pal_CPz_Water:                                                 ; Offset_0x003656
                incbin  'data\cpz\cpz_uw.pal'
Pal_DEz:                                                       ; Offset_0x0036D6
                incbin  'data\dez\dez.pal'
Pal_NGHz:                                                      ; Offset_0x003736
                incbin  'data\nghz\nghz.pal'
Pal_NGHz_Water:                                                ; Offset_0x003796
                incbin  'data\nghz\nghz_uw.pal'
Pal_SCz:                                                       ; Offset_0x003816
                incbin  'data\scz\scz.pal'
Pal_Special_Stage_Main:                                        ; Offset_0x003876
                incbin  'data\ss\ss_main.pal'
Pal_DHz_Boss:                                                  ; Offset_0x0038F6
                incbin  'data\dhz\dhz_boss.pal'
Offset_0x003916:    
                dc.w    $0000, $0000, $006E, $00AE, $00EE, $0044, $0EEE, $0AAA
                dc.w    $0888, $0444, $0666, $0EC0, $00EE, $0088, $0A0E, $00E0                                                                                                                                                                                                                                                                           
;===============================================================================
; Rotinas para carga da paleta selecionada em D0 no buffer de paletas
; <<<-
;===============================================================================                                               
                nop
;===============================================================================
; Aguarda pela conclusão do procedimento de interrupção vertical
; ->>>
;=============================================================================== 
Wait_For_VSync:                                                ; Offset_0x003938
                move    #$2300, SR                                              
Wait_For_VSync_Inf_Loop:                                       ; Offset_0x00393C
                tst.b   (VBlank_Index).w                             ; $FFFFF62A
                bne.s   Wait_For_VSync_Inf_Loop                ; Offset_0x00393C                                         
                rts                                                             
;===============================================================================
; Aguarda pela conclusão do procedimento de interrupção vertical
; <<<-
;=============================================================================== 

;===============================================================================
; Geração de números pseudo aleatórios
; ->>>
;===============================================================================
PseudoRandomNumber:                                            ; Offset_0x003944
                move.l  ($FFFFF636).w, D1                                       
                bne.s   Offset_0x003950                                         
                move.l  #$2A6D365A, D1                                          
Offset_0x003950:
                move.l  D1, D0                                                  
                asl.l   #$02, D1                                                
                add.l   D0, D1                                                  
                asl.l   #$03, D1                                                
                add.l   D0, D1                                                  
                move.w  D1, D0                                                  
                swap.w  D1                                                      
                add.w   D1, D0                                                  
                move.w  D0, D1                                                  
                swap.w  D1                                                      
                move.l  D1, ($FFFFF636).w                                       
                rts                                                              
;===============================================================================
; Geração de números pseudo aleatórios
; <<<-
;=============================================================================== 

;===============================================================================
; Rotina para calcular o Seno usando tabela pré-calculada
; ->>>
;===============================================================================   
CalcSine:                                                      ; Offset_0x00396A
                andi.w  #$00FF, D0                                              
                add.w   D0, D0                                                  
                addi.w  #$0080, D0                                              
                move.w  Sine_Table(PC, D0), D1                 ; Offset_0x003982                    
                subi.w  #$0080, D0                                              
                move.w  Sine_Table(PC, D0), D0                 ; Offset_0x003982                 
                rts              
;-------------------------------------------------------------------------------
Sine_Table:                                                    ; Offset_0x003982
                dc.w    $0000, $0006, $000C, $0012, $0019, $001F, $0025, $002B
                dc.w    $0031, $0038, $003E, $0044, $004A, $0050, $0056, $005C
                dc.w    $0061, $0067, $006D, $0073, $0078, $007E, $0083, $0088
                dc.w    $008E, $0093, $0098, $009D, $00A2, $00A7, $00AB, $00B0
                dc.w    $00B5, $00B9, $00BD, $00C1, $00C5, $00C9, $00CD, $00D1
                dc.w    $00D4, $00D8, $00DB, $00DE, $00E1, $00E4, $00E7, $00EA
                dc.w    $00EC, $00EE, $00F1, $00F3, $00F4, $00F6, $00F8, $00F9
                dc.w    $00FB, $00FC, $00FD, $00FE, $00FE, $00FF, $00FF, $00FF
                dc.w    $0100, $00FF, $00FF, $00FF, $00FE, $00FE, $00FD, $00FC
                dc.w    $00FB, $00F9, $00F8, $00F6, $00F4, $00F3, $00F1, $00EE
                dc.w    $00EC, $00EA, $00E7, $00E4, $00E1, $00DE, $00DB, $00D8
                dc.w    $00D4, $00D1, $00CD, $00C9, $00C5, $00C1, $00BD, $00B9
                dc.w    $00B5, $00B0, $00AB, $00A7, $00A2, $009D, $0098, $0093
                dc.w    $008E, $0088, $0083, $007E, $0078, $0073, $006D, $0067
                dc.w    $0061, $005C, $0056, $0050, $004A, $0044, $003E, $0038
                dc.w    $0031, $002B, $0025, $001F, $0019, $0012, $000C, $0006
                dc.w    $0000, $FFFA, $FFF4, $FFEE, $FFE7, $FFE1, $FFDB, $FFD5
                dc.w    $FFCF, $FFC8, $FFC2, $FFBC, $FFB6, $FFB0, $FFAA, $FFA4
                dc.w    $FF9F, $FF99, $FF93, $FF8B, $FF88, $FF82, $FF7D, $FF78
                dc.w    $FF72, $FF6D, $FF68, $FF63, $FF5E, $FF59, $FF55, $FF50
                dc.w    $FF4B, $FF47, $FF43, $FF3F, $FF3B, $FF37, $FF33, $FF2F
                dc.w    $FF2C, $FF28, $FF25, $FF22, $FF1F, $FF1C, $FF19, $FF16
                dc.w    $FF14, $FF12, $FF0F, $FF0D, $FF0C, $FF0A, $FF08, $FF07
                dc.w    $FF05, $FF04, $FF03, $FF02, $FF02, $FF01, $FF01, $FF01
                dc.w    $FF00, $FF01, $FF01, $FF01, $FF02, $FF02, $FF03, $FF04
                dc.w    $FF05, $FF07, $FF08, $FF0A, $FF0C, $FF0D, $FF0F, $FF12
                dc.w    $FF14, $FF16, $FF19, $FF1C, $FF1F, $FF22, $FF25, $FF28
                dc.w    $FF2C, $FF2F, $FF33, $FF37, $FF3B, $FF3F, $FF43, $FF47
                dc.w    $FF4B, $FF50, $FF55, $FF59, $FF5E, $FF63, $FF68, $FF6D
                dc.w    $FF72, $FF78, $FF7D, $FF82, $FF88, $FF8B, $FF93, $FF99
                dc.w    $FF9F, $FFA4, $FFAA, $FFB0, $FFB6, $FFBC, $FFC2, $FFC8
                dc.w    $FFCF, $FFD5, $FFDB, $FFE1, $FFE7, $FFEE, $FFF4, $FFFA
                dc.w    $0000, $0006, $000C, $0012, $0019, $001F, $0025, $002B
                dc.w    $0031, $0038, $003E, $0044, $004A, $0050, $0056, $005C
                dc.w    $0061, $0067, $006D, $0073, $0078, $007E, $0083, $0088
                dc.w    $008E, $0093, $0098, $009D, $00A2, $00A7, $00AB, $00B0
                dc.w    $00B5, $00B9, $00BD, $00C1, $00C5, $00C9, $00CD, $00D1
                dc.w    $00D4, $00D8, $00DB, $00DE, $00E1, $00E4, $00E7, $00EA
                dc.w    $00EC, $00EE, $00F1, $00F3, $00F4, $00F6, $00F8, $00F9
                dc.w    $00FB, $00FC, $00FD, $00FE, $00FE, $00FF, $00FF, $00FF                                                               
;===============================================================================
; Rotina para calcular o Seno usando tabela pré-calculada
; <<<-
;===============================================================================

;===============================================================================
; Rotina para calcular o Ângulo usando tabela pré-calculada
; ->>>
;===============================================================================
CalcAngle:                                                     ; Offset_0x003C02
                movem.l D3/D4, -(A7)                                            
                moveq   #$00, D3                                                
                moveq   #$00, D4                                                
                move.w  D1, D3                                                  
                move.w  D2, D4                                                  
                or.w    D3, D4                                                  
                beq.s   Offset_0x003C5E                                         
                move.w  D2, D4                                                  
                tst.w   D3                                                      
                bpl     Offset_0x003C1C                                         
                neg.w   D3                                                      
Offset_0x003C1C:
                tst.w   D4                                                      
                bpl     Offset_0x003C24                                         
                neg.w   D4                                                      
Offset_0x003C24:
                cmp.w   D3, D4                                                  
                bcc     Offset_0x003C36                                         
                lsl.l   #$08, D4                                                
                divu.w  D3, D4                                                  
                moveq   #$00, D0                                                
                move.b  Angle_Table(PC, D4), D0                ; Offset_0x003C68                  
                bra.s   Offset_0x003C40                                         
Offset_0x003C36:
                lsl.l   #$08, D3                                                
                divu.w  D4, D3                                                  
                moveq   #$40, D0                                                
                sub.b   Angle_Table(PC, D3), D0                ; Offset_0x003C68                 
Offset_0x003C40:
                tst.w   D1                                                      
                bpl     Offset_0x003C4C                                         
                neg.w   D0                                                      
                addi.w  #$0080, D0                                              
Offset_0x003C4C:
                tst.w   D2                                                      
                bpl     Offset_0x003C58                                         
                neg.w   D0                                                      
                addi.w  #$0100, D0                                              
Offset_0x003C58:
                movem.l (A7)+, D3/D4                                            
                rts                                                             
Offset_0x003C5E:
                move.w  #$0040, D0                                              
                movem.l (A7)+, D3/D4                                            
                rts 
;-------------------------------------------------------------------------------
Angle_Table:                                                   ; Offset_0x003C68
                dc.b    $00, $00, $00, $00, $01, $01, $01, $01
                dc.b    $01, $01, $02, $02, $02, $02, $02, $02
                dc.b    $03, $03, $03, $03, $03, $03, $03, $04
                dc.b    $04, $04, $04, $04, $04, $05, $05, $05
                dc.b    $05, $05, $05, $06, $06, $06, $06, $06
                dc.b    $06, $06, $07, $07, $07, $07, $07, $07
                dc.b    $08, $08, $08, $08, $08, $08, $08, $09
                dc.b    $09, $09, $09, $09, $09, $0A, $0A, $0A
                dc.b    $0A, $0A, $0A, $0A, $0B, $0B, $0B, $0B
                dc.b    $0B, $0B, $0B, $0C, $0C, $0C, $0C, $0C
                dc.b    $0C, $0C, $0D, $0D, $0D, $0D, $0D, $0D
                dc.b    $0D, $0E, $0E, $0E, $0E, $0E, $0E, $0E
                dc.b    $0F, $0F, $0F, $0F, $0F, $0F, $0F, $10
                dc.b    $10, $10, $10, $10, $10, $10, $11, $11
                dc.b    $11, $11, $11, $11, $11, $11, $12, $12
                dc.b    $12, $12, $12, $12, $12, $13, $13, $13
                dc.b    $13, $13, $13, $13, $13, $14, $14, $14
                dc.b    $14, $14, $14, $14, $14, $15, $15, $15
                dc.b    $15, $15, $15, $15, $15, $15, $16, $16
                dc.b    $16, $16, $16, $16, $16, $16, $17, $17
                dc.b    $17, $17, $17, $17, $17, $17, $17, $18
                dc.b    $18, $18, $18, $18, $18, $18, $18, $18
                dc.b    $19, $19, $19, $19, $19, $19, $19, $19
                dc.b    $19, $19, $1A, $1A, $1A, $1A, $1A, $1A
                dc.b    $1A, $1A, $1A, $1B, $1B, $1B, $1B, $1B
                dc.b    $1B, $1B, $1B, $1B, $1B, $1C, $1C, $1C
                dc.b    $1C, $1C, $1C, $1C, $1C, $1C, $1C, $1C
                dc.b    $1D, $1D, $1D, $1D, $1D, $1D, $1D, $1D
                dc.b    $1D, $1D, $1D, $1E, $1E, $1E, $1E, $1E
                dc.b    $1E, $1E, $1E, $1E, $1E, $1E, $1F, $1F
                dc.b    $1F, $1F, $1F, $1F, $1F, $1F, $1F, $1F
                dc.b    $1F, $1F, $20, $20, $20, $20, $20, $20
                dc.b    $20, $00                                                                           
;===============================================================================
; Rotina para calcular o Ângulo usando tabela pré-calculada
; <<<-
;===============================================================================
                nop
;===============================================================================
; Logo da SEGA
; ->>>
;=============================================================================== 
Sega_Screen:                                                   ; Offset_0x003D6C
                move.b  #$FD, D0                                                
                bsr     Play_Music                             ; Offset_0x00190C
                bsr     ClearPLC                               ; Offset_0x001C12
                bsr     Pal_FadeFrom                           ; Offset_0x002C8A
                lea     ($FFFFF700).w, A1                                       
                moveq   #$00, D0                                                
                move.w  #$003F, D1                                              
Offset_0x003D86:
                move.l  D0, (A1)+                                               
                dbra    D1, Offset_0x003D86                                     
                lea     (Obj_Memory_Address).w, A1                   ; $FFFFB000
                moveq   #$00, D0                                                
                move.w  #$07FF, D1                                              
Offset_0x003D96:
                move.l  D0, (A1)+                                               
                dbra    D1, Offset_0x003D96                                     
                lea     (VDP_Control_Port), A6                       ; $00C00004
                move.w  #$8004, (A6)                                            
                move.w  #$8230, (A6)                                            
                move.w  #$8405, (A6)                                            
                move.w  #$8700, (A6)                                            
                move.w  #$8B03, (A6)                                            
                move.w  #$8C81, (A6)                                            
                move.w  #$9003, (A6)                                            
                clr.b   ($FFFFF64E).w                                           
                clr.w   (Two_Player_Flag).w                          ; $FFFFFFD8
                move    #$2700, SR                                              
                move.w  ($FFFFF60C).w, D0                                       
                andi.b  #$BF, D0                                                
                move.w  D0, (VDP_Control_Port)                       ; $00C00004
                bsr     ClearScreen                            ; Offset_0x0017E4
                lea     (VDP_Control_Port), A5                       ; $00C00004
                move.w  #$8F01, (A5)                                            
                move.l  #$941F93FF, (A5)                                        
                move.w  #$9780, (A5)                                            
                move.l  #$40000083, (A5)                                        
                move.w  #$0000, (VDP_Data_Port)                      ; $00C00000
Offset_0x003DFE:
                move.w  (A5), D1                                                
                btst    #$01, D1                                                
                bne.s   Offset_0x003DFE                                         
                move.w  #$8F02, (A5)                                            
                move.l  #$40200000, (VDP_Control_Port)               ; $00C00004
                lea     (Art_SEGA), A0                         ; Offset_0x074876                             
                bsr     NemesisDec                             ; Offset_0x001A74
                move.l  #$50000000, (VDP_Control_Port)               ; $00C00004
                lea     (Art_SEGA_Some_Blocks), A0             ; Offset_0x074CF6                                
                bsr     NemesisDec                             ; Offset_0x001A74
                move.l  #$51000000, (VDP_Control_Port)               ; $00C00004
                lea     (Art_Metal_Sonic), A0                  ; Offset_0x089FE8                            
                bsr     NemesisDec                             ; Offset_0x001A74
                lea     (M68K_RAM_Start), A1                         ; $FFFF0000
                lea     (SEGA_Mappings), A0                    ; Offset_0x074D0E                         
                move.w  #$0000, D0                                              
                bsr     EnigmaDec                              ; Offset_0x001D52                                         
                lea     (M68K_RAM_Start), A1                         ; $FFFF0000
                move.l  #$60000002, D0                                          
                moveq   #$27, D1                                                
                moveq   #$1B, D2                                                
                bsr     Offset_0x003F1C                                         
                tst.b   (Hardware_Id).w                              ; $FFFFFFF8
                bmi.s   Offset_0x003E82                                         
                lea     ($FFFFB080).w, A1                                       
                move.b  #$B1, (A1)                                              
                move.b  #$4E, $0028(A1)                                         
Offset_0x003E82:
                moveq   #$00, D0                                                
                bsr     PalLoad2                               ; Offset_0x002F4E
                move.w  #$FFF6, ($FFFFF632).w                                   
                move.w  #$0000, ($FFFFF634).w                                   
                move.w  #$0000, ($FFFFF662).w                                   
                move.w  #$0000, ($FFFFF660).w                                   
                lea     (Obj_Memory_Address+$0040).w, A1             ; $FFFFB040
                move.b  #$B0, (A1)                                              
                move.b  #$4C, $0028(A1)                                         
                move.w  #$00F0, ($FFFFF614).w                                   
                move.w  ($FFFFF60C).w, D0                                       
                ori.b   #$40, D0                                                
                move.w  D0, (VDP_Control_Port)                       ; $00C00004
Offset_0x003EC2:
                move.b  #$02, (VBlank_Index).w                       ; $FFFFF62A
                bsr     Wait_For_VSync                         ; Offset_0x003938
                bsr     Offset_0x003F3C                                         
                jsr     (Build_Sprites)                        ; Offset_0x0121FE
                andi.b  #$80, (Control_Ports_Buffer_Data+$0001).w    ; $FFFFF605
                bne.s   Offset_0x003F14                                         
                tst.b   ($FFFFF660).w                                           
                beq.s   Offset_0x003EC2                                         
                move.b  #$FA, D0                                                
                bsr     Play_Sfx                               ; Offset_0x001912
                move.b  #$02, (VBlank_Index).w                       ; $FFFFF62A
                bsr     Wait_For_VSync                         ; Offset_0x003938
                move.w  #$00B4, ($FFFFF614).w                                   
Offset_0x003EFC:
                move.b  #$14, (VBlank_Index).w                       ; $FFFFF62A
                bsr     Wait_For_VSync                         ; Offset_0x003938
                tst.w   ($FFFFF614).w                                           
                beq.s   Offset_0x003F14                                         
                andi.b  #$80, (Control_Ports_Buffer_Data+$0001).w    ; $FFFFF605
                beq.s   Offset_0x003EFC                                         
Offset_0x003F14:
                move.b  #gm_TitleScreen, (Game_Mode).w         ; $04 ; $FFFFF600
                rts                                                             
Offset_0x003F1C:
                lea     (VDP_Data_Port), A6                          ; $00C00000
                move.l  #$01000000, D4                                          
Offset_0x003F28:
                move.l  D0, $0004(A6)                                           
                move.w  D1, D3                                                  
Offset_0x003F2E:
                move.w  (A1)+, (A6)                                             
                dbra    D3, Offset_0x003F2E                                     
                add.l   D4, D0                                                  
                dbra    D2, Offset_0x003F28                                     
                rts                                                             
Offset_0x003F3C:
                jmp     (Load_Objects)                         ; Offset_0x011BB8
;===============================================================================
; Logo da SEGA
; <<<-
;===============================================================================                                          
                dc.w    $0000
;===============================================================================
; Tela título
; ->>>
;===============================================================================   
Title_Screen:                                                  ; Offset_0x003F44
                move.b  #$FD, D0                                                
                bsr     Play_Music                             ; Offset_0x00190C
                bsr     ClearPLC                               ; Offset_0x001C12
                bsr     Pal_FadeFrom                           ; Offset_0x002C8A
                move    #$2700, SR                                              
                lea     (VDP_Control_Port), A6                       ; $00C00004
                move.w  #$8004, (A6)                                            
                move.w  #$8230, (A6)                                            
                move.w  #$8407, (A6)                                            
                move.w  #$9001, (A6)                                            
                move.w  #$9200, (A6)                                            
                move.w  #$8B03, (A6)                                            
                move.w  #$8720, (A6)                                            
                clr.b   ($FFFFF64E).w                                           
                move.w  #$8C81, (A6)                                            
                bsr     ClearScreen                            ; Offset_0x0017E4
                lea     ($FFFFAC00).w, A1                                       
                moveq   #$00, D0                                                
                move.w  #$00FF, D1                                              
Offset_0x003F90:
                move.l  D0, (A1)+                                               
                dbra    D1, Offset_0x003F90                                     
                lea     (Obj_Memory_Address).w, A1                   ; $FFFFB000
                moveq   #$00, D0                                                
                move.w  #$07FF, D1                                              
Offset_0x003FA0:
                move.l  D0, (A1)+                                               
                dbra    D1, Offset_0x003FA0                                     
                lea     ($FFFFF700).w, A1                                       
                moveq   #$00, D0                                                
                move.w  #$003F, D1                                              
Offset_0x003FB0:
                move.l  D0, (A1)+                                               
                dbra    D1, Offset_0x003FB0                                     
                lea     (Camera_X).w, A1                             ; $FFFFEE00                                 
                moveq   #$00, D0                                                
                move.w  #$003F, D1                                              
Offset_0x003FC0:
                move.l  D0, (A1)+                                               
                dbra    D1, Offset_0x003FC0                                     
                lea     (Palette_Underwater_Buffer).w, A1            ; $FFFFFB80
                moveq   #$00, D0                                                
                move.w  #$001F, D1                                              
Offset_0x003FD0:
                move.l  D0, (A1)+                                               
                dbra    D1, Offset_0x003FD0                                     
                moveq   #$03, D0                                                
                bsr     PalLoad1                               ; Offset_0x002F32
                bsr     Pal_FadeTo                             ; Offset_0x002BE6                                         
                move    #$2700, SR                                              
                move.l  #$40000000, (VDP_Control_Port)               ; $00C00004
                lea     (Art_Title_Screen_Bg_Wings), A0        ; Offset_0x07541A                          
                bsr     NemesisDec                             ; Offset_0x001A74
                move.l  #$40000001, (VDP_Control_Port)               ; $00C00004
                lea     (Art_Title_Screen_Sonic_Miles), A0     ; Offset_0x076D7C                          
                bsr     NemesisDec                             ; Offset_0x001A74
                move.l  #$5E000001, (VDP_Control_Port)               ; $00C00004
                lea     (Art_1p2pVs), A0                       ; Offset_0x004904                               
                bsr     NemesisDec                             ; Offset_0x001A74
                lea     (VDP_Data_Port), A6                          ; $00C00000
                move.l  #$50000003, $0004(A6)                                   
                lea     (Art_Menu_Text), A5                    ; Offset_0x0005E8                       
                move.w  #$028F, D1                                              
Offset_0x004038:
                move.w  (A5)+, (A6)                                             
                dbra    D1, Offset_0x004038                                     
                nop                                                             
                move.b  #$00, (Saved_Level_Flag).w                   ; $FFFFFE30                                 
                move.w  #$0000, (Debug_Mode_Flag_Index).w            ; $FFFFFE08
                move.w  #$0000, (Auto_Control_Player_Flag).w         ; $FFFFFFF0
                move.w  #$0000, ($FFFFFFDA).w                                   
                move.w  #$0000, (Level_Id).w                         ; $FFFFFE10
                move.w  #$0000, ($FFFFF634).w                                   
                bsr     Pal_FadeFrom                           ; Offset_0x002C8A
                move    #$2700, SR                                              
                lea     (M68K_RAM_Start), A1                         ; $FFFF0000
                lea     (TS_Wings_Sonic_Mappings), A0          ; Offset_0x074DC6                      
                move.w  #$0000, D0                                              
                bsr     EnigmaDec                              ; Offset_0x001D52
                lea     (M68K_RAM_Start), A1                         ; $FFFF0000
                move.l  #$40000003, D0                                          
                moveq   #$27, D1                                                
                moveq   #$1B, D2                                                
                bsr     ShowVDPGraphics                        ; Offset_0x0019A4                                         
                lea     (M68K_RAM_Start), A1                         ; $FFFF0000
                lea     (Title_Screen_Bg_Mappings), A0         ; Offset_0x074F1E                       
                move.w  #$0000, D0                                              
                bsr     EnigmaDec                              ; Offset_0x001D52
                lea     (M68K_RAM_Start), A1                         ; $FFFF0000
                move.l  #$60000003, D0                                          
                moveq   #$1F, D1                                                
                moveq   #$1B, D2                                                
                bsr     ShowVDPGraphics                        ; Offset_0x0019A4                                         
                lea     (M68K_RAM_Start), A1                         ; $FFFF0000
                lea     (Title_Screen_R_Bg_Mappings), A0       ; Offset_0x0751D2
                move.w  #$0000, D0                                              
                bsr     EnigmaDec                              ; Offset_0x001D52
                lea     (M68K_RAM_Start), A1                         ; $FFFF0000
                move.l  #$60400003, D0                                          
                moveq   #$1F, D1                                                
                moveq   #$1B, D2                                                
                bsr     ShowVDPGraphics                        ; Offset_0x0019A4                                         
                moveq   #$01, D0                                                
                bsr     PalLoad1                               ; Offset_0x002F32
                move.b  #$99, D0                                                
                bsr     Play_Music                             ; Offset_0x00190C
                move.b  #$00, (Debug_Mode_Active_Flag).w             ; $FFFFFFFA                                   
                move.w  #$0000, (Two_Player_Flag).w                  ; $FFFFFFD8
                move.w  #$0178, ($FFFFF614).w                                   
                lea     ($FFFFB080).w, A1                                       
                moveq   #$00, D0                                                
                move.w  #$000F, D1                                              
Offset_0x00410E:
                move.l  D0, (A1)+                                               
                dbra    D1, Offset_0x00410E                                     
                move.b  #$0E, (Obj_Memory_Address+$0040).w           ; $FFFFB040
                move.b  #$0E, ($FFFFB080).w                                     
                move.b  #$01, ($FFFFB09A).w                                     
                move.b  #$0F, ($FFFFB0C0).w                                     
                jsr     (Load_Objects)                         ; Offset_0x011BB8
                jsr     (Build_Sprites)                        ; Offset_0x0121FE
                moveq   #$00, D0                                                
                bsr     LoadPLC2                               ; Offset_0x001BE6
                move.w  #$0000, ($FFFFFFD4).w                                   
                move.w  #$0000, ($FFFFFFD6).w                                   
                move.b  #$01, ($FFFFFFD0).w                                     
                move.w  #$0004, ($FFFFEED2).w                                   
                move.w  #$0000, ($FFFFE500).w                                   
                move.w  ($FFFFF60C).w, D0                                       
                ori.b   #$40, D0                                                
                move.w  D0, (VDP_Control_Port)                       ; $00C00004
                bsr     Pal_FadeTo                             ; Offset_0x002BE6                                         
TitleScreen_Loop:                                              ; Offset_0x00416E
                move.b  #$04, (VBlank_Index).w                       ; $FFFFF62A
                bsr     Wait_For_VSync                         ; Offset_0x003938
                jsr     (Load_Objects)                         ; Offset_0x011BB8
                bsr     Bg_Scroll_Title_Screen                 ; Offset_0x009C04
                jsr     (Build_Sprites)                        ; Offset_0x0121FE
                bsr     RunPLC                                 ; Offset_0x001C20
                tst.b   (Hardware_Id).w                              ; $FFFFFFF8
                bpl.s   Code_Sequence_J                        ; Offset_0x00419A                                         
                lea     (Level_Select_Code_J), A0              ; Offset_0x004370                              
                bra.s   Level_Select_Cheat_Test                ; Offset_0x0041A0                                         
Code_Sequence_J:                                               ; Offset_0x00419A
                lea     (Level_Select_Code_US), A0             ; Offset_0x004368                        
Level_Select_Cheat_Test:                                       ; Offset_0x0041A0
                move.w  ($FFFFFFD4).w, D0                                       
                adda.w  D0, A0                                                  
                move.b  (Control_Ports_Buffer_Data+$0001).w, D0      ; $FFFFF605
                andi.b  #$0F, D0                                                
                cmp.b   (A0), D0                                                
                bne.s   Title_Cheat_NoMatch                    ; Offset_0x0041E6                                         
                addq.w  #$01, ($FFFFFFD4).w                                     
                tst.b   D0                                                      
                bne.s   Title_Cheat_CountC                     ; Offset_0x0041F8                                         
                lea     ($FFFFFFD0).w, A0                                       
                move.w  ($FFFFFFD6).w, D1                                       
                lsr.w   #$01, D1                                                
                andi.w  #$0003, D1                                              
                beq.s   Title_Cheat_PlayRing                   ; Offset_0x0041D6                                         
                tst.b   (Hardware_Id).w                              ; $FFFFFFF8
                bpl.s   Title_Cheat_PlayRing                   ; Offset_0x0041D6                                         
                moveq   #$01, D1                                                
                move.b  D1, $01(A0, D1)                                         
Title_Cheat_PlayRing:                                          ; Offset_0x0041D6
                move.b  #$01, $00(A0, D1)                                       
                move.b  #$B5, D0                                                
                bsr     Play_Sfx                               ; Offset_0x001912
                bra.s   Title_Cheat_CountC                     ; Offset_0x0041F8                                         
Title_Cheat_NoMatch:                                           ; Offset_0x0041E6
                tst.b   D0                                                      
                beq.s   Title_Cheat_CountC                     ; Offset_0x0041F8                                         
                cmpi.w  #$0009, ($FFFFFFD4).w                                   
                beq.s   Title_Cheat_CountC                     ; Offset_0x0041F8                                         
                move.w  #$0000, ($FFFFFFD4).w                                   
Title_Cheat_CountC:                                            ; Offset_0x0041F8
                move.b  (Control_Ports_Buffer_Data+$0001).w, D0      ; $FFFFF605
                andi.b  #$20, D0                                                
                beq.s   Offset_0x004206                                         
                addq.w  #$01, ($FFFFFFD6).w                                     
Offset_0x004206:
                tst.w   ($FFFFF614).w                                           
                beq     Offset_0x004378                                         
                andi.b  #$80, (Control_Ports_Buffer_Data+$0001).w    ; $FFFFF605
                beq     TitleScreen_Loop                       ; Offset_0x00416E                                         
Offset_0x004218:                
                moveq   #$00, D0                                                
                move.b  ($FFFFB0DA).w, D0                                       
                move.w  D0, (Two_Player_Flag).w                      ; $FFFFFFD8
                tst.b   ($FFFFFFD0).w                                           
                beq     Offset_0x004328                                         
                cmpi.b  #$C0, (Control_Ports_Buffer_Data).w          ; $FFFFF604
                bne     Offset_0x004328                                         
                move.b  #$91, D0                                                
                bsr     Play_Music                             ; Offset_0x00190C
                moveq   #$02, D0                                                
                bsr     PalLoad2                               ; Offset_0x002F4E
                lea     (Scroll_Buffer_Data).w, A1                   ; $FFFFE000                                 
                moveq   #$00, D0                                                
                move.w  #$00DF, D1                                              
LevelSelect_ClearScroll:                                       ; Offset_0x00424C
                move.l  D0, (A1)+                                               
                dbra    D1, LevelSelect_ClearScroll            ; Offset_0x00424C                                     
                move.l  D0, ($FFFFF616).w                                       
                move    #$2700, SR                                              
                lea     (VDP_Data_Port), A6                          ; $00C00000
                move.l  #$60000003, (VDP_Control_Port)               ; $00C00004
                move.w  #$03FF, D1                                              
LevelSelect_ClearVRAM:                                         ; Offset_0x00426E
                move.l  D0, (A6)                                                
                dbra    D1, LevelSelect_ClearVRAM              ; Offset_0x00426E                                     
                bsr     Offset_0x0044DA                                         
LevelSelect_Loop:                                              ; Offset_0x004278
                move.b  #$04, (VBlank_Index).w                       ; $FFFFF62A
                bsr     Wait_For_VSync                         ; Offset_0x003938
                bsr     LevelSelect_Controls                   ; Offset_0x004444                                         
                bsr     RunPLC                                 ; Offset_0x001C20
                tst.l   ($FFFFF680).w                                           
                bne.s   LevelSelect_Loop                       ; Offset_0x004278                                         
                andi.b  #$F0, (Control_Ports_Buffer_Data+$0001).w    ; $FFFFF605
                beq.s   LevelSelect_Loop                       ; Offset_0x004278                                         
                move.w  ($FFFFFF82).w, D0                                       
                cmpi.w  #$0017, D0                                              
                bne.s   Offset_0x0042B8                                         
                btst    #$06, (Control_Ports_Buffer_Data+$0001).w    ; $FFFFF605
                bne.s   LevelSelect_Loop                       ; Offset_0x004278                                         
                move.w  ($FFFFFF84).w, D0                                       
                addi.w  #$0080, D0                                              
                bsr     Play_Sfx                               ; Offset_0x001912
                bra.s   LevelSelect_Loop                       ; Offset_0x004278                                         
Offset_0x0042B8:
                add.w   D0, D0                                                  
                move.w  Level_Select_Array(PC, D0), D0         ; Offset_0x0042F0                         
                bmi     LevelSelect_Loop                       ; Offset_0x004278                                         
                cmpi.w  #$4000, D0                                              
                bne.s   Level_Select_Load_Level                ; Offset_0x004320                                         
                move.b  #$10, (Game_Mode).w                          ; $FFFFF600
                clr.w   (Level_Id).w                                 ; $FFFFFE10
                move.b  #$03, (Life_Count).w                         ; $FFFFFE12
                moveq   #$00, D0                                                
                move.w  D0, (Ring_Count).w                           ; $FFFFFE20                                  
                move.l  D0, ($FFFFFE22).w                                       
                move.l  D0, ($FFFFFE26).w                                       
                move.l  #$00001388, ($FFFFFFC0).w                               
                rts   
;------------------------------------------------------------------------------- 
Level_Select_Array: 
                dc.w    $0000, $0001         ; GHz
                dc.w    $0400, $0401, $0500  ; Mz
                dc.w    $0700, $0701         ; HTz
                dc.w    $FFFF, $FFFF         ; HPz
                dc.w    $0A00, $0A01         ; OOz
                dc.w    $0B00, $0B01         ; DHz 
                dc.w    $0C00, $0C01         ; CNz
                dc.w    $0D00, $0D01         ; CPz
                dc.w    $0F00, $0F01         ; NGHz
                dc.w    $1000                ; SCz
                dc.w    $0600                ; SFz
                dc.w    $0E00                ; DEz
                dc.w    $4000                ; SS
                dc.w    $0000                ; Sound Test               
;-------------------------------------------------------------------------------
Level_Select_Load_Level:                                       ; Offset_0x004320
                andi.w  #$3FFF, D0     
                move.w  D0, (Level_Id).w                             ; $FFFFFE10
Offset_0x004328:                                                                        
                move.b  #$0C, (Game_Mode).w                          ; $FFFFF600
                move.b  #$03, (Life_Count).w                         ; $FFFFFE12
                moveq   #$00, D0                                                
                move.w  D0, (Ring_Count).w                           ; $FFFFFE20                              
                move.l  D0, ($FFFFFE22).w                                       
                move.l  D0, ($FFFFFE26).w                                       
                move.b  D0, ($FFFFFE16).w                                       
                move.b  D0, (Emerald_Count).w                        ; $FFFFFE57                                  
                move.l  D0, (Emerald_Collected_Flag_List).w          ; $FFFFFE58                                   
                move.l  D0, (Emerald_Collected_Flag_List+$0004).w    ; $FFFFFE5C                                   
                move.b  D0, ($FFFFFE18).w                                       
                move.l  #$00001388, ($FFFFFFC0).w                               
                move.b  #$E0, D0                                                
                bsr     Play_Sfx                               ; Offset_0x001912
                rts                                                             
;-------------------------------------------------------------------------------
Level_Select_Code_US:                                          ; Offset_0x004368
                dc.b    $01, $02, $02, $02, $02, $01, $00, $FF
Level_Select_Code_J:                                           ; Offset_0x004370 
                dc.b    $01, $02, $02, $02, $02, $01, $00, $FF
;-------------------------------------------------------------------------------
Offset_0x004378:
                move.w  #$001E, ($FFFFF614).w                                   
Offset_0x00437E:
                move.b  #$04, (VBlank_Index).w                       ; $FFFFF62A
                bsr     Wait_For_VSync                         ; Offset_0x003938
                bsr     RunPLC                                 ; Offset_0x001C20
                move.w  ($FFFFB008).w, D0                                       
                addq.w  #$02, D0                                                
                move.w  D0, ($FFFFB008).w                                       
                cmpi.w  #$1C00, D0                                              
                bcs.s   Offset_0x0043A4                                         
                move.b  #$00, (Game_Mode).w                          ; $FFFFF600
                rts                                                             
Offset_0x0043A4:
                andi.b  #$80, (Control_Ports_Buffer_Data+$0001).w    ; $FFFFF605
                bne     Offset_0x004218                                         
                tst.w   ($FFFFF614).w                                           
                bne     Offset_0x00437E                                         
                move.b  #$E0, D0                                                
                bsr     Play_Sfx                               ; Offset_0x001912
                move.w  ($FFFFFFF2).w, D0                                       
                andi.w  #$0007, D0                                              
                add.w   D0, D0                                                  
                move.w  Demo_Mode_Level_Array(PC, D0), D0      ; Offset_0x00442C                         
                move.w  D0, (Level_Id).w                             ; $FFFFFE10
                addq.w  #$01, ($FFFFFFF2).w                                     
                cmpi.w  #$0004, ($FFFFFFF2).w                                   
                bcs.s   Offset_0x0043E2                                         
                move.w  #$0000, ($FFFFFFF2).w                                   
Offset_0x0043E2:
                move.w  #$0001, (Auto_Control_Player_Flag).w         ; $FFFFFFF0
                move.b  #$08, (Game_Mode).w                          ; $FFFFF600
                cmpi.w  #$0000, D0                                              
                bne.s   Offset_0x0043FA                                         
                move.w  #$0001, (Two_Player_Flag).w                  ; $FFFFFFD8
Offset_0x0043FA:
                cmpi.w  #$0600, D0                                              
                bne.s   Offset_0x00440E                                         
                move.b  #$10, (Game_Mode).w                          ; $FFFFF600
                clr.w   (Level_Id).w                                 ; $FFFFFE10
                clr.b   ($FFFFFE16).w                                           
Offset_0x00440E:
                move.b  #$03, (Life_Count).w                         ; $FFFFFE12
                moveq   #$00, D0                                                
                move.w  D0, (Ring_Count).w                           ; $FFFFFE20                                  
                move.l  D0, ($FFFFFE22).w                                       
                move.l  D0, ($FFFFFE26).w                                       
                move.l  #$00001388, ($FFFFFFC0).w                               
                rts                                                             
;-------------------------------------------------------------------------------
Demo_Mode_Level_Array:                                         ; Offset_0x00442C
                dc.w    $0D00, $0000, $0C00, $0700, $0500, $0500, $0500, $0500
                dc.w    $0400, $0400, $0400, $0400
;-------------------------------------------------------------------------------
LevelSelect_Controls:                                          ; Offset_0x004444
                move.b  (Control_Ports_Buffer_Data+$0001).w, D1      ; $FFFFF605
                andi.b  #$03, D1                                                
                bne.s   Offset_0x004454                                         
                subq.w  #$01, ($FFFFFF80).w                                     
                bpl.s   Offset_0x00448E                                         
Offset_0x004454:
                move.w  #$000B, ($FFFFFF80).w                                   
                move.b  (Control_Ports_Buffer_Data).w, D1            ; $FFFFF604
                andi.b  #$03, D1                                                
                beq.s   Offset_0x00448E                                         
                move.w  ($FFFFFF82).w, D0                                       
                btst    #$00, D1                                                
                beq.s   Offset_0x004474                                         
                subq.w  #$01, D0                                                
                bcc.s   Offset_0x004474                                         
                moveq   #$17, D0                                                
Offset_0x004474:
                btst    #$01, D1                                                
                beq.s   Offset_0x004484                                         
                addq.w  #$01, D0                                                
                cmpi.w  #$0018, D0                                              
                bcs.s   Offset_0x004484                                         
                moveq   #$00, D0                                                
Offset_0x004484:
                move.w  D0, ($FFFFFF82).w                                       
                bsr     Offset_0x0044DA                                         
                rts                                                             
Offset_0x00448E:
                cmpi.w  #$0017, ($FFFFFF82).w                                   
                bne.s   Offset_0x0044D8                                         
                move.w  ($FFFFFF84).w, D0                                       
                move.b  (Control_Ports_Buffer_Data+$0001).w, D1      ; $FFFFF605
                andi.b  #$0C, D1                                                
                beq.s   Offset_0x0044C0                                         
                btst    #$02, D1                                                
                beq.s   Offset_0x0044B0                                         
                subq.b  #$01, D0                                                
                bcc.s   Offset_0x0044B0                                         
                moveq   #$7F, D0                                                
Offset_0x0044B0:
                btst    #$03, D1                                                
                beq.s   Offset_0x0044C0                                         
                addq.b  #$01, D0                                                
                cmpi.w  #$0080, D0                                              
                bcs.s   Offset_0x0044C0                                         
                moveq   #$00, D0                                                
Offset_0x0044C0:
                btst    #$06, (Control_Ports_Buffer_Data+$0001).w    ; $FFFFF605
                beq.s   Offset_0x0044D0                                         
                addi.b  #$10, D0                                                
                andi.b  #$7F, D0                                                
Offset_0x0044D0:
                move.w  D0, ($FFFFFF84).w                                       
                bsr     Offset_0x0044DA                                         
Offset_0x0044D8:
                rts                                                             
Offset_0x0044DA:
                lea     (Level_Select_Text), A1                ; Offset_0x004592                             
                lea     (VDP_Data_Port), A6                          ; $00C00000
                move.l  #$608C0003, D4                                          
                move.w  #$8680, D3                                              
                moveq   #$17, D1                                                
Offset_0x0044F2:
                move.l  D4, $0004(A6)                                           
                bsr     Offset_0x004576                                         
                addi.l  #$00800000, D4                                          
                dbra    D1, Offset_0x0044F2                                     
                moveq   #$00, D0                                                
                move.w  ($FFFFFF82).w, D0                                       
                move.w  D0, D1                                                  
                move.l  #$608C0003, D4                                          
                lsl.w   #$07, D0                                                
                swap.w  D0                                                      
                add.l   D0, D4                                                  
                lea     (Level_Select_Text), A1                ; Offset_0x004592                              
                mulu.w  #$001B, D1                                              
                adda.w  D1, A1                                                  
                move.w  #$C680, D3                                              
                move.l  D4, $0004(A6)                                           
                bsr     Offset_0x004576                                         
                move.w  #$8680, D3                                              
                cmpi.w  #$0017, ($FFFFFF82).w                                   
                bne.s   Offset_0x004540                                         
                move.w  #$C680, D3                                              
Offset_0x004540:
                move.l  #$6C300003, (VDP_Control_Port)               ; $00C00004
                move.w  ($FFFFFF84).w, D0                                       
                addi.w  #$0080, D0                                              
                move.b  D0, D2                                                  
                lsr.b   #$04, D0                                                
                bsr     Offset_0x004562                                         
                move.b  D2, D0                                                  
                bsr     Offset_0x004562                                         
                rts                                                             
Offset_0x004562:
                andi.w  #$000F, D0                                              
                cmpi.b  #$0A, D0                                                
                bcs.s   Offset_0x004570                                         
                addi.b  #$07, D0                                                
Offset_0x004570:
                add.w   D3, D0                                                  
                move.w  D0, (A6)                                                
                rts                                                             
Offset_0x004576:
                moveq   #$1A, D2                                                
Offset_0x004578:
                moveq   #$00, D0                                                
                move.b  (A1)+, D0                                               
                bpl.s   Offset_0x004588                                         
                move.w  #$0000, (A6)                                            
                dbra    D2, Offset_0x004578                                     
                rts                                                             
Offset_0x004588:
                add.w   D3, D0                                                  
                move.w  D0, (A6)                                                
                dbra    D2, Offset_0x004578                                     
                rts                                                             
;-------------------------------------------------------------------------------
Level_Select_Text:                                             ; Offset_0x004592
                dc.b    _G,_R,_E,_E,_N,__,_H,_I,_L,_L,__,_Z,_O,_N,_E,__,__,__,__,__,_S,_T,_A,_G,_E,__,_0  
                dc.b    __,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,_S,_T,_A,_G,_E,__,_1  
                dc.b    _M,_E,_T,_R,_O,_P,_O,_L,_I,_S,__,_Z,_O,_N,_E,__,__,__,__,__,_S,_T,_A,_G,_E,__,_0  
                dc.b    __,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,_S,_T,_A,_G,_E,__,_1  
                dc.b    __,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,_S,_T,_A,_G,_E,__,_2     
                dc.b    _H,_I,_L,_L,__,_T,_O,_P,__,_Z,_O,_N,_E,__,__,__,__,__,__,__,_S,_T,_A,_G,_E,__,_0 
                dc.b    __,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,_S,_T,_A,_G,_E,__,_1
                dc.b    _H,_I,_D,_D,_E,_N,__,_P,_A,_L,_A,_C,_E,__,_Z,_O,_N,_E,__,__,_S,_T,_A,_G,_E,__,_0 
                dc.b    __,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,_S,_T,_A,_G,_E,__,_1
                dc.b    _O,_I,_L,__,_O,_C,_E,_A,_N,__,_Z,_O,_N,_E,__,__,__,__,__,__,_S,_T,_A,_G,_E,__,_0 
                dc.b    __,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,_S,_T,_A,_G,_E,__,_1 
                dc.b    _D,_U,_S,_T,__,_H,_I,_L,_L,__,_Z,_O,_N,_E,__,__,__,__,__,__,_S,_T,_A,_G,_E,__,_0 
                dc.b    __,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,_S,_T,_A,_G,_E,__,_1                  
                dc.b    _C,_A,_S,_I,_N,_O,__,_N,_I,_G,_H,_T,__,_Z,_O,_N,_E,__,__,__,_S,_T,_A,_G,_E,__,_0 
                dc.b    __,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,_S,_T,_A,_G,_E,__,_1 
                dc.b    _C,_H,_E,_M,_I,_C,_A,_L,__,_P,_L,_A,_N,_T,__,_Z,_O,_N,_E,__,_S,_T,_A,_G,_E,__,_0 
                dc.b    __,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,_S,_T,_A,_G,_E,__,_1 
                dc.b    _N,_E,_O,__,_G,_R,_E,_E,_N,__,_H,_I,_L,_L,__,_Z,_O,_N,_E,__,_S,_T,_A,_G,_E,__,_0  
                dc.b    __,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,_S,_T,_A,_G,_E,__,_1
                dc.b    _S,_K,_Y,__,_C,_H,_A,_S,_E,__,_Z,_O,_N,_E,__,__,__,__,__,__,_S,_T,_A,_G,_E,__,_0  
                dc.b    _S,_K,_Y,__,_F,_O,_R,_T,_R,_E,_S,_S,__,_Z,_O,_N,_E,__,__,__,_S,_T,_A,_G,_E,__,_0                
                dc.b    _D,_E,_A,_T,_H,__,_E,_G,_G,__,_Z,_O,_N,_E,__,__,__,__,__,__,_S,_T,_A,_G,_E,__,_0                  
                dc.b    _S,_P,_E,_C,_I,_A,_L,__,_S,_T,_A,_G,_E,__,__,__,__,__,__,__,__,__,__,__,__,__,__
                dc.b    _S,_O,_U,_N,_D,__,_S,_E,_L,_E,_C,_T,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__
;-------------------------------------------------------------------------------
; Offset_0x00481A:
                lea     (M68K_RAM_Start), A1                         ; $FFFF0000
                move.w  #$02EB, D2                                              
Offset_0x004824:
                move.w  (A1), D0                                                
                move.w  D0, D1                                                  
                andi.w  #$F800, D1                                              
                andi.w  #$07FF, D0                                              
                lsr.w   #$01, D0                                                
                or.w    D0, D1                                                  
                move.w  D1, (A1)+                                               
                dbra    D2, Offset_0x004824                                     
                rts   
;-------------------------------------------------------------------------------
; Offset_0x00483C:
                lea     ($00FE0000), A1                                         
                lea     ($00FE0080), A2                                         
                lea     (M68K_RAM_Start), A3                         ; $FFFF0000
                move.w  #$003F, D1                                              
Offset_0x004852:
                bsr     Offset_0x0048E4                                         
                bsr     Offset_0x0048E4                                         
                dbra    D1, Offset_0x004852                                     
                lea     ($00FE0000), A1                                         
                lea     (M68K_RAM_Start&$00FFFFFF), A2               ; $00FF0000
                move.w  #$003F, D1                                              
Offset_0x00486E:
                move.w  #$0000, (A2)+                                           
                dbra    D1, Offset_0x00486E                                     
                move.w  #$3FBF, D1                                              
Offset_0x00487A:
                move.w  (A1)+, (A2)+                                            
                dbra    D1, Offset_0x00487A                                     
                rts        
;-------------------------------------------------------------------------------    
; Offset_0x004882:
                lea     ($00FE0000), A1                                         
                lea     (M68K_RAM_Start), A3                         ; $FFFF0000
                moveq   #$1F, D0                                                
Offset_0x004890:
                move.l  (A1)+, (A3)+                                            
                dbra    D0, Offset_0x004890                                     
                moveq   #$00, D7                                                
                lea     ($00FE0000), A1                                         
                move.w  #$00FF, D5                                              
Offset_0x0048A2:
                lea     (M68K_RAM_Start), A3                         ; $FFFF0000
                move.w  D7, D6                                                  
Offset_0x0048AA:
                movem.l A1-A3, -(A7)                                            
                move.w  #$003F, D0                                              
Offset_0x0048B2:
                cmpm.w  (A1)+, (A3)+                                            
                bne.s   Offset_0x0048C8                                         
                dbra    D0, Offset_0x0048B2                                     
                movem.l (A7)+, A1-A3                                            
                adda.w  #$0080, A1                                              
                dbra    D5, Offset_0x0048A2                                     
                bra.s   Offset_0x0048E2                                         
Offset_0x0048C8:
                movem.l (A7)+, A1-A3                                            
                adda.w  #$0080, A3                                              
                dbra    D6, Offset_0x0048AA                                     
                moveq   #$1F, D0                                                
Offset_0x0048D6:
                move.l  (A1)+, (A3)+                                            
                dbra    D0, Offset_0x0048D6                                     
                addq.l  #$01, D7                                                
                dbra    D5, Offset_0x0048A2                                     
Offset_0x0048E2:
                bra.s   Offset_0x0048E2  
;-------------------------------------------------------------------------------                                                       
Offset_0x0048E4:
                moveq   #$07, D0                                                
Offset_0x0048E6:
                move.l  (A3)+, (A1)+                                            
                move.l  (A3)+, (A1)+                                            
                move.l  (A3)+, (A1)+                                            
                move.l  (A3)+, (A1)+                                            
                move.l  (A3)+, (A2)+                                            
                move.l  (A3)+, (A2)+                                            
                move.l  (A3)+, (A2)+                                            
                move.l  (A3)+, (A2)+                                            
                dbra    D0, Offset_0x0048E6                                     
                adda.w  #$0080, A1                                              
                adda.w  #$0080, A2                                              
                rts                                                                                                                                                                                                                       
;-------------------------------------------------------------------------------
Art_1p2pVs:                                                    ; Offset_0x004904 
                incbin  'data\art\1p2pVs.nem'                                                                           
;===============================================================================
; Tela título
; <<<-
;===============================================================================     
                nop
;===============================================================================
; Modo de jogo ou demonstração das fases 
; ->>>
;=============================================================================== 
PlayList:                                                      ; Offset_0x004994
                dc.b    $82  ; GHz
                dc.b    $82
                dc.b    $85  ; Wz
                dc.b    $84
                dc.b    $85  ; Mz
                dc.b    $85  ; Mz
                dc.b    $8F  ; SFz
                dc.b    $86  ; HTz
                dc.b    $83  ; HPz
                dc.b    $8D
                dc.b    $88  ; OOz
                dc.b    $8B  ; DHz
                dc.b    $89  ; CNz
                dc.b    $8E  ; CPz
                dc.b    $8F  ; DEz
                dc.b    $87  ; NGHz
                dc.b    $8F  ; SCz
                dc.b    $00 
Level:                                                         ; Offset_0x0049A6  
                bset    #$07, (Game_Mode).w                          ; $FFFFF600
                tst.w   (Auto_Control_Player_Flag).w                 ; $FFFFFFF0                                  
                bmi.s   Level_Init                             ; Offset_0x0049BA
                move.b  #$F9, D0                                                
                bsr     Play_Sfx                               ; Offset_0x001912
Level_Init:                                                    ; Offset_0x0049BA
                bsr     ClearPLC                               ; Offset_0x001C12
                bsr     Pal_FadeFrom                           ; Offset_0x002C8A
                tst.w   (Auto_Control_Player_Flag).w                 ; $FFFFFFF0                           
                bmi.s   Offset_0x004A08                                         
                move    #$2700, SR                                              
                bsr     ClearScreen                            ; Offset_0x0017E4
                jsr     (Load_Title_Cards_Art)                 ; Offset_0x010DAE
                move    #$2300, SR                                              
                moveq   #$00, D0                                                
                move.w  D0, ($FFFFFE04).w                                       
                move.b  (Level_Id).w, D0                             ; $FFFFFE10
                add.w   D0, D0                                                  
                add.w   D0, D0                                                  
                move.w  D0, D1                                                  
                add.w   D0, D0                                                  
                add.w   D1, D0                                                  
                lea     (TilesMainTable), A2                   ; Offset_0x03AB70
                lea     $00(A2, D0), A2                                         
                moveq   #$00, D0                                                
                move.b  (A2), D0                                                
                beq.s   Offset_0x004A02                                         
                bsr     LoadPLC                                ; Offset_0x001BB4
Offset_0x004A02:
                moveq   #$01, D0                                                
                bsr     LoadPLC                                ; Offset_0x001BB4
Offset_0x004A08:
                lea     ($FFFFAC00).w, A1                                       
                moveq   #$00, D0                                                
                move.w  #$00FF, D1                                              
Offset_0x004A12:
                move.l  D0, (A1)+                                               
                dbra    D1, Offset_0x004A12                                     
                lea     (Obj_Memory_Address).w, A1                   ; $FFFFB000
                moveq   #$00, D0                                                
                move.w  #$07FF, D1                                              
Offset_0x004A22:
                move.l  D0, (A1)+                                               
                dbra    D1, Offset_0x004A22                                     
                lea     ($FFFFF628).w, A1                                       
                moveq   #$00, D0                                                
                move.w  #$0015, D1                                              
Offset_0x004A32:
                move.l  D0, (A1)+                                               
                dbra    D1, Offset_0x004A32                                     
                lea     ($FFFFF700).w, A1                                       
                moveq   #$00, D0                                                
                move.w  #$003F, D1                                              
Offset_0x004A42:
                move.l  D0, (A1)+                                               
                dbra    D1, Offset_0x004A42                                     
                lea     ($FFFFFE60).w, A1                                       
                moveq   #$00, D0                                                
                move.w  #$0047, D1                                              
Offset_0x004A52:
                move.l  D0, (A1)+                                               
                dbra    D1, Offset_0x004A52                                     
                lea     ($FFFFE700).w, A1                                       
                moveq   #$00, D0                                                
                move.w  #$003F, D1                                              
Offset_0x004A62:
                move.l  D0, (A1)+                                               
                dbra    D1, Offset_0x004A62                                     
                cmpi.w  #$0D01, (Level_Id).w                         ; $FFFFFE10
                beq.s   Init_Water                             ; Offset_0x004A80
                cmpi.b  #$0F, (Level_Id).w                           ; $FFFFFE10
                beq.s   Init_Water                             ; Offset_0x004A80
                cmpi.b  #$08, (Level_Id).w                           ; $FFFFFE10
                bne.s   Init_No_Water                          ; Offset_0x004A8C
Init_Water:                                                    ; Offset_0x004A80
                move.b  #$01, (Water_Level_Flag).w                   ; $FFFFF730
                move.w  #$0000, (Two_Player_Flag).w                  ; $FFFFFFD8
Init_No_Water:                                                 ; Offset_0x004A8C
                lea     (VDP_Control_Port), A6                       ; $00C00004
                move.w  #$8B03, (A6)                                            
                move.w  #$8230, (A6)                                            
                move.w  #$8407, (A6)                                            
                move.w  #$857C, (A6)                                            
                move.w  #$9001, (A6)                                            
                move.w  #$8004, (A6)                                            
                move.w  #$8720, (A6)                                            
                tst.b   ($FFFFFFD2).w                                           
                beq.s   Offset_0x004ACE                                         
                btst    #$05, (Control_Ports_Buffer_Data).w          ; $FFFFF604                                 
                beq.s   Offset_0x004AC0                                         
                move.w  #$8C89, (A6)                                            
Offset_0x004AC0:
                btst    #$06, (Control_Ports_Buffer_Data).w          ; $FFFFF604                               
                beq.s   Offset_0x004ACE                                         
                move.b  #$01, (Debug_Mode_Active_Flag).w             ; $FFFFFFFA                                
Offset_0x004ACE:
                move.w  #$8ADF, ($FFFFF624).w                                   
                tst.w   (Two_Player_Flag).w                          ; $FFFFFFD8
                beq.s   Offset_0x004AE8                                         
                move.w  #$8A6B, ($FFFFF624).w                                   
                move.w  #$8014, (A6)                                            
                move.w  #$8C87, (A6)                                            
Offset_0x004AE8:
                move.w  ($FFFFF624).w, (A6)                                     
                move.l  #DMA_Buffer_List, (DMA_Buffer_List_End).w ; $FFFFDC00, $FFFFDCFC                          
                tst.b   (Water_Level_Flag).w                         ; $FFFFF730
                beq.s   LevelInit_NoWater                      ; Offset_0x004B34
                move.w  #$8014, (A6)                                            
                moveq   #$00, D0                                                
                move.w  (Level_Id).w, D0                             ; $FFFFFE10
                subi.w  #$0800, D0                                              
                ror.b   #$01, D0                                                
                lsr.w   #$06, D0                                                
                andi.w  #$FFFE, D0                                              
                lea     (Water_Height_Array), A1               ; Offset_0x004F76
                move.w  $00(A1, D0), D0                                         
                move.w  D0, (Water_Level).w                          ; $FFFFF646                                  
                move.w  D0, ($FFFFF648).w                                       
                move.w  D0, ($FFFFF64A).w                                       
                clr.b   ($FFFFF64D).w                                           
                clr.b   ($FFFFF64E).w                                           
                move.b  #$01, ($FFFFF64C).w                                     
LevelInit_NoWater:                                             ; Offset_0x004B34
                moveq   #$03, D0                                                
                bsr     PalLoad2                               ; Offset_0x002F4E
                tst.b   (Water_Level_Flag).w                         ; $FFFFF730
                beq.s   LevelInit_NoUndewaterPalette           ; Offset_0x004B66
                moveq   #$15, D0                                                
                cmpi.b  #$08, (Level_Id).w                           ; $FFFFFE10
                beq.s   LevelInit_UndewaterPalette             ; Offset_0x004B56
                moveq   #$16, D0                                                
                cmpi.b  #$0D, (Level_Id).w                           ; $FFFFFE10
                beq.s   LevelInit_UndewaterPalette             ; Offset_0x004B56
                moveq   #$17, D0                                                
LevelInit_UndewaterPalette:                                    ; Offset_0x004B56
                bsr     PalLoad3_Water                         ; Offset_0x002F66
                tst.b   (Saved_Level_Flag).w                         ; $FFFFFE30                                      
                beq.s   LevelInit_NoUndewaterPalette           ; Offset_0x004B66
                move.b  ($FFFFFE53).w, ($FFFFF64E).w                            
LevelInit_NoUndewaterPalette:                                  ; Offset_0x004B66
                tst.w   (Auto_Control_Player_Flag).w                 ; $FFFFFFF0                                  
                bmi.s   Offset_0x004BB8                                         
                moveq   #$00, D0                                                
                move.b  (Level_Id).w, D0                             ; $FFFFFE10
                lea     PlayList(PC), A1                       ; Offset_0x004994                            
                move.b  $00(A1, D0), D0                                         
                move.w  D0, ($FFFFFF90).w                                       
                bsr     Play_Music                             ; Offset_0x00190C                                         
                move.b  #$34, ($FFFFB080).w                                     
LevelInit_TitleCard:                                           ; Offset_0x004B88
                move.b  #$0C, (VBlank_Index).w                       ; $FFFFF62A
                bsr     Wait_For_VSync                         ; Offset_0x003938
                jsr     (Load_Objects)                         ; Offset_0x011BB8
                jsr     (Build_Sprites)                        ; Offset_0x0121FE
                bsr     RunPLC                                 ; Offset_0x001C20
                move.w  ($FFFFB088).w, D0                                       
                cmp.w   ($FFFFB0B0).w, D0                                       
                bne.s   LevelInit_TitleCard                    ; Offset_0x004B88
                tst.l   ($FFFFF680).w                                           
                bne.s   LevelInit_TitleCard                    ; Offset_0x004B88
                jsr     (Head_Up_Display_Base)                 ; Offset_0x0396B4
Offset_0x004BB8:
                moveq   #$03, D0                                                
                bsr     PalLoad1                               ; Offset_0x002F32
                bsr     Level_Size_Load                        ; Offset_0x0096A8
                bsr     Background_Scroll_Layer                ; Offset_0x009AF6
                bset    #$02, (Scroll_Flag_Array).w                  ; $FFFFEE50                      
                bsr     Main_Level_Load_16_128_Blocks          ; Offset_0x00B914
                jsr     (Load_16x16_Mappings_For_Dyn_Sprites)  ; Offset_0x038DCC
                bsr     Load_Tiles_From_Start                  ; Offset_0x00B82C
                jsr     (FloorLog_Unk)                         ; Offset_0x0198B6
                bsr     Load_Colision_Index                    ; Offset_0x0053D4
                bsr     Water_Effects                          ; Offset_0x004F00
                move.b  #$01, (Obj_Memory_Address).w                 ; $FFFFB000
                tst.w   (Auto_Control_Player_Flag).w                 ; $FFFFFFF0                              
                bmi.s   Offset_0x004BFA                                         
                move.b  #$21, ($FFFFB380).w                                     
Offset_0x004BFA:
                cmpi.b  #$06, (Level_Id).w                           ; $FFFFFE10
                beq.s   Offset_0x004C30                                         
                cmpi.b  #$0E, (Level_Id).w                           ; $FFFFFE10
                beq.s   Offset_0x004C30                                         
                cmpi.b  #$10, (Level_Id).w                           ; $FFFFFE10
                beq.s   Offset_0x004C30                                         
                move.b  #$02, ($FFFFB040).w                                     
                move.w  ($FFFFB008).w, ($FFFFB048).w                            
                move.w  ($FFFFB00C).w, ($FFFFB04C).w                            
                subi.w  #$0020, ($FFFFB048).w                                   
                addi.w  #$0004, ($FFFFB04C).w                                   
Offset_0x004C30:
                move.b  #$08, ($FFFFB400).w                                     
                move.b  #$08, ($FFFFB440).w                                     
                move.w  #$0000, ($FFFFF602).w                                   
                move.w  #$0000, (Control_Ports_Buffer_Data).w        ; $FFFFF604                              
                tst.b   (Water_Level_Flag).w                         ; $FFFFF730
                beq.s   Offset_0x004C66                                         
                move.b  #$04, ($FFFFB780).w                                     
                move.w  #$0060, ($FFFFB788).w                                   
                move.b  #$04, ($FFFFB7C0).w                                     
                move.w  #$0120, ($FFFFB7C8).w                                   
Offset_0x004C66:
                cmpi.b  #$0D, (Level_Id).w                           ; $FFFFFE10
                bne.s   Offset_0x004C74                                         
                move.b  #$7C, ($FFFFB580).w                                     
Offset_0x004C74:
                cmpi.b  #$0A, (Level_Id).w                           ; $FFFFFE10
                bne.s   Offset_0x004C82                                         
                move.b  #$07, ($FFFFB780).w                                     
Offset_0x004C82:
                jsr     (Load_Object_Pos)                      ; Offset_0x013694
                jsr     (Load_Ring_Pos)                        ; Offset_0x012B94
                jsr     (Load_Triangle_Pos)                    ; Offset_0x012FB8
                jsr     (Load_Objects)                         ; Offset_0x011BB8
                jsr     (Build_Sprites)                        ; Offset_0x0121FE
                bsr     J_Dynamic_Art_Cues                     ; Offset_0x005BA8
                moveq   #$00, D0                                                
                tst.b   (Saved_Level_Flag).w                         ; $FFFFFE30                                   
                bne.s   Offset_0x004CB8                                         
                move.w  D0, (Ring_Count).w                           ; $FFFFFE20                               
                move.l  D0, ($FFFFFE22).w                                       
                move.b  D0, (Ring_Life_Flag).w                       ; $FFFFFE1B                                 
Offset_0x004CB8:
                move.b  D0, ($FFFFFE1A).w                                       
                move.b  D0, ($FFFFFE2C).w                                       
                move.b  D0, ($FFFFFE2D).w                                       
                move.b  D0, ($FFFFFE2E).w                                       
                move.b  D0, ($FFFFFE2F).w                                       
                move.b  D0, ($FFFFFF4E).w                                       
                move.w  D0, ($FFFFFE08).w                                       
                move.w  D0, ($FFFFFE02).w                                       
                bsr     Oscillate_Num_Init                     ; Offset_0x00548E
                move.b  #$01, ($FFFFFE1F).w                                     
                move.b  #$01, ($FFFFFE1D).w                                     
                move.b  #$01, ($FFFFFE1E).w                                     
                move.w  #$0004, ($FFFFEED2).w                                   
                move.w  #$0000, ($FFFFE500).w                                   
                move.w  #$0000, ($FFFFF790).w                                   
                move.w  #$0000, ($FFFFF732).w                                   
                lea     (Demo_Index), A1                       ; Offset_0x00531C
                moveq   #$00, D0                                                
                move.b  (Level_Id).w, D0                             ; $FFFFFE10
                lsl.w   #$02, D0                                                
                move.l  $00(A1, D0), A1                                         
                tst.w   (Auto_Control_Player_Flag).w                 ; $FFFFFFF0                                    
                bpl.s   Offset_0x004D30                                         
                lea     (Demo_End_Index), A1                   ; Offset_0x0053A4
                move.w  ($FFFFFFF4).w, D0                                       
                subq.w  #$01, D0                                                
                lsl.w   #$02, D0                                                
                move.l  $00(A1, D0), A1                                         
Offset_0x004D30:
                move.b  $0001(A1), ($FFFFF792).w                                
                subq.b  #$01, ($FFFFF792).w                                     
                lea     (Demo_Green_Hill_Miles), A1            ; Offset_0x0057A8
                move.b  $0001(A1), ($FFFFF734).w                                
                subq.b  #$01, ($FFFFF734).w                                     
                move.w  #$0668, ($FFFFF614).w                                   
                tst.w   (Auto_Control_Player_Flag).w                 ; $FFFFFFF0                                   
                bpl.s   Offset_0x004D6A                                         
                move.w  #$021C, ($FFFFF614).w                                   
                cmpi.w  #$0004, ($FFFFFFF4).w                                   
                bne.s   Offset_0x004D6A                                         
                move.w  #$01FE, ($FFFFF614).w                                   
Offset_0x004D6A:
                tst.b   (Water_Level_Flag).w                         ; $FFFFF730
                beq.s   Offset_0x004D8A                                         
                moveq   #$15, D0                                                
                cmpi.b  #$08, (Level_Id).w                           ; $FFFFFE10
                beq.s   Offset_0x004D86                                         
                moveq   #$16, D0                                                
                cmpi.b  #$0D, (Level_Id).w                           ; $FFFFFE10
                beq.s   Offset_0x004D86                                         
                moveq   #$17, D0                                                
Offset_0x004D86:
                bsr     PalLoad4_Water                         ; Offset_0x002F82
Offset_0x004D8A:
                move.w  #$0003, D1                                              
Offset_0x004D8E:
                move.b  #$08, (VBlank_Index).w                       ; $FFFFF62A
                bsr     Wait_For_VSync                         ; Offset_0x003938
                dbra    D1, Offset_0x004D8E                                     
                move.w  #$202F, ($FFFFF626).w                                   
                bsr     Pal_FadeTo_2                           ; Offset_0x002BEC                                         
                tst.w   (Auto_Control_Player_Flag).w                 ; $FFFFFFF0                          
                bmi.s   Offset_0x004DBE                                         
                addq.b  #$02, ($FFFFB0A4).w                                     
                addq.b  #$04, ($FFFFB0E4).w                                     
                addq.b  #$04, ($FFFFB124).w                                     
                addq.b  #$04, ($FFFFB164).w                                     
                bra.s   Offset_0x004DC6                                         
Offset_0x004DBE:
                moveq   #$02, D0                                                
                jsr     (LoadPLC)                              ; Offset_0x001BB4
Offset_0x004DC6:
                bclr    #$07, (Game_Mode).w                          ; $FFFFF600
Level_Main_Loop:                                               ; Offset_0x004DCC
                bsr     Pause                                  ; Offset_0x00192A                                         
                move.b  #$08, (VBlank_Index).w                       ; $FFFFF62A
                bsr     Wait_For_VSync                         ; Offset_0x003938
                addq.w  #$01, ($FFFFFE04).w                                     
                bsr     Init_Demo_Control                      ; Offset_0x005208                                         
                bsr     Water_Effects                          ; Offset_0x004F00
                jsr     (Load_Objects)                         ; Offset_0x011BB8
                tst.w   ($FFFFFE02).w                                           
                bne     Level                                  ; Offset_0x0049A6                                         
                tst.w   ($FFFFFE08).w                                           
                bne.s   Offset_0x004E02                                         
                cmpi.b  #$06, (Obj_Memory_Address+Obj_Routine).w     ; $FFFFB024                                 
                bcc.s   Offset_0x004E06                                         
Offset_0x004E02:
                bsr     Background_Scroll_Layer                ; Offset_0x009AF6
Offset_0x004E06:
                bsr     Change_Water_Surface_Pos               ; Offset_0x004ED6
                jsr     (Load_Ring_Pos)                        ; Offset_0x012B94
                cmpi.b  #gm_PlayMode, (Level_Id).w             ; $0C ; $FFFFFE10
                bne.s   Offset_0x004E1E                                         
                jsr     (Load_Triangle_Pos)                    ; Offset_0x012FB8
Offset_0x004E1E:
                bsr     J_Dynamic_Art_Cues                     ; Offset_0x005BA8
                bsr     PalCycle_Load                          ; Offset_0x002390
                bsr     RunPLC                                 ; Offset_0x001C20
                bsr     Oscillate_Num_Do                       ; Offset_0x0054E4
                bsr     Change_Ring_Frame                      ; Offset_0x00557C
                bsr     Test_End_Level_Art_Load                ; Offset_0x0055EA
                jsr     (Build_Sprites)                        ; Offset_0x0121FE
                jsr     (Load_Object_Pos)                      ; Offset_0x013694
                cmpi.b  #gm_DemoMode, (Game_Mode).w            ; $08 ; $FFFFF600
                beq.s   Offset_0x004E56                                         
                cmpi.b  #gm_PlayMode, (Game_Mode).w            ; $0C ; $FFFFF600
                beq     Level_Main_Loop                        ; Offset_0x004DCC
                rts                                                             
Offset_0x004E56:
                tst.w   ($FFFFFE02).w                                           
                bne.s   Offset_0x004E74                                         
                tst.w   ($FFFFF614).w                                           
                beq.s   Offset_0x004E74                                         
                cmpi.b  #gm_DemoMode, (Game_Mode).w            ; $08 ; $FFFFF600
                beq     Level_Main_Loop                        ; Offset_0x004DCC
                move.b  #gm_SEGALogo, (Game_Mode).w            ; $00 ; $FFFFF600
                rts                                                             
Offset_0x004E74:
                cmpi.b  #gm_DemoMode, (Game_Mode).w            ; $08 ; $FFFFF600
                bne.s   Offset_0x004E8E                                         
                move.b  #gm_SEGALogo, (Game_Mode).w            ; $00 ; $FFFFF600
                tst.w   (Auto_Control_Player_Flag).w                 ; $FFFFFFF0                                   
                bpl.s   Offset_0x004E8E                                         
                move.b  #$1C, (Game_Mode).w                          ; $FFFFF600
Offset_0x004E8E:
                move.w  #$003C, ($FFFFF614).w                                   
                move.w  #$003F, ($FFFFF626).w                                   
                clr.w   ($FFFFF794).w                                           
Offset_0x004E9E:
                move.b  #$08, (VBlank_Index).w                       ; $FFFFF62A
                bsr     Wait_For_VSync                         ; Offset_0x003938
                bsr     Init_Demo_Control                      ; Offset_0x005208                                         
                jsr     (Load_Objects)                         ; Offset_0x011BB8
                jsr     (Build_Sprites)                        ; Offset_0x0121FE
                jsr     (Load_Object_Pos)                      ; Offset_0x013694
                subq.w  #$01, ($FFFFF794).w                                     
                bpl.s   Offset_0x004ECE                                         
                move.w  #$0002, ($FFFFF794).w                                   
                bsr     Pal_FadeOut                            ; Offset_0x002CAA
Offset_0x004ECE:
                tst.w   ($FFFFF614).w                                           
                bne.s   Offset_0x004E9E                                         
                rts                                            
;-------------------------------------------------------------------------------                  
; Modificar a superfície d´água
; ->>>
;-------------------------------------------------------------------------------                                   
Change_Water_Surface_Pos:                                      ; Offset_0x004ED6
                tst.b   (Water_Level_Flag).w                         ; $FFFFF730
                beq.s   Offset_0x004EFE                                         
                move.w  (Camera_X).w, D1                             ; $FFFFEE00                          
                btst    #$00, ($FFFFFE05).w                                     
                beq.s   Offset_0x004EEC                                         
                addi.w  #$0020, D1                                              
Offset_0x004EEC:
                move.w  D1, D0                                                  
                addi.w  #$0060, D0                                              
                move.w  D0, ($FFFFB788).w                                       
                addi.w  #$0120, D1                                              
                move.w  D1, ($FFFFB7C8).w                                       
Offset_0x004EFE:
                rts  
;-------------------------------------------------------------------------------                  
; Modificar a superfície d´água
; <<<-
;-------------------------------------------------------------------------------                                   

;-------------------------------------------------------------------------------                  
; Efeitos embaixo d´água
; ->>>
;-------------------------------------------------------------------------------                                                                         
Water_Effects:                                                 ; Offset_0x004F00
                tst.b   (Water_Level_Flag).w                         ; $FFFFF730
                beq.s   Offset_0x004F5C                                         
                tst.b   ($FFFFEEDC).w                                           
                bne.s   Offset_0x004F18                                         
                cmpi.b  #$06, (Obj_Memory_Address+Obj_Routine).w     ; $FFFFB024                               
                bcc.s   Offset_0x004F18                                         
                bsr     Dynamic_Water_Height                   ; Offset_0x004F96
Offset_0x004F18:
                clr.b   ($FFFFF64E).w                                           
                moveq   #$00, D0                                                
                cmpi.b  #$0F, (Level_Id).w                           ; $FFFFFE10
                beq.s   Offset_0x004F2C                                         
                move.b  ($FFFFFE60).w, D0                                       
                lsr.w   #$01, D0                                                
Offset_0x004F2C:
                add.w   ($FFFFF648).w, D0                                       
                move.w  D0, (Water_Level).w                          ; $FFFFF646                               
                move.w  (Water_Level).w, D0                          ; $FFFFF646                                     
                sub.w   (Camera_Y).w, D0                             ; $FFFFEE04                         
                bcc.s   Offset_0x004F4E                                         
                tst.w   D0                                                      
                bpl.s   Offset_0x004F4E                                         
                move.b  #$DF, ($FFFFF625).w                                     
                move.b  #$01, ($FFFFF64E).w                                     
Offset_0x004F4E:
                cmpi.w  #$00DF, D0                                              
                bcs.s   Offset_0x004F58                                         
                move.w  #$00DF, D0                                              
Offset_0x004F58:
                move.b  D0, ($FFFFF625).w                                       
Offset_0x004F5C:
                cmpi.b  #$0A, (Level_Id).w                           ; $FFFFFE10
                bne.s   Offset_0x004F68                                         
                bsr     OOz_Oil_Slides                         ; Offset_0x0050A2                                         
Offset_0x004F68:
                cmpi.b  #$06, (Level_Id).w                           ; $FFFFFE10
                bne.s   Offset_0x004F74                                         
                bsr     SFz_Wind_Tunnels                       ; Offset_0x004FFC                                         
Offset_0x004F74:
                rts   
;-------------------------------------------------------------------------------                  
; Efeitos embaixo d´água
; <<<-
;-------------------------------------------------------------------------------  
Water_Height_Array:                                            ; Offset_0x004F76  
                dc.w    $0600, $0600
                dc.w    $0600, $0600
                dc.w    $0600, $0600
                dc.w    $0600, $0600
                dc.w    $0600, $0600
                dc.w    $0600, $0710
                dc.w    $0600, $0600
                dc.w    $0410, $0510     
;-------------------------------------------------------------------------------                                
; Muda o nível d´água nas fases
; ->>>
;------------------------------------------------------------------------------- 
Dynamic_Water_Height:                                          ; Offset_0x004F96 
                moveq   #$00, D0                                                
                move.w  (Level_Id).w, D0                             ; $FFFFFE10
                subi.w  #$0800, D0                                              
                ror.b   #$01, D0                                                
                lsr.w   #$06, D0                                                
                andi.w  #$FFFE, D0                                              
                move.w  Dynamic_Water_Index(PC, D0), D0        ; Offset_0x004FCA                      
                jsr     Dynamic_Water_Index(PC, D0)            ; Offset_0x004FCA                           
                moveq   #$00, D1                                                
                move.b  ($FFFFF64C).w, D1                                       
                move.w  ($FFFFF64A).w, D0                                       
                sub.w   ($FFFFF648).w, D0                                       
                beq.s   Offset_0x004FC8                                         
                bcc.s   Offset_0x004FC4                                         
                neg.w   D1                                                      
Offset_0x004FC4:
                add.w   D1, ($FFFFF648).w                                       
Offset_0x004FC8:
                rts   
Dynamic_Water_Index:                                           ; Offset_0x004FCA
                dc.w    Dynamic_Null_Water-Dynamic_Water_Index    ; HPz_1
                dc.w    Dynamic_Null_Water-Dynamic_Water_Index    ; HPz_2
                dc.w    Dynamic_Null_Water-Dynamic_Water_Index    ; Lvl9_1
                dc.w    Dynamic_Null_Water-Dynamic_Water_Index    ; Lvl9_2
                dc.w    Dynamic_Null_Water-Dynamic_Water_Index    ; OOz_1
                dc.w    Dynamic_Null_Water-Dynamic_Water_Index    ; OOz_2
                dc.w    Dynamic_Null_Water-Dynamic_Water_Index    ; DHz_1
                dc.w    Dynamic_Null_Water-Dynamic_Water_Index    ; DHz_2
                dc.w    Dynamic_Null_Water-Dynamic_Water_Index    ; CNz_1
                dc.w    Dynamic_Null_Water-Dynamic_Water_Index    ; CNz_2
                dc.w    Dynamic_Null_Water-Dynamic_Water_Index    ; CPz_1
                dc.w    Dynamic_CPz_Water-Dynamic_Water_Index     ; CPz_2
                dc.w    Dynamic_Null_Water-Dynamic_Water_Index    ; DEz_1
                dc.w    Dynamic_Null_Water-Dynamic_Water_Index    ; DEz_2
                dc.w    Dynamic_Null_Water-Dynamic_Water_Index    ; NGHz_1
                dc.w    Dynamic_Null_Water-Dynamic_Water_Index    ; NGHz_2
Dynamic_Null_Water:                                            ; Offset_0x004FEA 
                rts
Dynamic_CPz_Water:                                             ; Offset_0x004FEC 
                cmpi.w  #$1DE0, (Camera_X).w                         ; $FFFFEE00                           
                bcs.s   Offset_0x004FFA                                         
                move.w  #$0510, ($FFFFF64A).w                                   
Offset_0x004FFA:
                rts                                                             
;-------------------------------------------------------------------------------                                
; Muda o nível d´água nas fases
; <<<-
;-------------------------------------------------------------------------------                                    
SFz_Wind_Tunnels:                                              ; Offset_0x004FFC  
                tst.w   ($FFFFFE08).w                                           
                bne     Offset_0x005098                                         
                lea     (SFz_Wind_Data), A2                    ; Offset_0x00509A                             
                moveq   #$00, D1                                                
                lea     (Obj_Memory_Address).w, A1                   ; $FFFFB000
Offset_0x005010:
                move.w  Obj_X(A1), D0                                    ; $0008                               
                cmp.w   (A2), D0                                                
                bcs     Offset_0x005082                                         
                cmp.w   $0004(A2), D0                                           
                bcc     Offset_0x005082                                         
                move.w  Obj_Y(A1), D2                                    ; $000C                                      
                cmp.w   $0002(A2), D2                                           
                bcs     Offset_0x005082                                         
                cmp.w   $0006(A2), D2                                           
                bcc.s   Offset_0x005082                                         
                tst.b   ($FFFFF7C9).w                                           
                bne     Offset_0x005098                                         
                cmpi.b  #$04, Obj_Routine(A1)                            ; $0024                                
                bcc.s   Offset_0x005094                                         
                move.b  #$01, ($FFFFF7C7).w                                     
                subi.w  #$0004, Obj_X(A1)                                ; $0008                                  
                move.w  #$FC00, Obj_Speed(A1)                            ; $0010                                  
                move.w  #$0000, Obj_Speed_Y(A1)                          ; $0012                                      
                move.b  #$0F, Obj_Ani_Number(A1)                         ; $001C                               
                bset    #$01, Obj_Status(A1)                             ; $0022                                    
                btst    #$00, ($FFFFF602).w                                     
                beq.s   Offset_0x005074                                         
                subq.w  #$01, Obj_Y(A1)                                  ; $000C                                   
Offset_0x005074:
                btst    #$01, ($FFFFF602).w                                     
                beq.s   Offset_0x005080                                         
                addq.w  #$01, Obj_Y(A1)                                  ; $000C              
Offset_0x005080:
                rts                                                             
Offset_0x005082:
                addq.w  #$08, A2                                                
                dbra    D1, Offset_0x005010                                     
                tst.b   ($FFFFF7C7).w                                           
                beq.s   Offset_0x005098                                         
                move.b  #$00, Obj_Ani_Number(A1)                         ; $001C                        
Offset_0x005094:
                clr.b   ($FFFFF7C7).w                                           
Offset_0x005098:
                rts    
;-------------------------------------------------------------------------------                 
SFz_Wind_Data:                                                 ; Offset_0x00509A
                dc.b    $15, $00, $04, $00, $1A, $F0, $05, $80                                                                              
;------------------------------------------------------------------------------- 
OOz_Oil_Slides:                                                ; Offset_0x0050A2  
                lea     (Obj_Memory_Address).w, A1                   ; $FFFFB000
                move.b  ($FFFFF602).w, D2                                       
                bsr.s   Offset_0x0050B4                                         
                lea     (Obj_Memory_Address+$0040).w, A1             ; $FFFFB040                              
                move.b  ($FFFFF606).w, D2                                       
Offset_0x0050B4:
                btst    #$01, Obj_Status(A1)                             ; $0022              
                bne.s   Offset_0x0050E8                                         
                move.w  Obj_Y(A1), D0                                    ; $000C                             
                add.w   D0, D0                                                  
                andi.w  #$0F00, D0                                              
                move.w  Obj_X(A1), D1                                    ; $0008                                      
                lsr.w   #$07, D1                                                
                andi.w  #$007F, D1                                              
                add.w   D1, D0                                                  
                lea     (Level_Map_Buffer).w, A2                     ; $FFFF8000
                move.b  $00(A2, D0), D0                                         
                lea     OOz_Slide_Data+$0040(PC), A2           ; Offset_0x005208                      
                moveq   #$1F, D1                                                
Offset_0x0050E0:
                cmp.b   -(A2), D0                                               
                dbeq    D1, Offset_0x0050E0                                     
                beq.s   Offset_0x0050FC                                         
Offset_0x0050E8:
                tst.b   Obj_Player_Status(A1)                            ; $002B                                          
                bpl.s   Offset_0x0050FA                                         
                move.w  #$0005, Obj_Player_Control(A1)                   ; $002E                                 
                andi.b  #$7F, Obj_Player_Status(A1)                      ; $002B                                      
Offset_0x0050FA:
                rts                                                             
Offset_0x0050FC:
                lea     (OOz_Slide_Data), A2                   ; Offset_0x0051C8               
                move.b  $00(A2, D1), D0                                         
                beq.s   Offset_0x005158                                         
                move.b  Obj_Inertia(A1), D1                              ;7 $0014            
                tst.b   D0                                                      
                bpl.s   Offset_0x00511C                                         
                cmp.b   D0, D1                                                  
                ble.s   Offset_0x005126                                         
                subi.w  #$0040, Obj_Inertia(A1)                          ; $0014                         
                bra.s   Offset_0x005126                                         
Offset_0x00511C:
                cmp.b   D0, D1                                                  
                bge.s   Offset_0x005126                                         
                addi.w  #$0040, Obj_Inertia(A1)                          ; $0014                               
Offset_0x005126:
                bclr    #$00, Obj_Status(A1)                             ; $0022                             
                tst.b   D1                                                      
                bpl.s   Offset_0x005136                                         
                bset    #$00, Obj_Status(A1)                             ; $0022                          
Offset_0x005136:
                move.b  #$1B, Obj_Ani_Number(A1)                         ; $001C                        
                ori.b   #$80, Obj_Player_Status(A1)                      ; $002B                        
                move.b  ($FFFFFE0F).w, D0                                       
                andi.b  #$1F, D0                                                
                bne.s   Offset_0x005156                                         
                move.w  #$00D0, D0                                              
                jsr     (Play_Sfx)                             ; Offset_0x001912
Offset_0x005156:
                rts                                                             
Offset_0x005158:
                move.w  #$0004, D1                                              
                move.w  Obj_Inertia(A1), D0                              ; $0014                            
                btst    #$02, D2                                                
                beq.s   Offset_0x00517A                                         
                move.b  #$00, Obj_Ani_Number(A1)                         ; $001C              
                bset    #$00, Obj_Status(A1)                             ; $0022            
                sub.w   D1, D0                                                  
                tst.w   D0                                                      
                bpl.s   Offset_0x00517A                                         
                sub.w   D1, D0                                                  
Offset_0x00517A:
                btst    #$03, D2                                                
                beq.s   Offset_0x005194                                         
                move.b  #$00, Obj_Ani_Number(A1)                         ; $001C                                
                bclr    #$00, Obj_Status(A1)                             ; $0022             
                add.w   D1, D0                                                  
                tst.w   D0                                                      
                bmi.s   Offset_0x005194                                         
                add.w   D1, D0                                                  
Offset_0x005194:
                move.w  #$0004, D1                                              
                tst.w   D0                                                      
                beq.s   Offset_0x0051BC                                         
                bmi.s   Offset_0x0051AE                                         
                sub.w   D1, D0                                                  
                bhi.s   Offset_0x0051AC                                         
                move.w  #$0000, D0                                              
                move.b  #$05, Obj_Ani_Number(A1)                         ; $001C                           
Offset_0x0051AC:
                bra.s   Offset_0x0051BC                                         
Offset_0x0051AE:
                add.w   D1, D0                                                  
                bhi.s   Offset_0x0051BC                                         
                move.w  #$0000, D0                                              
                move.b  #$05, Obj_Ani_Number(A1)                         ; $001C                     
Offset_0x0051BC:
                move.w  D0, Obj_Inertia(A1)                              ; $0014                        
                ori.b   #$80, Obj_Player_Status(A1)                      ; $002B                       
                rts       
;-------------------------------------------------------------------------------
OOz_Slide_Data:                                                ; Offset_0x0051C8       
                dc.b    $F8, $F8, $F8, $08, $08, $00, $00, $00
                dc.b    $F8, $F8, $00, $08, $08, $08, $F8, $08
                dc.b    $08, $08, $00, $F8, $00, $00, $F8, $08
                dc.b    $F8, $F8, $F8, $08, $08, $08, $F8, $F8
                dc.b    $2F, $30, $31, $33, $35, $38, $3A, $3C
                dc.b    $63, $64, $83, $90, $91, $93, $A1, $A3
                dc.b    $BD, $C7, $C8, $CE, $D7, $D8, $E6, $EB
                dc.b    $EC, $ED, $F1, $F2, $F3, $F4, $FA, $FD                                     
;-------------------------------------------------------------------------------  
Init_Demo_Control:                                             ; Offset_0x005208  
                tst.w   (Auto_Control_Player_Flag).w                 ; $FFFFFFF0
                bne.s   Demo_Mode_Control                      ; Offset_0x005286                                         
                rts     
;-------------------------------------------------------------------------------  
; Offset_0x005210:
                lea     ($00FE8000), A1                                         
                move.w  ($FFFFF790).w, D0                                       
                adda.w  D0, A1                                                  
                move.b  (Control_Ports_Buffer_Data).w, D0            ; $FFFFF604
                cmp.b   (A1), D0                                                
                bne.s   Offset_0x005232                                         
                addq.b  #$01, $0001(A1)                                         
                cmpi.b  #$FF, $0001(A1)                                         
                beq.s   Offset_0x005232                                         
                bra.s   Offset_0x005246                                         
Offset_0x005232:
                move.b  D0, $0002(A1)                                           
                move.b  #$00, $0003(A1)                                         
                addq.w  #$02, ($FFFFF790).w                                     
                andi.w  #$03FF, ($FFFFF790).w                                   
Offset_0x005246:
                cmpi.b  #$00, (Level_Id).w                           ; $FFFFFE10
                bne.s   Offset_0x005284                                         
                lea     ($00FEC000), A1                                         
                move.w  ($FFFFF732).w, D0                                       
                adda.w  D0, A1                                                  
                move.b  ($FFFFF606).w, D0                                       
                cmp.b   (A1), D0                                                
                bne.s   Offset_0x005270                                         
                addq.b  #$01, $0001(A1)                                         
                cmpi.b  #$FF, $0001(A1)                                         
                beq.s   Offset_0x005270                                         
                bra.s   Offset_0x005284                                         
Offset_0x005270:
                move.b  D0, $0002(A1)                                           
                move.b  #$00, $0003(A1)                                         
                addq.w  #$02, ($FFFFF732).w                                     
                andi.w  #$03FF, ($FFFFF732).w                                   
Offset_0x005284:
                rts                                                             
;-------------------------------------------------------------------------------  
Demo_Mode_Control:                                             ; Offset_0x005286
                tst.b   (Control_Ports_Buffer_Data).w                ; $FFFFF604
                bpl.s   Offset_0x005298                                         
                tst.w   (Auto_Control_Player_Flag).w                 ; $FFFFFFF0
                bmi.s   Offset_0x005298                                         
                move.b  #gm_TitleScreen, (Game_Mode).w         ; $04 ; $FFFFF600
Offset_0x005298:
                lea     (Demo_Index), A1                       ; Offset_0x00531C
                moveq   #$00, D0                                                
                move.b  (Level_Id).w, D0                             ; $FFFFFE10
                cmpi.b  #gm_SpecialStage, (Game_Mode).w        ; $10 ; $FFFFF600
                bne.s   Offset_0x0052AE                                         
                moveq   #$06, D0                                                
Offset_0x0052AE:
                lsl.w   #$02, D0                                                
                move.l  $00(A1, D0), A1                                         
                move.w  ($FFFFF790).w, D0                                       
                adda.w  D0, A1                                                  
                move.b  (A1), D0                                                
                lea     (Control_Ports_Buffer_Data).w, A0            ; $FFFFF604
                move.b  D0, D1                                                  
                moveq   #$00, D2                                                
                eor.b   D2, D0                                                  
                move.b  D1, (A0)+                                               
                and.b   D1, D0                                                  
                move.b  D0, (A0)+                                               
                subq.b  #$01, ($FFFFF792).w                                     
                bcc.s   Offset_0x0052DC                                         
                move.b  $0003(A1), ($FFFFF792).w                                
                addq.w  #$02, ($FFFFF790).w                                     
Offset_0x0052DC:
                cmpi.b  #$00, (Level_Id).w                           ; $FFFFFE10
                bne.s   Offset_0x005314                                         
                lea     (Demo_Green_Hill_Miles), A1            ; Offset_0x0057A8
                move.w  ($FFFFF732).w, D0                                       
                adda.w  D0, A1                                                  
                move.b  (A1), D0                                                
                lea     ($FFFFF606).w, A0                                       
                move.b  D0, D1                                                  
                moveq   #$00, D2                                                
                eor.b   D2, D0                                                  
                move.b  D1, (A0)+                                               
                and.b   D1, D0                                                  
                move.b  D0, (A0)+                                               
                subq.b  #$01, ($FFFFF734).w                                     
                bcc.s   Offset_0x005312                                         
                move.b  $0003(A1), ($FFFFF734).w                                
                addq.w  #$02, ($FFFFF732).w                                     
Offset_0x005312:
                rts                                                             
Offset_0x005314:
                move.w  #$0000, ($FFFFF606).w                                   
                rts   
;-------------------------------------------------------------------------------  
Demo_Index:                                                    ; Offset_0x00531C   
                dc.l    Demo_Green_Hill                        ; Offset_0x0056A8
                dc.l    Demo_Lvl1                              ; Offset_0x0056A8
                dc.l    Demo_Wood                              ; Offset_0x0056A8
                dc.l    Demo_Lvl3                              ; Offset_0x0056A8
                dc.l    Demo_Metropolis                        ; Offset_0x0056A8
                dc.l    Demo_Metropolis                        ; Offset_0x0056A8
                dc.l    Demo_Sky_Fortress                      ; Offset_0x0056A8
                dc.l    Demo_Hill_Top                          ; Offset_0x0058A8
                dc.l    Demo_Hidden_Palace                     ; Offset_0x0059A8
                dc.l    Demo_Lvl9                              ; Offset_0x0056A8
                dc.l    Demo_Oil_Ocean                         ; Offset_0x0056A8
                dc.l    Demo_Dust_Hill                         ; Offset_0x0056A8
                dc.l    Demo_Casino_Night                      ; Offset_0x0059A8
                dc.l    Demo_Chemical_Plant                    ; Offset_0x005AA8
                dc.l    Demo_Death_Egg                         ; Offset_0x0056A8
                dc.l    Demo_Neo_Green_Hill                    ; Offset_0x0056A8
                dc.l    Demo_Sky_Chase                         ; Offset_0x0056A8
;-------------------------------------------------------------------------------
; Offset_0x005360:
                dc.l    $00FE8000, $00FE8000, $00FE8000, $00FE8000
                dc.l    $00FE8000, $00FE8000, $00FE8000, $00FE8000
                dc.l    $00FE8000, $00FE8000, $00FE8000, $00FE8000
                dc.l    $00FE8000, $00FE8000, $00FE8000, $00FE8000
                dc.l    $00FE8000
;-------------------------------------------------------------------------------
Demo_End_Index: ; Left over do Sonic 1                         ; Offset_0x0053A4    
                dc.w    $008B, $0837, $0042, $085C, $006A, $085F, $002F, $082C
                dc.w    $0021, $0803, $2830, $0808, $002E, $0815, $000F, $0846
                dc.w    $001A, $08FF, $08CA, $0000, $0000, $0000, $0000, $0000
;-------------------------------------------------------------------------------
Load_Colision_Index:                                           ; Offset_0x0053D4   
                moveq   #$00, D0                                                
                move.b  (Level_Id).w, D0                             ; $FFFFFE10
                lsl.w   #$02, D0                                                
                move.l  #Primary_Colision_Data_Buffer, (Current_Colision_Pointer).w  ; $FFFFD000, $FFFFF796
                move.l  Primary_Colision_Index(PC, D0), A1     ; Offset_0x005406                           
                lea     (Primary_Colision_Data_Buffer).w, A2         ; $FFFFD000
                bsr.s   Load_Load_Colision_Index               ; Offset_0x0053F6                                         
                move.l  Secundary_Colision_Index(PC, D0), A1   ; Offset_0x00544A                          
                lea     (Secundary_Colision_Data_Buffer).w, A2       ; $FFFFD600
Load_Load_Colision_Index:                                      ; Offset_0x0053F6
                move.w  #$02FF, D1                                              
                moveq   #$00, D2                                                
Load_Load_Colision_Index_Loop:                                 ; Offset_0x0053FC
                move.b  (A1)+, D2                                               
                move.w  D2, (A2)+                                               
                dbra    D1, Load_Load_Colision_Index_Loop      ; Offset_0x0053FC                                     
                rts   
;-------------------------------------------------------------------------------
Primary_Colision_Index:                                        ; Offset_0x005406   
                dc.l    Green_Hill_Colision_Data_1             ; Offset_0x0490EA
                dc.l    Lvl1_Colision_Data_1                   ; Offset_0x04BAEA
                dc.l    Wood_Colision_Data_1                   ; Offset_0x0496EA
                dc.l    Lvl3_Colision_Data_1                   ; Offset_0x04BAEA
                dc.l    Metropolis_Colision_Data_1             ; Offset_0x0496EA
                dc.l    Metropolis_Colision_Data_1             ; Offset_0x0496EA
                dc.l    Sky_Fortress_Colision_Data_1           ; Offset_0x04B4EA
                dc.l    Hill_Top_Colision_Data_1               ; Offset_0x0490EA
                dc.l    Hidden_Palace_Colision_Data_1          ; Offset_0x0499EA
                dc.l    Lvl9_Colision_Data_1                   ; Offset_0x04BAEA
                dc.l    Oil_Ocean_Colision_Data_1              ; Offset_0x049CEA
                dc.l    Dust_Hill_Colision_Data_1              ; Offset_0x049FEA
                dc.l    Casino_Night_Colision_Data_1           ; Offset_0x04A2EA
                dc.l    Chemical_Plant_Colision_Data_1         ; Offset_0x04A8EA
                dc.l    Death_Egg_Colision_Data_1              ; Offset_0x04A8EA
                dc.l    Neo_Green_Hill_Colision_Data_1         ; Offset_0x04AEEA
                dc.l    Sky_Chase_Colision_Data_1              ; Offset_0x04B4EA
Secundary_Colision_Index:                                      ; Offset_0x00544A  
                dc.l    Green_Hill_Colision_Data_2             ; Offset_0x0493EA
                dc.l    Lvl1_Colision_Data_2                   ; Offset_0x04BAEA
                dc.l    Wood_Colision_Data_2                   ; Offset_0x0496EA
                dc.l    Lvl3_Colision_Data_2                   ; Offset_0x04BAEA
                dc.l    Metropolis_Colision_Data_2             ; Offset_0x0496EA
                dc.l    Metropolis_Colision_Data_2             ; Offset_0x0496EA
                dc.l    Sky_Fortress_Colision_Data_2           ; Offset_0x04B7EA
                dc.l    Hill_Top_Colision_Data_2               ; Offset_0x0493EA
                dc.l    Hidden_Palace_Colision_Data_2          ; Offset_0x0499EA
                dc.l    Lvl9_Colision_Data_2                   ; Offset_0x04BAEA
                dc.l    Oil_Ocean_Colision_Data_2              ; Offset_0x049CEA
                dc.l    Dust_Hill_Colision_Data_2              ; Offset_0x049FEA
                dc.l    Casino_Night_Colision_Data_2           ; Offset_0x04A5EA
                dc.l    Chemical_Plant_Colision_Data_2         ; Offset_0x04ABEA
                dc.l    Death_Egg_Colision_Data_2              ; Offset_0x04ABEA
                dc.l    Neo_Green_Hill_Colision_Data_2         ; Offset_0x04B1EA
                dc.l    Sky_Chase_Colision_Data_2              ; Offset_0x04B7EA                                  
;-------------------------------------------------------------------------------
Oscillate_Num_Init:                                            ; Offset_0x00548E  
                lea     ($FFFFFE5E).w, A1                                       
                lea     (Oscillate_Data), A2                   ; Offset_0x0054A2                    
                moveq   #$20, D1                                                
Offset_0x00549A:
                move.w  (A2)+, (A1)+                                            
                dbra    D1, Offset_0x00549A                                     
                rts   
;-------------------------------------------------------------------------------                
Oscillate_Data:                                                ; Offset_0x0054A2 
                dc.w    $007D, $0080, $0000, $0080, $0000, $0080, $0000, $0080
                dc.w    $0000, $0080, $0000, $0080, $0000, $0080, $0000, $0080
                dc.w    $0000, $0080, $0000, $3848, $00EE, $2080, $00B4, $3080
                dc.w    $010E, $5080, $01C2, $7080, $0276, $0080, $0000, $4000
                dc.w    $00FE
;-------------------------------------------------------------------------------                                                                            
Oscillate_Num_Do:                                              ; Offset_0x0054E4  
                cmpi.b  #$06, ($FFFFB024).w                                     
                bcc.s   Offset_0x00553A                                         
                lea     ($FFFFFE5E).w, A1                                       
                lea     (Oscillate_Data2), A2                  ; Offset_0x00553C                         
                move.w  (A1)+, D3                                               
                moveq   #$0F, D1                                                
Offset_0x0054FA:
                move.w  (A2)+, D2                                               
                move.w  (A2)+, D4                                               
                btst    D1, D3                                                  
                bne.s   Offset_0x00551A                                         
                move.w  $0002(A1), D0                                           
                add.w   D2, D0                                                  
                move.w  D0, $0002(A1)                                           
                add.w   D0, $0000(A1)                                           
                cmp.b   $0000(A1), D4                                           
                bhi.s   Offset_0x005530                                         
                bset    D1, D3                                                  
                bra.s   Offset_0x005530                                         
Offset_0x00551A:
                move.w  $0002(A1), D0                                           
                sub.w   D2, D0                                                  
                move.w  D0, $0002(A1)                                           
                add.w   D0, $0000(A1)                                           
                cmp.b   $0000(A1), D4                                           
                bls.s   Offset_0x005530                                         
                bclr    D1, D3                                                  
Offset_0x005530:
                addq.w  #$04, A1                                                
                dbra    D1, Offset_0x0054FA                                     
                move.w  D3, ($FFFFFE5E).w                                       
Offset_0x00553A:
                rts                                                                        
;-------------------------------------------------------------------------------   
Oscillate_Data2:                                               ; Offset_0x00553C
                dc.w    $0002, $0010, $0002, $0018, $0002, $0020, $0002, $0030
                dc.w    $0004, $0020, $0008, $0008, $0008, $0040, $0004, $0040
                dc.w    $0002, $0038, $0002, $0038, $0002, $0020, $0003, $0030
                dc.w    $0005, $0050, $0007, $0070, $0002, $0040, $0002, $0040         
;------------------------------------------------------------------------------- 
;===============================================================================
; Sub Rotina para fazer os anéis e outros objetos girarem em torno de si  
; ->>>
;===============================================================================
Change_Ring_Frame:                                             ; Offset_0x00557C  
                subq.b  #$01, ($FFFFFEA0).w                                     
                bpl.s   Offset_0x005592                                         
                move.b  #$0B, ($FFFFFEA0).w                                     
                subq.b  #$01, ($FFFFFEA1).w                                     
                andi.b  #$07, ($FFFFFEA1).w                                     
Offset_0x005592:
                subq.b  #$01, ($FFFFFEA2).w                                     
                bpl.s   Offset_0x0055A8                                         
                move.b  #$07, ($FFFFFEA2).w                                     
                addq.b  #$01, ($FFFFFEA3).w                                     
                andi.b  #$03, ($FFFFFEA3).w                                     
Offset_0x0055A8:
                subq.b  #$01, ($FFFFFEA4).w                                     
                bpl.s   Offset_0x0055C6                                         
                move.b  #$07, ($FFFFFEA4).w                                     
                addq.b  #$01, ($FFFFFEA5).w                                     
                cmpi.b  #$06, ($FFFFFEA5).w                                     
                bcs.s   Offset_0x0055C6                                         
                move.b  #$00, ($FFFFFEA5).w                                     
Offset_0x0055C6:
                tst.b   ($FFFFFEA6).w                                           
                beq.s   Offset_0x0055E8                                         
                moveq   #$00, D0                                                
                move.b  ($FFFFFEA6).w, D0                                       
                add.w   ($FFFFFEA8).w, D0                                       
                move.w  D0, ($FFFFFEA8).w                                       
                rol.w   #$07, D0                                                
                andi.w  #$0003, D0                                              
                move.b  D0, ($FFFFFEA7).w                                       
                subq.b  #$01, ($FFFFFEA6).w                                     
Offset_0x0055E8:
                rts                                                             
;===============================================================================
; Sub Rotina para fazer os anéis e outros objetos girarem em torno de si  
; <<<-
;===============================================================================

;===============================================================================
; Verifica se esta no final da fase 
; ->>>
;===============================================================================  
Test_End_Level_Art_Load:                                       ; Offset_0x0055EA
                tst.w   (Debug_Mode_Flag_Index).w                    ; $FFFFFE08
                bne     Dont_Set_End_Level_Flag                ; Offset_0x0056A6
                cmpi.w  #$0001, (Level_Id).w                         ; $FFFFFE10
                beq     Dont_Set_End_Level_Flag                ; Offset_0x0056A6
                cmpi.w  #$0500, (Level_Id).w                         ; $FFFFFE10
                beq     Dont_Set_End_Level_Flag                ; Offset_0x0056A6
                cmpi.w  #$0600, (Level_Id).w                         ; $FFFFFE10
                beq     Dont_Set_End_Level_Flag                ; Offset_0x0056A6
                cmpi.w  #$0701, (Level_Id).w                         ; $FFFFFE10
                beq     Dont_Set_End_Level_Flag                ; Offset_0x0056A6
                cmpi.w  #$0A01, (Level_Id).w                         ; $FFFFFE10
                beq     Dont_Set_End_Level_Flag                ; Offset_0x0056A6
                cmpi.w  #$0B01, (Level_Id).w                         ; $FFFFFE10
                beq.s   Dont_Set_End_Level_Flag                ; Offset_0x0056A6
                cmpi.w  #$0C01, (Level_Id).w                         ; $FFFFFE10
                beq.s   Dont_Set_End_Level_Flag                ; Offset_0x0056A6
                cmpi.w  #$0D01, (Level_Id).w                         ; $FFFFFE10
                beq.s   Dont_Set_End_Level_Flag                ; Offset_0x0056A6
                cmpi.w  #$0E00, (Level_Id).w                         ; $FFFFFE10
                beq.s   Dont_Set_End_Level_Flag                ; Offset_0x0056A6
                cmpi.w  #$0F01, (Level_Id).w                         ; $FFFFFE10
                beq.s   Dont_Set_End_Level_Flag                ; Offset_0x0056A6
                cmpi.w  #$1000, (Level_Id).w                         ; $FFFFFE10
                beq.s   Dont_Set_End_Level_Flag                ; Offset_0x0056A6
                move.w  (Camera_X).w, D0                             ; $FFFFEE00                                
                move.w  (Sonic_Level_Limits_Max_X).w, D1             ; $FFFFEECA                                   
                subi.w  #$0100, D1                                              
                cmp.w   D1, D0                                                  
                blt.s   End_Level_Art_Load                     ; Offset_0x00567A
                tst.b   ($FFFFFE1E).w                                           
                beq.s   End_Level_Art_Load                     ; Offset_0x00567A
                cmp.w   (Sonic_Level_Limits_Min_X).w, D1             ; $FFFFEEC8                                 
                beq.s   End_Level_Art_Load                     ; Offset_0x00567A
                move.w  D1, (Sonic_Level_Limits_Min_X).w             ; $FFFFEEC8                                  
                moveq   #$27, D0                                                
                bra     LoadPLC2                               ; Offset_0x001BE6
End_Level_Art_Load:                                            ; Offset_0x00567A
                tst.w   (Two_Player_Flag).w                          ; $FFFFFFD8
                beq.s   Dont_Set_End_Level_Flag                ; Offset_0x0056A6
                move.w  (Camera_X_2).w, D0                           ; $FFFFEE20                              
                move.w  (Miles_Level_Limits_Max_X).w, D1             ; $FFFFEEFA                                  
                subi.w  #$0100, D1                                              
                cmp.w   D1, D0                                                  
                blt.s   Dont_Set_End_Level_Flag                ; Offset_0x0056A6
                tst.b   ($FFFFFE1E).w                                           
                beq.s   Dont_Set_End_Level_Flag                ; Offset_0x0056A6
                cmp.w   (Miles_Level_Limits_Min_X).w, D1             ; $FFFFEEF8                           
                beq.s   Dont_Set_End_Level_Flag                ; Offset_0x0056A6
                move.w  D1, (Miles_Level_Limits_Min_X).w             ; $FFFFEEF8                                
                moveq   #$27, D0                                                
                bra     LoadPLC2                               ; Offset_0x001BE6
Dont_Set_End_Level_Flag:                                       ; Offset_0x0056A6
                rts                                                                                                                        
;===============================================================================
; Verifica se esta no final da fase 
; <<<-
;===============================================================================  
Demo_Green_Hill:                                               ; Offset_0x0056A8
Demo_Lvl1:                                                     ; Offset_0x0056A8
Demo_Wood:                                                     ; Offset_0x0056A8
Demo_Lvl3:                                                     ; Offset_0x0056A8
Demo_Metropolis:                                               ; Offset_0x0056A8
Demo_Sky_Fortress:                                             ; Offset_0x0056A8
Demo_Lvl9:                                                     ; Offset_0x0056A8
Demo_Oil_Ocean:                                                ; Offset_0x0056A8
Demo_Dust_Hill:                                                ; Offset_0x0056A8
Demo_Death_Egg:                                                ; Offset_0x0056A8
Demo_Neo_Green_Hill:                                           ; Offset_0x0056A8
Demo_Sky_Chase:                                                ; Offset_0x0056A8  
                dc.b    $00, $44, $08, $00, $28, $05, $08, $59, $28, $04, $08, $35, $28, $06, $08, $42
                dc.b    $28, $04, $08, $19, $00, $0F, $08, $0A, $28, $09, $08, $4A, $28, $09, $08, $10
                dc.b    $00, $05, $04, $1B, $02, $00, $08, $4B, $28, $2D, $08, $55, $28, $09, $08, $26
                dc.b    $28, $1C, $08, $19, $28, $08, $08, $FF, $08, $96, $28, $13, $08, $1D, $28, $19
                dc.b    $08, $2A, $28, $07, $09, $00, $01, $00, $05, $20, $04, $02, $05, $01, $00, $00
                dc.b    $08, $3A, $00, $25, $04, $0A, $24, $09, $04, $1C, $00, $03, $08, $3A, $28, $06
                dc.b    $08, $0C, $00, $16, $08, $00, $28, $0F, $08, $33, $28, $07, $08, $04, $00, $46
                dc.b    $08, $6A, $00, $29, $80, $00, $C0, $00, $00, $00, $00, $00, $00, $00, $00, $00
                dc.b    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
                dc.b    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
                dc.b    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
                dc.b    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
                dc.b    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
                dc.b    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
                dc.b    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
                dc.b    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
;-------------------------------------------------------------------------------                
Demo_Green_Hill_Miles:                                         ; Offset_0x0057A8  
                dc.b    $00, $46, $08, $1E, $28, $0A, $08, $5E, $28, $30, $08, $66, $00, $0F, $08, $0F
                dc.b    $28, $2E, $08, $00, $00, $1F, $08, $12, $00, $13, $08, $0A, $00, $16, $04, $0D
                dc.b    $00, $08, $04, $10, $00, $30, $08, $6B, $28, $14, $08, $80, $0A, $02, $02, $23
                dc.b    $00, $07, $08, $13, $28, $17, $08, $00, $00, $03, $04, $03, $05, $00, $01, $00
                dc.b    $09, $01, $08, $3C, $28, $07, $00, $18, $08, $4D, $28, $12, $08, $01, $00, $04
                dc.b    $08, $0B, $00, $07, $08, $1B, $00, $09, $20, $05, $28, $13, $08, $04, $00, $21
                dc.b    $08, $11, $00, $20, $08, $51, $00, $0B, $04, $57, $00, $0D, $02, $27, $0A, $00
                dc.b    $00, $02, $09, $01, $08, $2A, $28, $15, $08, $03, $28, $19, $08, $0A, $00, $0A
                dc.b    $08, $02, $28, $1B, $08, $33, $00, $27, $08, $3A, $09, $12, $01, $07, $00, $13
                dc.b    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
                dc.b    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
                dc.b    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
                dc.b    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
                dc.b    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
                dc.b    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
                dc.b    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00              
;-------------------------------------------------------------------------------
Demo_Hill_Top:                                                 ; Offset_0x0058A8
                dc.b    $00, $05, $01, $1D, $09, $03, $29, $05, $09, $10, $01, $00, $00, $13, $04, $00
                dc.b    $05, $0A, $25, $07, $05, $10, $04, $01, $00, $0C, $08, $04, $09, $0C, $29, $0A
                dc.b    $09, $10, $08, $03, $00, $1C, $20, $07, $00, $0B, $04, $06, $00, $25, $20, $06
                dc.b    $00, $22, $08, $05, $00, $25, $04, $0E, $00, $33, $08, $07, $00, $39, $08, $0A
                dc.b    $28, $08, $08, $16, $00, $24, $08, $74, $28, $02, $29, $07, $09, $03, $00, $0F
                dc.b    $08, $0D, $00, $05, $04, $0C, $00, $01, $20, $02, $28, $00, $2A, $08, $28, $02
                dc.b    $08, $1E, $00, $04, $04, $13, $00, $12, $08, $18, $28, $0B, $08, $11, $00, $2C
                dc.b    $08, $0C, $00, $0D, $20, $04, $28, $03, $08, $05, $00, $22, $04, $12, $00, $04
                dc.b    $08, $1A, $00, $0D, $04, $06, $00, $37, $08, $0C, $00, $19, $08, $0D, $00, $0C
                dc.b    $04, $09, $00, $03, $08, $20, $00, $1A, $04, $06, $00, $22, $08, $09, $00, $09
                dc.b    $08, $16, $00, $2F, $08, $0E, $28, $04, $20, $02, $00, $08, $04, $19, $00, $05
                dc.b    $08, $06, $28, $08, $08, $08, $00, $24, $08, $72, $0A, $09, $02, $0E, $0A, $6B
                dc.b    $8A, $00, $40, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
                dc.b    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
                dc.b    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
                dc.b    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
;-------------------------------------------------------------------------------
Demo_Hidden_Palace:                                            ; Offset_0x0059A8   
Demo_Casino_Night:                                             ; Offset_0x0059A8  
                dc.b    $00, $40, $08, $33, $28, $06, $08, $39, $28, $05, $08, $0D, $00, $25, $08, $10
                dc.b    $28, $2A, $08, $1C, $02, $00, $26, $03, $22, $00, $2A, $00, $28, $06, $08, $22
                dc.b    $02, $00, $06, $0F, $04, $08, $06, $00, $02, $0E, $06, $2F, $02, $79, $06, $01
                dc.b    $04, $43, $24, $0F, $04, $17, $00, $09, $08, $1C, $28, $03, $08, $45, $00, $05
                dc.b    $08, $1A, $28, $33, $08, $72, $00, $0F, $04, $15, $24, $10, $04, $0B, $00, $24
                dc.b    $04, $01, $24, $08, $04, $07, $00, $06, $04, $04, $00, $1E, $24, $0E, $04, $15
                dc.b    $00, $1E, $20, $03, $24, $0F, $04, $00, $00, $07, $08, $12, $04, $09, $24, $0F
                dc.b    $04, $06, $00, $0A, $04, $62, $24, $12, $20, $04, $00, $21, $28, $0E, $08, $16
                dc.b    $00, $19, $08, $29, $00, $63, $04, $15, $24, $09, $04, $39, $00, $31, $08, $25
                dc.b    $28, $02, $08, $12, $00, $93, $80, $00, $C0, $00, $00, $00, $00, $00, $00, $00
                dc.b    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
                dc.b    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
                dc.b    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
                dc.b    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
                dc.b    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
                dc.b    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00              
;-------------------------------------------------------------------------------
Demo_Chemical_Plant:                                           ; Offset_0x005AA8 
                dc.b    $00, $1B, $01, $30, $00, $19, $08, $29, $28, $13, $08, $03, $00, $1D, $20, $03
                dc.b    $28, $1E, $08, $02, $00, $09, $04, $05, $00, $2E, $08, $1E, $28, $05, $20, $03
                dc.b    $00, $0B, $04, $01, $05, $07, $04, $00, $00, $2F, $28, $03, $2A, $04, $0A, $00
                dc.b    $08, $06, $00, $24, $08, $02, $28, $06, $08, $01, $00, $26, $08, $FF, $08, $14
                dc.b    $28, $0A, $08, $03, $00, $60, $08, $0E, $28, $07, $08, $0C, $00, $08, $04, $0B
                dc.b    $00, $23, $08, $05, $00, $93, $08, $19, $28, $11, $08, $78, $28, $0F, $08, $FF
                dc.b    $08, $83, $28, $0D, $08, $82, $00, $1F, $80, $00, $40, $00, $00, $00, $00, $00
                dc.b    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
                dc.b    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
                dc.b    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
                dc.b    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
                dc.b    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
                dc.b    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
                dc.b    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
                dc.b    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
                dc.b    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00                                                                                                                                                                                                        
;===============================================================================
; Modo de jogo ou demonstração das fases 
; <<<-
;===============================================================================

J_Dynamic_Art_Cues:                                            ; Offset_0x005BA8
                jmp     (Dynamic_Art_Cues)                     ; Offset_0x0387BC
                dc.w    $0000   
  
;===============================================================================
; Rotina principal de controle dos Estágios Especiais
; ->>>
;===============================================================================                                            
Special_Stage:                                                 ; Offset_0x005BB0   
                move.w  #$00CA, D0                                              
                bsr     Play_Sfx                               ; Offset_0x001912
                bsr     Pal_MakeFlash                          ; Offset_0x002DB2
                move    #$2700, SR                                              
                lea     (VDP_Control_Port), A6                       ; $00C00004
                move.w  #$8B03, (A6)                                            
                move.w  #$8004, (A6)                                            
                move.w  #$8230, (A6)                                            
                move.w  #$8405, (A6)                                            
                move.w  #$8C08, (A6)                                            
                move.w  #$9003, (A6)                                            
                move.w  #$8700, (A6)                                            
                move.w  #$8D3F, (A6)                                            
                move.w  #$857C, (A6)                                            
                move.w  ($FFFFF60C).w, D0                                       
                andi.b  #$BF, D0                                                
                move.w  D0, (VDP_Control_Port)                       ; $00C00004
                move.w  #$0000, ($FFFFF624).w                                   
                lea     (VDP_Control_Port), A5                       ; $00C00004
                move.w  #$8F01, (A5)                                            
                move.l  #$941F93FF, (A5)                                        
                move.w  #$9780, (A5)                                            
                move.l  #$40000082, (A5)                                        
                move.w  #$0000, (VDP_Data_Port)                      ; $00C00000
Offset_0x005C20:
                move.w  (A5), D1                                                
                btst    #$01, D1                                                
                bne.s   Offset_0x005C20                                         
                move.w  #$8F02, (A5)                                            
                lea     (VDP_Control_Port), A5                       ; $00C00004
                move.w  #$8F01, (A5)                                            
                move.l  #$941F93FF, (A5)                                        
                move.w  #$9780, (A5)                                            
                move.l  #$40000083, (A5)                                        
                move.w  #$0000, (VDP_Data_Port)                      ; $00C00000
Offset_0x005C4E:
                move.w  (A5), D1                                                
                btst    #$01, D1                                                
                bne.s   Offset_0x005C4E                                         
                move.w  #$8F02, (A5)                                            
                lea     (VDP_Control_Port), A5                       ; $00C00004
                move.w  #$8F01, (A5)                                            
                move.l  #$941F93FF, (A5)                                        
                move.w  #$9780, (A5)                                            
                move.l  #$60000082, (A5)                                        
                move.w  #$0000, (VDP_Data_Port)                      ; $00C00000
Offset_0x005C7C:
                move.w  (A5), D1                                                
                btst    #$01, D1                                                
                bne.s   Offset_0x005C7C                                         
                move.w  #$8F02, (A5)                                            
                lea     (VDP_Control_Port), A5                       ; $00C00004
                move.w  #$8F01, (A5)                                            
                move.l  #$9403937F, (A5)                                        
                move.w  #$9780, (A5)                                            
                move.l  #$7C000083, (A5)                                        
                move.w  #$0000, (VDP_Data_Port)                      ; $00C00000
Offset_0x005CAA:
                move.w  (A5), D1                                                
                btst    #$01, D1                                                
                bne.s   Offset_0x005CAA                                         
                move.w  #$8F02, (A5)                                            
                clr.l   ($FFFFF616).w                                           
                clr.l   ($FFFFF61A).w                                           
                clr.b   ($FFFF9B23).w                                           
                lea     ($FFFFF800).w, A1                                       
                moveq   #$00, D0                                                
                move.w  #$00A0, D1                                              
Offset_0x005CCC:
                move.l  D0, (A1)+                                               
                dbra    D1, Offset_0x005CCC                                     
                lea     (Scroll_Buffer_Data).w, A1                   ; $FFFFE000
                moveq   #$00, D0                                                
                move.w  #$0100, D1                                              
Offset_0x005CDC:
                move.l  D0, (A1)+                                               
                dbra    D1, Offset_0x005CDC                                     
                lea     (Level_Map_Buffer).w, A1                     ; $FFFF8000
                moveq   #$00, D0                                                
                move.w  #$1000, D1                                              
Offset_0x005CEC:
                move.l  D0, (A1)+                                               
                dbra    D1, Offset_0x005CEC                                     
                move    #$2300, SR                                              
                lea     (VDP_Control_Port), A6                       ; $00C00004
                move.w  #$8E02, (A6)                                            
                bsr     Offset_0x008C22                                         
                bsr     Offset_0x008C6C                                         
                moveq   #$18, D0                                                
                bsr     PalLoad1                               ; Offset_0x002F32
                move.l  #$00000000, (Camera_X).w                     ; $FFFFEE00
                move.l  #$00000000, (Camera_Y).w                     ; $FFFFEE04
                move.w  #$0000, ($FFFF9B0A).w                                   
                moveq   #$3C, D0                                                
                bsr     LoadPLC                                ; Offset_0x001BB4
                move.l  #$00000000, (Camera_X).w                     ; $FFFFEE00
                move.l  #$00000000, (Camera_Y).w                     ; $FFFFEE04
                move.b  #$09, (Obj_Memory_Address).w                 ; $FFFFB000
                move.b  #$10, (Obj_Memory_Address+$0040).w           ; $FFFFB040
                move.b  #$5E, (Obj_Memory_Address+$0080).w           ; $FFFFB080                            
                move.b  #$5F, (Obj_Memory_Address+$00C0).w           ; $FFFFB0C0                                 
                move.b  #$62, (Obj_Memory_Address+$0100).w           ; $FFFFB100                                
                move.b  #$87, (Obj_Memory_Address+$0180).w           ; $FFFFB180                                 
                bsr     Offset_0x008C9C                                         
                bsr     Offset_0x008D78                                         
                move.l  #$000C0000, ($FFFF9B12).w                               
Offset_0x005D6E:
                move.b  #$0A, (VBlank_Index).w                       ; $FFFFF62A
                bsr     Wait_For_VSync                         ; Offset_0x003938
                bsr     RunPLC                                 ; Offset_0x001C20
                tst.l   ($FFFFF680).w                                           
                bne.s   Offset_0x005D6E                                         
                clr.w   (Control_Ports_Buffer_Data).w                ; $FFFFF604
                clr.w   ($FFFFF606).w                                           
Offset_0x005D8A:
                move.b  #$0A, (VBlank_Index).w                       ; $FFFFF62A
                bsr     Wait_For_VSync                         ; Offset_0x003938
                move.b  ($FFFF9B0D).w, D0                                       
                bne.s   Offset_0x005D8A                                         
                bsr     Offset_0x005F16                                         
Offset_0x005D9E:
                move.b  #$0A, (VBlank_Index).w                       ; $FFFFF62A
                bsr     Wait_For_VSync                         ; Offset_0x003938
                bsr     Offset_0x005F16                                         
                move.b  ($FFFF9B1F).w, D0                                       
                subq.w  #$01, D0                                                
                bne.s   Offset_0x005D9E                                         
                bsr     Offset_0x008D8C                                         
                jsr     (Load_Objects)                         ; Offset_0x011BB8
                jsr     (Build_Sprites)                        ; Offset_0x0121FE
                bsr     RunPLC                                 ; Offset_0x001C20
                move.w  #$0092, D0                                              
                bsr     Play_Music                             ; Offset_0x00190C
                move.w  ($FFFFF60C).w, D0                                       
                ori.b   #$40, D0                                                
                move.w  D0, (VDP_Control_Port)                       ; $00C00004
                bsr     Pal_MakeWhite                          ; Offset_0x002D08
Offset_0x005DE2:
                bsr     Pause                                  ; Offset_0x00192A
                move.b  #$0A, (VBlank_Index).w                       ; $FFFFF62A
                bsr     Wait_For_VSync                         ; Offset_0x003938
                bsr     Offset_0x005F16                                         
                bsr     Offset_0x0095C4                                         
                bsr     Offset_0x008D8C                                         
                jsr     (Load_Objects)                         ; Offset_0x011BB8
                jsr     (Build_Sprites)                        ; Offset_0x0121FE
                bsr     RunPLC                                 ; Offset_0x001C20
                tst.b   ($FFFF9B23).w                                           
                beq.s   Offset_0x005DE2                                         
                moveq   #$3D, D0                                                
                bsr     LoadPLC                                ; Offset_0x001BB4
Offset_0x005E18:
                bsr     Pause                                  ; Offset_0x00192A
                move.b  #$0A, (VBlank_Index).w                       ; $FFFFF62A
                bsr     Wait_For_VSync                         ; Offset_0x003938
                bsr     Offset_0x005F16                                         
                bsr     Offset_0x0095C4                                         
                bsr     Offset_0x005E5E                                         
                bsr     SS_Load_Objects                        ; Offset_0x005E7E                                         
                bsr     Offset_0x008D8C                                         
                jsr     (Load_Objects)                         ; Offset_0x011BB8
                jsr     (Build_Sprites)                        ; Offset_0x0121FE
                bsr     RunPLC                                 ; Offset_0x001C20
                bsr     Init_Demo_Control                      ; Offset_0x005208
                move.w  (Control_Ports_Buffer_Data).w, ($FFFFF602).w ; $FFFFF604
                bra.s   Offset_0x005E18      
; Offset_0x005E56:
                move.b  #gm_SEGALogo, (Game_Mode).w            ; $00 ; $FFFFF600
                rts                                                             
Offset_0x005E5E:
                cmpi.b  #$04, ($FFFF9B0D).w                                     
                bne.s   Offset_0x005E7C                                         
                lea     (Offset_0x00751A), A0                                   
                moveq   #$00, D0                                                
                move.b  ($FFFF9B10).w, D0                                       
                add.w   D0, D0                                                  
                adda.w  $00(A0, D0), A0                                         
                move.l  A0, ($FFFF9B82).w                                       
Offset_0x005E7C:
                rts                                                             
;-------------------------------------------------------------------------------                
SS_Load_Objects:                                               ; Offset_0x005E7E
                cmpi.b  #$04, ($FFFF9B0D).w                                     
                bne.s   SS_No_Object                           ; Offset_0x005EC6                                         
                moveq   #$00, D0                                                
                move.b  ($FFFF9B0A).w, D0                                       
                cmp.b   ($FFFF9B4C).w, D0                                       
                beq.s   SS_No_Object                           ; Offset_0x005EC6                                         
                move.b  D0, ($FFFF9B4C).w                                       
                lea     (Offset_0x0309C8), A0                                   
                add.w   D0, D0                                                  
                adda.w  $00(A0, D0), A0                                         
                lea     (Obj_Memory_Address+$03C0).w, A1             ; $FFFFB3C0                                 
                moveq   #$00, D3                                                
                move.b  (A0)+, D3                                               
                bmi.s   SS_No_Object                           ; Offset_0x005EC6                                         
SS_Load_Next_Object:                                           ; Offset_0x005EAC
                moveq   #$00, D0                                                
                move.b  (A0)+, D0                                               
                bmi.s   SS_Load_Bombs                          ; Offset_0x005EC8                                         
                move.b  #$60, (A1) ; Carrega os anéis no Special Stage                                              
                move.w  D0, $0030(A1)                                           
                move.b  (A0)+, $0026(A1)                                        
                lea     Obj_Size(A1), A1                                 ; $0040                                   
                dbra    D3, SS_Load_Next_Object                ; Offset_0x005EAC                                     
SS_No_Object:                                                  ; Offset_0x005EC6
                rts                                                             
SS_Load_Bombs:                                                 ; Offset_0x005EC8
                move.b  #$61, (A1) ; Carrega as bombas no Special Stage                                             
                andi.w  #$007F, D0                                              
                move.w  D0, $0030(A1)                                           
                move.b  (A0)+, $0026(A1)                                        
                lea     Obj_Size(A1), A1                                 ; $0040                                   
                dbra    D3, SS_Load_Next_Object                ; Offset_0x005EAC                                     
                rts  
;-------------------------------------------------------------------------------                  
Offset_0x005EE2:
                dc.l    $40000002, $47000002, $4E000002, $55000002
                dc.l    $40000003, $47000003, $4E000003, $55000003     
;-------------------------------------------------------------------------------                
Offset_0x005F02:
                dc.b    $18, $18, $0C, $10, $07, $00, $03, $03
                dc.b    $03, $03, $04, $00, $01, $80, $02, $83
                dc.b    $04, $00, $81, $FF  
;-------------------------------------------------------------------------------                
Offset_0x005F16:
                moveq   #$00, D0                                                
                move.b  ($FFFF9B0D).w, D0                                       
                cmpi.b  #$04, D0                                                
                bge     Offset_0x008B9E                                         
                add.w   D0, D0                                                  
                add.w   D0, D0                                                  
                bne     Offset_0x005FF2                                         
                move.l  ($FFFF9B2C).w, ($FFFF9B28).w                            
                move.b  ($FFFF9B10).w, ($FFFF9B39).w                            
                moveq   #$00, D1                                                
                moveq   #$00, D2                                                
                moveq   #$00, D3                                                
                moveq   #$00, D4                                                
                move.b  ($FFFF9B0A).w, D1                                       
                move.b  ($FFFF9B0B).w, D2                                       
                move.b  Offset_0x005F02+$0006(PC, D1), D3      ; Offset_0x005F08                      
                cmpi.b  #$FF, D3                                                
                bgt.s   Offset_0x005F62                                         
                beq.s   Offset_0x005F5A                                         
                andi.b  #$7F, D3                                                
                bra.s   Offset_0x005F62                                         
Offset_0x005F5A:
                moveq   #$00, D3                                                
                move.b  #$00, ($FFFF9B0A).w                                     
Offset_0x005F62:
                move.b  D3, ($FFFF9B08).w                                       
                move.w  D3, D1                                                  
                add.w   D3, D3                                                  
                lea     (Offset_0x006CFC), A1                                   
                adda.w  $00(A1, D3), A1                                         
                adda.w  D2, A1                                                  
                moveq   #$00, D4                                                
                move.b  (A1), D4                                                
                move.b  D4, ($FFFF9B10).w                                       
                lsl.w   #$02, D4                                                
                lea     (Offset_0x006D5A), A1                                   
                move.l  $00(A1, D4), A0                                         
                move.l  A0, A1                                                  
                moveq   #$00, D2                                                
                move.b  (A0)+, D2                                               
                move.b  (A0)+, D2                                               
                move.b  (A0)+, D2                                               
                lsl.w   #$08, D2                                                
                move.b  (A0)+, D2                                               
                addq.w  #$04, D2                                                
                adda.w  D2, A1                                                  
                move.l  A1, A2                                                  
                moveq   #$00, D2                                                
                move.b  (A1)+, D2                                               
                move.b  (A1)+, D2                                               
                move.b  (A1)+, D2                                               
                lsl.w   #$08, D2                                                
                move.b  (A1)+, D2                                               
                addq.w  #$04, D2                                                
                adda.w  D2, A2                                                  
                move.b  (A2)+, D2                                               
                move.b  (A2)+, D2                                               
                move.b  (A2)+, D2                                               
                move.b  (A2)+, D2                                               
                move.l  A0, ($FFFF9B00).w                                       
                move.l  A0, ($FFFF9B2C).w                                       
                move.l  A1, ($FFFF9B04).w                                       
                move.l  A2, ($FFFF9B3A).w                                       
                lea     Offset_0x005F02(PC), A4                                 
                move.b  $00(A4, D1), D2                                         
                move.b  ($FFFF9B0B).w, ($FFFF9B09).w                            
                addi.b  #$01, ($FFFF9B0B).w                                     
                cmp.b   ($FFFF9B0B).w, D2                                       
                bne.s   Offset_0x005FF2                                         
                move.b  #$00, ($FFFF9B0B).w                                     
                move.b  ($FFFF9B0A).w, ($FFFF9B22).w                            
                addi.b  #$01, ($FFFF9B0A).w                                     
Offset_0x005FF2:
                tst.b   ($FFFF9B0C).w                                           
                beq.s   Offset_0x005FFC                                         
                addi.w  #$0010, D0                                              
Offset_0x005FFC:
                lea     Offset_0x005EE2(PC), A3                                 
                move.l  $00(A3, D0), A3                                         
                move.l  A3, (VDP_Control_Port)                       ; $00C00004
                lea     (VDP_Data_Port), A6                          ; $00C00000
                bsr     Offset_0x008B9E                                         
                move.l  ($FFFF9B00).w, A0                                       
                move.l  ($FFFF9B04).w, A1                                       
                move.l  ($FFFF9B3A).w, A2                                       
                lea     ($FFFF9B3E).w, A3                                       
                movem.w (A3)+, D2-D7                                            
                lea     (Offset_0x006E3A), A3                                   
                lea     (Offset_0x007302), A4                                   
                move.w  #$FFF8, A5                                              
                moveq   #$00, D0                                                
                tst.b   ($FFFF9B0E).w                                           
                bne     Offset_0x0066AA  
Offset_0x006042:                                                       
                adda.w  #$0001, A5                                              
                cmpa.w  #$0000, A5                                              
                beq     Offset_0x006678   
Offset_0x00604E:                                                      
                moveq   #$00, D1                                                
                subq.w  #$01, D7                                                
                bpl.s   Offset_0x006058                                         
                move.b  (A0)+, D6                                               
                moveq   #$07, D7                                                
Offset_0x006058:
                add.b   D6, D6                                                  
                bcc.s   Offset_0x0060A8                                         
                subq.b  #$01, D5                                                
                bpl.s   Offset_0x006064                                         
                move.b  (A1)+, D4                                               
                moveq   #$07, D5                                                
Offset_0x006064:
                add.b   D4, D4                                                  
                bcc.s   Offset_0x006088                                         
                moveq   #$0A, D0                                                
                sub.b   D5, D0                                                  
                subq.b  #$03, D0                                                
                add.w   D0, D0                                                  
                move.w  Offset_0x006078(PC, D0), D0                             
                jmp     Offset_0x006078(PC, D0)       
;-------------------------------------------------------------------------------
Offset_0x006078:
                dc.w    Offset_0x00621E-Offset_0x006078
                dc.w    Offset_0x0061F4-Offset_0x006078
                dc.w    Offset_0x0061CA-Offset_0x006078
                dc.w    Offset_0x0061A0-Offset_0x006078
                dc.w    Offset_0x006176-Offset_0x006078
                dc.w    Offset_0x006156-Offset_0x006078
                dc.w    Offset_0x006126-Offset_0x006078
                dc.w    Offset_0x0060FE-Offset_0x006078          
Offset_0x006088:
                moveq   #$06, D0                                                
                sub.b   D5, D0                                                  
                addq.b  #$01, D0                                                
                add.w   D0, D0                                                  
                move.w  Offset_0x006098(PC, D0), D0                             
                jmp     Offset_0x006098(PC, D0) 
;-------------------------------------------------------------------------------                  
Offset_0x006098:                  
                dc.w    Offset_0x00633A-Offset_0x006098
                dc.w    Offset_0x006322-Offset_0x006098
                dc.w    Offset_0x0062FC-Offset_0x006098
                dc.w    Offset_0x0062D6-Offset_0x006098
                dc.w    Offset_0x0062B0-Offset_0x006098
                dc.w    Offset_0x00628A-Offset_0x006098
                dc.w    Offset_0x006264-Offset_0x006098
                dc.w    Offset_0x006248-Offset_0x006098      
Offset_0x0060A8:
                subq.b  #$01, D3                                                
                bpl.s   Offset_0x0060BC                                         
                move.b  (A2)+, D2                                               
                cmpi.b  #$FF, D2                                                
                bne.s   Offset_0x0060BA                                         
                moveq   #$00, D3                                                
                bra     Offset_0x006042                                         
Offset_0x0060BA:
                moveq   #$07, D3                                                
Offset_0x0060BC:
                add.b   D2, D2                                                  
                bcc.s   Offset_0x0060DE                                         
                moveq   #$07, D0                                                
                sub.b   D3, D0                                                  
                add.b   D0, D0                                                  
                move.w  Offset_0x0060CE(PC, D0), D0                             
                jmp     Offset_0x0060CE(PC, D0)   
;-------------------------------------------------------------------------------    
Offset_0x0060CE:                 
                dc.w    Offset_0x0064EE-Offset_0x0060CE
                dc.w    Offset_0x0064B2-Offset_0x0060CE
                dc.w    Offset_0x006476-Offset_0x0060CE
                dc.w    Offset_0x00643A-Offset_0x0060CE
                dc.w    Offset_0x0063FE-Offset_0x0060CE
                dc.w    Offset_0x0063C2-Offset_0x0060CE
                dc.w    Offset_0x006386-Offset_0x0060CE
                dc.w    Offset_0x006354-Offset_0x0060CE         
Offset_0x0060DE:
                moveq   #$06, D0                                                
                sub.b   D3, D0                                                  
                addq.b  #$01, D0                                                
                add.b   D0, D0                                                  
                move.w  Offset_0x0060EE(PC, D0), D0                             
                jmp     Offset_0x0060EE(PC, D0) 
;-------------------------------------------------------------------------------   
Offset_0x0060EE:       
                dc.w    Offset_0x006654-Offset_0x0060EE
                dc.w    Offset_0x006632-Offset_0x0060EE
                dc.w    Offset_0x006602-Offset_0x0060EE
                dc.w    Offset_0x0065D2-Offset_0x0060EE
                dc.w    Offset_0x0065A2-Offset_0x0060EE
                dc.w    Offset_0x006572-Offset_0x0060EE
                dc.w    Offset_0x006542-Offset_0x0060EE
                dc.w    Offset_0x00651C-Offset_0x0060EE  
Offset_0x0060FE:
                moveq   #$00, D0                                                
                move.b  (A1)+, D0                                               
                lsl.w   #$02, D0                                                
                move.b  (A1)+, D4                                               
                rol.b   #$02, D4                                                
                move.b  D4, D1                                                  
                andi.b  #$03, D1                                                
                or.b    D1, D0                                                  
                addi.w  #$0040, D0                                              
                add.w   D0, D0                                                  
                move.w  $00(A3, D0), D0                                         
                ori.w   #$6000, D0                                              
                move.w  D0, (A6)                                                
                moveq   #$06, D5                                                
                bra     Offset_0x00604E                                         
Offset_0x006126:
                move.b  D4, D0                                                  
                lsl.w   #$02, D0                                                
                andi.w  #$0200, D0                                              
                move.b  (A1)+, D1                                               
                lsl.w   #$01, D1                                                
                or.w    D1, D0                                                  
                move.b  (A1)+, D4                                               
                rol.b   #$01, D4                                                
                move.b  D4, D1                                                  
                andi.b  #$01, D1                                                
                or.b    D1, D0                                                  
                addi.w  #$0040, D0                                              
                add.w   D0, D0                                                  
                move.w  $00(A3, D0), D0                                         
                ori.w   #$6000, D0                                              
                move.w  D0, (A6)                                                
                moveq   #$07, D5                                                
                bra     Offset_0x00604E                                         
Offset_0x006156:
                move.b  D4, D0                                                  
                lsl.w   #$02, D0                                                
                andi.w  #$0300, D0                                              
                move.b  (A1)+, D0                                               
                addi.w  #$0040, D0                                              
                add.w   D0, D0                                                  
                move.w  $00(A3, D0), D0                                         
                ori.w   #$6000, D0                                              
                move.w  D0, (A6)                                                
                moveq   #$00, D5                                                
                bra     Offset_0x00604E                                         
Offset_0x006176:
                move.b  D4, D0                                                  
                lsl.w   #$02, D0                                                
                andi.w  #$0380, D0                                              
                move.b  (A1)+, D4                                               
                ror.b   #$01, D4                                                
                move.b  D4, D1                                                  
                andi.b  #$7F, D1                                                
                or.b    D1, D0                                                  
                addi.w  #$0040, D0                                              
                add.w   D0, D0                                                  
                move.w  $00(A3, D0), D0                                         
                ori.w   #$6000, D0                                              
                move.w  D0, (A6)                                                
                moveq   #$01, D5                                                
                bra     Offset_0x00604E                                         
Offset_0x0061A0:
                move.b  D4, D0                                                  
                lsl.w   #$02, D0                                                
                andi.w  #$03C0, D0                                              
                move.b  (A1)+, D4                                               
                ror.b   #$02, D4                                                
                move.b  D4, D1                                                  
                andi.b  #$3F, D1                                                
                or.b    D1, D0                                                  
                addi.w  #$0040, D0                                              
                add.w   D0, D0                                                  
                move.w  $00(A3, D0), D0                                         
                ori.w   #$6000, D0                                              
                move.w  D0, (A6)                                                
                moveq   #$02, D5                                                
                bra     Offset_0x00604E                                         
Offset_0x0061CA:
                move.b  D4, D0                                                  
                lsl.w   #$02, D0                                                
                andi.w  #$03E0, D0                                              
                move.b  (A1)+, D4                                               
                ror.b   #$03, D4                                                
                move.b  D4, D1                                                  
                andi.b  #$1F, D1                                                
                or.b    D1, D0                                                  
                addi.w  #$0040, D0                                              
                add.w   D0, D0                                                  
                move.w  $00(A3, D0), D0                                         
                ori.w   #$6000, D0                                              
                move.w  D0, (A6)                                                
                moveq   #$03, D5                                                
                bra     Offset_0x00604E                                         
Offset_0x0061F4:
                move.b  D4, D0                                                  
                lsl.w   #$02, D0                                                
                andi.w  #$03F0, D0                                              
                move.b  (A1)+, D4                                               
                ror.b   #$04, D4                                                
                move.b  D4, D1                                                  
                andi.b  #$0F, D1                                                
                or.b    D1, D0                                                  
                addi.w  #$0040, D0                                              
                add.w   D0, D0                                                  
                move.w  $00(A3, D0), D0                                         
                ori.w   #$6000, D0                                              
                move.w  D0, (A6)                                                
                moveq   #$04, D5                                                
                bra     Offset_0x00604E                                         
Offset_0x00621E:
                move.b  D4, D0                                                  
                lsl.w   #$02, D0                                                
                andi.w  #$03F8, D0                                              
                move.b  (A1)+, D4                                               
                rol.b   #$03, D4                                                
                move.b  D4, D1                                                  
                andi.b  #$07, D1                                                
                or.b    D1, D0                                                  
                addi.w  #$0040, D0                                              
                add.w   D0, D0                                                  
                move.w  $00(A3, D0), D0                                         
                ori.w   #$6000, D0                                              
                move.w  D0, (A6)                                                
                moveq   #$05, D5                                                
                bra     Offset_0x00604E                                         
Offset_0x006248:
                move.b  (A1)+, D4                                               
                ror.b   #$02, D4                                                
                move.b  D4, D0                                                  
                andi.w  #$003F, D0                                              
                add.w   D0, D0                                                  
                move.w  $00(A3, D0), D0                                         
                ori.w   #$6000, D0                                              
                move.w  D0, (A6)                                                
                moveq   #$02, D5                                                
                bra     Offset_0x00604E                                         
Offset_0x006264:
                move.b  D4, D0                                                  
                lsr.b   #$02, D0                                                
                andi.w  #$0020, D0                                              
                move.b  (A1)+, D4                                               
                ror.b   #$03, D4                                                
                move.b  D4, D1                                                  
                andi.b  #$1F, D1                                                
                or.b    D1, D0                                                  
                add.w   D0, D0                                                  
                move.w  $00(A3, D0), D0                                         
                ori.w   #$6000, D0                                              
                move.w  D0, (A6)                                                
                moveq   #$03, D5                                                
                bra     Offset_0x00604E                                         
Offset_0x00628A:
                move.b  D4, D0                                                  
                lsr.b   #$02, D0                                                
                andi.w  #$0030, D0                                              
                move.b  (A1)+, D4                                               
                ror.b   #$04, D4                                                
                move.b  D4, D1                                                  
                andi.b  #$0F, D1                                                
                or.b    D1, D0                                                  
                add.w   D0, D0                                                  
                move.w  $00(A3, D0), D0                                         
                ori.w   #$6000, D0                                              
                move.w  D0, (A6)                                                
                moveq   #$04, D5                                                
                bra     Offset_0x00604E                                         
Offset_0x0062B0:
                move.b  D4, D0                                                  
                lsr.b   #$02, D0                                                
                andi.w  #$0038, D0                                              
                move.b  (A1)+, D4                                               
                rol.b   #$03, D4                                                
                move.b  D4, D1                                                  
                andi.b  #$07, D1                                                
                or.b    D1, D0                                                  
                add.w   D0, D0                                                  
                move.w  $00(A3, D0), D0                                         
                ori.w   #$6000, D0                                              
                move.w  D0, (A6)                                                
                moveq   #$05, D5                                                
                bra     Offset_0x00604E                                         
Offset_0x0062D6:
                move.b  D4, D0                                                  
                lsr.b   #$02, D0                                                
                andi.w  #$003C, D0                                              
                move.b  (A1)+, D4                                               
                rol.b   #$02, D4                                                
                move.b  D4, D1                                                  
                andi.b  #$03, D1                                                
                or.b    D1, D0                                                  
                add.w   D0, D0                                                  
                move.w  $00(A3, D0), D0                                         
                ori.w   #$6000, D0                                              
                move.w  D0, (A6)                                                
                moveq   #$06, D5                                                
                bra     Offset_0x00604E                                         
Offset_0x0062FC:
                move.b  D4, D0                                                  
                lsr.b   #$02, D0                                                
                andi.w  #$003E, D0                                              
                move.b  (A1)+, D4                                               
                rol.b   #$01, D4                                                
                move.b  D4, D1                                                  
                andi.b  #$01, D1                                                
                or.b    D1, D0                                                  
                add.w   D0, D0                                                  
                move.w  $00(A3, D0), D0                                         
                ori.w   #$6000, D0                                              
                move.w  D0, (A6)                                                
                moveq   #$07, D5                                                
                bra     Offset_0x00604E                                         
Offset_0x006322:
                lsr.b   #$02, D4                                                
                andi.w  #$003F, D4                                              
                add.w   D4, D4                                                  
                move.w  $00(A3, D4), D4                                         
                ori.w   #$6000, D4                                              
                move.w  D4, (A6)                                                
                moveq   #$00, D5                                                
                bra     Offset_0x00604E                                         
Offset_0x00633A:
                ror.b   #$02, D4                                                
                move.b  D4, D0                                                  
                andi.w  #$003F, D0                                              
                add.w   D0, D0                                                  
                move.w  $00(A3, D0), D0                                         
                ori.w   #$6000, D0                                              
                move.w  D0, (A6)                                                
                moveq   #$01, D5                                                
                bra     Offset_0x00604E                                         
Offset_0x006354:
                move.b  (A2)+, D2                                               
                ror.b   #$01, D2                                                
                move.b  D2, D0                                                  
                andi.w  #$007F, D0                                              
                moveq   #$01, D3                                                
                cmpi.b  #$7F, D0                                                
                beq     Offset_0x006042                                         
                addi.w  #$0040, D0                                              
                add.w   D0, D0                                                  
                add.w   D0, D0                                                  
                move.w  $00(A4, D0), D1                                         
                move.w  $02(A4, D0), D0                                         
                ori.w   #$E000, D1                                              
Offset_0x00637C:
                move.w  D1, (A6)                                                
                dbra    D0, Offset_0x00637C                                     
                bra     Offset_0x00604E                                         
Offset_0x006386:
                move.b  D2, D1                                                  
                lsr.b   #$01, D1                                                
                andi.b  #$40, D1                                                
                move.b  (A2)+, D2                                               
                ror.b   #$02, D2                                                
                move.b  D2, D0                                                  
                andi.w  #$003F, D0                                              
                or.b    D1, D0                                                  
                moveq   #$02, D3                                                
                cmpi.b  #$7F, D0                                                
                beq     Offset_0x006042                                         
                addi.w  #$0040, D0                                              
                add.w   D0, D0                                                  
                add.w   D0, D0                                                  
                move.w  $00(A4, D0), D1                                         
                move.w  $02(A4, D0), D0                                         
                ori.w   #$E000, D1                                              
Offset_0x0063B8:
                move.w  D1, (A6)                                                
                dbra    D0, Offset_0x0063B8                                     
                bra     Offset_0x00604E                                         
Offset_0x0063C2:
                move.b  D2, D1                                                  
                lsr.b   #$01, D1                                                
                andi.b  #$60, D1                                                
                move.b  (A2)+, D2                                               
                ror.b   #$03, D2                                                
                move.b  D2, D0                                                  
                andi.w  #$001F, D0                                              
                or.b    D1, D0                                                  
                moveq   #$03, D3                                                
                cmpi.b  #$7F, D0                                                
                beq     Offset_0x006042                                         
                addi.w  #$0040, D0                                              
                add.w   D0, D0                                                  
                add.w   D0, D0                                                  
                move.w  $00(A4, D0), D1                                         
                move.w  $02(A4, D0), D0                                         
                ori.w   #$E000, D1                                              
Offset_0x0063F4:
                move.w  D1, (A6)                                                
                dbra    D0, Offset_0x0063F4                                     
                bra     Offset_0x00604E                                         
Offset_0x0063FE:
                move.b  D2, D1                                                  
                lsr.b   #$01, D1                                                
                andi.b  #$70, D1                                                
                move.b  (A2)+, D2                                               
                ror.b   #$04, D2                                                
                move.b  D2, D0                                                  
                andi.w  #$000F, D0                                              
                or.b    D1, D0                                                  
                moveq   #$04, D3                                                
                cmpi.b  #$7F, D0                                                
                beq     Offset_0x006042                                         
                addi.w  #$0040, D0                                              
                add.w   D0, D0                                                  
                add.w   D0, D0                                                  
                move.w  $00(A4, D0), D1                                         
                move.w  $02(A4, D0), D0                                         
                ori.w   #$E000, D1                                              
Offset_0x006430:
                move.w  D1, (A6)                                                
                dbra    D0, Offset_0x006430                                     
                bra     Offset_0x00604E                                         
Offset_0x00643A:
                move.b  D2, D1                                                  
                lsr.b   #$01, D1                                                
                andi.b  #$78, D1                                                
                move.b  (A2)+, D2                                               
                rol.b   #$03, D2                                                
                move.b  D2, D0                                                  
                andi.w  #$0007, D0                                              
                or.b    D1, D0                                                  
                moveq   #$05, D3                                                
                cmpi.b  #$7F, D0                                                
                beq     Offset_0x006042                                         
                addi.w  #$0040, D0                                              
                add.w   D0, D0                                                  
                add.w   D0, D0                                                  
                move.w  $00(A4, D0), D1                                         
                move.w  $02(A4, D0), D0                                         
                ori.w   #$E000, D1                                              
Offset_0x00646C:
                move.w  D1, (A6)                                                
                dbra    D0, Offset_0x00646C                                     
                bra     Offset_0x00604E                                         
Offset_0x006476:
                move.b  D2, D1                                                  
                lsr.b   #$01, D1                                                
                andi.b  #$7C, D1                                                
                move.b  (A2)+, D2                                               
                rol.b   #$02, D2                                                
                move.b  D2, D0                                                  
                andi.w  #$0003, D0                                              
                or.b    D1, D0                                                  
                moveq   #$06, D3                                                
                cmpi.b  #$7F, D0                                                
                beq     Offset_0x006042                                         
                addi.w  #$0040, D0                                              
                add.w   D0, D0                                                  
                add.w   D0, D0                                                  
                move.w  $00(A4, D0), D1                                         
                move.w  $02(A4, D0), D0                                         
                ori.w   #$E000, D1                                              
Offset_0x0064A8:
                move.w  D1, (A6)                                                
                dbra    D0, Offset_0x0064A8                                     
                bra     Offset_0x00604E                                         
Offset_0x0064B2:
                move.b  D2, D1                                                  
                lsr.b   #$01, D1                                                
                andi.b  #$7E, D1                                                
                move.b  (A2)+, D2                                               
                rol.b   #$01, D2                                                
                move.b  D2, D0                                                  
                andi.w  #$0001, D0                                              
                or.b    D1, D0                                                  
                moveq   #$07, D3                                                
                cmpi.b  #$7F, D0                                                
                beq     Offset_0x006042                                         
                addi.w  #$0040, D0                                              
                add.w   D0, D0                                                  
                add.w   D0, D0                                                  
                move.w  $00(A4, D0), D1                                         
                move.w  $02(A4, D0), D0                                         
                ori.w   #$E000, D1                                              
Offset_0x0064E4:
                move.w  D1, (A6)                                                
                dbra    D0, Offset_0x0064E4                                     
                bra     Offset_0x00604E                                         
Offset_0x0064EE:
                lsr.b   #$01, D2                                                
                andi.w  #$007F, D2                                              
                moveq   #$00, D3                                                
                cmpi.b  #$7F, D2                                                
                beq     Offset_0x006042                                         
                addi.w  #$0040, D2                                              
                add.w   D2, D2                                                  
                add.w   D2, D2                                                  
                move.w  $00(A4, D2), D1                                         
                move.w  $02(A4, D2), D0                                         
                ori.w   #$E000, D1                                              
Offset_0x006512:
                move.w  D1, (A6)                                                
                dbra    D0, Offset_0x006512                                     
                bra     Offset_0x00604E                                         
Offset_0x00651C:
                move.b  (A2)+, D2                                               
                ror.b   #$02, D2                                                
                move.b  D2, D0                                                  
                andi.w  #$003F, D0                                              
                add.w   D0, D0                                                  
                add.w   D0, D0                                                  
                moveq   #$02, D3                                                
                move.w  $00(A4, D0), D1                                         
                move.w  $02(A4, D0), D0                                         
                ori.w   #$E000, D1                                              
Offset_0x006538:
                move.w  D1, (A6)                                                
                dbra    D0, Offset_0x006538                                     
                bra     Offset_0x00604E                                         
Offset_0x006542:
                move.b  D2, D0                                                  
                lsr.b   #$02, D0                                                
                andi.w  #$0020, D0                                              
                move.b  (A2)+, D2                                               
                ror.b   #$03, D2                                                
                move.b  D2, D1                                                  
                andi.b  #$1F, D1                                                
                or.b    D1, D0                                                  
                moveq   #$03, D3                                                
                add.w   D0, D0                                                  
                add.w   D0, D0                                                  
                move.w  $00(A4, D0), D1                                         
                move.w  $02(A4, D0), D0                                         
                ori.w   #$E000, D1                                              
Offset_0x006568:
                move.w  D1, (A6)                                                
                dbra    D0, Offset_0x006568                                     
                bra     Offset_0x00604E                                         
Offset_0x006572:
                move.b  D2, D0                                                  
                lsr.b   #$02, D0                                                
                andi.w  #$0030, D0                                              
                move.b  (A2)+, D2                                               
                ror.b   #$04, D2                                                
                move.b  D2, D1                                                  
                andi.b  #$0F, D1                                                
                or.b    D1, D0                                                  
                add.w   D0, D0                                                  
                add.w   D0, D0                                                  
                moveq   #$04, D3                                                
                move.w  $00(A4, D0), D1                                         
                move.w  $02(A4, D0), D0                                         
                ori.w   #$E000, D1                                              
Offset_0x006598:
                move.w  D1, (A6)                                                
                dbra    D0, Offset_0x006598                                     
                bra     Offset_0x00604E                                         
Offset_0x0065A2:
                move.b  D2, D0                                                  
                lsr.b   #$02, D0                                                
                andi.w  #$0038, D0                                              
                move.b  (A2)+, D2                                               
                rol.b   #$03, D2                                                
                move.b  D2, D1                                                  
                andi.b  #$07, D1                                                
                or.b    D1, D0                                                  
                add.w   D0, D0                                                  
                add.w   D0, D0                                                  
                moveq   #$05, D3                                                
                move.w  $00(A4, D0), D1                                         
                move.w  $02(A4, D0), D0                                         
                ori.w   #$E000, D1                                              
Offset_0x0065C8:
                move.w  D1, (A6)                                                
                dbra    D0, Offset_0x0065C8                                     
                bra     Offset_0x00604E                                         
Offset_0x0065D2:
                move.b  D2, D0                                                  
                lsr.b   #$02, D0                                                
                andi.w  #$003C, D0                                              
                move.b  (A2)+, D2                                               
                rol.b   #$02, D2                                                
                move.b  D2, D1                                                  
                andi.b  #$03, D1                                                
                or.b    D1, D0                                                  
                add.w   D0, D0                                                  
                add.w   D0, D0                                                  
                moveq   #$06, D3                                                
                move.w  $00(A4, D0), D1                                         
                move.w  $02(A4, D0), D0                                         
                ori.w   #$E000, D1                                              
Offset_0x0065F8:
                move.w  D1, (A6)                                                
                dbra    D0, Offset_0x0065F8                                     
                bra     Offset_0x00604E                                         
Offset_0x006602:
                move.b  D2, D0                                                  
                lsr.b   #$02, D0                                                
                andi.w  #$003E, D0                                              
                move.b  (A2)+, D2                                               
                rol.b   #$01, D2                                                
                move.b  D2, D1                                                  
                andi.b  #$01, D1                                                
                or.b    D1, D0                                                  
                add.w   D0, D0                                                  
                add.w   D0, D0                                                  
                moveq   #$07, D3                                                
                move.w  $00(A4, D0), D1                                         
                move.w  $02(A4, D0), D0                                         
                ori.w   #$E000, D1                                              
Offset_0x006628:
                move.w  D1, (A6)                                                
                dbra    D0, Offset_0x006628                                     
                bra     Offset_0x00604E                                         
Offset_0x006632:
                lsr.b   #$02, D2                                                
                andi.w  #$003F, D2                                              
                add.w   D2, D2                                                  
                add.w   D2, D2                                                  
                moveq   #$00, D3                                                
                move.w  $00(A4, D2), D1                                         
                move.w  $02(A4, D2), D0                                         
                ori.w   #$E000, D1                                              
Offset_0x00664A:
                move.w  D1, (A6)                                                
                dbra    D0, Offset_0x00664A                                     
                bra     Offset_0x00604E                                         
Offset_0x006654:
                ror.b   #$02, D2                                                
                move.b  D2, D0                                                  
                andi.w  #$003F, D0                                              
                add.w   D0, D0                                                  
                add.w   D0, D0                                                  
                moveq   #$01, D3                                                
                move.w  $00(A4, D0), D1                                         
                move.w  $02(A4, D0), D0                                         
                ori.w   #$E000, D1                                              
Offset_0x00666E:
                move.w  D1, (A6)                                                
                dbra    D0, Offset_0x00666E                                     
                bra     Offset_0x00604E                                         
Offset_0x006678:
                cmpi.b  #$03, ($FFFF9B0D).w                                     
                beq.s   Offset_0x006696                                         
                move.l  A0, ($FFFF9B00).w                                       
                move.l  A1, ($FFFF9B04).w                                       
                move.l  A2, ($FFFF9B3A).w                                       
                lea     ($FFFF9B4A).w, A3                                       
                movem.w D2-D7, -(A3)                                            
                rts                                                             
Offset_0x006696:
                lea     ($FFFF9B3E).w, A2                                       
                moveq   #$00, D0                                                
                move.w  D0, (A2)+                                               
                move.w  D0, (A2)+                                               
                move.w  D0, (A2)+                                               
                move.w  D0, (A2)+                                               
                move.w  D0, (A2)+                                               
                move.w  D0, (A2)+                                               
                rts                                                             
Offset_0x0066AA:
                adda.w  #$0001, A5                                              
                cmpa.w  #$0000, A5                                              
                beq     Offset_0x006678                                         
                lea     (Blocks_Mem_Address).w, A6                   ; $FFFF9000
                swap.w  D0                                                      
                addi.w  #$0100, D0                                              
                andi.w  #$0F00, D0                                              
                adda.w  D0, A6                                                  
                swap.w  D0        
Offset_0x0066C8:                                                              
                moveq   #$00, D1                                                
                subq.w  #$01, D7                                                
                bpl.s   Offset_0x0066D2                                         
                move.b  (A0)+, D6                                               
                moveq   #$07, D7                                                
Offset_0x0066D2:
                add.b   D6, D6                                                  
                bcc.s   Offset_0x006726                                         
                subq.b  #$01, D5                                                
                bpl.s   Offset_0x0066DE                                         
                move.b  (A1)+, D4                                               
                moveq   #$07, D5                                                
Offset_0x0066DE:
                add.b   D4, D4                                                  
                bcc.s   Offset_0x006704                                         
                move.w  #$000A, D0                                              
                sub.b   D5, D0                                                  
                subq.b  #$03, D0                                                
                add.w   D0, D0                                                  
                move.w  Offset_0x0066F4(PC, D0), D0                             
                jmp     Offset_0x0066F4(PC, D0) 
;-------------------------------------------------------------------------------
Offset_0x0066F4:                  
                dc.w    Offset_0x0068A2-Offset_0x0066F4
                dc.w    Offset_0x006878-Offset_0x0066F4
                dc.w    Offset_0x00684E-Offset_0x0066F4
                dc.w    Offset_0x006824-Offset_0x0066F4
                dc.w    Offset_0x0067FA-Offset_0x0066F4
                dc.w    Offset_0x0067DA-Offset_0x0066F4
                dc.w    Offset_0x0067AA-Offset_0x0066F4
                dc.w    Offset_0x006780-Offset_0x0066F4            
Offset_0x006704:
                move.w  #$0006, D0                                              
                sub.b   D5, D0                                                  
                addq.b  #$01, D0                                                
                add.w   D0, D0                                                  
                move.w  Offset_0x006716(PC, D0), D0                             
                jmp     Offset_0x006716(PC, D0)                                 
;-------------------------------------------------------------------------------     
Offset_0x006716:
                dc.w    Offset_0x0069BE-Offset_0x006716
                dc.w    Offset_0x0069A6-Offset_0x006716
                dc.w    Offset_0x006980-Offset_0x006716
                dc.w    Offset_0x00695A-Offset_0x006716
                dc.w    Offset_0x006934-Offset_0x006716
                dc.w    Offset_0x00690E-Offset_0x006716
                dc.w    Offset_0x0068E8-Offset_0x006716
                dc.w    Offset_0x0068CC-Offset_0x006716    
Offset_0x006726:
                subq.b  #$01, D3                                                
                bpl.s   Offset_0x00673A                                         
                move.b  (A2)+, D2                                               
                cmpi.b  #$FF, D2                                                
                bne.s   Offset_0x006738                                         
                moveq   #$00, D3                                                
                bra     Offset_0x0066AA                                         
Offset_0x006738:
                moveq   #$07, D3                                                
Offset_0x00673A:
                add.b   D2, D2                                                  
                bcc.s   Offset_0x00675E                                         
                move.w  #$0007, D0                                              
                sub.b   D3, D0                                                  
                add.b   D0, D0                                                  
                move.w  Offset_0x00674E(PC, D0), D0                             
                jmp     Offset_0x00674E(PC, D0) 
;-------------------------------------------------------------------------------
Offset_0x00674E:                
                dc.w    Offset_0x006B72-Offset_0x00674E
                dc.w    Offset_0x006B36-Offset_0x00674E
                dc.w    Offset_0x006AFA-Offset_0x00674E
                dc.w    Offset_0x006ABE-Offset_0x00674E
                dc.w    Offset_0x006A82-Offset_0x00674E
                dc.w    Offset_0x006A46-Offset_0x00674E
                dc.w    Offset_0x006A0A-Offset_0x00674E
                dc.w    Offset_0x0069D8-Offset_0x00674E    
Offset_0x00675E:
                move.w  #$0006, D0                                              
                sub.b   D3, D0                                                  
                addq.b  #$01, D0                                                
                add.b   D0, D0                                                  
                move.w  Offset_0x006770(PC, D0), D0                             
                jmp     Offset_0x006770(PC, D0)   
;-------------------------------------------------------------------------------
Offset_0x006770:                           
                dc.w    Offset_0x006CD8-Offset_0x006770
                dc.w    Offset_0x006CB6-Offset_0x006770
                dc.w    Offset_0x006C86-Offset_0x006770
                dc.w    Offset_0x006C56-Offset_0x006770
                dc.w    Offset_0x006C26-Offset_0x006770
                dc.w    Offset_0x006BF6-Offset_0x006770
                dc.w    Offset_0x006BC6-Offset_0x006770
                dc.w    Offset_0x006BA0-Offset_0x006770        
Offset_0x006780:
                move.w  #$0000, D0                                              
                move.b  (A1)+, D0                                               
                lsl.w   #$02, D0                                                
                move.b  (A1)+, D4                                               
                rol.b   #$02, D4                                                
                move.b  D4, D1                                                  
                andi.b  #$03, D1                                                
                or.b    D1, D0                                                  
                addi.w  #$0040, D0                                              
                add.w   D0, D0                                                  
                move.w  $00(A3, D0), D0                                         
                eori.w  #$6800, D0                                              
                move.w  D0, -(A6)                                               
                moveq   #$06, D5                                                
                bra     Offset_0x0066C8                                         
Offset_0x0067AA:
                move.b  D4, D0                                                  
                lsl.w   #$02, D0                                                
                andi.w  #$0200, D0                                              
                move.b  (A1)+, D1                                               
                lsl.w   #$01, D1                                                
                or.w    D1, D0                                                  
                move.b  (A1)+, D4                                               
                rol.b   #$01, D4                                                
                move.b  D4, D1                                                  
                andi.b  #$01, D1                                                
                or.b    D1, D0                                                  
                addi.w  #$0040, D0                                              
                add.w   D0, D0                                                  
                move.w  $00(A3, D0), D0                                         
                eori.w  #$6800, D0                                              
                move.w  D0, -(A6)                                               
                moveq   #$07, D5                                                
                bra     Offset_0x0066C8                                         
Offset_0x0067DA:
                move.b  D4, D0                                                  
                lsl.w   #$02, D0                                                
                andi.w  #$0300, D0                                              
                move.b  (A1)+, D0                                               
                addi.w  #$0040, D0                                              
                add.w   D0, D0                                                  
                move.w  $00(A3, D0), D0                                         
                eori.w  #$6800, D0                                              
                move.w  D0, -(A6)                                               
                moveq   #$00, D5                                                
                bra     Offset_0x0066C8                                         
Offset_0x0067FA:
                move.b  D4, D0                                                  
                lsl.w   #$02, D0                                                
                andi.w  #$0380, D0                                              
                move.b  (A1)+, D4                                               
                ror.b   #$01, D4                                                
                move.b  D4, D1                                                  
                andi.b  #$7F, D1                                                
                or.b    D1, D0                                                  
                addi.w  #$0040, D0                                              
                add.w   D0, D0                                                  
                move.w  $00(A3, D0), D0                                         
                eori.w  #$6800, D0                                              
                move.w  D0, -(A6)                                               
                moveq   #$01, D5                                                
                bra     Offset_0x0066C8                                         
Offset_0x006824:
                move.b  D4, D0                                                  
                lsl.w   #$02, D0                                                
                andi.w  #$03C0, D0                                              
                move.b  (A1)+, D4                                               
                ror.b   #$02, D4                                                
                move.b  D4, D1                                                  
                andi.b  #$3F, D1                                                
                or.b    D1, D0                                                  
                addi.w  #$0040, D0                                              
                add.w   D0, D0                                                  
                move.w  $00(A3, D0), D0                                         
                eori.w  #$6800, D0                                              
                move.w  D0, -(A6)                                               
                moveq   #$02, D5                                                
                bra     Offset_0x0066C8                                         
Offset_0x00684E:
                move.b  D4, D0                                                  
                lsl.w   #$02, D0                                                
                andi.w  #$03E0, D0                                              
                move.b  (A1)+, D4                                               
                ror.b   #$03, D4                                                
                move.b  D4, D1                                                  
                andi.b  #$1F, D1                                                
                or.b    D1, D0                                                  
                addi.w  #$0040, D0                                              
                add.w   D0, D0                                                  
                move.w  $00(A3, D0), D0                                         
                eori.w  #$6800, D0                                              
                move.w  D0, -(A6)                                               
                moveq   #$03, D5                                                
                bra     Offset_0x0066C8                                         
Offset_0x006878:
                move.b  D4, D0                                                  
                lsl.w   #$02, D0                                                
                andi.w  #$03F0, D0                                              
                move.b  (A1)+, D4                                               
                ror.b   #$04, D4                                                
                move.b  D4, D1                                                  
                andi.b  #$0F, D1                                                
                or.b    D1, D0                                                  
                addi.w  #$0040, D0                                              
                add.w   D0, D0                                                  
                move.w  $00(A3, D0), D0                                         
                eori.w  #$6800, D0                                              
                move.w  D0, -(A6)                                               
                moveq   #$04, D5                                                
                bra     Offset_0x0066C8                                         
Offset_0x0068A2:
                move.b  D4, D0                                                  
                lsl.w   #$02, D0                                                
                andi.w  #$03F8, D0                                              
                move.b  (A1)+, D4                                               
                rol.b   #$03, D4                                                
                move.b  D4, D1                                                  
                andi.b  #$07, D1                                                
                or.b    D1, D0                                                  
                addi.w  #$0040, D0                                              
                add.w   D0, D0                                                  
                move.w  $00(A3, D0), D0                                         
                eori.w  #$6800, D0                                              
                move.w  D0, -(A6)                                               
                moveq   #$05, D5                                                
                bra     Offset_0x0066C8                                         
Offset_0x0068CC:
                move.b  (A1)+, D4                                               
                ror.b   #$02, D4                                                
                move.b  D4, D0                                                  
                andi.w  #$003F, D0                                              
                add.w   D0, D0                                                  
                move.w  $00(A3, D0), D0                                         
                eori.w  #$6800, D0                                              
                move.w  D0, -(A6)                                               
                moveq   #$02, D5                                                
                bra     Offset_0x0066C8                                         
Offset_0x0068E8:
                move.b  D4, D0                                                  
                lsr.b   #$02, D0                                                
                andi.w  #$0020, D0                                              
                move.b  (A1)+, D4                                               
                ror.b   #$03, D4                                                
                move.b  D4, D1                                                  
                andi.b  #$1F, D1                                                
                or.b    D1, D0                                                  
                add.w   D0, D0                                                  
                move.w  $00(A3, D0), D0                                         
                eori.w  #$6800, D0                                              
                move.w  D0, -(A6)                                               
                moveq   #$03, D5                                                
                bra     Offset_0x0066C8                                         
Offset_0x00690E:
                move.b  D4, D0                                                  
                lsr.b   #$02, D0                                                
                andi.w  #$0030, D0                                              
                move.b  (A1)+, D4                                               
                ror.b   #$04, D4                                                
                move.b  D4, D1                                                  
                andi.b  #$0F, D1                                                
                or.b    D1, D0                                                  
                add.w   D0, D0                                                  
                move.w  $00(A3, D0), D0                                         
                eori.w  #$6800, D0                                              
                move.w  D0, -(A6)                                               
                moveq   #$04, D5                                                
                bra     Offset_0x0066C8                                         
Offset_0x006934:
                move.b  D4, D0                                                  
                lsr.b   #$02, D0                                                
                andi.w  #$0038, D0                                              
                move.b  (A1)+, D4                                               
                rol.b   #$03, D4                                                
                move.b  D4, D1                                                  
                andi.b  #$07, D1                                                
                or.b    D1, D0                                                  
                add.w   D0, D0                                                  
                move.w  $00(A3, D0), D0                                         
                eori.w  #$6800, D0                                              
                move.w  D0, -(A6)                                               
                moveq   #$05, D5                                                
                bra     Offset_0x0066C8                                         
Offset_0x00695A:
                move.b  D4, D0                                                  
                lsr.b   #$02, D0                                                
                andi.w  #$003C, D0                                              
                move.b  (A1)+, D4                                               
                rol.b   #$02, D4                                                
                move.b  D4, D1                                                  
                andi.b  #$03, D1                                                
                or.b    D1, D0                                                  
                add.w   D0, D0                                                  
                move.w  $00(A3, D0), D0                                         
                eori.w  #$6800, D0                                              
                move.w  D0, -(A6)                                               
                moveq   #$06, D5                                                
                bra     Offset_0x0066C8                                         
Offset_0x006980:
                move.b  D4, D0                                                  
                lsr.b   #$02, D0                                                
                andi.w  #$003E, D0                                              
                move.b  (A1)+, D4                                               
                rol.b   #$01, D4                                                
                move.b  D4, D1                                                  
                andi.b  #$01, D1                                                
                or.b    D1, D0                                                  
                add.w   D0, D0                                                  
                move.w  $00(A3, D0), D0                                         
                eori.w  #$6800, D0                                              
                move.w  D0, -(A6)                                               
                moveq   #$07, D5                                                
                bra     Offset_0x0066C8                                         
Offset_0x0069A6:
                lsr.b   #$02, D4                                                
                andi.w  #$003F, D4                                              
                add.w   D4, D4                                                  
                move.w  $00(A3, D4), D0                                         
                eori.w  #$6800, D0                                              
                move.w  D0, -(A6)                                               
                moveq   #$00, D5                                                
                bra     Offset_0x0066C8                                         
Offset_0x0069BE:
                ror.b   #$02, D4                                                
                move.b  D4, D0                                                  
                andi.w  #$003F, D0                                              
                add.w   D0, D0                                                  
                move.w  $00(A3, D0), D0                                         
                eori.w  #$6800, D0                                              
                move.w  D0, -(A6)                                               
                moveq   #$01, D5                                                
                bra     Offset_0x0066C8                                         
Offset_0x0069D8:
                move.b  (A2)+, D2                                               
                ror.b   #$01, D2                                                
                move.b  D2, D0                                                  
                andi.w  #$007F, D0                                              
                moveq   #$01, D3                                                
                cmpi.b  #$7F, D0                                                
                beq     Offset_0x0066AA                                         
                addi.w  #$0040, D0                                              
                add.w   D0, D0                                                  
                add.w   D0, D0                                                  
                move.w  $00(A4, D0), D1                                         
                move.w  $02(A4, D0), D0                                         
                ori.w   #$E000, D1                                              
Offset_0x006A00:
                move.w  D1, -(A6)                                               
                dbra    D0, Offset_0x006A00                                     
                bra     Offset_0x0066C8                                         
Offset_0x006A0A:
                move.b  D2, D1                                                  
                lsr.b   #$01, D1                                                
                andi.b  #$40, D1                                                
                move.b  (A2)+, D2                                               
                ror.b   #$02, D2                                                
                move.b  D2, D0                                                  
                andi.w  #$003F, D0                                              
                or.b    D1, D0                                                  
                moveq   #$02, D3                                                
                cmpi.b  #$7F, D0                                                
                beq     Offset_0x0066AA                                         
                addi.w  #$0040, D0                                              
                add.w   D0, D0                                                  
                add.w   D0, D0                                                  
                move.w  $00(A4, D0), D1                                         
                move.w  $02(A4, D0), D0                                         
                ori.w   #$E000, D1                                              
Offset_0x006A3C:
                move.w  D1, -(A6)                                               
                dbra    D0, Offset_0x006A3C                                     
                bra     Offset_0x0066C8                                         
Offset_0x006A46:
                move.b  D2, D1                                                  
                lsr.b   #$01, D1                                                
                andi.b  #$60, D1                                                
                move.b  (A2)+, D2                                               
                ror.b   #$03, D2                                                
                move.b  D2, D0                                                  
                andi.w  #$001F, D0                                              
                or.b    D1, D0                                                  
                moveq   #$03, D3                                                
                cmpi.b  #$7F, D0                                                
                beq     Offset_0x0066AA                                         
                addi.w  #$0040, D0                                              
                add.w   D0, D0                                                  
                add.w   D0, D0                                                  
                move.w  $00(A4, D0), D1                                         
                move.w  $02(A4, D0), D0                                         
                ori.w   #$E000, D1                                              
Offset_0x006A78:
                move.w  D1, -(A6)                                               
                dbra    D0, Offset_0x006A78                                     
                bra     Offset_0x0066C8                                         
Offset_0x006A82:
                move.b  D2, D1                                                  
                lsr.b   #$01, D1                                                
                andi.b  #$70, D1                                                
                move.b  (A2)+, D2                                               
                ror.b   #$04, D2                                                
                move.b  D2, D0                                                  
                andi.w  #$000F, D0                                              
                or.b    D1, D0                                                  
                moveq   #$04, D3                                                
                cmpi.b  #$7F, D0                                                
                beq     Offset_0x0066AA                                         
                addi.w  #$0040, D0                                              
                add.w   D0, D0                                                  
                add.w   D0, D0                                                  
                move.w  $00(A4, D0), D1                                         
                move.w  $02(A4, D0), D0                                         
                ori.w   #$E000, D1                                              
Offset_0x006AB4:
                move.w  D1, -(A6)                                               
                dbra    D0, Offset_0x006AB4                                     
                bra     Offset_0x0066C8                                         
Offset_0x006ABE:
                move.b  D2, D1                                                  
                lsr.b   #$01, D1                                                
                andi.b  #$78, D1                                                
                move.b  (A2)+, D2                                               
                rol.b   #$03, D2                                                
                move.b  D2, D0                                                  
                andi.w  #$0007, D0                                              
                or.b    D1, D0                                                  
                moveq   #$05, D3                                                
                cmpi.b  #$7F, D0                                                
                beq     Offset_0x0066AA                                         
                addi.w  #$0040, D0                                              
                add.w   D0, D0                                                  
                add.w   D0, D0                                                  
                move.w  $00(A4, D0), D1                                         
                move.w  $02(A4, D0), D0                                         
                ori.w   #$E000, D1                                              
Offset_0x006AF0:
                move.w  D1, -(A6)                                               
                dbra    D0, Offset_0x006AF0                                     
                bra     Offset_0x0066C8                                         
Offset_0x006AFA:
                move.b  D2, D1                                                  
                lsr.b   #$01, D1                                                
                andi.b  #$7C, D1                                                
                move.b  (A2)+, D2                                               
                rol.b   #$02, D2                                                
                move.b  D2, D0                                                  
                andi.w  #$0003, D0                                              
                or.b    D1, D0                                                  
                moveq   #$06, D3                                                
                cmpi.b  #$7F, D0                                                
                beq     Offset_0x0066AA                                         
                addi.w  #$0040, D0                                              
                add.w   D0, D0                                                  
                add.w   D0, D0                                                  
                move.w  $00(A4, D0), D1                                         
                move.w  $02(A4, D0), D0                                         
                ori.w   #$E000, D1                                              
Offset_0x006B2C:
                move.w  D1, -(A6)                                               
                dbra    D0, Offset_0x006B2C                                     
                bra     Offset_0x0066C8                                         
Offset_0x006B36:
                move.b  D2, D1                                                  
                lsr.b   #$01, D1                                                
                andi.b  #$7E, D1                                                
                move.b  (A2)+, D2                                               
                rol.b   #$01, D2                                                
                move.b  D2, D0                                                  
                andi.w  #$0001, D0                                              
                or.b    D1, D0                                                  
                moveq   #$07, D3                                                
                cmpi.b  #$7F, D0                                                
                beq     Offset_0x0066AA                                         
                addi.w  #$0040, D0                                              
                add.w   D0, D0                                                  
                add.w   D0, D0                                                  
                move.w  $00(A4, D0), D1                                         
                move.w  $02(A4, D0), D0                                         
                ori.w   #$E000, D1                                              
Offset_0x006B68:
                move.w  D1, -(A6)                                               
                dbra    D0, Offset_0x006B68                                     
                bra     Offset_0x0066C8                                         
Offset_0x006B72:
                lsr.b   #$01, D2                                                
                andi.w  #$007F, D2                                              
                moveq   #$00, D3                                                
                cmpi.b  #$7F, D2                                                
                beq     Offset_0x0066AA                                         
                addi.w  #$0040, D2                                              
                add.w   D2, D2                                                  
                add.w   D2, D2                                                  
                move.w  $00(A4, D2), D1                                         
                move.w  $02(A4, D2), D0                                         
                ori.w   #$E000, D1                                              
Offset_0x006B96:
                move.w  D1, -(A6)                                               
                dbra    D0, Offset_0x006B96                                     
                bra     Offset_0x0066C8                                         
Offset_0x006BA0:
                move.b  (A2)+, D2                                               
                ror.b   #$02, D2                                                
                move.b  D2, D0                                                  
                andi.w  #$003F, D0                                              
                add.w   D0, D0                                                  
                add.w   D0, D0                                                  
                moveq   #$02, D3                                                
                move.w  $00(A4, D0), D1                                         
                move.w  $02(A4, D0), D0                                         
                ori.w   #$E000, D1                                              
Offset_0x006BBC:
                move.w  D1, -(A6)                                               
                dbra    D0, Offset_0x006BBC                                     
                bra     Offset_0x0066C8                                         
Offset_0x006BC6:
                move.b  D2, D0                                                  
                lsr.b   #$02, D0                                                
                andi.w  #$0020, D0                                              
                move.b  (A2)+, D2                                               
                ror.b   #$03, D2                                                
                move.b  D2, D1                                                  
                andi.b  #$1F, D1                                                
                or.b    D1, D0                                                  
                moveq   #$03, D3                                                
                add.w   D0, D0                                                  
                add.w   D0, D0                                                  
                move.w  $00(A4, D0), D1                                         
                move.w  $02(A4, D0), D0                                         
                ori.w   #$E000, D1                                              
Offset_0x006BEC:
                move.w  D1, -(A6)                                               
                dbra    D0, Offset_0x006BEC                                     
                bra     Offset_0x0066C8                                         
Offset_0x006BF6:
                move.b  D2, D0                                                  
                lsr.b   #$02, D0                                                
                andi.w  #$0030, D0                                              
                move.b  (A2)+, D2                                               
                ror.b   #$04, D2                                                
                move.b  D2, D1                                                  
                andi.b  #$0F, D1                                                
                or.b    D1, D0                                                  
                add.w   D0, D0                                                  
                add.w   D0, D0                                                  
                moveq   #$04, D3                                                
                move.w  $00(A4, D0), D1                                         
                move.w  $02(A4, D0), D0                                         
                ori.w   #$E000, D1                                              
Offset_0x006C1C:
                move.w  D1, -(A6)                                               
                dbra    D0, Offset_0x006C1C                                     
                bra     Offset_0x0066C8                                         
Offset_0x006C26:
                move.b  D2, D0                                                  
                lsr.b   #$02, D0                                                
                andi.w  #$0038, D0                                              
                move.b  (A2)+, D2                                               
                rol.b   #$03, D2                                                
                move.b  D2, D1                                                  
                andi.b  #$07, D1                                                
                or.b    D1, D0                                                  
                add.w   D0, D0                                                  
                add.w   D0, D0                                                  
                moveq   #$05, D3                                                
                move.w  $00(A4, D0), D1                                         
                move.w  $02(A4, D0), D0                                         
                ori.w   #$E000, D1                                              
Offset_0x006C4C:
                move.w  D1, -(A6)                                               
                dbra    D0, Offset_0x006C4C                                     
                bra     Offset_0x0066C8                                         
Offset_0x006C56:
                move.b  D2, D0                                                  
                lsr.b   #$02, D0                                                
                andi.w  #$003C, D0                                              
                move.b  (A2)+, D2                                               
                rol.b   #$02, D2                                                
                move.b  D2, D1                                                  
                andi.b  #$03, D1                                                
                or.b    D1, D0                                                  
                add.w   D0, D0                                                  
                add.w   D0, D0                                                  
                moveq   #$06, D3                                                
                move.w  $00(A4, D0), D1                                         
                move.w  $02(A4, D0), D0                                         
                ori.w   #$E000, D1                                              
Offset_0x006C7C:
                move.w  D1, -(A6)                                               
                dbra    D0, Offset_0x006C7C                                     
                bra     Offset_0x0066C8                                         
Offset_0x006C86:
                move.b  D2, D0                                                  
                lsr.b   #$02, D0                                                
                andi.w  #$003E, D0                                              
                move.b  (A2)+, D2                                               
                rol.b   #$01, D2                                                
                move.b  D2, D1                                                  
                andi.b  #$01, D1                                                
                or.b    D1, D0                                                  
                add.w   D0, D0                                                  
                add.w   D0, D0                                                  
                moveq   #$07, D3                                                
                move.w  $00(A4, D0), D1                                         
                move.w  $02(A4, D0), D0                                         
                ori.w   #$E000, D1                                              
Offset_0x006CAC:
                move.w  D1, -(A6)                                               
                dbra    D0, Offset_0x006CAC                                     
                bra     Offset_0x0066C8                                         
Offset_0x006CB6:
                lsr.b   #$02, D2                                                
                andi.w  #$003F, D2                                              
                add.w   D2, D2                                                  
                add.w   D2, D2                                                  
                moveq   #$00, D3                                                
                move.w  $00(A4, D2), D1                                         
                move.w  $02(A4, D2), D0                                         
                ori.w   #$E000, D1                                              
Offset_0x006CCE:
                move.w  D1, -(A6)                                               
                dbra    D0, Offset_0x006CCE                                     
                bra     Offset_0x0066C8                                         
Offset_0x006CD8:
                ror.b   #$02, D2                                                
                move.b  D2, D0                                                  
                andi.w  #$003F, D0                                              
                add.w   D0, D0                                                  
                add.w   D0, D0                                                  
                moveq   #$01, D3                                                
                move.w  $00(A4, D0), D1                                         
                move.w  $02(A4, D0), D0                                         
                ori.w   #$E000, D1                                              
Offset_0x006CF2:
                move.w  D1, -(A6)                                               
                dbra    D0, Offset_0x006CF2                                     
                bra     Offset_0x0066C8                                                                                
;-------------------------------------------------------------------------------
Offset_0x006CFC:
                dc.w    Offset_0x006D06-Offset_0x006CFC
                dc.w    Offset_0x006D1E-Offset_0x006CFC
                dc.w    Offset_0x006D36-Offset_0x006CFC
                dc.w    Offset_0x006D42-Offset_0x006CFC
                dc.w    Offset_0x006D52-Offset_0x006CFC
Offset_0x006D06:
                dc.b    $26, $27, $28, $29, $2A, $2B, $26, $00
                dc.b    $01, $02, $03, $04, $05, $06, $07, $08
                dc.b    $09, $0A, $0B, $0C, $0D, $0E, $0F, $10
Offset_0x006D1E:
                dc.b    $26, $27, $28, $29, $2A, $2B, $26, $15
                dc.b    $16, $17, $18, $19, $1A, $1B, $1C, $1D
                dc.b    $1E, $1F, $20, $21, $22, $23, $24, $25
Offset_0x006D36:
                dc.b    $26, $27, $28, $29, $2A, $2B, $26, $2C
                dc.b    $2D, $2E, $2F, $30
Offset_0x006D42:
                dc.b    $11, $12, $13, $14, $11, $12, $13, $14
                dc.b    $11, $12, $13, $14, $11, $12, $13, $14
Offset_0x006D52:
                dc.b    $31, $32, $33, $34, $35, $36, $37, $00    
Offset_0x006D5A:
                dc.l    Offset_0x0C853E
                dc.l    Offset_0x0C89E2
                dc.l    Offset_0x0C8FB0
                dc.l    Offset_0x0C9568
                dc.l    Offset_0x0C9BCC
                dc.l    Offset_0x0CA1F8
                dc.l    Offset_0x0CA8B4
                dc.l    Offset_0x0CAEBC
                dc.l    Offset_0x0CB3FA
                dc.l    Offset_0x0CB97E
                dc.l    Offset_0x0CBEF8
                dc.l    Offset_0x0CC418
                dc.l    Offset_0x0CC88C
                dc.l    Offset_0x0CCCF6
                dc.l    Offset_0x0CD1BA
                dc.l    Offset_0x0CD63A
                dc.l    Offset_0x0CDA84
                dc.l    Offset_0x0CDEC6
                dc.l    Offset_0x0CE544
                dc.l    Offset_0x0CEAE0
                dc.l    Offset_0x0CF03A
                dc.l    Offset_0x0CF636
                dc.l    Offset_0x0CFAE6
                dc.l    Offset_0x0CFFE8
                dc.l    Offset_0x0D0400
                dc.l    Offset_0x0D084E
                dc.l    Offset_0x0D0CCC
                dc.l    Offset_0x0D115C
                dc.l    Offset_0x0D1626
                dc.l    Offset_0x0D1BB2
                dc.l    Offset_0x0D229A
                dc.l    Offset_0x0D29E0
                dc.l    Offset_0x0D3036
                dc.l    Offset_0x0D3592
                dc.l    Offset_0x0D3B3C
                dc.l    Offset_0x0D41D0
                dc.l    Offset_0x0D47E4
                dc.l    Offset_0x0D4C68
                dc.l    Offset_0x0D50D6
                dc.l    Offset_0x0D554C
                dc.l    Offset_0x0D59E4
                dc.l    Offset_0x0D5E8A
                dc.l    Offset_0x0D6232
                dc.l    Offset_0x0D6626
                dc.l    Offset_0x0D6A5E
                dc.l    Offset_0x0D6EF0
                dc.l    Offset_0x0D73B2
                dc.l    Offset_0x0D77BA
                dc.l    Offset_0x0D7C50
                dc.l    Offset_0x0D8108
                dc.l    Offset_0x0D875A
                dc.l    Offset_0x0D8CC0
                dc.l    Offset_0x0D91E8
                dc.l    Offset_0x0D979C
                dc.l    Offset_0x0D9D8E
                dc.l    Offset_0x0DA222     
;-------------------------------------------------------------------------------
Offset_0x006E3A:
                dc.b    $80, $01, $80, $07, $80, $2C, $80, $0B, $80, $24, $88, $24, $80, $39, $88, $2B
                dc.b    $80, $5D, $88, $5D, $80, $2B, $80, $4A, $80, $49, $80, $37, $88, $49, $80, $45
                dc.b    $88, $45, $88, $3A, $80, $48, $88, $50, $80, $36, $88, $37, $80, $3A, $80, $50
                dc.b    $88, $42, $80, $42, $88, $15, $80, $1D, $80, $4B, $88, $17, $88, $48, $88, $36
                dc.b    $80, $38, $88, $4B, $80, $15, $80, $21, $80, $17, $80, $33, $80, $1A, $80, $2A
                dc.b    $80, $5E, $80, $28, $80, $30, $88, $21, $88, $38, $88, $1A, $80, $25, $88, $5E
                dc.b    $88, $25, $88, $33, $80, $03, $88, $14, $80, $14, $80, $04, $80, $4E, $88, $03
                dc.b    $80, $0C, $88, $2A, $80, $02, $80, $51, $80, $40, $80, $3D, $80, $19, $80, $52
                dc.b    $80, $09, $80, $5A, $88, $30, $88, $4E, $88, $52, $88, $51, $88, $09, $88, $40
                dc.b    $80, $2F, $88, $5A, $88, $18, $80, $34, $88, $19, $88, $2F, $88, $3D, $80, $3E
                dc.b    $80, $18, $88, $0C, $80, $12, $88, $04, $80, $26, $88, $34, $88, $05, $80, $3B
                dc.b    $88, $3E, $88, $3B, $80, $00, $88, $02, $80, $05, $80, $0D, $80, $55, $80, $AF
                dc.b    $80, $1C, $80, $1B, $88, $0D, $80, $16, $88, $12, $80, $1F, $88, $32, $80, $13
                dc.b    $80, $92, $88, $26, $80, $10, $80, $4D, $80, $47, $88, $92, $88, $00, $80, $62
                dc.b    $80, $66, $80, $90, $80, $08, $88, $7C, $88, $67, $88, $F7, $80, $0E, $80, $60
                dc.b    $80, $32, $80, $94, $88, $1C, $89, $05, $88, $B0, $80, $59, $80, $0F, $80, $67
                dc.b    $80, $68, $88, $94, $80, $7C, $80, $B0, $80, $B1, $80, $06, $88, $41, $80, $87
                dc.b    $80, $93, $80, $CC, $88, $1F, $88, $68, $80, $41, $80, $8F, $88, $90, $80, $C2
                dc.b    $88, $13, $88, $C2, $80, $5C, $80, $64, $80, $D8, $88, $1B, $88, $CC, $88, $11
                dc.b    $88, $55, $88, $E2, $88, $F3, $80, $44, $88, $D8, $80, $85, $80, $A1, $80, $C1
                dc.b    $81, $19, $88, $89, $88, $0A, $88, $22, $80, $3F, $80, $5B, $80, $7F, $88, $86
                dc.b    $88, $08, $80, $80, $88, $66, $88, $E0, $88, $C1, $80, $20, $80, $22, $80, $54
                dc.b    $80, $D2, $88, $59, $88, $B1, $88, $60, $89, $19, $88, $A4, $88, $8F, $80, $0A
                dc.b    $80, $61, $80, $75, $80, $95, $80, $B6, $80, $E0, $88, $10, $88, $98, $88, $5B
                dc.b    $88, $D2, $88, $16, $80, $53, $80, $91, $80, $96, $80, $A4, $80, $DD, $80, $E6
                dc.b    $88, $7A, $88, $4D, $88, $E6, $80, $11, $80, $57, $80, $7A, $80, $86, $80, $9E
                dc.b    $80, $DA, $80, $58, $80, $DC, $80, $E3, $88, $63, $80, $3C, $80, $56, $80, $69
                dc.b    $80, $7E, $80, $AE, $80, $B5, $80, $B8, $80, $CD, $80, $FB, $80, $FF, $88, $5C
                dc.b    $88, $CD, $88, $74, $88, $EA, $88, $FF, $88, $B5, $80, $43, $80, $6C, $80, $74
                dc.b    $80, $77, $80, $89, $80, $97, $80, $9F, $80, $A0, $81, $13, $81, $1B, $88, $78
                dc.b    $88, $0F, $88, $E1, $88, $FB, $89, $28, $80, $63, $80, $84, $80, $8D, $80, $CB
                dc.b    $80, $D7, $80, $E9, $81, $28, $81, $38, $88, $AE, $88, $EC, $80, $31, $80, $4C
                dc.b    $80, $E2, $80, $EA, $88, $64, $80, $29, $80, $2D, $80, $6D, $80, $78, $80, $88
                dc.b    $80, $B4, $80, $BE, $80, $CF, $80, $E1, $80, $E4, $88, $54, $88, $D6, $88, $D7
                dc.b    $88, $61, $89, $2B, $88, $47, $80, $35, $80, $6A, $80, $72, $80, $73, $80, $98
                dc.b    $80, $D5, $80, $D6, $81, $16, $81, $1E, $81, $26, $81, $27, $81, $2F, $81, $5D
                dc.b    $88, $69, $88, $88, $88, $75, $88, $97, $88, $B4, $88, $D1, $88, $D4, $88, $D5
                dc.b    $88, $CB, $88, $E4, $88, $91, $88, $62, $88, $06, $88, $B8, $80, $65, $80, $6E
                dc.b    $80, $71, $80, $7D, $80, $D1, $80, $E7, $80, $F9, $81, $08, $81, $2E, $81, $4B
                dc.b    $88, $81, $88, $85, $88, $77, $88, $7E, $88, $95, $88, $DF, $88, $87, $88, $6C
                dc.b    $88, $F5, $89, $08, $88, $79, $88, $6D, $89, $2A, $88, $AA, $80, $1E, $80, $27
                dc.b    $80, $46, $80, $5F, $80, $70, $80, $79, $80, $9A, $80, $AA, $80, $C3, $80, $D3
                dc.b    $80, $D4, $80, $DE, $80, $DF, $80, $F8, $81, $00, $81, $01, $81, $2B, $81, $33
                dc.b    $81, $36, $81, $43, $81, $51, $88, $2E, $88, $9E, $88, $99, $88, $D3, $88, $DD
                dc.b    $88, $DE, $88, $E9, $88, $EF, $88, $F0, $88, $F8, $89, $27, $88, $BE, $88, $96
                dc.b    $80, $4F, $80, $6F, $80, $81, $80, $8B, $80, $8E, $80, $9C, $80, $A3, $80, $B3
                dc.b    $80, $C0, $80, $CE, $80, $F0, $80, $F1, $80, $F5, $80, $F7, $81, $02, $81, $04
                dc.b    $81, $05, $81, $09, $81, $0C, $81, $14, $81, $18, $81, $20, $81, $24, $81, $25
                dc.b    $81, $2A, $81, $30, $81, $32, $81, $37, $81, $59, $81, $65, $88, $3F, $88, $6B
                dc.b    $88, $80, $88, $53, $88, $C6, $88, $CF, $88, $D9, $88, $DC, $88, $56, $88, $B6
                dc.b    $88, $F9, $89, $02, $89, $04, $89, $15, $88, $6A, $89, $13, $88, $72, $88, $35
                dc.b    $89, $38, $89, $5D, $89, $43, $80, $23, $80, $76, $80, $7B, $80, $8A, $80, $9D
                dc.b    $80, $A6, $80, $A8, $80, $AC, $80, $B2, $80, $B7, $80, $BB, $80, $BC, $80, $BD
                dc.b    $80, $C6, $80, $E5, $80, $E8, $80, $EE, $80, $F4, $81, $0A, $81, $0D, $81, $11
                dc.b    $81, $15, $81, $1A, $81, $1F, $81, $22, $81, $23, $81, $39, $81, $3A, $81, $3C
                dc.b    $81, $42, $81, $44, $81, $47, $81, $48, $81, $5E, $81, $5F, $81, $63, $81, $68
                dc.b    $81, $6A, $81, $6C, $81, $70, $88, $E5, $88, $CE, $88, $EE, $88, $F1, $88, $84
                dc.b    $88, $FD, $89, $00, $88, $B9, $89, $17, $88, $71, $89, $09, $89, $0D, $88, $65
                dc.b    $89, $25, $89, $22, $88, $31, $88, $3C, $89, $0F, $88, $C5, $89, $33, $89, $37
                dc.b    $89, $1F, $80, $2E, $80, $6B, $80, $82, $80, $83, $80, $8C, $80, $99, $80, $9B
                dc.b    $80, $A2, $80, $A5, $80, $A7, $80, $A9, $80, $AB, $80, $AD, $80, $B9, $80, $BA
                dc.b    $80, $BF, $80, $C4, $80, $C5, $80, $C7, $80, $C8, $80, $C9, $80, $CA, $80, $D0
                dc.b    $80, $D9, $80, $DB, $80, $EB, $80, $EC, $80, $ED, $80, $EF, $80, $F2, $80, $F3
                dc.b    $80, $F6, $80, $FA, $80, $FC, $80, $FD, $80, $FE, $81, $03, $81, $06, $81, $07
                dc.b    $81, $0B, $81, $0E, $81, $0F, $81, $10, $81, $12, $81, $17, $81, $1C, $81, $1D
                dc.b    $81, $21, $81, $29, $81, $2C, $81, $2D, $81, $31, $81, $34, $81, $35, $81, $3B
                dc.b    $81, $3D, $81, $3E, $81, $3F, $81, $40, $81, $41, $81, $45, $81, $46, $81, $49
                dc.b    $81, $4A, $81, $4C, $81, $4D, $81, $4E, $81, $4F, $81, $50, $81, $52, $81, $53
                dc.b    $81, $54, $81, $55, $81, $56, $81, $57, $81, $58, $81, $5A, $81, $5B, $81, $5C
                dc.b    $81, $60, $81, $61, $81, $62, $81, $64, $81, $66, $81, $67, $81, $69, $81, $6B
                dc.b    $81, $6D, $81, $6E, $81, $6F, $81, $71, $81, $72, $81, $73, $88, $6E, $88, $7D
                dc.b    $88, $C3, $88, $DB, $88, $E7, $88, $E8, $88, $EB, $88, $ED, $88, $F2, $88, $F6
                dc.b    $88, $FA, $88, $FC, $88, $FE, $88, $2D, $89, $03, $89, $06, $89, $07, $89, $0B
                dc.b    $88, $73, $88, $9A, $89, $29, $89, $2C, $89, $2D, $89, $11, $89, $3C, $89, $20
                dc.b    $89, $46, $88, $A9, $88, $9C, $89, $16, $89, $4F, $89, $4C, $88, $6F, $89, $58
                dc.b    $89, $56, $89, $59, $89, $5A, $89, $61, $88, $7B, $89, $66, $89, $1C, $89, $18
                dc.b    $88, $A0, $88, $A3, $89, $67, $88, $A1 
;-------------------------------------------------------------------------------
Offset_0x007302:
                dc.w    $0007, $0001, $0001, $0001, $004A, $0001, $0039, $0003
                dc.w    $0001, $0005, $0028, $0007, $002C, $0001, $0001, $0002
                dc.w    $0028, $0005, $0039, $0001, $0028, $0009, $0001, $0004
                dc.w    $0028, $0006, $0028, $0003, $004A, $0002, $0001, $0003
                dc.w    $0028, $0004, $0039, $0002, $0039, $0004, $0001, $0006
                dc.w    $0007, $0002, $002C, $0002, $0028, $0001, $001D, $0001
                dc.w    $0028, $0008, $0028, $0002, $0007, $0003, $0001, $0007
                dc.w    $0028, $000B, $0039, $0005, $001D, $0003, $001D, $0004
                dc.w    $001D, $0002, $001D, $0005, $0028, $000D, $000B, $0001
                dc.w    $0028, $000A, $0039, $0006, $0039, $0007, $002C, $0003
                dc.w    $001D, $0009, $004A, $0003, $001D, $0007, $0028, $000F
                dc.w    $001D, $000B, $001D, $0011, $001D, $000D, $001D, $0008
                dc.w    $0028, $0011, $001D, $0006, $000B, $0002, $001D, $0015
                dc.w    $0028, $000C, $001D, $000A, $0028, $000E, $0001, $0008
                dc.w    $001D, $000F, $0028, $0010, $0007, $0006, $001D, $0013
                dc.w    $004A, $0004, $001D, $0017, $0007, $0004, $000B, $0003
                dc.w    $001D, $001B, $004A, $0006, $001D, $001D, $004A, $0005
                dc.w    $0001, $0009, $0007, $0005, $001D, $001E, $001D, $0019
                dc.w    $0001, $0011, $001D, $000C, $001D, $007F, $002C, $0004
                dc.w    $001D, $000E, $001D, $001C, $004A, $000A, $001D, $001A
                dc.w    $004A, $0007, $001D, $0018, $000B, $0004, $001D, $0012
                dc.w    $001D, $0010, $0001, $000F, $000B, $0005, $0001, $000D
                dc.w    $0001, $0013, $004A, $0009, $004A, $000B, $004A, $000C
                dc.w    $002C, $0005, $001D, $0014, $000B, $0007, $001D, $0016
                dc.w    $0001, $000C, $0001, $000E, $004A, $0008, $001D, $005F
                dc.w    $0001, $000A, $000B, $0006, $000B, $0008, $000B, $000A
                dc.w    $0039, $0008, $000B, $0009, $002C, $0006, $0001, $0010
                dc.w    $000B, $000C, $0001, $000B, $0001, $0012, $0007, $0007
                dc.w    $001D, $001F, $0028, $0012, $000B, $000B, $002C, $0007
                dc.w    $002C, $000B, $001D, $0023, $0001, $0015, $002C, $0008
                dc.w    $001D, $002E, $001D, $003F, $0001, $0014, $000B, $000D
                dc.w    $002C, $0009, $002C, $000A, $001D, $0025, $001D, $0055
                dc.w    $001D, $0071, $001D, $007C, $004A, $000D, $002C, $000C
                dc.w    $002C, $000F, $002C, $0010
;-------------------------------------------------------------------------------
Offset_0x00751A:
                dc.w    Offset_0x00758A-Offset_0x00751A
                dc.w    Offset_0x0075F8-Offset_0x00751A
                dc.w    Offset_0x0076C6-Offset_0x00751A
                dc.w    Offset_0x007770-Offset_0x00751A
                dc.w    Offset_0x0077F6-Offset_0x00751A
                dc.w    Offset_0x007852-Offset_0x00751A
                dc.w    Offset_0x007896-Offset_0x00751A
                dc.w    Offset_0x0078D4-Offset_0x00751A
                dc.w    Offset_0x007912-Offset_0x00751A
                dc.w    Offset_0x00795C-Offset_0x00751A
                dc.w    Offset_0x0079B2-Offset_0x00751A
                dc.w    Offset_0x0079FC-Offset_0x00751A
                dc.w    Offset_0x007A40-Offset_0x00751A
                dc.w    Offset_0x007A40-Offset_0x00751A
                dc.w    Offset_0x007A84-Offset_0x00751A
                dc.w    Offset_0x007AE6-Offset_0x00751A
                dc.w    Offset_0x007B5A-Offset_0x00751A
                dc.w    Offset_0x008A4E-Offset_0x00751A
                dc.w    Offset_0x008A4E-Offset_0x00751A
                dc.w    Offset_0x008A4E-Offset_0x00751A
                dc.w    Offset_0x008A4E-Offset_0x00751A
                dc.w    Offset_0x007BC8-Offset_0x00751A
                dc.w    Offset_0x007C36-Offset_0x00751A
                dc.w    Offset_0x007CAA-Offset_0x00751A
                dc.w    Offset_0x007D1E-Offset_0x00751A
                dc.w    Offset_0x007D86-Offset_0x00751A
                dc.w    Offset_0x007DD6-Offset_0x00751A
                dc.w    Offset_0x007E20-Offset_0x00751A
                dc.w    Offset_0x007E70-Offset_0x00751A
                dc.w    Offset_0x007EB4-Offset_0x00751A
                dc.w    Offset_0x007F88-Offset_0x00751A
                dc.w    Offset_0x00805C-Offset_0x00751A
                dc.w    Offset_0x0080DC-Offset_0x00751A
                dc.w    Offset_0x008126-Offset_0x00751A
                dc.w    Offset_0x00816A-Offset_0x00751A
                dc.w    Offset_0x0081B4-Offset_0x00751A
                dc.w    Offset_0x00820A-Offset_0x00751A
                dc.w    Offset_0x008266-Offset_0x00751A
                dc.w    Offset_0x0082C2-Offset_0x00751A
                dc.w    Offset_0x0082C2-Offset_0x00751A
                dc.w    Offset_0x0082C2-Offset_0x00751A
                dc.w    Offset_0x0082C2-Offset_0x00751A
                dc.w    Offset_0x0082C2-Offset_0x00751A
                dc.w    Offset_0x0082C2-Offset_0x00751A
                dc.w    Offset_0x0082C2-Offset_0x00751A
                dc.w    Offset_0x008330-Offset_0x00751A
                dc.w    Offset_0x0083AA-Offset_0x00751A
                dc.w    Offset_0x00848A-Offset_0x00751A
                dc.w    Offset_0x008558-Offset_0x00751A
                dc.w    Offset_0x00860E-Offset_0x00751A
                dc.w    Offset_0x0086B8-Offset_0x00751A
                dc.w    Offset_0x00877A-Offset_0x00751A
                dc.w    Offset_0x008830-Offset_0x00751A
                dc.w    Offset_0x0088CE-Offset_0x00751A
                dc.w    Offset_0x00895A-Offset_0x00751A
                dc.w    Offset_0x0089DA-Offset_0x00751A
Offset_0x00758A:
                dc.w    $0012
                dc.w    $8619, $94BA, $0000, $8C28, $7B9A, $0000
                dc.w    $9132, $6A85, $0000, $983A, $5D75, $0000
                dc.w    $9D40, $5368, $0000, $A445, $4B5E, $0000
                dc.w    $A949, $4455, $0040, $AF4C, $3E4E, $0040
                dc.w    $B54E, $3B4A, $0040, $BC51, $3543, $0040
                dc.w    $C152, $323F, $0040, $C755, $303D, $0040
                dc.w    $CD56, $2C38, $0043, $D357, $2832, $0047
                dc.w    $D857, $252F, $004A, $E05A, $242E, $004E
                dc.w    $E55A, $222B, $004E, $EA5A, $222B, $0055
Offset_0x0075F8:
                dc.w    $0022
                dc.w    $8619, $95BB, $0000, $8C28, $7C9C, $0000
                dc.w    $9132, $6A85, $0000, $983A, $5D75, $0000
                dc.w    $9D40, $5368, $0000, $A445, $4A5D, $0000
                dc.w    $A949, $4456, $0031, $B04C, $3E4E, $0031
                dc.w    $B54E, $3A49, $0031, $BB51, $3543, $0038
                dc.w    $C153, $323F, $003C, $C755, $303C, $0040
                dc.w    $CC55, $2D39, $0040, $D155, $2A35, $0040
                dc.w    $D555, $2833, $0040, $D953, $2731, $0040
                dc.w    $DD52, $242E, $0040, $E050, $242D, $0043
                dc.w    $E44D, $232C, $0043, $E74A, $212A, $0047
                dc.w    $E846, $2028, $0047, $EC42, $2028, $0047
                dc.w    $EE3E, $1F27, $004A, $F03A, $1D25, $004A
                dc.w    $F235, $1C24, $004E, $F330, $1C23, $004E
                dc.w    $F42B, $1B22, $0051, $F625, $1B22, $0055
                dc.w    $F820, $1A21, $0055, $F91B, $1920, $0051
                dc.w    $FA15, $181F, $004E, $FC10, $181F, $0040
                dc.w    $FC09, $181F, $0000, $FD02, $181E, $0000
Offset_0x0076C6:
                dc.w    $001C
                dc.w    $8619, $94BA, $0000, $8C28, $7C9B, $0000
                dc.w    $9232, $6C87, $0000, $983A, $5C74, $0000
                dc.w    $9E40, $5469, $0000, $A445, $4B5E, $0000
                dc.w    $A949, $4456, $0000, $B04C, $4050, $0000
                dc.w    $B44E, $3B4A, $0000, $B84F, $3644, $0000
                dc.w    $BC4E, $3340, $0000, $C04D, $303C, $0000
                dc.w    $C34B, $2C38, $0000, $C649, $2A35, $0000
                dc.w    $C846, $2832, $0000, $CA42, $2630, $0000
                dc.w    $CC3F, $2833, $0000, $CE3A, $232C, $0000
                dc.w    $D037, $212A, $0000, $D131, $2028, $0000
                dc.w    $D32D, $1E26, $0000, $D428, $1C24, $0000
                dc.w    $D522, $1C23, $0000, $D61C, $1C23, $0000
                dc.w    $D817, $1C23, $0000, $D811, $1B22, $0000
                dc.w    $D90B, $1B22, $0000, $DA05, $1A21, $0000
Offset_0x007770:
                dc.w    $0016
                dc.w    $8618, $94B9, $0000, $8C28, $7B9A, $0000
                dc.w    $9132, $6A85, $0000, $983A, $5D75, $0000
                dc.w    $9C3E, $5368, $0000, $A041, $4B5E, $0000
                dc.w    $A442, $4455, $0000, $A742, $3E4E, $0000
                dc.w    $A941, $3948, $0000, $AB3E, $3543, $0000
                dc.w    $AC3B, $323F, $0000, $AE38, $2F3B, $0000
                dc.w    $B034, $2D39, $0000, $B02F, $2B36, $0000
                dc.w    $B22B, $2934, $0000, $B326, $252F, $0000
                dc.w    $B421, $242E, $0000, $B41B, $242D, $0000
                dc.w    $B515, $232C, $0000, $B50F, $222B, $0000
                dc.w    $B609, $2029, $0000, $B703, $1F27, $0000
Offset_0x0077F6:
                dc.w    $000F
                dc.w    $8415, $91B6, $0000, $8821, $7D9D, $0000
                dc.w    $8A27, $6B86, $0000, $8C2A, $5E76, $0000
                dc.w    $8E2A, $556B, $0000, $8F29, $4B5E, $0000
                dc.w    $9028, $4658, $0000, $9024, $4051, $0000
                dc.w    $9021, $3C4B, $0000, $901C, $3846, $0000
                dc.w    $9118, $3442, $0000, $9112, $313E, $0000
                dc.w    $920D, $2F3B, $0000, $9208, $2C38, $0000
                dc.w    $9200, $2A35, $0000
Offset_0x007852:
                dc.w    $000B
                dc.w    $800C, $9BC2, $0000, $8014, $81A2, $0000
                dc.w    $8018, $708D, $0000, $8019, $637C, $0000
                dc.w    $8018, $586F, $0000, $8016, $5064, $0000
                dc.w    $8013, $485B, $0000, $800F, $4354, $0000
                dc.w    $800A, $3E4E, $0000, $8006, $3A49, $0000
                dc.w    $8000, $3644, $0000
Offset_0x007896:
                dc.w    $000A
                dc.w    $8007, $9FC7, $0000, $8010, $84A5, $0000
                dc.w    $8015, $7390, $0000, $8016, $647E, $0000
                dc.w    $8016, $5A71, $0000, $8014, $5166, $0000
                dc.w    $8011, $4A5D, $0000, $800D, $4455, $0000
                dc.w    $8009, $3E4E, $0000, $8004, $3A49, $0000
Offset_0x0078D4:
                dc.w    $000A
                dc.w    $8000, $A4CD, $0000, $800B, $86A8, $0000
                dc.w    $8010, $7593, $0000, $8012, $6781, $0000
                dc.w    $8012, $5C73, $0000, $8011, $5267, $0000
                dc.w    $800E, $4B5E, $0000, $800B, $4456, $0000
                dc.w    $8007, $4050, $0000, $8002, $3B4A, $0000
Offset_0x007912:
                dc.w    $000C
                dc.w    $8005, $89AC, $0000, $800B, $7897, $0000
                dc.w    $800E, $6883, $0000, $800E, $5C74, $0000
                dc.w    $800D, $5469, $0000, $800A, $4C5F, $0000
                dc.w    $8007, $4557, $0000, $8004, $3F4F, $0000
                dc.w    $8002, $3A49, $0000, $8002, $3644, $0000
                dc.w    $8003, $323F, $0000, $8005, $2F3B, $0000
Offset_0x00795C:
                dc.w    $000E
                dc.w    $8003, $7B9A, $0000, $8007, $6A85, $0000
                dc.w    $800B, $5C74, $0000, $800F, $5267, $0000
                dc.w    $8014, $495C, $0000, $8019, $4253, $0000
                dc.w    $801E, $3C4C, $0000, $8024, $3745, $1C63
                dc.w    $802B, $3340, $1867, $8031, $303C, $156A
                dc.w    $8037, $2C38, $116E, $803E, $2A35, $0E71
                dc.w    $8045, $2832, $0A75, $804C, $252F, $0778
Offset_0x0079B2:
                dc.w    $000C
                dc.w    $8001, $8CAF, $0000, $8015, $7593, $0000
                dc.w    $8026, $647D, $0000, $8033, $586E, $0000
                dc.w    $8040, $4E62, $2A55, $804B, $4658, $235C
                dc.w    $8055, $3F4F, $2060, $8060, $3A49, $1C63
                dc.w    $8069, $3644, $1867, $8073, $323F, $116E
                dc.w    $807D, $2F3B, $0E71, $8084, $2C37, $0778
Offset_0x0079FC:
                dc.w    $000B
                dc.w    $8014, $88AA, $0000, $802C, $708D, $0000
                dc.w    $8040, $6079, $2A55, $804F, $546A, $2758
                dc.w    $805D, $4C5F, $235C, $806B, $4456, $AC63
                dc.w    $8078, $3F4F, $156A, $8082, $3A49, $116E
                dc.w    $808C, $3543, $0E71, $8098, $323F, $0A75
                dc.w    $80A2, $2F3B, $0778
Offset_0x007A40:
                dc.w    $000B
                dc.w    $8000, $A2CB, $0000, $8021, $80A0, $0000
                dc.w    $8036, $6D89, $0000, $8049, $5F77, $0000
                dc.w    $8059, $5469, $2758, $8067, $4B5E, $235C
                dc.w    $8074, $4354, $2060, $8080, $3E4E, $1C63
                dc.w    $808A, $3847, $156A, $8096, $3543, $0E71
                dc.w    $80A0, $323F, $0778
Offset_0x007A84:
                dc.w    $0010
                dc.w    $8010, $9AC1, $0000, $802A, $7D9D, $0000
                dc.w    $803F, $6984, $0000, $8051, $5C73, $0000
                dc.w    $805F, $5166, $2060, $806C, $495C, $1C55
                dc.w    $8078, $4253, $155C, $8084, $3C4C, $1163
                dc.w    $808E, $3846, $006A, $8296, $3441, $0071
                dc.w    $849D, $303D, $0071, $86A3, $2D39, $0071
                dc.w    $88A9, $2A35, $0071, $8CAE, $2731, $0075
                dc.w    $90B2, $2630, $0078, $93B7, $232C, $0078
Offset_0x007AE6:
                dc.w    $0013
                dc.w    $8015, $96BC, $0000, $802E, $7998, $0000
                dc.w    $8042, $6882, $0000, $8053, $5A71, $0000
                dc.w    $8060, $5064, $0000, $836B, $485A, $0000
                dc.w    $8473, $4051, $0000, $887A, $3B4A, $0000
                dc.w    $8B7F, $3745, $0000, $9085, $3340, $0000
                dc.w    $9389, $2F3B, $0040, $988C, $2C37, $0047
                dc.w    $9C90, $2934, $004A, $A093, $2731, $004E
                dc.w    $A596, $242E, $0051, $AA98, $232C, $0055
                dc.w    $B09A, $212A, $0058, $B49C, $2028, $005C
                dc.w    $BA9E, $1E26, $0060
Offset_0x007B5A:
                dc.w    $0012
                dc.w    $8124, $91B6, $0000, $8436, $7896, $0000
                dc.w    $8843, $6882, $0000, $8C4E, $5A71, $0000
                dc.w    $9057, $5065, $0000, $955D, $485A, $0000
                dc.w    $9A62, $4152, $0000, $9F67, $3C4B, $0000
                dc.w    $A46B, $3846, $0000, $AA6E, $3441, $0031
                dc.w    $B071, $303C, $0035, $B573, $2D39, $0038
                dc.w    $BB75, $2B36, $003C, $C077, $2833, $0040
                dc.w    $C579, $252F, $0043, $CC7A, $232C, $0047
                dc.w    $D17B, $212A, $004E, $D87C, $2028, $0055
Offset_0x007BC8:
                dc.w    $0012
                dc.w    $8619, $92B7, $0000, $8C28, $7998, $0000
                dc.w    $9132, $6781, $0000, $9839, $5A71, $0000
                dc.w    $9C40, $5064, $0000, $A444, $485B, $0000
                dc.w    $A948, $4253, $0000, $AF4C, $3C4C, $0000
                dc.w    $B54E, $3847, $0000, $BB51, $3441, $002A
                dc.w    $C053, $303D, $0031, $C755, $2D39, $0035
                dc.w    $CD56, $2B36, $0038, $D457, $2833, $0040
                dc.w    $D959, $242E, $0043, $E05A, $242E, $0047
                dc.w    $E65B, $232C, $004A, $EC5E, $212A, $004E
Offset_0x007C36:
                dc.w    $0013
                dc.w    $8619, $7C9C, $0000, $8C28, $7896, $0000
                dc.w    $9232, $6781, $0000, $983A, $5970, $0000
                dc.w    $9E40, $5065, $0000, $A445, $485B, $0000
                dc.w    $A948, $4152, $0000, $AF4C, $3C4B, $0000
                dc.w    $B54E, $3847, $0000, $BC51, $3441, $0031
                dc.w    $C153, $303D, $0035, $C855, $2E3A, $0038
                dc.w    $CD57, $2934, $003C, $D35A, $2833, $0040
                dc.w    $D85D, $2731, $0047, $DC60, $2630, $004E
                dc.w    $E064, $242E, $0055, $E369, $212A, $0058
                dc.w    $E66E, $2028, $005C
Offset_0x007CAA:
                dc.w    $0013
                dc.w    $8619, $93B8, $0000, $8C28, $7A99, $0000
                dc.w    $9132, $6984, $0000, $983A, $5C73, $0000
                dc.w    $9E40, $5267, $0000, $A444, $4A5D, $0000
                dc.w    $A949, $4354, $0000, $B04C, $3E4E, $0000
                dc.w    $B54F, $3948, $0000, $BA53, $3543, $0000
                dc.w    $BE58, $303D, $0000, $C25C, $303C, $0040
                dc.w    $C562, $2A35, $0047, $C868, $2833, $004E
                dc.w    $CB6E, $2630, $005C, $CC73, $242E, $005C
                dc.w    $CF79, $232C, $0063, $D180, $212A, $006A
                dc.w    $D387, $2029, $0071
Offset_0x007D1E:
                dc.w    $0011
                dc.w    $8619, $92B7, $0000, $8C28, $7A99, $0000
                dc.w    $9132, $6984, $0000, $983A, $5C73, $0000
                dc.w    $9D41, $5267, $0000, $A248, $485B, $0000
                dc.w    $A550, $4051, $0000, $A856, $3C4B, $0000
                dc.w    $AA5E, $3644, $0000, $AC66, $323F, $0055
                dc.w    $AE6D, $303C, $0060, $B074, $2C38, $005C
                dc.w    $B17C, $2A35, $0060, $B283, $2832, $0063
                dc.w    $B38A, $2630, $006A, $B492, $242E, $0071
                dc.w    $B599, $222B, $0078
Offset_0x007D86:
                dc.w    $000D
                dc.w    $851C, $92B7, $0000, $882E, $7998, $0000
                dc.w    $8B3E, $6781, $0000, $8C4A, $5B72, $0000
                dc.w    $8E57, $4F63, $0000, $8F61, $4658, $0000
                dc.w    $906C, $4050, $004E, $9075, $3B4A, $0055
                dc.w    $907F, $3644, $0063, $9188, $323F, $0067
                dc.w    $9291, $2F3B, $006E, $9299, $2C38, $0071
                dc.w    $92A2, $2934, $0078
Offset_0x007DD6:
                dc.w    $000C
                dc.w    $8019, $8DB1, $0000, $802E, $7593, $0000
                dc.w    $8040, $647E, $0000, $804E, $586E, $0000
                dc.w    $805B, $4E62, $0000, $8067, $4658, $233C
                dc.w    $8072, $4050, $1C63, $807D, $3A49, $1867
                dc.w    $8087, $3644, $156A, $8092, $323F, $0E71
                dc.w    $809B, $2F3B, $0A75, $80A3, $2C38, $0778
Offset_0x007E20:
                dc.w    $000D
                dc.w    $8000, $ACD8, $0000, $8020, $8BAE, $0000
                dc.w    $8037, $7491, $0000, $8048, $617A, $0000
                dc.w    $8057, $566C, $0000, $8065, $4C60, $0000
                dc.w    $8071, $4456, $233C, $807D, $3F4F, $1C63
                dc.w    $8087, $3A49, $1867, $8091, $3543, $156A
                dc.w    $809B, $313E, $0E71, $80A6, $2F3B, $0A75
                dc.w    $80AF, $2C37, $0778
Offset_0x007E70:
                dc.w    $000B
                dc.w    $8021, $7F9F, $0000, $8036, $6B86, $0000
                dc.w    $8047, $5C74, $0000, $8055, $5267, $0000
                dc.w    $8062, $495C, $233C, $806E, $4253, $1C63
                dc.w    $807A, $3C4C, $1867, $8084, $3846, $156A
                dc.w    $808E, $3441, $0E71, $8098, $303D, $0A75
                dc.w    $80A2, $2D39, $0778
Offset_0x007EB4:
                dc.w    $0023
                dc.w    $801A, $84A6, $0000, $8030, $6E8A, $0000
                dc.w    $8042, $5F77, $0000, $8051, $5469, $0000
                dc.w    $805E, $4B5E, $235C, $806B, $4455, $2060
                dc.w    $8077, $3E4E, $1C63, $8081, $3948, $156A
                dc.w    $8089, $3543, $116E, $8090, $323F, $0E71
                dc.w    $8094, $2F3B, $0E71, $8097, $2C38, $0E71
                dc.w    $8099, $2B36, $116E, $809B, $2833, $116E
                dc.w    $809B, $2630, $116E, $809B, $242E, $156A
                dc.w    $809A, $232C, $1C63, $8098, $222B, $2060
                dc.w    $8097, $2029, $2758, $8094, $1F27, $0000
                dc.w    $8092, $1E26, $0000, $808F, $1D25, $0000
                dc.w    $808C, $1C23, $0000, $8088, $1B22, $0000
                dc.w    $8084, $1A21, $0000, $8080, $1920, $0000
                dc.w    $807C, $181F, $0000, $8078, $181E, $0000
                dc.w    $8073, $171D, $0000, $806E, $171D, $0000
                dc.w    $8069, $161C, $0000, $8065, $151B, $0000
                dc.w    $805F, $141A, $0000, $805A, $1419, $0000
                dc.w    $8155, $1318, $0000
Offset_0x007F88:
                dc.w    $0023
                dc.w    $8017, $80A0, $0000, $802F, $6C87, $0000
                dc.w    $803F, $5D75, $0000, $804E, $5368, $0000
                dc.w    $8059, $4C5F, $0000, $8061, $4455, $0000
                dc.w    $8065, $3D4D, $0000, $806A, $3B4A, $0000
                dc.w    $806D, $3644, $0000, $806C, $3340, $0000
                dc.w    $806C, $303C, $0000, $806C, $2E3A, $0000
                dc.w    $806B, $2B36, $0000, $8068, $2832, $0000
                dc.w    $8064, $2630, $0000, $8061, $242E, $0000
                dc.w    $805E, $242D, $0000, $805A, $232C, $0000
                dc.w    $8056, $2029, $0000, $8053, $1D25, $0000
                dc.w    $804D, $1C24, $0000, $8048, $1B22, $0000
                dc.w    $8043, $1A21, $0000, $803F, $1A21, $0000
                dc.w    $8039, $1A21, $0000, $8034, $1920, $0000
                dc.w    $802E, $1920, $0000, $8028, $181F, $0000
                dc.w    $8022, $181E, $0000, $801C, $181E, $0000
                dc.w    $8317, $171D, $0000, $8411, $161C, $0000
                dc.w    $840D, $141A, $0000, $8609, $141A, $0000
                dc.w    $8805, $141A, $0000
Offset_0x00805C:
                dc.w    $0015
                dc.w    $8000, $9CC3, $0000, $8019, $80A0, $0000
                dc.w    $8027, $6E8A, $0000, $8031, $6079, $0000
                dc.w    $8036, $566C, $0000, $803B, $4E62, $0000
                dc.w    $803B, $4658, $0000, $803A, $4051, $0000
                dc.w    $803A, $3C4B, $0000, $8039, $3846, $0000
                dc.w    $8035, $3441, $0000, $8031, $303C, $0000
                dc.w    $802D, $2D39, $0000, $8029, $2B36, $0000
                dc.w    $8025, $2833, $0000, $801F, $2832, $0000
                dc.w    $801B, $242D, $0000, $8015, $232C, $0000
                dc.w    $8011, $242D, $0000, $800A, $2028, $0000
                dc.w    $8004, $212A, $0000
Offset_0x0080DC:
                dc.w    $000C
                dc.w    $8000, $93B8, $0000, $800C, $7A99, $0000
                dc.w    $8012, $6883, $0000, $8015, $5E76, $0000
                dc.w    $8016, $556B, $0000, $8015, $4D61, $0000
                dc.w    $8014, $4658, $0000, $8011, $4051, $0000
                dc.w    $800E, $3C4C, $0000, $800A, $3948, $0000
                dc.w    $8005, $3442, $0000, $8001, $313E, $0000
Offset_0x008126:
                dc.w    $000B
                dc.w    $800B, $ACD8, $0000, $8012, $7492, $0000
                dc.w    $8016, $657F, $0000, $8017, $5A71, $0000
                dc.w    $8016, $5166, $0000, $8014, $4A5D, $0000
                dc.w    $8011, $4455, $0000, $800E, $3F4F, $0000
                dc.w    $8009, $3B4A, $0000, $8005, $3846, $0000
                dc.w    $8001, $3340, $0000
Offset_0x00816A:
                dc.w    $000C
                dc.w    $8000, $A7D1, $0000, $800E, $8AAD, $0000
                dc.w    $8016, $7694, $0000, $8019, $6882, $0000
                dc.w    $8019, $5C73, $0000, $8018, $5267, $0000
                dc.w    $8016, $4B5E, $0000, $8013, $4354, $0000
                dc.w    $800F, $3E4E, $0000, $800B, $3948, $0000
                dc.w    $8007, $3644, $0000, $8001, $3340, $0000
Offset_0x0081B4:
                dc.w    $000E
                dc.w    $8003, $ADD9, $0000, $8011, $8DB1, $0000
                dc.w    $8016, $7896, $0000, $801A, $6882, $0000
                dc.w    $801B, $5C73, $0000, $801B, $5267, $0000
                dc.w    $8018, $4C5F, $0000, $8014, $4456, $0000
                dc.w    $8011, $3E4E, $0000, $800C, $3A49, $0000
                dc.w    $8008, $3644, $0000, $8005, $3340, $0000
                dc.w    $8003, $303C, $0000, $8001, $2C37, $0000
Offset_0x00820A:
                dc.w    $000F
                dc.w    $8004, $B0DD, $0000, $8011, $90B5, $0000
                dc.w    $8018, $7A99, $0000, $801A, $6984, $0000
                dc.w    $801C, $5D75, $0000, $801B, $5267, $0000
                dc.w    $841B, $4A5D, $0000, $861A, $4354, $0000
                dc.w    $8A1A, $3E4E, $0000, $8A1A, $3846, $0000
                dc.w    $901A, $3441, $0000, $951A, $313E, $0000
                dc.w    $9B1A, $2E3A, $0000, $9D1A, $2A35, $0000
                dc.w    $A21A, $2832, $0000
Offset_0x008266:
                dc.w    $000F
                dc.w    $8012, $94BA, $0000, $841E, $7896, $0000
                dc.w    $8825, $6882, $0000, $8C2B, $5970, $0000
                dc.w    $9131, $5064, $0000, $9533, $485A, $0000
                dc.w    $9A35, $4253, $0000, $A038, $3C4C, $0000
                dc.w    $A43B, $3644, $0000, $AA3C, $3441, $0000
                dc.w    $B03E, $303C, $002A, $B53F, $2F3B, $0031
                dc.w    $BB40, $2B36, $0031, $C042, $2833, $0038
                dc.w    $C743, $2731, $0040
Offset_0x0082C2:
                dc.w    $0012
                dc.w    $871A, $84E5, $0000, $8C28, $7A99, $0000
                dc.w    $9131, $6A85, $0000, $9839, $5C74, $0000
                dc.w    $9D40, $5267, $0000, $A445, $4A5D, $0000
                dc.w    $A949, $4354, $0000, $B04D, $3E4E, $0000
                dc.w    $B54F, $3A49, $0000, $BB51, $3543, $0000
                dc.w    $C153, $323F, $0000, $C755, $303C, $0000
                dc.w    $CD56, $2D39, $0000, $D457, $2833, $0000
                dc.w    $D959, $2630, $0000, $E05A, $242E, $0047
                dc.w    $E65B, $232C, $004E, $EC5C, $212A, $0055
Offset_0x008330:
                dc.w    $0014
                dc.w    $871A, $84E5, $0000, $8C28, $7A99, $0000
                dc.w    $9131, $6A85, $0000, $9839, $5C74, $0000
                dc.w    $9D40, $5267, $0000, $A445, $4A5D, $0000
                dc.w    $A949, $4354, $0000, $B04D, $3E4E, $0000
                dc.w    $B54F, $3A49, $0000, $BB51, $3543, $0000
                dc.w    $C153, $323F, $0000, $C755, $303C, $0000
                dc.w    $CD56, $2D39, $0000, $D457, $2833, $0000
                dc.w    $D959, $2630, $0000, $E05A, $242E, $0040
                dc.w    $E35B, $222B, $004E, $E75C, $212A, $0051
                dc.w    $EA5D, $1F27, $0058, $ED5E, $1E26, $005C
Offset_0x0083AA:
                dc.w    $0025
                dc.w    $871A, $84E5, $0000, $8C28, $7A99, $0000
                dc.w    $9131, $6A85, $0000, $9839, $5C74, $0000
                dc.w    $9D40, $5267, $0000, $A445, $4A5D, $0000
                dc.w    $A949, $4354, $0000, $B04D, $3E4E, $0000
                dc.w    $B64E, $3846, $0000, $BC51, $3441, $0000
                dc.w    $C053, $303D, $0000, $C455, $2D39, $0000
                dc.w    $C857, $2A35, $0000, $CB58, $2731, $0000
                dc.w    $CE5A, $242E, $0000, $D05B, $242D, $0035
                dc.w    $D25D, $2029, $0038, $D45E, $2028, $003C
                dc.w    $D55F, $1E26, $0040, $D860, $1C24, $0040
                dc.w    $D960, $1C23, $0040, $DA61, $1920, $0040
                dc.w    $DC62, $1920, $0040, $DC62, $181F, $0040
                dc.w    $DE62, $181E, $0043, $DF63, $171D, $0047
                dc.w    $E063, $161C, $0047, $E065, $151B, $004A
                dc.w    $E166, $141A, $004A, $E266, $141A, $004A
                dc.w    $E366, $1419, $004A, $E467, $1419, $004E
                dc.w    $E567, $1419, $0051, $E667, $1116, $0055
                dc.w    $E767, $1015, $0055, $E868, $1014, $0055
                dc.w    $E868, $1014, $0055
Offset_0x00848A:
                dc.w    $0022
                dc.w    $871A, $84E5, $0000, $8C28, $7A99, $0000
                dc.w    $9131, $6A85, $0000, $9839, $5C74, $0000
                dc.w    $9E3F, $4F63, $0000, $A344, $4759, $0000
                dc.w    $A64A, $3E4E, $0000, $AA4D, $3847, $0000
                dc.w    $AC50, $3442, $0000, $AF53, $303C, $0000
                dc.w    $B055, $2C37, $0000, $B257, $2934, $0000
                dc.w    $B359, $2630, $0000, $B45A, $242D, $0000
                dc.w    $B55B, $222B, $0000, $B65C, $2028, $0000
                dc.w    $B75E, $1F27, $0000, $B85E, $1D25, $0000
                dc.w    $B85F, $1C23, $0000, $B961, $1B22, $0000
                dc.w    $BA61, $1920, $0000, $BB61, $181F, $0000
                dc.w    $BC62, $181E, $0000, $BC63, $171D, $0000
                dc.w    $BC63, $161C, $0000, $BC64, $151B, $0000
                dc.w    $BD65, $141A, $0000, $BE66, $1217, $0000
                dc.w    $BF67, $1116, $0000, $C068, $1014, $0000
                dc.w    $C069, $0E12, $0000, $C16A, $0C0F, $0000
                dc.w    $C26B, $0A0D, $0000, $C36C, $080B, $0000
Offset_0x008558:
                dc.w    $001E
                dc.w    $8619, $8FB3, $0000, $8A2A, $7390, $0000
                dc.w    $8C36, $5E76, $0000, $8D3E, $5368, $0000
                dc.w    $8F44, $485A, $0000, $9049, $3F4F, $0000
                dc.w    $904D, $3948, $0000, $9150, $3442, $0000
                dc.w    $9153, $303C, $0000, $9255, $2C38, $0000
                dc.w    $9357, $2934, $0000, $9358, $2731, $0000
                dc.w    $935A, $242D, $0000, $945C, $222B, $0000
                dc.w    $945D, $2029, $0000, $945E, $1F27, $0000
                dc.w    $945F, $1C24, $0000, $9460, $1C23, $0000
                dc.w    $9461, $1B22, $0000, $9561, $181F, $0000
                dc.w    $9562, $181E, $0000, $9563, $171D, $0000
                dc.w    $9564, $161C, $0000, $9565, $141A, $0000
                dc.w    $9666, $1217, $0000, $9667, $0F13, $0000
                dc.w    $9668, $0C10, $0000, $9669, $0B0E, $0000
                dc.w    $976A, $090C, $0000, $976B, $080B, $0000
Offset_0x00860E:
                dc.w    $001C
                dc.w    $8015, $9AC1, $0000, $8028, $7998, $0000
                dc.w    $8035, $647E, $0000, $803E, $556B, $0000
                dc.w    $8045, $4A5D, $0000, $804A, $4152, $0000
                dc.w    $804E, $3B4A, $0000, $8052, $3543, $0000
                dc.w    $8054, $303D, $0000, $8056, $2D39, $0000
                dc.w    $8058, $2A35, $0000, $805A, $2731, $0000
                dc.w    $805B, $242E, $0000, $805D, $222B, $0000
                dc.w    $805E, $2029, $0000, $805F, $1E26, $0000
                dc.w    $8060, $1C24, $0000, $8061, $1C23, $0000
                dc.w    $8061, $1B22, $0000, $8062, $1920, $0000
                dc.w    $8063, $181E, $0000, $8063, $181E, $0000
                dc.w    $8064, $161C, $0000, $8064, $151B, $0000
                dc.w    $8065, $141A, $0000, $8065, $141A, $0000
                dc.w    $8066, $1318, $0000, $8066, $1318, $0000
Offset_0x0086B8:
                dc.w    $0020
                dc.w    $8015, $9AC1, $0000, $8028, $7998, $0000
                dc.w    $8035, $647E, $0000, $803E, $556B, $0000
                dc.w    $8045, $4A5D, $0000, $804A, $4152, $0000
                dc.w    $804E, $3B4A, $0000, $8052, $3543, $0000
                dc.w    $8054, $303D, $0000, $8056, $2D39, $0000
                dc.w    $8058, $2A35, $0000, $805A, $2731, $0000
                dc.w    $805B, $242E, $0000, $805D, $222B, $0000
                dc.w    $805E, $2029, $0000, $805F, $1E26, $0000
                dc.w    $8060, $1C24, $0000, $8061, $1C23, $0000
                dc.w    $8061, $1B22, $0000, $8062, $1920, $0000
                dc.w    $8063, $181E, $0000, $8063, $181F, $0000
                dc.w    $8165, $171D, $0000, $8264, $161C, $0040
                dc.w    $8364, $151B, $0040, $8464, $141A, $0040
                dc.w    $8665, $141A, $0040, $8865, $1318, $0040
                dc.w    $8A66, $1318, $0040, $8C66, $1217, $0047
                dc.w    $8F66, $1217, $004A, $9166, $1116, $004E
Offset_0x00877A:
                dc.w    $001E
                dc.w    $8015, $9AC1, $0000, $8028, $7998, $0000
                dc.w    $8035, $647E, $0000, $803E, $556B, $0000
                dc.w    $8045, $4A5D, $0000, $804A, $4152, $0000
                dc.w    $804E, $3B4A, $0000, $8052, $3543, $0000
                dc.w    $8054, $303D, $0000, $8056, $2D39, $0000
                dc.w    $8058, $2A35, $0000, $805A, $2731, $0000
                dc.w    $805B, $242E, $0000, $805D, $222B, $0000
                dc.w    $805E, $2029, $0000, $805F, $1E26, $0000
                dc.w    $8060, $1C24, $0000, $8060, $1C24, $0000
                dc.w    $8161, $1B22, $0000, $8261, $1A21, $0040
                dc.w    $8462, $1920, $0040, $8563, $181F, $0040
                dc.w    $8763, $181E, $0040, $8963, $171D, $0040
                dc.w    $8C64, $161C, $0040, $8E64, $151B, $0047
                dc.w    $9164, $141A, $004A, $9465, $1419, $004E
                dc.w    $9765, $1318, $004E, $9A65, $1217, $0055
Offset_0x008830:
                dc.w    $001A
                dc.w    $8015, $9AC1, $0000, $8028, $7998, $0000
                dc.w    $8035, $647E, $0000, $803E, $556B, $0000
                dc.w    $8045, $4A5D, $0000, $804A, $4152, $0000
                dc.w    $804E, $3B4A, $0000, $8052, $3543, $0000
                dc.w    $8054, $303D, $0000, $8056, $2D39, $0000
                dc.w    $8058, $2A35, $0000, $805A, $2731, $0000
                dc.w    $805B, $242E, $0000, $805C, $232C, $0000
                dc.w    $815D, $212A, $0000, $825D, $2028, $0040
                dc.w    $845E, $1F27, $0040, $865F, $1C24, $0040
                dc.w    $8860, $1C23, $0040, $8B61, $1A21, $0040
                dc.w    $8D61, $1920, $0040, $9062, $181F, $0040
                dc.w    $9462, $181E, $0047, $9763, $171D, $004A
                dc.w    $9A63, $151B, $004E, $9E64, $141A, $004E
Offset_0x0088CE:
                dc.w    $0017
                dc.w    $8015, $9AC1, $0000, $8028, $7998, $0000
                dc.w    $8035, $647E, $0000, $803E, $556B, $0000
                dc.w    $8045, $4A5D, $0000, $804A, $4152, $0000
                dc.w    $804E, $3B4A, $0000, $8052, $3543, $0000
                dc.w    $8054, $303D, $0000, $8056, $2D39, $0000
                dc.w    $8156, $2B36, $0000, $8358, $2833, $0000
                dc.w    $855A, $2630, $0040, $885B, $242D, $0040
                dc.w    $8A5C, $212A, $0040, $8D5D, $2029, $0040
                dc.w    $905E, $2028, $0040, $945E, $1E26, $0040
                dc.w    $9860, $1C24, $0043, $9B60, $1B22, $0047
                dc.w    $9F60, $1920, $0047, $A361, $181F, $004E
                dc.w    $A862, $181F, $0055
Offset_0x00895A:
                dc.w    $0015
                dc.w    $8015, $9AC1, $0000, $8028, $7998, $0000
                dc.w    $8035, $647E, $0000, $803E, $556B, $0000
                dc.w    $8045, $4A5D, $0000, $8049, $4253, $0000
                dc.w    $824D, $3C4C, $0000, $844F, $3846, $0000
                dc.w    $8752, $3441, $0000, $8A54, $303C, $0040
                dc.w    $8D56, $2C38, $0040, $9157, $2A35, $0040
                dc.w    $9459, $2731, $0040, $995A, $252F, $0040
                dc.w    $9D5B, $242D, $0040, $A15C, $222B, $0043
                dc.w    $A65D, $2028, $0047, $AB5E, $1E26, $004A
                dc.w    $B05F, $1C24, $004E, $B45F, $1C23, $0051
                dc.w    $BA5F, $1B22, $0055
Offset_0x0089DA:
                dc.w    $0013
                dc.w    $8019, $93B8, $0000, $8128, $7A99, $0000
                dc.w    $8433, $6984, $0000, $873A, $5C74, $0000
                dc.w    $8B40, $5267, $0000, $8F45, $4A5D, $0000
                dc.w    $9449, $4253, $0000, $984C, $3D4D, $0000
                dc.w    $9D4F, $3847, $0000, $A251, $3543, $0040
                dc.w    $A854, $323F, $0040, $AC55, $2F3B, $0040
                dc.w    $B257, $2C37, $0040, $B758, $2934, $0040
                dc.w    $BC5A, $2731, $0040, $C25A, $232C, $0047
                dc.w    $C85B, $222B, $004A, $CD5C, $2028, $0051
                dc.w    $D45D, $1F27, $0055
Offset_0x008A4E:
                dc.w    $0036
                dc.w    $8015, $9AC1, $0000, $8028, $7998, $0000
                dc.w    $8035, $647E, $0000, $803E, $556B, $0000
                dc.w    $8045, $4A5D, $0000, $804A, $4152, $0000
                dc.w    $804E, $3B4A, $0000, $8052, $3543, $0000
                dc.w    $8054, $303D, $0000, $8056, $2D39, $0000
                dc.w    $8058, $2A35, $0000, $805A, $2731, $0000
                dc.w    $805B, $242E, $0000, $805D, $222B, $0000
                dc.w    $805E, $2029, $0000, $805F, $1E26, $0000
                dc.w    $8060, $1C24, $0000, $8061, $1C23, $0000
                dc.w    $8061, $1B22, $0000, $8062, $1920, $0000
                dc.w    $8063, $181E, $0000, $8063, $181E, $0000
                dc.w    $8064, $161C, $0000, $8064, $151B, $0000
                dc.w    $8065, $141A, $0000, $8065, $141A, $0000
                dc.w    $8066, $1318, $0000, $8066, $1318, $0000
                dc.w    $8066, $1217, $0000, $8067, $1116, $0000
                dc.w    $8067, $1116, $0000, $8067, $1015, $0000
                dc.w    $8068, $1014, $0000, $8068, $1014, $0000
                dc.w    $8068, $0F13, $0000, $8068, $0F13, $0000
                dc.w    $8069, $0E12, $0000, $8069, $0E12, $0000
                dc.w    $8069, $0D11, $0000, $8069, $0D11, $0000
                dc.w    $8069, $0D11, $0000, $806A, $0C10, $0000
                dc.w    $806A, $0C10, $0000, $806A, $0C0F, $0000
                dc.w    $806A, $0C0F, $0000, $806A, $0C0F, $0000
                dc.w    $806A, $0C0F, $0000, $806B, $0B0E, $0000
                dc.w    $806B, $0B0E, $0000, $806B, $0B0E, $0000
                dc.w    $806B, $0B0E, $0000, $806B, $0A0D, $0000
                dc.w    $806B, $0A0D, $0000, $806B, $0A0D, $0000
;-------------------------------------------------------------------------------
; Offset_0x008B94:
                dc.b    $FF, $F9, $FF, $F9, $FF, $F9, $FF, $FA, $FF, $FA   
;-------------------------------------------------------------------------------
Offset_0x008B9E:
                move.b  ($FFFF9B0F).w, ($FFFF9B11).w                            
                moveq   #$00, D1                                                
                move.l  ($FFFF9B00).w, A0                                       
                cmpa.l  #Offset_0x0CDEC6, A0                                          
                blt.s   Offset_0x008BD0                                         
                cmpa.l  #Offset_0x0CE544, A0                                          
                bge.s   Offset_0x008BD0                                         
Offset_0x008BBA:
                st      ($FFFF9B0E).w                                           
                move.b  ($FFFF9B0D).w, D0                                       
                cmp.b   ($FFFF9B21).w, D0                                       
                blt     Offset_0x008C20                                         
                st      ($FFFF9B0F).w                                           
                rts                                                             
Offset_0x008BD0:
                cmpa.l  #Offset_0x0CCCF6, A0                                          
                blt.s   Offset_0x008BF0                                         
                cmpa.l  #Offset_0x0CD1BA, A0                                          
                bge.s   Offset_0x008BF0                                         
                lea     Offset_0x005F02+$0006(PC), A5          ; Offset_0x005F08                              
                move.b  ($FFFF9B0A).w, D1                                       
                move.b  $00(A5, D1), D1                                         
                bpl.s   Offset_0x008C0E                                         
                bra.s   Offset_0x008BBA                                         
Offset_0x008BF0:
                cmpa.l  #Offset_0x0D0CCC, A0                                          
                blt.s   Offset_0x008C20                                         
                cmpa.l  #Offset_0x0D115C, A0                                          
                bge.s   Offset_0x008C20                                         
                lea     Offset_0x005F02+$0006(PC), A5          ; Offset_0x005F08                          
                move.b  ($FFFF9B0A).w, D1                                       
                move.b  $00(A5, D1), D1                                         
                bmi.s   Offset_0x008BBA                                         
Offset_0x008C0E:
                sf      ($FFFF9B0E).w                                           
                move.b  ($FFFF9B0D).w, D0                                       
                cmp.b   ($FFFF9B21).w, D0                                       
                blt.s   Offset_0x008C20                                         
                sf      ($FFFF9B0F).w                                           
Offset_0x008C20:
                rts                                                             
;-------------------------------------------------------------------------------
Offset_0x008C22:
                lea     (Scroll_Buffer_Data).w, A1                   ; $FFFFE000
                lea     ($FFFF9700).w, A2                                       
                moveq   #$00, D0                                                
                moveq   #$00, D1                                                
                moveq   #$00, D2                                                
                moveq   #$00, D3                                                
                move.w  #$FF00, D1                                              
                move.w  #$FE00, D2                                              
                move.w  #$FD00, D3                                              
                swap.w  D1                                                      
                swap.w  D2                                                      
                swap.w  D3                                                      
                moveq   #$1F, D4                                                
Offset_0x008C46:
                move.l  D0, (A1)+                                               
                move.l  D0, (A1)+                                               
                move.l  D1, (A1)+                                               
                move.l  D1, (A1)+                                               
                move.l  D2, (A1)+                                               
                move.l  D2, (A1)+                                               
                move.l  D3, (A1)+                                               
                move.l  D3, (A1)+                                               
                move.l  D3, (A2)+                                               
                move.l  D3, (A2)+                                               
                move.l  D2, (A2)+                                               
                move.l  D2, (A2)+                                               
                move.l  D1, (A2)+                                               
                move.l  D1, (A2)+                                               
                move.l  D0, (A2)+                                               
                move.l  D0, (A2)+                                               
                dbra    D4, Offset_0x008C46                                     
                rts     
;-------------------------------------------------------------------------------
Offset_0x008C6C:
                lea     (Offset_0x0DA672), A0                                   
                move.l  #$40000000, (VDP_Control_Port)               ; $00C00004
                lea     (VDP_Data_Port), A1                          ; $00C00000
                move.w  (A0)+, D0                                               
                subq.w  #$01, D0                                                
Offset_0x008C86:
                move.l  (A0), (A1)                                              
                move.l  (A0), (A1)                                              
                move.l  (A0), (A1)                                              
                move.l  (A0), (A1)                                              
                move.l  (A0), (A1)                                              
                move.l  (A0), (A1)                                              
                move.l  (A0), (A1)                                              
                move.l  (A0)+, (A1)                                             
                dbra    D0, Offset_0x008C86                                     
                rts       
;-------------------------------------------------------------------------------
Offset_0x008C9C:
                move.l  #$FFFF0000, A1                                          
                lea     (Offset_0x0DCBCA), A0                                   
                move.w  #$0700, D0                                              
                bsr     EnigmaDec                              ; Offset_0x001D52
                move.l  #$FFFF0400, A1                                          
                lea     (Offset_0x0DCA9C), A0                                   
                move.w  #$0700, D0                                              
                bsr     EnigmaDec                              ; Offset_0x001D52
                lea     (M68K_RAM_Start), A1                         ; $FFFF0000
                move.l  #$60000002, D0                                          
                moveq   #$1F, D1                                                
                moveq   #$1F, D2                                                
                bsr     ShowVDPGraphics_SS                     ; Offset_0x0019C4
                lea     (M68K_RAM_Start), A1                         ; $FFFF0000
                move.l  #$60400002, D0                                          
                moveq   #$1F, D1                                                
                moveq   #$1F, D2                                                
                bsr     ShowVDPGraphics_SS                     ; Offset_0x0019C4
                lea     (M68K_RAM_Start), A1                         ; $FFFF0000
                move.l  #$60800002, D0                                          
                moveq   #$1F, D1                                                
                moveq   #$1F, D2                                                
                bsr     ShowVDPGraphics_SS                     ; Offset_0x0019C4
                lea     (M68K_RAM_Start), A1                         ; $FFFF0000
                move.l  #$60C00002, D0                                          
                moveq   #$1F, D1                                                
                moveq   #$1F, D2                                                
                bsr     ShowVDPGraphics_SS                     ; Offset_0x0019C4
                rts           
;-------------------------------------------------------------------------------
Offset_0x008D16:
                dc.w    $000B
                dc.l    $00FF0000
                dc.l    Art_Sonic_In_Special_Stage             ; Offset_0x0DAC46
                dc.l    $00FF0B00
                dc.l    Art_Sonic_Diagonal_In_Special_Stage    ; Offset_0x0DB248
                dc.l    $00FF2480
                dc.l    Art_Sonic_Horizontal_In_Special_Stage  ; Offset_0x0DBFE2
                dc.l    $00FF2E20
                dc.l    Art_Sonic_Spin_In_Special_Stage        ; Offset_0x0DC534
                dc.l    $00FF31A0
                dc.l    Art_SS_Bombs                           ; Offset_0x0DFB38
                dc.l    $00FF3BA0
                dc.l    Art_Miles_In_Special_Stage             ; Offset_0x0DD9CA
                dc.l    $00FF4340
                dc.l    Art_Miles_Diagonal_In_Special_Stage    ; Offset_0x0DDE5A
                dc.l    $00FF57C0
                dc.l    Art_Miles_Horizontal_In_Special_Stage  ; Offset_0x0DE96C
                dc.l    $00FF5F00
                dc.l    Art_Miles_Spin_In_Special_Stage        ; Offset_0x0DED4A
                dc.l    $00FF6100
                dc.l    Art_Miles_Tail_In_Special_Stage        ; Offset_0x0DEE0C
                dc.l    $00FF67A0
                dc.l    Art_Miles_Tail_Diagonal_In_Special_Stage ; Offset_0x0DF12A
                dc.l    $00FF6F00
                dc.l    Art_Miles_Tail_Horizontal_In_Special_Stage ; Offset_0x0DF492     
;------------------------------------------------------------------------------- 
Offset_0x008D78:
                lea     Offset_0x008D16(PC), A1                                 
                move.w  (A1)+, D0                                               
Offset_0x008D7E:
                move.l  (A1)+, A4                                               
                move.l  (A1)+, A0                                               
                bsr     NemesisDecToRAM                        ; Offset_0x001A86
                dbra    D0, Offset_0x008D7E                                     
                rts                                                             
;-------------------------------------------------------------------------------
Offset_0x008D8C:
                bsr     Offset_0x008EF8                                         
                bsr     Offset_0x008D96                                         
                rts                                                             
Offset_0x008D96:
                move.w  ($FFFF9B30).w, ($FFFF9B34).w                            
                moveq   #$00, D7                                                
                moveq   #$00, D0                                                
                move.b  ($FFFF9B09).w, D2                                       
                move.b  ($FFFF9B08).w, D0                                       
                add.w   D0, D0                                                  
                move.w  Offset_0x008DB2(PC, D0), D0                             
                jmp     Offset_0x008DB2(PC, D0)                                 
;-------------------------------------------------------------------------------
Offset_0x008DB2:
                dc.w    Offset_0x008DBC-Offset_0x008DB2
                dc.w    Offset_0x008DEC-Offset_0x008DB2
                dc.w    Offset_0x008E20-Offset_0x008DB2
                dc.w    Offset_0x008E20-Offset_0x008DB2
                dc.w    Offset_0x008E20-Offset_0x008DB2   
Offset_0x008DBC:
                cmpi.b  #$0C, D2                                                
                blt.s   Offset_0x008DEA                                         
                moveq   #$00, D1                                                
                cmpi.b  #$0D, D2                                                
                blt     Offset_0x008E22                                         
                moveq   #$02, D1                                                
                cmpi.b  #$11, D2                                                
                blt.s   Offset_0x008E22                                         
                moveq   #$04, D1                                                
                cmpi.b  #$12, D2                                                
                blt.s   Offset_0x008E22                                         
                moveq   #$06, D1                                                
                st      D7                                                      
                cmpi.b  #$16, D2                                                
                blt.s   Offset_0x008E22                                         
                moveq   #$08, D1                                                
                bra.s   Offset_0x008E22                                         
Offset_0x008DEA:
                rts                                                             
Offset_0x008DEC:
                cmpi.b  #$0C, D2                                                
                blt.s   Offset_0x008E1E                                         
                st      D7                                                      
                moveq   #$00, D1                                                
                cmpi.b  #$0D, D2                                                
                blt.s   Offset_0x008E22                                         
                moveq   #$0A, D1                                                
                cmpi.b  #$0E, D2                                                
                blt.s   Offset_0x008E22                                         
                moveq   #$0C, D1                                                
                cmpi.b  #$12, D2                                                
                blt.s   Offset_0x008E22                                         
                sf      D7                                                      
                moveq   #$0A, D1                                                
                cmpi.b  #$13, D1                                                
                blt.s   Offset_0x008E22                                         
                moveq   #$0E, D1                                                
                cmpi.b  #$17, D1                                                
                blt.s   Offset_0x008E22                                         
Offset_0x008E1E:
                rts                                                             
Offset_0x008E20:
                rts                                                             
Offset_0x008E22:
                lea     (Offset_0x008E5C), A0                                   
                adda.w  $00(A0, D1), A0                                         
                moveq   #$00, D2                                                
                move.b  ($FFFF9B21).w, D2                                       
                subq.b  #$03, D2                                                
                add.w   D2, D2                                                  
                move.w  $00(A0, D2), D2                                         
                move.w  D2, D0                                                  
                andi.w  #$00FF, D0                                              
                bsr     CalcSine                               ; Offset_0x00396A
                andi.w  #$FF00, D2                                              
                or.w    D0, D2                                                  
                lsl.l   #$08, D2                                                
                tst.b   D7                                                      
                bpl.s   Offset_0x008E56                                         
                add.l   D2, ($FFFF9B30).w                                       
                rts                                                             
Offset_0x008E56:
                sub.l   D2, ($FFFF9B30).w                                       
                rts           
;-------------------------------------------------------------------------------
Offset_0x008E5C:
                dc.w    Offset_0x008E76-Offset_0x008E5C
                dc.w    Offset_0x008E80-Offset_0x008E5C
                dc.w    Offset_0x008E8A-Offset_0x008E5C
                dc.w    Offset_0x008E94-Offset_0x008E5C
                dc.w    Offset_0x008E9E-Offset_0x008E5C
                dc.w    Offset_0x008EA8-Offset_0x008E5C
                dc.w    Offset_0x008EB2-Offset_0x008E5C
                dc.w    Offset_0x008EBC-Offset_0x008E5C
                dc.w    Offset_0x008EC6-Offset_0x008E5C
                dc.w    Offset_0x008ED0-Offset_0x008E5C
                dc.w    Offset_0x008EDA-Offset_0x008E5C
                dc.w    Offset_0x008EE4-Offset_0x008E5C
                dc.w    Offset_0x008EEE-Offset_0x008E5C
Offset_0x008E76:
                dc.b    $0A, $00, $08, $00, $06, $1E, $05, $20, $05, $00
Offset_0x008E80:
                dc.b    $0E, $00, $0B, $08, $09, $0E, $08, $00, $07, $00
Offset_0x008E8A:
                dc.b    $01, $00, $00, $25, $00, $1E, $00, $19, $00, $15
Offset_0x008E94:
                dc.b    $0B, $15, $09, $08, $07, $1E, $06, $19, $05, $23
Offset_0x008E9E:
                dc.b    $11, $15, $0E, $00, $0B, $1E, $0A, $00, $08, $23
Offset_0x008EA8:
                dc.b    $0C, $00, $09, $1A, $08, $00, $06, $3A, $06, $00
Offset_0x008EB2:
                dc.b    $0C, $15, $0A, $00, $08, $0E, $07, $06, $06, $0A
Offset_0x008EBC:
                dc.b    $0F, $00, $0C, $00, $0A, $00, $08, $19, $07, $15
Offset_0x008EC6:
                dc.b    $00, $06, $00, $05, $00, $04, $00, $03, $00, $03
Offset_0x008ED0:
                dc.b    $00, $15, $00, $11, $00, $0E, $00, $0C, $00, $0A
Offset_0x008EDA:
                dc.b    $18, $23, $13, $26, $10, $15, $0E, $06, $0C, $10
Offset_0x008EE4:
                dc.b    $1E, $00, $18, $00, $14, $00, $11, $06, $0F, $00
Offset_0x008EEE:
                dc.b    $05, $00, $04, $00, $03, $0E, $02, $3A, $02, $15        
;-------------------------------------------------------------------------------
Offset_0x008EF8:
                moveq   #$00, D7                                                
                moveq   #$00, D6                                                
                moveq   #$00, D0                                                
                move.b  ($FFFF9B09).w, D2                                       
                move.b  ($FFFF9B08).w, D0                                       
                add.w   D0, D0                                                  
                move.w  Offset_0x008F10(PC, D0), D0                             
                jmp     Offset_0x008F10(PC, D0)       
;-------------------------------------------------------------------------------
Offset_0x008F10:                
                dc.w    Offset_0x008F1A-Offset_0x008F10
                dc.w    Offset_0x008F3A-Offset_0x008F10
                dc.w    Offset_0x008F48-Offset_0x008F10
                dc.w    Offset_0x008F46-Offset_0x008F10
                dc.w    Offset_0x008F46-Offset_0x008F10   
Offset_0x008F1A:
                moveq   #$00, D1
                cmpi.b  #$06, D2                                                
                blt     Offset_0x008F52                                         
                moveq   #$02, D1                                                
                cmpi.b  #$0B, D2                                                
                blt     Offset_0x008F52                                         
                moveq   #$04, D1                                                
                cmpi.b  #$0C, D2                                                
                blt     Offset_0x008F52                                         
                rts                                                             
Offset_0x008F3A:
                moveq   #$00, D1                                                
                cmpi.b  #$0C, D2                                                
                blt     Offset_0x008F52                                         
                rts                                                             
Offset_0x008F46:
                rts                                                             
Offset_0x008F48:
                moveq   #$00, D1                                                
                cmpi.b  #$03, D2                                                
                blt.s   Offset_0x008F52                                         
                rts                                                             
Offset_0x008F52:
                lea     (Offset_0x008FEC), A0                                   
                adda.w  $00(A0, D1), A0                                         
                moveq   #$00, D2                                                
                move.b  ($FFFF9B21).w, D2                                       
                subq.b  #$03, D2                                                
                add.w   D2, D2                                                  
                move.w  $00(A0, D2), D2                                         
                move.w  D2, D0                                                  
                andi.w  #$00FF, D0                                              
                bsr     CalcSine                               ; Offset_0x00396A
                andi.w  #$FF00, D2                                              
                or.w    D0, D2                                                  
                lsl.l   #$08, D2                                                
                tst.b   ($FFFF9B11).w                                           
                bne.s   Offset_0x008F8A                                         
                tst.b   ($FFFF9B0F).w                                           
                beq.s   Offset_0x008F9E                                         
                bra.s   Offset_0x008F96                                         
Offset_0x008F8A:
                tst.b   ($FFFF9B0F).w                                           
                bne.s   Offset_0x008F9E                                         
                lea     ($FFFFE002).w, A1                                       
                bra.s   Offset_0x008FAE                                         
Offset_0x008F96:
                lea     ($FFFF9702).w, A1                                       
                st      D6                                                      
                bra.s   Offset_0x008FAE                                         
Offset_0x008F9E:
                lea     ($FFFFE002).w, A1                                       
                tst.b   ($FFFF9B0F).w                                           
                beq.s   Offset_0x008FAE                                         
                lea     ($FFFF9702).w, A1                                       
                st      D6                                                      
Offset_0x008FAE:
                tst.b   D6                                                      
                bmi.s   Offset_0x008FC6                                         
                tst.b   D7                                                      
                bpl.s   Offset_0x008FBC                                         
                add.l   D2, ($FFFF9B24).w                                       
                bra.s   Offset_0x008FC0                                         
Offset_0x008FBC:
                sub.l   D2, ($FFFF9B24).w                                       
Offset_0x008FC0:
                move.w  ($FFFF9B24).w, D2                                       
                bra.s   Offset_0x008FD8                                         
Offset_0x008FC6:
                tst.b   D7                                                      
                bmi.s   Offset_0x008FD0                                         
                add.l   D2, ($FFFF9B24).w                                       
                bra.s   Offset_0x008FD4                                         
Offset_0x008FD0:
                sub.l   D2, ($FFFF9B24).w                                       
Offset_0x008FD4:
                move.w  ($FFFF9B24).w, D2                                       
Offset_0x008FD8:
                move.w  #$00FF, D0                                              
Offset_0x008FDC:
                move.w  D2, (A1)+                                               
                adda.l  #$00000002, A1                                          
                dbra    D0, Offset_0x008FDC                                     
                rts 
                rts
;-------------------------------------------------------------------------------
Offset_0x008FEC:
                dc.w    Offset_0x009000-Offset_0x008FEC
                dc.w    Offset_0x00900A-Offset_0x008FEC
                dc.w    Offset_0x009014-Offset_0x008FEC
                dc.w    Offset_0x00901E-Offset_0x008FEC
                dc.w    Offset_0x009028-Offset_0x008FEC
                dc.w    Offset_0x009032-Offset_0x008FEC
                dc.w    Offset_0x00903C-Offset_0x008FEC
                dc.w    Offset_0x009046-Offset_0x008FEC
                dc.w    Offset_0x009050-Offset_0x008FEC
                dc.w    Offset_0x00905A-Offset_0x008FEC
Offset_0x009000:
                dc.b    $0E, $07, $0B, $0E, $09, $13, $08, $04, $07, $03
Offset_0x00900A:
                dc.b    $0E, $26, $0B, $29, $09, $2B, $08, $13, $07, $11
Offset_0x009014:
                dc.b    $0B, $00, $08, $26, $07, $0E, $06, $0C, $05, $15
Offset_0x00901E:
                dc.b    $05, $00, $04, $00, $03, $0E, $02, $2A, $02, $15
Offset_0x009028:
                dc.b    $0D, $00, $0A, $11, $08, $1E, $07, $12, $06, $15
Offset_0x009032:
                dc.b    $1C, $08, $16, $18, $12, $26, $10, $05, $0E, $04
Offset_0x00903C:
                dc.b    $09, $00, $07, $08, $06, $00, $05, $06, $04, $15
Offset_0x009046:
                dc.b    $14, $00, $10, $00, $0D, $0E, $0B, $12, $0A, $00
Offset_0x009050:
                dc.b    $0F, $24, $0C, $1B, $0A, $16, $09, $01, $07, $2C
Offset_0x00905A:
                dc.b    $0C, $00, $09, $1A, $08, $00, $06, $2A, $06, $00 
;-------------------------------------------------------------------------------                
Offset_0x009064: ; Usado pelo objeto 0x5F
                lea     ($FFFFCE00).w, A1
                move.w  #$001B, D0
Offset_0x00906C:
                tst.b   (A1)
                beq.s   Offset_0x009078
                lea     Obj_Size(A1), A1                                 ; $0040
                dbra    D0, Offset_0x00906C
Offset_0x009078:
                rts
;-------------------------------------------------------------------------------
Obj_0x5E_SS_Head_Up_Display:                                   ; Offset_0x00907A                
                include 'data\objects\obj_0x5E.asm'
Obj_0x5F_SS_Flag_START_Flag:                                   ; Offset_0x0090E8
                include 'data\objects\obj_0x5F.asm'
Obj_0x62_SS_Time_Count_Down:                                   ; Offset_0x0093BE
                include 'data\objects\obj_0x62.asm'               
Obj_0x87_SS_Ring_Count_Display:                                ; Offset_0x0094FA
                include 'data\objects\obj_0x87.asm'                
;-------------------------------------------------------------------------------
Offset_0x0095C4:
                move.b  ($FFFF9B0D).w, D0                                       
                cmp.b   ($FFFF9B21).w, D0                                       
                beq.s   Offset_0x0095D0                                         
                rts                                                             
Offset_0x0095D0:
                move.l  #$FFFFB000, A0                                          
                move.l  #$FFFFB040, A1                                          
                moveq   #$00, D0                                                
                move.b  ($FFFF9B10).w, D0                                       
                add.w   D0, D0                                                  
                move.w  #$0080, $002C(A0)                                       
                move.w  #$0036, $002E(A0)                                       
                move.w  #$0080, $002C(A1)                                       
                move.w  #$0028, $002E(A1)                                       
                move.b  Offset_0x009622(PC, D0), D1                             
                move.b  Offset_0x009622+$0001(PC, D0), D2                             
                ext.w   D1                                                      
                ext.w   D2                                                      
                tst.b   ($FFFF9B0E).w                                           
                beq.s   Offset_0x009610                                         
                neg.w   D1                                                      
Offset_0x009610:
                add.w   D1, $002C(A0)                                           
                add.w   D2, $002E(A0)                                           
                add.w   D1, $002C(A1)                                           
                add.w   D2, $002E(A1)                                           
                rts       
;-------------------------------------------------------------------------------
Offset_0x009622:
                dc.b    $13, $00, $13, $00, $13, $00, $13, $00, $09, $F6, $00, $E4, $00, $E4, $00, $E0
                dc.b    $00, $DC, $00, $D6, $00, $F0, $00, $06, $00, $0E, $00, $10, $00, $12, $00, $12
                dc.b    $09, $12, $00, $00, $00, $00, $00, $00, $00, $00, $13, $00, $13, $00, $13, $00
                dc.b    $13, $00, $0B, $0C, $00, $0C, $00, $12, $00, $0A, $00, $08, $00, $02, $00, $10
                dc.b    $00, $E0, $00, $E1, $00, $E2, $00, $E5, $00, $E8, $00, $F2, $13, $00, $13, $00
                dc.b    $13, $00, $13, $00, $13, $00, $13, $00, $13, $00, $13, $00, $13, $00, $13, $00
                dc.b    $0B, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $03, $00
;-------------------------------------------------------------------------------
                nop
Jmp_00_To_DisplaySprite:                                       ; Offset_0x009694
                jmp     (DisplaySprite)                        ; Offset_0x0120DE
Jmp_00_To_DeleteObject:                                        ; Offset_0x00969A
                jmp     (DeleteObject)                         ; Offset_0x0120D0
Jmp_00_To_SpeedToPos:                                          ; Offset_0x0096A0
                jmp     (SpeedToPos)                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             
;===============================================================================
; Rotina principal de controle dos Estágios Especiais
; <<<-
;=============================================================================== 
                dc.w    $0000
;===============================================================================
; Rotina para carregar os limites das fases
; ->>>
;===============================================================================
Level_Size_Load:                                               ; Offset_0x0096A8   
                clr.w   (Scroll_Flag_Array).w                        ; $FFFFEE50
                clr.w   (Scroll_Flag_Array+$0002).w                  ; $FFFFEE52
                clr.w   (Scroll_Flag_Array+$0004).w                  ; $FFFFEE54
                clr.w   (Scroll_Flag_Array+$0006).w                  ; $FFFFEE56
                clr.w   (Scroll_Flag_Array+$0008).w                  ; $FFFFEE58
                clr.w   (Scroll_Flag_Array+$000A).w                  ; $FFFFEE5A
                clr.w   (Scroll_Flag_Array+$000C).w                  ; $FFFFEE5C
                clr.w   (Scroll_Flag_Array+$000E).w                  ; $FFFFEE5E
                clr.w   (Scroll_Flag_Array_2).w                      ; $FFFFEEA0
                clr.w   (Scroll_Flag_Array_2+$0002).w                ; $FFFFEEA2
                clr.w   (Scroll_Flag_Array_2+$0004).w                ; $FFFFEEA4
                clr.w   (Scroll_Flag_Array_2+$0006).w                ; $FFFFEEA6
                clr.w   (Scroll_Flag_Array_2+$0008).w                ; $FFFFEEA8
                clr.w   (Scroll_Flag_Array_2+$000A).w                ; $FFFFEEAA
                clr.w   (Scroll_Flag_Array_2+$000C).w                ; $FFFFEEAC
                clr.w   (Scroll_Flag_Array_2+$000E).w                ; $FFFFEEAE
                clr.b   ($FFFFEEDC).w                                           
                clr.b   ($FFFFEEBC).w                                           
                clr.b   ($FFFFEEBD).w                                         
                moveq   #$00, D0                                                
                move.b  D0, (Dyn_Resize_Routine).w                   ; $FFFFEEDF                                
                move.w  (Level_Id).w, D0                             ; $FFFFFE10
                ror.b   #$01, D0                                                
                lsr.w   #$04, D0                                                
                lea     Level_Size_Array(PC, D0), A0           ; Offset_0x009732                  
                move.l  (A0)+, D0                                               
                move.l  D0, (Sonic_Level_Limits_Min_X).w             ; $FFFFEEC8
                move.l  D0, ($FFFFEEC0).w                                       
                move.l  D0, (Miles_Level_Limits_Min_X).w             ; $FFFFEEF8
                move.l  (A0)+, D0                                               
                move.l  D0, ($FFFFEECC).w                                       
                move.l  D0, ($FFFFEEC4).w                                       
                move.l  D0, ($FFFFEEFC).w                                       
                move.w  #$1010, ($FFFFEE40).w                                   
                move.w  #$0060, ($FFFFEED8).w                                   
                bra     Level_Load_Player_Position             ; Offset_0x009842   
;-------------------------------------------------------------------------------
Level_Size_Array:                                              ; Offset_0x009732    
                dc.l    $000029A0, $00000320, $00002940, $00000420
                dc.l    $00003FFF, $00000720, $00003FFF, $00000720
                dc.l    $00003FFF, $00000720, $00003FFF, $00000720
                dc.l    $00003FFF, $00000720, $00003FFF, $00000720
                dc.l    $00002280, $FF000800, $00001E80, $FF000800
                dc.l    $00002A80, $FF000800, $00003FFF, $FF000800
                dc.l    $00003FFF, $00000720, $00003FFF, $00000720
                dc.l    $00002800, $00000720, $00003280, $00000720
                dc.l    $00003FFF, $00000720, $00003FFF, $00000720
                dc.l    $00003FFF, $00000720, $00003FFF, $00000720
                dc.l    $00002F80, $00000680, $00002D00, $00000680
                dc.l    $00002380, $03C00720, $00003FFF, $00600720
                dc.l    $000027A0, $00000720, $00002A80, $00000720
                dc.l    $00002780, $00000720, $00002A80, $00000720
                dc.l    $00001000, $00C800C8, $00001000, $00C800C8
                dc.l    $000028C0, $02000600, $00003FFF, $01800780
                dc.l    $00003FFF, $00000000, $00003FFF, $00000720                                                    
;===============================================================================
; Rotina para carregar os limites das fases
; <<<-
;===============================================================================

;===============================================================================
; Rotina para carregar a posição do jogador na tela
; ->>>
;===============================================================================
Level_Load_Player_Position:                                    ; Offset_0x009842
                tst.b   (Saved_Level_Flag).w                         ; $FFFFFE30
                beq.s   Level_Load_Player_Position_From_Start  ; Offset_0x009858                                         
                jsr     (Level_Restore_Info)                   ; Offset_0x019FC0                                
                move.w  (Player_Position_X).w, D1                    ; $FFFFB008                         
                move.w  (Player_Position_Y).w, D0                    ; $FFFFB00C                       
                bra.s   Level_Load_Player_Position_2           ; Offset_0x009874                                         
Level_Load_Player_Position_From_Start:                         ; Offset_0x009858
                move.w  (Level_Id).w, D0                             ; $FFFFFE10
                ror.b   #$01, D0                                                
                lsr.w   #$05, D0                                                
                lea     Player_Start_Position_Array(PC, D0), A1 ; Offset_0x0098AE                      
                moveq   #$00, D1                                                
                move.w  (A1)+, D1                                               
                move.w  D1, (Player_Position_X).w                    ; $FFFFB008                              
                moveq   #$00, D0                                                
                move.w  (A1), D0                                                
                move.w  D0, (Player_Position_Y).w                    ; $FFFFB00C                                   
Level_Load_Player_Position_2:                                  ; Offset_0x009874
                subi.w  #$00A0, D1                                              
                bcc.s   Offset_0x00987C                                         
                moveq   #$00, D1                                                
Offset_0x00987C:
                move.w  (Sonic_Level_Limits_Max_X).w, D2             ; $FFFFEECA
                cmp.w   D2, D1                                                  
                bcs.s   Offset_0x009886                                         
                move.w  D2, D1                                                  
Offset_0x009886:
                move.w  D1, (Camera_X).w                             ; $FFFFEE00
                move.w  D1, (Camera_X_2).w                           ; $FFFFEE20
                subi.w  #$0060, D0                                              
                bcc.s   Offset_0x009896                                         
                moveq   #$00, D0                                                
Offset_0x009896:
                cmp.w   (Sonic_Level_Limits_Max_Y).w, D0             ; $FFFFEECE                               
                blt.s   Offset_0x0098A0                                         
                move.w  (Sonic_Level_Limits_Max_Y).w, D0             ; $FFFFEECE                               
Offset_0x0098A0:
                move.w  D0, (Camera_Y).w                             ; $FFFFEE04
                move.w  D0, ($FFFFEE24).w                                       
                bsr     Background_Scroll_Speed                ; Offset_0x009936                                         
                rts                                                             
;-------------------------------------------------------------------------------
Player_Start_Position_Array:                                   ; Offset_0x0098AE    
                dc.w    $0060, $028F, $0060, $02AF
                dc.w    $0060, $028F, $0060, $02AF
                dc.w    $0060, $01AC, $0060, $01AC
                dc.w    $0060, $028F, $0060, $02AF
                dc.w    $0060, $028C, $0060, $05EC
                dc.w    $0060, $020C, $0060, $02AF
                dc.w    $0060, $04CC, $01E0, $04CC
                dc.w    $0060, $03EF, $0060, $06AF
                dc.w    $0230, $01AC, $0230, $01AC
                dc.w    $0060, $028F, $0060, $02AF
                dc.w    $0060, $06AC, $0060, $056C
                dc.w    $0060, $06AC, $0060, $05AC
                dc.w    $0060, $02AC, $0060, $058C
                dc.w    $0060, $01EC, $0060, $012C
                dc.w    $0060, $012D, $0060, $012D
                dc.w    $0060, $037E, $0060, $037E
                dc.w    $0120, $0070, $0140, $0070
;===============================================================================
; Rotina para carregar a posição do jogador na tela
; <<<-
;===============================================================================

;===============================================================================
; Rotina de para controle de rolagem da tela
; ->>>
;===============================================================================
Background_Scroll_Speed:                                       ; Offset_0x009936
                tst.b   (Saved_Level_Flag).w                         ; $FFFFFE30
                bne.s   Offset_0x009964                                         
                move.w  D0, (Camera_Y_x4).w                          ; $FFFFEE0C
                move.w  D0, (Camera_Y_x4_Mod_10).w                   ; $FFFFEE14
                move.w  D1, (Camera_X_x2).w                          ; $FFFFEE08
                move.w  D1, (Camera_X_x8).w                          ; $FFFFEE10
                move.w  D1, (Camera_X_x4).w                          ; $FFFFEE18
                move.w  D0, ($FFFFEE2C).w                                       
                move.w  D0, ($FFFFEE34).w                                       
                move.w  D1, ($FFFFEE28).w                                       
                move.w  D1, ($FFFFEE30).w                                       
                move.w  D1, ($FFFFEE38).w                                       
Offset_0x009964:
                moveq   #$00, D2                                                
                move.b  (Level_Id).w, D2                             ; $FFFFFE10
                add.w   D2, D2                                                  
                move.w  Bg_Scroll_Speed_Index(PC, D2), D2      ; Offset_0x009974                   
                jmp     Bg_Scroll_Speed_Index(PC, D2)          ; Offset_0x009974
;-------------------------------------------------------------------------------
Bg_Scroll_Speed_Index:                                         ; Offset_0x009974                        
                dc.w    Bg_Scroll_Speed_GHz-Bg_Scroll_Speed_Index  ; Offset_0x009996
                dc.w    Bg_Scroll_Speed_Lvl1-Bg_Scroll_Speed_Index ; Offset_0x0099C2
                dc.w    Bg_Scroll_Speed_Wz-Bg_Scroll_Speed_Index   ; Offset_0x0099C4
                dc.w    Bg_Scroll_Speed_Lvl3-Bg_Scroll_Speed_Index ; Offset_0x0099C2
                dc.w    Bg_Scroll_Speed_Mz-Bg_Scroll_Speed_Index   ; Offset_0x0099D6
                dc.w    Bg_Scroll_Speed_Mz-Bg_Scroll_Speed_Index   ; Offset_0x0099D6
                dc.w    Bg_Scroll_Speed_SFz-Bg_Scroll_Speed_Index  ; Offset_0x0099E4
                dc.w    Bg_Scroll_Speed_HTz-Bg_Scroll_Speed_Index  ; Offset_0x0099E6
                dc.w    Bg_Scroll_Speed_HPz-Bg_Scroll_Speed_Index  ; Offset_0x009A12
                dc.w    Bg_Scroll_Speed_Lvl9-Bg_Scroll_Speed_Index ; Offset_0x009A34
                dc.w    Bg_Scroll_Speed_OOz-Bg_Scroll_Speed_Index  ; Offset_0x009A36
                dc.w    Bg_Scroll_Speed_DHz-Bg_Scroll_Speed_Index  ; Offset_0x009A64
                dc.w    Bg_Scroll_Speed_CNz-Bg_Scroll_Speed_Index  ; Offset_0x009A96
                dc.w    Bg_Scroll_Speed_CPz-Bg_Scroll_Speed_Index  ; Offset_0x009AA4
                dc.w    Bg_Scroll_Speed_DEz-Bg_Scroll_Speed_Index  ; Offset_0x009AB8
                dc.w    Bg_Scroll_Speed_NGHz-Bg_Scroll_Speed_Index ; Offset_0x009ABA
                dc.w    Bg_Scroll_Speed_SCz-Bg_Scroll_Speed_Index  ; Offset_0x009AEC  
;-------------------------------------------------------------------------------                 
Bg_Scroll_Speed_GHz:                                           ; Offset_0x009996 
                clr.l   (Camera_X_x2).w                              ; $FFFFEE08
                clr.l   (Camera_Y_x4).w                              ; $FFFFEE0C
                clr.l   (Camera_Y_x4_Mod_10).w                       ; $FFFFEE14
                clr.l   (Camera_Y_x4_Mod_10_2).w                     ; $FFFFEE1C
                lea     ($FFFFA800).w, A2                                       
                clr.l   (A2)+                                                   
                clr.l   (A2)+                                                   
                clr.l   (A2)+                                                   
                clr.l   ($FFFFEE28).w                                           
                clr.l   ($FFFFEE2C).w                                           
                clr.l   ($FFFFEE34).w                                           
                clr.l   ($FFFFEE3C).w                                           
                rts                                                             
;------------------------------------------------------------------------------- 
Bg_Scroll_Speed_Lvl1:                                          ; Offset_0x0099C2  
Bg_Scroll_Speed_Lvl3:                                          ; Offset_0x0099C2
                rts 
;-------------------------------------------------------------------------------
Bg_Scroll_Speed_Wz:                                            ; Offset_0x0099C4 
                asr.w   #$02, D0                                                
                addi.w  #$0400, D0                                              
                move.w  D0, (Camera_Y_x4).w                          ; $FFFFEE0C
                asr.w   #$03, D1                                                
                move.w  D1, (Camera_X_x2).w                          ; $FFFFEE08
                rts                                                             
;-------------------------------------------------------------------------------  
Bg_Scroll_Speed_Mz:                                            ; Offset_0x0099D6
                asr.w   #$02, D0                                                
                move.w  D0, (Camera_Y_x4).w                          ; $FFFFEE0C
                asr.w   #$03, D1                                                
                move.w  D1, (Camera_X_x2).w                          ; $FFFFEE08
                rts                                                             
;-------------------------------------------------------------------------------
Bg_Scroll_Speed_SFz:                                           ; Offset_0x0099E4
                rts
;-------------------------------------------------------------------------------
Bg_Scroll_Speed_HTz:                                           ; Offset_0x0099E6    
                clr.l   (Camera_X_x2).w                              ; $FFFFEE08
                clr.l   (Camera_Y_x4).w                              ; $FFFFEE0C
                clr.l   (Camera_Y_x4_Mod_10).w                       ; $FFFFEE14
                clr.l   (Camera_Y_x4_Mod_10_2).w                     ; $FFFFEE1C
                lea     ($FFFFA800).w, A2                                       
                clr.l   (A2)+                                                   
                clr.l   (A2)+                                                   
                clr.l   (A2)+                                                   
                clr.l   ($FFFFEE28).w                                           
                clr.l   ($FFFFEE2C).w                                           
                clr.l   ($FFFFEE34).w                                           
                clr.l   ($FFFFEE3C).w                                           
                rts                                                             
;-------------------------------------------------------------------------------
Bg_Scroll_Speed_HPz:                                           ; Offset_0x009A12 
                asr.w   #$01, D0                                                
                move.w  D0, (Camera_Y_x4).w                          ; $FFFFEE0C
                clr.l   (Camera_X_x2).w                              ; $FFFFEE08
                rts                                                             
;-------------------------------------------------------------------------------
; Bg_Scroll_Speed_SYz: ; Left Over Sonic 1                     ; Offset_0x009A1E           
                asl.l   #$04, D0                                                
                move.l  D0, D2                                                  
                asl.l   #$01, D0                                                
                add.l   D2, D0                                                  
                asr.l   #$08, D0                                                
                addq.w  #$01, D0                                                
                move.w  D0, (Camera_Y_x4).w                          ; $FFFFEE0C
                clr.l   (Camera_X_x2).w                              ; $FFFFEE08
                rts                                                             
;-------------------------------------------------------------------------------
Bg_Scroll_Speed_Lvl9:                                          ; Offset_0x009A34
                rts  
;------------------------------------------------------------------------------- 
Bg_Scroll_Speed_OOz:                                           ; Offset_0x009A36  
                lsr.w   #$03, D0                                                
                addi.w  #$0050, D0                                              
                move.w  D0, (Camera_Y_x4).w                          ; $FFFFEE0C
                clr.l   (Camera_X_x2).w                              ; $FFFFEE08
                rts                                                             
;-------------------------------------------------------------------------------
; Bg_Scroll_Speed_SYz: ; Left Over Sonic 1                     ; Offset_0x009A46
                asl.l   #$04, D0                                                
                move.l  D0, D2                                                  
                asl.l   #$01, D0                                                
                add.l   D2, D0                                                  
                asr.l   #$08, D0                                                
                addq.w  #$01, D0                                                
                move.w  D0, (Camera_Y_x4).w                          ; $FFFFEE0C
                clr.l   (Camera_X_x2).w                              ; $FFFFEE08
                rts                                                             
;-------------------------------------------------------------------------------
; Offset_0x009A5C:
                asr.w   #$03, D0                                                
                move.w  D0, (Camera_Y_x4).w                          ; $FFFFEE0C
                rts                                                             
;-------------------------------------------------------------------------------
Bg_Scroll_Speed_DHz:                                           ; Offset_0x009A64  
                clr.l   (Camera_X_x2).w                              ; $FFFFEE08
                clr.l   ($FFFFEE28).w                                           
                tst.b   (Act_Id).w                                   ; $FFFFFE11
                bne.s   Offset_0x009A84                                         
                divu.w  #$0003, D0                                              
                subi.w  #$0140, D0                                              
                move.w  D0, (Camera_Y_x4).w                          ; $FFFFEE0C
                move.w  D0, ($FFFFEE2C).w                                       
                rts                                                             
Offset_0x009A84:
                divu.w  #$0006, D0                                              
                subi.w  #$0010, D0                                              
                move.w  D0, (Camera_Y_x4).w                          ; $FFFFEE0C
                move.w  D0, ($FFFFEE2C).w                                       
                rts                                                             
;-------------------------------------------------------------------------------
Bg_Scroll_Speed_CNz:                                           ; Offset_0x009A96    
                clr.l   (Camera_X_x2).w                              ; $FFFFEE08
                clr.l   (Camera_Y_x4).w                              ; $FFFFEE0C
                clr.l   ($FFFFEE2C).w                                           
                rts                                                             
;-------------------------------------------------------------------------------
Bg_Scroll_Speed_CPz:                                           ; Offset_0x009AA4  
                lsr.w   #$02, D0                                                
                move.w  D0, (Camera_Y_x4).w                          ; $FFFFEE0C
                move.w  D0, ($FFFFEE2C).w                                       
                clr.l   (Camera_X_x2).w                              ; $FFFFEE08
                clr.l   (Camera_X_x8).w                              ; $FFFFEE10
                rts                                                             
;-------------------------------------------------------------------------------
Bg_Scroll_Speed_DEz:                                           ; Offset_0x009AB8 
                rts
;-------------------------------------------------------------------------------
Bg_Scroll_Speed_NGHz:                                          ; Offset_0x009ABA
                tst.b   (Act_Id).w                                   ; $FFFFFE11
                beq.s   Bg_Scroll_Speed_NGHz_Act_1             ; Offset_0x009ACC                                         
                subi.w  #$00E0, D0                                              
                lsr.w   #$01, D0                                                
                move.w  D0, (Camera_Y_x4).w                          ; $FFFFEE0C
                bra.s   Bg_Scroll_Speed_NGHz_Init              ; Offset_0x009AD4                                         
Bg_Scroll_Speed_NGHz_Act_1:                                    ; Offset_0x009ACC
                subi.w  #$0180, D0                                              
                move.w  D0, (Camera_Y_x4).w                          ; $FFFFEE0C
Bg_Scroll_Speed_NGHz_Init:                                     ; Offset_0x009AD4
                clr.l   (Camera_X_x2).w                              ; $FFFFEE08
                clr.l   (Camera_Y_x4_Mod_10).w                       ; $FFFFEE14
                clr.l   (Camera_Y_x4_Mod_10_2).w                     ; $FFFFEE1C
                lea     ($FFFFA800).w, A2                                       
                clr.l   (A2)+                                                   
                clr.l   (A2)+                                                   
                clr.l   (A2)+                                                   
                rts                                                             
;-------------------------------------------------------------------------------
Bg_Scroll_Speed_SCz:                                           ; Offset_0x009AEC  
                clr.l   (Camera_X_x2).w                              ; $FFFFEE08
                clr.l   (Camera_Y_x4).w                              ; $FFFFEE0C
                rts                                                                                                  
;===============================================================================
; Rotina para controle de rolagem da tela
; <<<-
;===============================================================================

;===============================================================================
; Rotina para rolar a tela de acordo com a posição do personagem
; ->>>
;===============================================================================                                                                                 
Background_Scroll_Layer:                                       ; Offset_0x009AF6 
                tst.b   ($FFFFEEDC).w                                           
                beq.s   Offset_0x009AFE                                         
                rts                                                             
Offset_0x009AFE:
                clr.w   (Scroll_Flag_Array).w                        ; $FFFFEE50
                clr.w   (Scroll_Flag_Array+$0002).w                  ; $FFFFEE52
                clr.w   (Scroll_Flag_Array+$0004).w                  ; $FFFFEE54
                clr.w   (Scroll_Flag_Array+$0006).w                  ; $FFFFEE56
                clr.w   (Scroll_Flag_Array+$0008).w                  ; $FFFFEE58
                clr.w   (Scroll_Flag_Array+$000A).w                  ; $FFFFEE5A
                clr.w   (Scroll_Flag_Array+$000C).w                  ; $FFFFEE5C
                clr.w   (Scroll_Flag_Array+$000E).w                                          
                cmpi.b  #$10, (Level_Id).w                           ; $FFFFFE10
                bne     Offset_0x009B30                                         
                tst.w   (Debug_Mode_Flag_Index).w                    ; $FFFFFE08
                beq     Offset_0x009BB6                                         
Offset_0x009B30:
                lea     (Obj_Memory_Address).w, A0                   ; $FFFFB000
                lea     (Camera_X).w, A1                             ; $FFFFEE00
                lea     (Sonic_Level_Limits_Min_X).w, A2             ; $FFFFEEC8
                lea     (Scroll_Flag_Array).w, A3                    ; $FFFFEE50                              
                lea     (Horizontal_Scrolling).w, A4                 ; $FFFFEEB0
                lea     ($FFFFEED0).w, A5                                       
                lea     ($FFFFE500).w, A6                                       
                bsr     Scroll_Horizontal                      ; Offset_0x00AC8C                                         
                lea     ($FFFFEE40).w, A2                                       
                bsr     Scroll_Horizontal_2                    ; Offset_0x00AC6A                                         
                lea     (Camera_Y).w, A1                             ; $FFFFEE04
                lea     (Sonic_Level_Limits_Min_X).w, A2             ; $FFFFEEC8
                lea     (Vertical_Scrolling).w, A4                   ; $FFFFEEB2
                bsr     Scroll_Vertical                        ; Offset_0x00ACFC                                         
                lea     ($FFFFEE41).w, A2                                       
                bsr     Scroll_Vertical_2                      ; Offset_0x00AE00                                         
                tst.w   (Two_Player_Flag).w                          ; $FFFFFFD8
                beq.s   Offset_0x009BB6                                         
                lea     (Obj_Memory_Address+$0040).w, A0             ; $FFFFB040
                lea     (Camera_X_2).w, A1                           ; $FFFFEE20
                lea     (Miles_Level_Limits_Min_X).w, A2             ; $FFFFEEF8
                lea     (Scroll_Flag_Array+$0008).w, A3              ; $FFFFEE58                                  
                lea     ($FFFFEEB8).w, A4                                       
                lea     ($FFFFEED4).w, A5                                       
                lea     ($FFFFE600).w, A6                                       
                bsr     Scroll_Horizontal                      ; Offset_0x00AC8C                                         
                lea     ($FFFFEE48).w, A2                                       
                bsr     Scroll_Horizontal_2                    ; Offset_0x00AC6A                                         
                lea     (Camera_Y_2).w, A1                           ; $FFFFEE24
                lea     (Miles_Level_Limits_Min_X).w, A2             ; $FFFFEEF8
                lea     ($FFFFEEBA).w, A4                                       
                bsr     Scroll_Vertical                        ; Offset_0x00ACFC                                         
                lea     ($FFFFEE49).w, A2                                       
                bsr     Scroll_Vertical_2                      ; Offset_0x00AE00                                         
Offset_0x009BB6:
                bsr     Dyn_Screen_Boss_Loader                 ; Offset_0x00BB24                                         
                move.w  (Camera_Y).w, ($FFFFF616).w                  ; $FFFFEE04
                move.w  (Camera_Y_x4).w, ($FFFFF618).w               ; $FFFFEE0C
                move.l  (Camera_X).w, ($FFFFEEF0).w                  ; $FFFFEE00
                move.l  (Camera_Y).w, ($FFFFEEF4).w                  ; $FFFFEE04
                moveq   #$00, D0                                                
                move.b  (Level_Id).w, D0                             ; $FFFFFE10
                add.w   D0, D0                                                  
                move.w  Bg_Scroll_Index(PC, D0), D0            ; Offset_0x009BE2                       
                jmp     Bg_Scroll_Index(PC, D0)                ; Offset_0x009BE2                 
;-------------------------------------------------------------------------------
Bg_Scroll_Index:                                               ; Offset_0x009BE2  
                dc.w    Bg_Scroll_GHz-Bg_Scroll_Index          ; Offset_0x009C28
                dc.w    Bg_Scroll_Lvl1-Bg_Scroll_Index         ; Offset_0x00ABEE
                dc.w    Bg_Scroll_Wz-Bg_Scroll_Index           ; Offset_0x009E64
                dc.w    Bg_Scroll_Lvl3-Bg_Scroll_Index         ; Offset_0x00ABEE
                dc.w    Bg_Scroll_Mz-Bg_Scroll_Index           ; Offset_0x009E9C
                dc.w    Bg_Scroll_Mz-Bg_Scroll_Index           ; Offset_0x009E9C
                dc.w    Bg_Scroll_SFz-Bg_Scroll_Index          ; Offset_0x009ED4
                dc.w    Bg_Scroll_HTz-Bg_Scroll_Index          ; Offset_0x009FB2
                dc.w    Bg_Scroll_HPz-Bg_Scroll_Index          ; Offset_0x00A1EE
                dc.w    Bg_Scroll_Lvl9-Bg_Scroll_Index         ; Offset_0x00ABEE
                dc.w    Bg_Scroll_OOz-Bg_Scroll_Index          ; Offset_0x00A2B4
                dc.w    Bg_Scroll_DHz-Bg_Scroll_Index          ; Offset_0x00A2EC
                dc.w    Bg_Scroll_CNz-Bg_Scroll_Index          ; Offset_0x00A686
                dc.w    Bg_Scroll_CPz-Bg_Scroll_Index          ; Offset_0x00A83C
                dc.w    Bg_Scroll_DEz-Bg_Scroll_Index          ; Offset_0x00A942
                dc.w    Bg_Scroll_NGHz-Bg_Scroll_Index         ; Offset_0x00AA36
                dc.w    Bg_Scroll_SCz-Bg_Scroll_Index          ; Offset_0x00AB66            
;-------------------------------------------------------------------------------
Bg_Scroll_Title_Screen:                                        ; Offset_0x009C04
                move.w  (Camera_Y_x4).w, ($FFFFF618).w               ; $FFFFEE0C
                move.w  (Camera_X).w, D0                             ; $FFFFEE00
                cmpi.w  #$1C00, D0                                              
                bcc.s   Offset_0x009C16                                         
                addq.w  #$08, D0                                                
Offset_0x009C16:
                move.w  D0, (Camera_X).w                             ; $FFFFEE00
                lea     (Scroll_Buffer_Data).w, A1                   ; $FFFFE000                             
                move.w  (Camera_X).w, D2                             ; $FFFFEE00
                neg.w   D2                                                      
                moveq   #$00, D0                                                
                bra.s   Offset_0x009C44                                         
;-------------------------------------------------------------------------------  
Bg_Scroll_GHz:                                                 ; Offset_0x009C28  
                tst.w   (Two_Player_Flag).w                          ; $FFFFFFD8
                bne     Bg_Scroll_GHz_Act_2                    ; Offset_0x009D6E                                         
                move.w  (Camera_Y_x4).w, ($FFFFF618).w               ; $FFFFEE0C
                lea     (Scroll_Buffer_Data).w, A1                   ; $FFFFE000                                  
                move.w  (Camera_X).w, D0                             ; $FFFFEE00
                neg.w   D0                                                      
                move.w  D0, D2                                                  
                swap.w  D0                                                      
Offset_0x009C44:
                move.w  #$0000, D0                                              
                move.w  #$0015, D1                                              
Offset_0x009C4C:
                move.l  D0, (A1)+                                               
                dbra    D1, Offset_0x009C4C                                     
                move.w  D2, D0                                                  
                asr.w   #$06, D0                                                
                move.w  #$0039, D1                                              
Offset_0x009C5A:
                move.l  D0, (A1)+                                               
                dbra    D1, Offset_0x009C5A                                     
                move.w  D0, D3                                                  
                move.b  ($FFFFFE0F).w, D1                                       
                andi.w  #$0007, D1                                              
                bne.s   Offset_0x009C70                                         
                subq.w  #$01, ($FFFFA800).w                                     
Offset_0x009C70:
                move.w  ($FFFFA800).w, D1                                       
                andi.w  #$001F, D1                                              
                lea     (Bg_Scroll_Data), A2                   ; Offset_0x009D2C                         
                lea     $00(A2, D1), A2                                         
                move.w  #$0014, D1                                              
Offset_0x009C86:
                move.b  (A2)+, D0                                               
                ext.w   D0                                                      
                add.w   D3, D0                                                  
                move.l  D0, (A1)+                                               
                dbra    D1, Offset_0x009C86                                     
                move.w  #$0000, D0                                              
                move.w  #$000A, D1                                              
Offset_0x009C9A:
                move.l  D0, (A1)+                                               
                dbra    D1, Offset_0x009C9A                                     
                move.w  D2, D0                                                  
                asr.w   #$04, D0                                                
                move.w  #$000F, D1                                              
Offset_0x009CA8:
                move.l  D0, (A1)+                                               
                dbra    D1, Offset_0x009CA8                                     
                move.w  D2, D0                                                  
                asr.w   #$04, D0                                                
                move.w  D0, D1                                                  
                asr.w   #$01, D1                                                
                add.w   D1, D0                                                  
                move.w  #$000F, D1                                              
Offset_0x009CBC:
                move.l  D0, (A1)+                                               
                dbra    D1, Offset_0x009CBC                                     
                move.l  D0, D4                                                  
                swap.w  D4                                                      
                move.w  D2, D0                                                  
                asr.w   #$01, D0                                                
                move.w  D2, D1                                                  
                asr.w   #$03, D1                                                
                sub.w   D1, D0                                                  
                ext.l   D0                                                      
                asl.l   #$08, D0                                                
                divs.w  #$0030, D0                                              
                ext.l   D0                                                      
                asl.l   #$08, D0                                                
                moveq   #$00, D3                                                
                move.w  D2, D3                                                  
                asr.w   #$03, D3                                                
                move.w  #$000E, D1                                              
Offset_0x009CE6:
                move.w  D4, (A1)+                                               
                move.w  D3, (A1)+                                               
                swap.w  D3                                                      
                add.l   D0, D3                                                  
                swap.w  D3                                                      
                dbra    D1, Offset_0x009CE6                                     
                move.w  #$0008, D1                                              
Offset_0x009CF8:
                move.w  D4, (A1)+                                               
                move.w  D3, (A1)+                                               
                move.w  D4, (A1)+                                               
                move.w  D3, (A1)+                                               
                swap.w  D3                                                      
                add.l   D0, D3                                                  
                add.l   D0, D3                                                  
                swap.w  D3                                                      
                dbra    D1, Offset_0x009CF8                                     
                move.w  #$000E, D1                                              
Offset_0x009D10:
                move.w  D4, (A1)+                                               
                move.w  D3, (A1)+                                               
                move.w  D4, (A1)+                                               
                move.w  D3, (A1)+                                               
                move.w  D4, (A1)+                                               
                move.w  D3, (A1)+                                               
                swap.w  D3                                                      
                add.l   D0, D3                                                  
                add.l   D0, D3                                                  
                add.l   D0, D3                                                  
                swap.w  D3                                                      
                dbra    D1, Offset_0x009D10                                     
                rts   
;-------------------------------------------------------------------------------
Bg_Scroll_Data:                                                ; Offset_0x009D2C
                dc.b    $01, $02, $01, $03, $01, $02, $02, $01
                dc.b    $02, $03, $01, $02, $01, $02, $00, $00
                dc.b    $02, $00, $03, $02, $02, $03, $02, $02
                dc.b    $01, $03, $00, $00, $01, $00, $01, $03
                dc.b    $01, $02, $01, $03, $01, $02, $02, $01
                dc.b    $02, $03, $01, $02, $01, $02, $00, $00
                dc.b    $02, $00, $03, $02, $02, $03, $02, $02
                dc.b    $01, $03, $00, $00, $01, $00, $01, $03
                dc.b    $01, $02                  
;-------------------------------------------------------------------------------  
Bg_Scroll_GHz_Act_2:                                           ; Offset_0x009D6E 
                move.b  ($FFFFFE0F).w, D1                                       
                andi.w  #$0007, D1                                              
                bne.s   Offset_0x009D7C                                         
                subq.w  #$01, ($FFFFA800).w                                     
Offset_0x009D7C:
                move.w  (Camera_Y_x4).w, ($FFFFF618).w               ; $FFFFEE0C
                andi.l  #$FFFEFFFE, ($FFFFF616).w                               
                lea     (Scroll_Buffer_Data).w, A1                   ; $FFFFE000               
                move.w  (Camera_X).w, D0                             ; $FFFFEE00
                move.w  #$000A, D1                                              
                bsr.s   Offset_0x009DC4                                         
                moveq   #$00, D0                                                
                move.w  D0, ($FFFFF620).w                                       
                subi.w  #$00E0, ($FFFFF620).w                                   
                move.w  (Camera_Y_2).w, ($FFFFF61E).w                ; $FFFFEE24
                subi.w  #$00E0, ($FFFFF61E).w                                   
                andi.l  #$FFFEFFFE, ($FFFFF61E).w                               
                lea     ($FFFFE1B0).w, A1                                       
                move.w  (Camera_X_2).w, D0                           ; $FFFFEE20
                move.w  #$000E, D1                                              
Offset_0x009DC4:
                neg.w   D0                                                      
                move.w  D0, D2                                                  
                swap.w  D0                                                      
                move.w  #$0000, D0                                              
Offset_0x009DCE:
                move.l  D0, (A1)+                                               
                dbra    D1, Offset_0x009DCE                                     
                move.w  D2, D0                                                  
                asr.w   #$06, D0                                                
                move.w  #$001C, D1                                              
Offset_0x009DDC:
                move.l  D0, (A1)+                                               
                dbra    D1, Offset_0x009DDC                                     
                move.w  D0, D3                                                  
                move.w  ($FFFFA800).w, D1                                       
                andi.w  #$001F, D1                                              
                lea     Bg_Scroll_Data(PC), A2                 ; Offset_0x009D2C                         
                lea     $00(A2, D1), A2                                         
                move.w  #$000A, D1                                              
Offset_0x009DF8:
                move.b  (A2)+, D0                                               
                ext.w   D0                                                      
                add.w   D3, D0                                                  
                move.l  D0, (A1)+                                               
                dbra    D1, Offset_0x009DF8                                     
                move.w  #$0000, D0                                              
                move.w  #$0004, D1                                              
Offset_0x009E0C:
                move.l  D0, (A1)+                                               
                dbra    D1, Offset_0x009E0C                                     
                move.w  D2, D0                                                  
                asr.w   #$04, D0                                                
                move.w  #$0007, D1                                              
Offset_0x009E1A:
                move.l  D0, (A1)+                                               
                dbra    D1, Offset_0x009E1A                                     
                move.w  D2, D0                                                  
                asr.w   #$04, D0                                                
                move.w  D0, D1                                                  
                asr.w   #$01, D1                                                
                add.w   D1, D0                                                  
                move.w  #$0007, D1                                              
Offset_0x009E2E:
                move.l  D0, (A1)+                                               
                dbra    D1, Offset_0x009E2E                                     
                move.w  D2, D0                                                  
                asr.w   #$01, D0                                                
                move.w  D2, D1                                                  
                asr.w   #$03, D1                                                
                sub.w   D1, D0                                                  
                ext.l   D0                                                      
                asl.l   #$08, D0                                                
                divs.w  #$0030, D0                                              
                ext.l   D0                                                      
                asl.l   #$08, D0                                                
                moveq   #$00, D3                                                
                move.w  D2, D3                                                  
                asr.w   #$03, D3                                                
                move.w  #$0027, D1                                              
Offset_0x009E54:
                move.w  D2, (A1)+                                               
                move.w  D3, (A1)+                                               
                swap.w  D3                                                      
                add.l   D0, D3                                                  
                swap.w  D3                                                      
                dbra    D1, Offset_0x009E54                                     
                rts                                                                                         
;-------------------------------------------------------------------------------  
Bg_Scroll_Wz:                                                  ; Offset_0x009E64   
                move.w  (Horizontal_Scrolling).w, D4                 ; $FFFFEEB0
                ext.l   D4                                                      
                asl.l   #$05, D4                                                
                move.w  (Vertical_Scrolling).w, D5                   ; $FFFFEEB2
                ext.l   D5                                                      
                asl.l   #$06, D5                                                
                bsr     Scroll_Block_1                         ; Offset_0x00AE22                                         
                move.w  (Camera_Y_x4).w, ($FFFFF618).w               ; $FFFFEE0C
                lea     (Scroll_Buffer_Data).w, A1                   ; $FFFFE000                             
                move.w  #$00DF, D1                                              
                move.w  (Camera_X).w, D0                             ; $FFFFEE00
                neg.w   D0                                                      
                swap.w  D0                                                      
                move.w  (Camera_X_x2).w, D0                          ; $FFFFEE08
                neg.w   D0                                                      
Offset_0x009E94:
                move.l  D0, (A1)+                                               
                dbra    D1, Offset_0x009E94                                     
                rts                                                             
;-------------------------------------------------------------------------------  
Bg_Scroll_Mz:                                                  ; Offset_0x009E9C   
                move.w  (Horizontal_Scrolling).w, D4                 ; $FFFFEEB0
                ext.l   D4                                                      
                asl.l   #$05, D4                                                
                move.w  (Vertical_Scrolling).w, D5                   ; $FFFFEEB2
                ext.l   D5                                                      
                asl.l   #$06, D5                                                
                bsr     Scroll_Block_1                         ; Offset_0x00AE22
                move.w  (Camera_Y_x4).w, ($FFFFF618).w               ; $FFFFEE0C
                lea     (Scroll_Buffer_Data).w, A1                   ; $FFFFE000                       
                move.w  #$00DF, D1                                              
                move.w  (Camera_X).w, D0                             ; $FFFFEE00
                neg.w   D0                                                      
                swap.w  D0                                                      
                move.w  (Camera_X_x2).w, D0                          ; $FFFFEE08
                neg.w   D0                                                      
Offset_0x009ECC:
                move.l  D0, (A1)+                                               
                dbra    D1, Offset_0x009ECC                                     
                rts                                                             
;------------------------------------------------------------------------------- 
Bg_Scroll_SFz:                                                 ; Offset_0x009ED4    
                move.w  (Horizontal_Scrolling_Sub).w, D4             ; $FFFFEEB4
                ext.l   D4                                                      
                asl.l   #$08, D4                                                
                moveq   #$02, D6                                                
                bsr     Scroll_Block_2                         ; Offset_0x00AE8C
                move.w  (Vertical_Scrolling_Sub).w, D5               ; $FFFFEEB6
                ext.l   D5                                                      
                lsl.l   #$08, D5                                                
                moveq   #$06, D6                                                
                bsr     Scroll_Block_3                         ; Offset_0x00AEC0
                move.w  (Camera_Y_x4).w, ($FFFFF618).w               ; $FFFFEE0C
                move.l  (Camera_X_x2).w, D0                          ; $FFFFEE08
                move.l  D0, D1                                                  
                lea     ($FFFFA800).w, A2                                       
                move.l  D0, (A2)+                                               
                move.l  D1, (A2)+                                               
                addi.l  #$00008000, (A2)+                                       
                addi.l  #$00004000, (A2)+                                       
                addi.l  #$00002000, (A2)+                                       
                lea     (SFz_Scroll_Data), A3                  ; Offset_0x009F66                        
                lea     ($FFFFA800).w, A2                                       
                lea     (Scroll_Buffer_Data).w, A1                   ; $FFFFE000                            
                move.w  (Camera_Y_x4).w, D1                          ; $FFFFEE0C
                andi.w  #$07FF, D1                                              
                moveq   #$00, D0                                                
                moveq   #$00, D3                                                
Offset_0x009F30:
                move.b  (A3)+, D0                                               
                addq.w  #$01, A3                                                
                sub.w   D0, D1                                                  
                bcc.s   Offset_0x009F30                                         
                neg.w   D1                                                      
                move.w  #$00DF, D2                                              
                move.w  (Camera_X).w, D0                             ; $FFFFEE00
                neg.w   D0                                                      
                swap.w  D0                                                      
                move.b  $FFFFFFFF(A3), D3                                           
                move.w  $00(A2, D3), D0                                         
                neg.w   D0                                                      
Offset_0x009F50:
                move.l  D0, (A1)+                                               
                subq.w  #$01, D1                                                
                bne.s   Offset_0x009F60                                         
                move.b  (A3)+, D1                                               
                move.b  (A3)+, D3                                               
                move.w  $00(A2, D3), D0                                         
                neg.w   D0                                                      
Offset_0x009F60:
                dbra    D2, Offset_0x009F50                                     
                rts                                                             
;-------------------------------------------------------------------------------
SFz_Scroll_Data:                                               ; Offset_0x009F66                   
                dc.b    $C0, $00, $C0
                dc.b    $00, $80, $00
                dc.b    $20, $08, $30
                dc.b    $0C, $30, $10
                dc.b    $20, $08, $30
                dc.b    $0C, $30, $10
                dc.b    $20, $08, $30
                dc.b    $0C, $30, $10
                dc.b    $20, $08, $30
                dc.b    $0C, $30, $10
                dc.b    $20, $08, $30
                dc.b    $0C, $30, $10
                dc.b    $20, $08, $30
                dc.b    $0C, $30, $10
                dc.b    $20, $08, $30
                dc.b    $0C, $30, $10
                dc.b    $80, $04, $80
                dc.b    $04, $20, $08
                dc.b    $30, $0C, $30
                dc.b    $10, $20, $08
                dc.b    $30, $0C, $30
                dc.b    $10, $20, $08
                dc.b    $30, $0C, $30
                dc.b    $10, $C0, $00
                dc.b    $C0, $00, $80
                dc.b    $00
;-------------------------------------------------------------------------------
Bg_Scroll_HTz:                                                 ; Offset_0x009FB2    
                tst.w   (Two_Player_Flag).w                          ; $FFFFFFD8
                bne     Bg_Scroll_HTz_Act_2                    ; Offset_0x00A15E                                         
                tst.b   ($FFFFEEBC).w                                           
                bne     Offset_0x00A0E0                                         
                move.w  (Camera_Y_x4).w, ($FFFFF618).w               ; $FFFFEE0C
                lea     (Scroll_Buffer_Data).w, A1                   ; $FFFFE000                             
                move.w  (Camera_X).w, D0                             ; $FFFFEE00
                neg.w   D0                                                      
                move.w  D0, D2                                                  
                swap.w  D0                                                      
                move.w  D2, D0                                                  
                asr.w   #$03, D0                                                
                move.w  #$007F, D1                                              
Offset_0x009FDE:
                move.l  D0, (A1)+                                               
                dbra    D1, Offset_0x009FDE                                     
                move.l  D0, D4                                                  
                move.w  ($FFFFA822).w, D0                                       
                addq.w  #$04, ($FFFFA822).w                                     
                sub.w   D0, D2                                                  
                move.w  D2, D0                                                  
                move.w  D0, D1                                                  
                asr.w   #$01, D0                                                
                asr.w   #$04, D1                                                
                sub.w   D1, D0                                                  
                ext.l   D0                                                      
                asl.l   #$08, D0                                                
                divs.w  #$0070, D0                                              
                ext.l   D0                                                      
                asl.l   #$08, D0                                                
                lea     ($FFFFA800).w, A2                                       
                moveq   #$00, D3                                                
                move.w  D1, D3                                                  
                swap.w  D3                                                      
                add.l   D0, D3                                                  
                swap.w  D3                                                      
                move.w  D3, (A2)+                                               
                swap.w  D3                                                      
                add.l   D0, D3                                                  
                swap.w  D3                                                      
                move.w  D3, (A2)+                                               
                swap.w  D3                                                      
                add.l   D0, D3                                                  
                swap.w  D3                                                      
                move.w  D3, (A2)+                                               
                move.w  D3, (A2)+                                               
                swap.w  D3                                                      
                add.l   D0, D3                                                  
                add.l   D0, D3                                                  
                swap.w  D3                                                      
                moveq   #$03, D1                                                
Offset_0x00A032:
                move.w  D3, (A2)+                                               
                move.w  D3, (A2)+                                               
                move.w  D3, (A2)+                                               
                swap.w  D3                                                      
                add.l   D0, D3                                                  
                add.l   D0, D3                                                  
                add.l   D0, D3                                                  
                swap.w  D3                                                      
                dbra    D1, Offset_0x00A032                                     
                add.l   D0, D0                                                  
                add.l   D0, D0                                                  
                move.w  D3, D4                                                  
                move.l  D4, (A1)+                                               
                move.l  D4, (A1)+                                               
                move.l  D4, (A1)+                                               
                swap.w  D3                                                      
                add.l   D0, D3                                                  
                swap.w  D3                                                      
                move.w  D3, D4                                                  
                move.l  D4, (A1)+                                               
                move.l  D4, (A1)+                                               
                move.l  D4, (A1)+                                               
                move.l  D4, (A1)+                                               
                move.l  D4, (A1)+                                               
                swap.w  D3                                                      
                add.l   D0, D3                                                  
                swap.w  D3                                                      
                move.w  D3, D4                                                  
                move.w  #$0006, D1                                              
Offset_0x00A070:
                move.l  D4, (A1)+                                               
                dbra    D1, Offset_0x00A070                                     
                swap.w  D3                                                      
                add.l   D0, D3                                                  
                add.l   D0, D3                                                  
                swap.w  D3                                                      
                move.w  D3, D4                                                  
                move.w  #$0007, D1                                              
Offset_0x00A084:
                move.l  D4, (A1)+                                               
                dbra    D1, Offset_0x00A084                                     
                swap.w  D3                                                      
                add.l   D0, D3                                                  
                add.l   D0, D3                                                  
                swap.w  D3                                                      
                move.w  D3, D4                                                  
                move.w  #$0009, D1                                              
Offset_0x00A098:
                move.l  D4, (A1)+                                               
                dbra    D1, Offset_0x00A098                                     
                swap.w  D3                                                      
                add.l   D0, D3                                                  
                add.l   D0, D3                                                  
                add.l   D0, D3                                                  
                swap.w  D3                                                      
                move.w  D3, D4                                                  
                move.w  #$000E, D1                                              
Offset_0x00A0AE:
                move.l  D4, (A1)+                                               
                dbra    D1, Offset_0x00A0AE                                     
                swap.w  D3                                                      
                add.l   D0, D3                                                  
                add.l   D0, D3                                                  
                add.l   D0, D3                                                  
                swap.w  D3                                                      
                move.w  #$0002, D2                                              
Offset_0x00A0C2:
                move.w  D3, D4                                                  
                move.w  #$000F, D1                                              
Offset_0x00A0C8:
                move.l  D4, (A1)+                                               
                dbra    D1, Offset_0x00A0C8                                     
                swap.w  D3                                                      
                add.l   D0, D3                                                  
                add.l   D0, D3                                                  
                add.l   D0, D3                                                  
                add.l   D0, D3                                                  
                swap.w  D3                                                      
                dbra    D2, Offset_0x00A0C2                                     
                rts                                                             
Offset_0x00A0E0:
                move.w  (Horizontal_Scrolling_Sub).w, D4             ; $FFFFEEB4
                ext.l   D4                                                      
                lsl.l   #$08, D4                                                
                moveq   #$02, D6                                                
                bsr     Scroll_Block_2                         ; Offset_0x00AE8C
                move.w  (Vertical_Scrolling_Sub).w, D5               ; $FFFFEEB6
                ext.l   D5                                                      
                lsl.l   #$08, D5                                                
                moveq   #$00, D6                                                
                bsr     Scroll_Block_3                         ; Offset_0x00AEC0
                move.w  (Camera_Y_x4).w, ($FFFFF618).w               ; $FFFFEE0C
                move.w  (Camera_Y).w, ($FFFFF616).w                  ; $FFFFEE04
                move.w  (Camera_Y_x4).w, ($FFFFF618).w               ; $FFFFEE0C
                moveq   #$00, D2                                                
                tst.b   ($FFFFEEBD).w                                           
                beq.s   Offset_0x00A13C                                         
                move.w  ($FFFFFE04).w, D0                                       
                andi.w  #$003F, D0                                              
                lea     Bg_Scroll_Data(PC), A1                 ; Offset_0x009D2C                          
                lea     $00(A1, D0), A1                                         
                moveq   #$00, D0                                                
                move.b  (A1)+, D0                                               
                add.w   D0, ($FFFFF616).w                                       
                add.w   D0, ($FFFFF618).w                                       
                add.w   D0, ($FFFFEEF4).w                                       
                move.b  (A1)+, D2                                               
                add.w   D2, ($FFFFEEF0).w                                       
Offset_0x00A13C:
                lea     (Scroll_Buffer_Data).w, A1                   ; $FFFFE000                        
                move.w  #$00DF, D1                                              
                move.w  (Camera_X).w, D0                             ; $FFFFEE00
                add.w   D2, D0                                                  
                neg.w   D0                                                      
                swap.w  D0                                                      
                move.w  (Camera_X_x2).w, D0                          ; $FFFFEE08
                add.w   D2, D0                                                  
                neg.w   D0                                                      
Offset_0x00A156:
                move.l  D0, (A1)+                                               
                dbra    D1, Offset_0x00A156                                     
                rts                                                             
;-------------------------------------------------------------------------------                
Bg_Scroll_HTz_Act_2                                            ; Offset_0x00A15E
                move.w  (Horizontal_Scrolling).w, D4                 ; $FFFFEEB0
                ext.l   D4                                                      
                asl.l   #$06, D4                                                
                move.w  (Vertical_Scrolling).w, D5                   ; $FFFFEEB2
                ext.l   D5                                                      
                asl.l   #$02, D5                                                
                moveq   #$00, D5                                                
                bsr     Scroll_Block_1                         ; Offset_0x00AE22
                move.b  #$00, (Scroll_Flag_Array+$0002).w            ; $FFFFEE52
                move.w  (Camera_Y_x4).w, ($FFFFF618).w               ; $FFFFEE0C
                andi.l  #$FFFEFFFE, ($FFFFF616).w                               
                lea     (Scroll_Buffer_Data).w, A1                   ; $FFFFE000                                 
                move.w  #$006F, D1                                              
                move.w  (Camera_X).w, D0                             ; $FFFFEE00
                neg.w   D0                                                      
                swap.w  D0                                                      
                move.w  (Camera_X_x2).w, D0                          ; $FFFFEE08
                neg.w   D0                                                      
Offset_0x00A19E:
                move.l  D0, (A1)+                                               
                dbra    D1, Offset_0x00A19E                                     
                move.w  ($FFFFEEB8).w, D4                                       
                ext.l   D4                                                      
                asl.l   #$06, D4                                                
                add.l   D4, ($FFFFEE28).w                                       
                moveq   #$00, D0                                                
                move.w  D0, ($FFFFF620).w                                       
                subi.w  #$00E0, ($FFFFF620).w                                   
                move.w  (Camera_Y_2).w, ($FFFFF61E).w                ; $FFFFEE24
                subi.w  #$00E0, ($FFFFF61E).w                                   
                andi.l  #$FFFEFFFE, ($FFFFF61E).w                               
                lea     ($FFFFE1B0).w, A1                                       
                move.w  #$0073, D1                                              
                move.w  (Camera_X_2).w, D0                           ; $FFFFEE20
                neg.w   D0                                                      
                swap.w  D0                                                      
                move.w  ($FFFFEE28).w, D0                                       
                neg.w   D0                                                      
Offset_0x00A1E6:
                move.l  D0, (A1)+                                               
                dbra    D1, Offset_0x00A1E6                                     
                rts                                                             
;-------------------------------------------------------------------------------
Bg_Scroll_HPz:                                                 ; Offset_0x00A1EE    
                move.w  (Horizontal_Scrolling).w, D4                 ; $FFFFEEB0
                ext.l   D4                                                      
                asl.l   #$06, D4                                                
                moveq   #$02, D6                                                
                bsr     Scroll_Block_2                         ; Offset_0x00AE8C
                move.w  (Vertical_Scrolling).w, D5                   ; $FFFFEEB2
                ext.l   D5                                                      
                asl.l   #$07, D5                                                
                moveq   #$06, D6                                                
                bsr     Scroll_Block_3                         ; Offset_0x00AEC0
                move.w  (Camera_Y_x4).w, ($FFFFF618).w               ; $FFFFEE0C
                lea     ($FFFFA800).w, A1                                       
                move.w  (Camera_X).w, D2                             ; $FFFFEE00
                neg.w   D2                                                      
                move.w  D2, D0                                                  
                asr.w   #$01, D0                                                
                move.w  #$0007, D1                                              
Offset_0x00A222:
                move.w  D0, (A1)+                                               
                dbra    D1, Offset_0x00A222                                     
                move.w  D2, D0                                                  
                asr.w   #$03, D0                                                
                sub.w   D2, D0                                                  
                ext.l   D0                                                      
                asl.l   #$03, D0                                                
                divs.w  #$0008, D0                                              
                ext.l   D0                                                      
                asl.l   #$04, D0                                                
                asl.l   #$08, D0                                                
                moveq   #$00, D3                                                
                move.w  D2, D3                                                  
                asr.w   #$01, D3                                                
                lea     ($FFFFA860).w, A2                                       
                swap.w  D3                                                      
                add.l   D0, D3                                                  
                swap.w  D3                                                      
                move.w  D3, (A1)+                                               
                move.w  D3, (A1)+                                               
                move.w  D3, (A1)+                                               
                move.w  D3, -(A2)                                               
                move.w  D3, -(A2)                                               
                move.w  D3, -(A2)                                               
                swap.w  D3                                                      
                add.l   D0, D3                                                  
                swap.w  D3                                                      
                move.w  D3, (A1)+                                               
                move.w  D3, (A1)+                                               
                move.w  D3, -(A2)                                               
                move.w  D3, -(A2)                                               
                swap.w  D3                                                      
                add.l   D0, D3                                                  
                swap.w  D3                                                      
                move.w  D3, (A1)+                                               
                move.w  D3, -(A2)                                               
                swap.w  D3                                                      
                add.l   D0, D3                                                  
                swap.w  D3                                                      
                move.w  D3, (A1)+                                               
                move.w  D3, -(A2)                                               
                move.w  (Camera_X_x2).w, D0                          ; $FFFFEE08
                neg.w   D0                                                      
                move.w  #$0019, D1                                              
Offset_0x00A284:
                move.w  D0, (A1)+                                               
                dbra    D1, Offset_0x00A284                                     
                adda.w  #$000E, A1                                              
                move.w  D2, D0                                                  
                asr.w   #$01, D0                                                
                move.w  #$0017, D1                                              
Offset_0x00A296:
                move.w  D0, (A1)+                                               
                dbra    D1, Offset_0x00A296                                     
                lea     ($FFFFA800).w, A2                                       
                move.w  (Camera_Y_x4).w, D0                          ; $FFFFEE0C
                move.w  D0, D2                                                  
                andi.w  #$03F0, D0                                              
                lsr.w   #$03, D0                                                
                lea     $00(A2, D0), A2                                         
                bra     Bg_Scroll_X                            ; Offset_0x00AC26                                         
;-------------------------------------------------------------------------------  
Bg_Scroll_OOz:                                                 ; Offset_0x00A2B4  
                move.w  (Horizontal_Scrolling).w, D4                 ; $FFFFEEB0
                ext.l   D4                                                      
                asl.l   #$05, D4                                                
                move.w  (Vertical_Scrolling).w, D5                   ; $FFFFEEB2
                ext.l   D5                                                      
                asl.l   #$05, D5                                                
                bsr     Scroll_Block_1                         ; Offset_0x00AE22
                move.w  (Camera_Y_x4).w, ($FFFFF618).w               ; $FFFFEE0C
                lea     (Scroll_Buffer_Data).w, A1                   ; $FFFFE000
                move.w  #$00DF, D1                                              
                move.w  (Camera_X).w, D0                             ; $FFFFEE00
                neg.w   D0                                                      
                swap.w  D0                                                      
                move.w  (Camera_X_x2).w, D0                          ; $FFFFEE08
                neg.w   D0                                                      
Offset_0x00A2E4:
                move.l  D0, (A1)+                                               
                dbra    D1, Offset_0x00A2E4                                     
                rts                                                             
;-------------------------------------------------------------------------------
Bg_Scroll_DHz:                                                 ; Offset_0x00A2EC   
                tst.w   (Two_Player_Flag).w                          ; $FFFFFFD8
                bne     Bg_Scroll_DHz_2P                       ; Offset_0x00A444                                         
                move.w  (Camera_Y).w, D0                             ; $FFFFEE04
                move.l  (Camera_Y_x4).w, D3                          ; $FFFFEE0C
                tst.b   (Act_Id).w                                   ; $FFFFFE11
                bne.s   Bg_Scroll_DHz_Act_2                    ; Offset_0x00A30C                                         
                divu.w  #$0003, D0                                              
                subi.w  #$0140, D0                                              
                bra.s   Bg_Scroll_DHz_1                        ; Offset_0x00A314  
;-------------------------------------------------------------------------------                                                       
Bg_Scroll_DHz_Act_2:                                           ; Offset_0x00A30C
                divu.w  #$0006, D0                                              
                subi.w  #$0010, D0                                              
Bg_Scroll_DHz_1:                                               ; Offset_0x00A314
                swap.w  D0                                                      
                moveq   #$06, D6                                                
                bsr     Scroll_Block_3_D0                      ; Offset_0x00AEC8                                         
                move.w  (Camera_Y_x4).w, ($FFFFF618).w               ; $FFFFEE0C
                moveq   #$00, D2                                                
                tst.b   ($FFFFEEBD).w                                           
                beq.s   Offset_0x00A350                                         
                move.w  ($FFFFFE04).w, D0                                       
                andi.w  #$003F, D0                                              
                lea     Bg_Scroll_Data(PC), A1                 ; Offset_0x009D2C                         
                lea     $00(A1, D0), A1                                         
                moveq   #$00, D0                                                
                move.b  (A1)+, D0                                               
                add.w   D0, ($FFFFF616).w                                       
                add.w   D0, ($FFFFF618).w                                       
                add.w   D0, ($FFFFEEF4).w                                       
                move.b  (A1)+, D2                                               
                add.w   D2, ($FFFFEEF0).w                                       
Offset_0x00A350:
                lea     ($FFFFA800).w, A2                                       
                lea     $001E(A2), A3                                           
                move.w  (Camera_X).w, D0                             ; $FFFFEE00
                ext.l   D0                                                      
                asl.l   #$04, D0                                                
                divs.w  #$000A, D0                                              
                ext.l   D0                                                      
                asl.l   #$04, D0                                                
                asl.l   #$08, D0                                                
                move.l  D0, D1                                                  
                swap.w  D1                                                      
                move.w  D1, (A3)+                                               
                move.w  D1, $000E(A2)                                           
                swap.w  D1                                                      
                add.l   D0, D1                                                  
                swap.w  D1                                                      
                move.w  D1, (A3)+                                               
                move.w  D1, $000C(A2)                                           
                swap.w  D1                                                      
                add.l   D0, D1                                                  
                swap.w  D1                                                      
                move.w  D1, (A3)+                                               
                move.w  D1, $000A(A2)                                           
                swap.w  D1                                                      
                add.l   D0, D1                                                  
                swap.w  D1                                                      
                move.w  D1, (A3)+                                               
                move.w  D1, $0008(A2)                                           
                swap.w  D1                                                      
                add.l   D0, D1                                                  
                swap.w  D1                                                      
                move.w  D1, (A3)+                                               
                move.w  D1, $0006(A2)                                           
                move.w  D1, $0010(A2)                                           
                move.w  D1, $001C(A2)                                           
                swap.w  D1                                                      
                add.l   D0, D1                                                  
                swap.w  D1                                                      
                move.w  D1, (A3)+                                               
                swap.w  D1                                                      
                add.l   D0, D1                                                  
                swap.w  D1                                                      
                move.w  D1, (A3)+                                               
                move.w  D1, $0004(A2)                                           
                move.w  D1, $0012(A2)                                           
                move.w  D1, $001A(A2)                                           
                swap.w  D1                                                      
                add.l   D0, D1                                                  
                swap.w  D1                                                      
                move.w  D1, (A3)+                                               
                move.w  D1, $0002(A2)                                           
                move.w  D1, $0014(A2)                                           
                move.w  D1, $0018(A2)                                           
                swap.w  D1                                                      
                add.l   D0, D1                                                  
                swap.w  D1                                                      
                move.w  D1, (A3)+                                               
                move.w  D1, (A2)                                                
                move.w  D1, $0016(A2)                                           
                lea     (DHz_Bg_Scroll_Data), A3               ; Offset_0x00A42C                            
                lea     ($FFFFA800).w, A2                                       
                lea     (Scroll_Buffer_Data).w, A1                   ; $FFFFE000
                move.w  (Camera_Y_x4).w, D1                          ; $FFFFEE0C
                moveq   #$00, D0                                                
Offset_0x00A3FE:
                move.b  (A3)+, D0                                               
                addq.w  #$02, A2                                                
                sub.w   D0, D1                                                  
                bcc.s   Offset_0x00A3FE                                         
                neg.w   D1                                                      
                subq.w  #$02, A2                                                
                move.w  #$00DF, D2                                              
                move.w  (Camera_X).w, D0                             ; $FFFFEE00
                neg.w   D0                                                      
                swap.w  D0                                                      
                move.w  (A2)+, D0                                               
                neg.w   D0                                                      
Offset_0x00A41A:
                move.l  D0, (A1)+                                               
                subq.w  #$01, D1                                                
                bne.s   Offset_0x00A426                                         
                move.b  (A3)+, D1                                               
                move.w  (A2)+, D0                                               
                neg.w   D0                                                      
Offset_0x00A426:
                dbra    D2, Offset_0x00A41A                                     
                rts   
;------------------------------------------------------------------------------- 
DHz_Bg_Scroll_Data:                                            ; Offset_0x00A42C
                dc.b    $25, $17
                dc.b    $12, $07
                dc.b    $07, $02
                dc.b    $02, $30
                dc.b    $0D, $13
                dc.b    $20, $40
                dc.b    $20, $13
                dc.b    $0D, $30
                dc.b    $02, $02
                dc.b    $07, $07
                dc.b    $20, $12
                dc.b    $17, $25                                                                          
;-------------------------------------------------------------------------------
Bg_Scroll_DHz_2P:                                              ; Offset_0x00A444
                moveq   #$00, D0                                                
                move.w  (Camera_Y).w, D0                             ; $FFFFEE04
                tst.b   (Act_Id).w                                   ; $FFFFFE11
                bne.s   Bg_Scroll_DHz_2P_Act_2                 ; Offset_0x00A45A                                         
                divu.w  #$0003, D0                                              
                subi.w  #$0140, D0                                              
                bra.s   Bg_Scroll_DHz_2P_1                     ; Offset_0x00A462                                         
Bg_Scroll_DHz_2P_Act_2:                                        ; Offset_0x00A45A
                divu.w  #$0006, D0                                              
                subi.w  #$0010, D0                                              
Bg_Scroll_DHz_2P_1:                                            ; Offset_0x00A462
                move.w  D0, (Camera_Y_x4).w                          ; $FFFFEE0C
                move.w  D0, ($FFFFF618).w                                       
                andi.l  #$FFFEFFFE, ($FFFFF616).w                               
                lea     ($FFFFA800).w, A2                                       
                lea     $001E(A2), A3                                           
                move.w  (Camera_X).w, D0                             ; $FFFFEE00
                ext.l   D0                                                      
                asl.l   #$04, D0                                                
                divs.w  #$000A, D0                                              
                ext.l   D0                                                      
                asl.l   #$04, D0                                                
                asl.l   #$08, D0                                                
                move.l  D0, D1                                                  
                swap.w  D1                                                      
                move.w  D1, (A3)+                                               
                move.w  D1, $000E(A2)                                           
                swap.w  D1                                                      
                add.l   D0, D1                                                  
                swap.w  D1                                                      
                move.w  D1, (A3)+                                               
                move.w  D1, $000C(A2)                                           
                swap.w  D1                                                      
                add.l   D0, D1                                                  
                swap.w  D1                                                      
                move.w  D1, (A3)+                                               
                move.w  D1, $000A(A2)                                           
                swap.w  D1                                                      
                add.l   D0, D1                                                  
                swap.w  D1                                                      
                move.w  D1, (A3)+                                               
                move.w  D1, $0008(A2)                                           
                swap.w  D1                                                      
                add.l   D0, D1                                                  
                swap.w  D1                                                      
                move.w  D1, (A3)+                                               
                move.w  D1, $0006(A2)                                           
                move.w  D1, $0010(A2)                                           
                move.w  D1, $001C(A2)                                           
                swap.w  D1                                                      
                add.l   D0, D1                                                  
                swap.w  D1                                                      
                move.w  D1, (A3)+                                               
                swap.w  D1                                                      
                add.l   D0, D1                                                  
                swap.w  D1                                                      
                move.w  D1, (A3)+                                               
                move.w  D1, $0004(A2)                                           
                move.w  D1, $0012(A2)                                           
                move.w  D1, $001A(A2)                                           
                swap.w  D1                                                      
                add.l   D0, D1                                                  
                swap.w  D1                                                      
                move.w  D1, (A3)+                                               
                move.w  D1, $0002(A2)                                           
                move.w  D1, $0014(A2)                                           
                move.w  D1, $0018(A2)                                           
                swap.w  D1                                                      
                add.l   D0, D1                                                  
                swap.w  D1                                                      
                move.w  D1, (A3)+                                               
                move.w  D1, (A2)                                                
                move.w  D1, $0016(A2)                                           
                lea     (DHz_Bg_Scroll_Data_2P), A3            ; Offset_0x00A550                         
                lea     ($FFFFA800).w, A2                                       
                lea     (Scroll_Buffer_Data).w, A1                   ; $FFFFE000
                move.w  (Camera_Y_x4).w, D1                          ; $FFFFEE0C
                lsr.w   #$01, D1                                                
                moveq   #$00, D0                                                
Offset_0x00A522:
                move.b  (A3)+, D0                                               
                addq.w  #$02, A2                                                
                sub.w   D0, D1                                                  
                bcc.s   Offset_0x00A522                                         
                neg.w   D1                                                      
                subq.w  #$02, A2                                                
                move.w  #$006F, D2                                              
                move.w  (Camera_X).w, D0                             ; $FFFFEE00
                neg.w   D0                                                      
                swap.w  D0                                                      
                move.w  (A2)+, D0                                               
                neg.w   D0                                                      
Offset_0x00A53E:
                move.l  D0, (A1)+                                               
                subq.w  #$01, D1                                                
                bne.s   Offset_0x00A54A                                         
                move.b  (A3)+, D1                                               
                move.w  (A2)+, D0                                               
                neg.w   D0                                                      
Offset_0x00A54A:
                dbra    D2, Offset_0x00A53E                                     
                bra.s   Offset_0x00A568  
;-------------------------------------------------------------------------------  
DHz_Bg_Scroll_Data_2P:                                         ; Offset_0x00A550
                dc.b    $13, $0B, $09, $04, $03, $01, $01, $18
                dc.b    $06, $0A, $10, $20, $10, $0A, $06, $18
                dc.b    $01, $01, $03, $04, $10, $09, $0B, $13
;-------------------------------------------------------------------------------    
Offset_0x00A568:
                moveq   #$00, D0                                                
                move.w  (Camera_Y_2).w, D0                           ; $FFFFEE24
                tst.b   (Act_Id).w                                   ; $FFFFFE11
                bne.s   Offset_0x00A57E                                         
                divu.w  #$0003, D0                                              
                subi.w  #$0140, D0                                              
                bra.s   Offset_0x00A586                                         
Offset_0x00A57E:
                divu.w  #$0006, D0                                              
                subi.w  #$0010, D0                                              
Offset_0x00A586:
                move.w  D0, ($FFFFEE2C).w                                       
                move.w  D0, ($FFFFF620).w                                       
                subi.w  #$00E0, ($FFFFF620).w                                   
                move.w  (Camera_Y_2).w, ($FFFFF61E).w                ; $FFFFEE24
                subi.w  #$00E0, ($FFFFF61E).w                                   
                andi.l  #$FFFEFFFE, ($FFFFF61E).w                               
                lea     ($FFFFA800).w, A2                                       
                lea     $001E(A2), A3                                           
                move.w  (Camera_X_2).w, D0                           ; $FFFFEE20
                ext.l   D0                                                      
                asl.l   #$04, D0                                                
                divs.w  #$000A, D0                                              
                ext.l   D0                                                      
                asl.l   #$04, D0                                                
                asl.l   #$08, D0                                                
                move.l  D0, D1                                                  
                swap.w  D1                                                      
                move.w  D1, (A3)+                                               
                move.w  D1, $000E(A2)                                           
                swap.w  D1                                                      
                add.l   D0, D1                                                  
                swap.w  D1                                                      
                move.w  D1, (A3)+                                               
                move.w  D1, $000C(A2)                                           
                swap.w  D1                                                      
                add.l   D0, D1                                                  
                swap.w  D1                                                      
                move.w  D1, (A3)+                                               
                move.w  D1, $000A(A2)                                           
                swap.w  D1                                                      
                add.l   D0, D1                                                  
                swap.w  D1                                                      
                move.w  D1, (A3)+                                               
                move.w  D1, $0008(A2)                                           
                swap.w  D1                                                      
                add.l   D0, D1                                                  
                swap.w  D1                                                      
                move.w  D1, (A3)+                                               
                move.w  D1, $0006(A2)                                           
                move.w  D1, $0010(A2)                                           
                move.w  D1, $001C(A2)                                           
                swap.w  D1                                                      
                add.l   D0, D1                                                  
                swap.w  D1                                                      
                move.w  D1, (A3)+                                               
                swap.w  D1                                                      
                add.l   D0, D1                                                  
                swap.w  D1                                                      
                move.w  D1, (A3)+                                               
                move.w  D1, $0004(A2)                                           
                move.w  D1, $0012(A2)                                           
                move.w  D1, $001A(A2)                                           
                swap.w  D1                                                      
                add.l   D0, D1                                                  
                swap.w  D1                                                      
                move.w  D1, (A3)+                                               
                move.w  D1, $0002(A2)                                           
                move.w  D1, $0014(A2)                                           
                move.w  D1, $0018(A2)                                           
                swap.w  D1                                                      
                add.l   D0, D1                                                  
                swap.w  D1                                                      
                move.w  D1, (A3)+                                               
                move.w  D1, (A2)                                                
                move.w  D1, $0016(A2)                                           
                lea     DHz_Bg_Scroll_Data_2P+$0001(PC), A3    ; Offset_0x00A551                          
                lea     ($FFFFA800).w, A2                                       
                lea     ($FFFFE1B0).w, A1                                       
                move.w  ($FFFFEE2C).w, D1                                       
                lsr.w   #$01, D1                                                
                moveq   #$17, D0                                                
                bra.s   Offset_0x00A65A  
Offset_0x00A658:
                move.b  (A3)+, D0                                               
Offset_0x00A65A:
                addq.w  #$02, A2                                                
Offset_0x00A65C:
                sub.w   D0, D1                                                  
                bcc.s   Offset_0x00A658                                         
                neg.w   D1                                                      
                subq.w  #$02, A2                                                
                move.w  #$0073, D2                                              
                move.w  (Camera_X_2).w, D0                           ; $FFFFEE20
                neg.w   D0                                                      
                swap.w  D0                                                      
                move.w  (A2)+, D0                                               
                neg.w   D0                                                      
Offset_0x00A674:
                move.l  D0, (A1)+                                               
                subq.w  #$01, D1                                                
                bne.s   Offset_0x00A680                                         
                move.b  (A3)+, D1                                               
                move.w  (A2)+, D0                                               
                neg.w   D0                                                      
Offset_0x00A680:
                dbra    D2, Offset_0x00A674                                     
                rts                                                                                                                                                     
;-------------------------------------------------------------------------------
Bg_Scroll_CNz:                                                 ; Offset_0x00A686  
                tst.w   (Two_Player_Flag).w                          ; $FFFFFFD8
                bne     Bg_Scroll_CNz_2P                       ; Offset_0x00A754                                         
                move.w  (Camera_Y).w, D0                             ; $FFFFEE04
                lsr.w   #$06, D0                                                
                move.w  D0, (Camera_Y_x4).w                          ; $FFFFEE0C
                move.w  (Camera_Y_x4).w, ($FFFFF618).w               ; $FFFFEE0C
                move.w  (Camera_X).w, D2                             ; $FFFFEE00
                bsr     Offset_0x00A720                                         
                lea     (CNz_Bg_Scroll_Data), A3               ; Offset_0x00A716                         
                lea     ($FFFFA800).w, A2                                       
                lea     (Scroll_Buffer_Data).w, A1                   ; $FFFFE000
                move.w  (Camera_Y_x4).w, D1                          ; $FFFFEE0C
                moveq   #$00, D0                                                
Offset_0x00A6BA:
                move.b  (A3)+, D0                                               
                addq.w  #$02, A2                                                
                sub.w   D0, D1                                                  
                bcc.s   Offset_0x00A6BA                                         
                neg.w   D1                                                      
                subq.w  #$02, A2                                                
                move.w  #$00DF, D2                                              
                move.w  (Camera_X).w, D0                             ; $FFFFEE00
                neg.w   D0                                                      
                swap.w  D0                                                      
                move.w  (A2)+, D0                                               
                neg.w   D0                                                      
Offset_0x00A6D6:
                move.l  D0, (A1)+                                               
                subq.w  #$01, D1                                                
                bne.s   Offset_0x00A6E4                                         
Offset_0x00A6DC:
                move.w  (A2)+, D0                                               
                neg.w   D0                                                      
                move.b  (A3)+, D1                                               
                beq.s   Offset_0x00A6EA                                         
Offset_0x00A6E4:
                dbra    D2, Offset_0x00A6D6                                     
                rts                                                             
Offset_0x00A6EA:
                move.w  #$000F, D1                                              
                move.w  D0, D3                                                  
                move.b  ($FFFFFE0F).w, D0                                       
                lsr.w   #$03, D0                                                
                neg.w   D0                                                      
                andi.w  #$001F, D0                                              
                lea     Bg_Scroll_Data(PC), A4                 ; Offset_0x009D2C                        
                lea     $00(A4, D0), A4                                         
Offset_0x00A704:
                move.b  (A4)+, D0                                               
                ext.w   D0                                                      
                add.w   D3, D0                                                  
                move.l  D0, (A1)+                                               
                dbra    D1, Offset_0x00A704                                     
                subi.w  #$0010, D2                                              
                bra.s   Offset_0x00A6DC    
;-------------------------------------------------------------------------------    
CNz_Bg_Scroll_Data:                                            ; Offset_0x00A716
                dc.b    $10, $10, $10, $10, $10, $10, $10, $10, $00, $F0
;-------------------------------------------------------------------------------  
Offset_0x00A720:
                lea     ($FFFFA800).w, A1                                       
                move.w  D2, D0                                                  
                asr.w   #$03, D0                                                
                sub.w   D2, D0                                                  
                ext.l   D0                                                      
                asl.l   #$05, D0                                                
                asl.l   #$08, D0                                                
                moveq   #$00, D3                                                
                move.w  D2, D3                                                  
                move.w  #$0006, D1                                              
Offset_0x00A738:
                move.w  D3, (A1)+                                               
                swap.w  D3                                                      
                add.l   D0, D3                                                  
                swap.w  D3                                                      
                dbra    D1, Offset_0x00A738                                     
                move.w  D2, D0                                                  
                asr.w   #$03, D0                                                
                move.w  D0, $0004(A1)                                           
                asr.w   #$01, D0                                                
                move.w  D0, (A1)+                                               
                move.w  D0, (A1)+                                               
                rts                                                             
;-------------------------------------------------------------------------------
Bg_Scroll_CNz_2P:                                              ; Offset_0x00A754
                move.w  (Camera_Y).w, D0                             ; $FFFFEE04
                lsr.w   #$06, D0                                                
                move.w  D0, (Camera_Y_x4).w                          ; $FFFFEE0C
                move.w  (Camera_Y_x4).w, ($FFFFF618).w               ; $FFFFEE0C
                andi.l  #$FFFEFFFE, ($FFFFF616).w                               
                move.w  (Camera_X).w, D2                             ; $FFFFEE00
                bsr     Offset_0x00A720                                         
                lea     (Scroll_Buffer_Data).w, A1                   ; $FFFFE000
                move.w  (Camera_Y_x4).w, D1                          ; $FFFFEE0C
                moveq   #$00, D0                                                
                move.w  (Camera_X).w, D0                             ; $FFFFEE00
                move.w  #$006F, D2                                              
                lea     (CNz_Bg_Scroll_Data_2P+$0002), A3      ; Offset_0x00A832                              
                bsr.s   Offset_0x00A7D6                                         
                move.w  (Camera_Y_2).w, D0                           ; $FFFFEE24
                lsr.w   #$06, D0                                                
                move.w  D0, ($FFFFEE2C).w                                       
                move.w  D0, ($FFFFF620).w                                       
                subi.w  #$00E0, ($FFFFF620).w                                   
                move.w  (Camera_Y_2).w, ($FFFFF61E).w                ; $FFFFEE24
                subi.w  #$00E0, ($FFFFF61E).w                                   
                andi.l  #$FFFEFFFE, ($FFFFF61E).w                               
                move.w  (Camera_X_2).w, D2                           ; $FFFFEE20
                bsr     Offset_0x00A720                                         
                lea     ($FFFFE1B0).w, A1                                       
                move.w  ($FFFFEE2C).w, D1                                       
                moveq   #$00, D0                                                
                move.w  (Camera_X_2).w, D0                           ; $FFFFEE20
                move.w  #$0073, D2                                              
                lea     (CNz_Bg_Scroll_Data_2P+$0001), A3      ; Offset_0x00A831                             
Offset_0x00A7D6:
                lsr.w   #$01, D1                                                
                lea     ($FFFFA800).w, A2                                       
                moveq   #$00, D3                                                
Offset_0x00A7DE:
                move.b  (A3)+, D3                                               
                addq.w  #$02, A2                                                
                sub.w   D3, D1                                                  
                bcc.s   Offset_0x00A7DE                                         
                neg.w   D1                                                      
                subq.w  #$02, A2                                                
                neg.w   D0                                                      
                swap.w  D0                                                      
                move.w  (A2)+, D0                                               
                neg.w   D0                                                      
Offset_0x00A7F2:
                move.l  D0, (A1)+                                               
                subq.w  #$01, D1                                                
                bne.s   Offset_0x00A800                                         
Offset_0x00A7F8:
                move.w  (A2)+, D0                                               
                neg.w   D0                                                      
                move.b  (A3)+, D1                                               
                beq.s   Offset_0x00A806                                         
Offset_0x00A800:
                dbra    D2, Offset_0x00A7F2                                     
                rts                                                             
Offset_0x00A806:
                move.w  #$0007, D1                                              
                move.w  D0, D3                                                  
                move.b  ($FFFFFE0F).w, D0                                       
                lsr.w   #$03, D0                                                
                neg.w   D0                                                      
                andi.w  #$001F, D0                                              
                lea     Bg_Scroll_Data(PC), A4                 ; Offset_0x009D2C                            
                lea     $00(A4, D0), A4                                         
Offset_0x00A820:
                move.b  (A4)+, D0                                               
                ext.w   D0                                                      
                add.w   D3, D0                                                  
                move.l  D0, (A1)+                                               
                dbra    D1, Offset_0x00A820                                     
                subq.w  #$08, D2                                                
                bra.s   Offset_0x00A7F8   
;-------------------------------------------------------------------------------                  
CNz_Bg_Scroll_Data_2P:                                         ; Offset_0x00A830
                dc.b    $04, $04, $08, $08, $08, $08, $08, $08, $08, $08, $00, $78                                                                       
;-------------------------------------------------------------------------------
Bg_Scroll_CPz:                                                 ; Offset_0x00A83C 
                move.w  (Horizontal_Scrolling).w, D4                 ; $FFFFEEB0
                ext.l   D4                                                      
                asl.l   #$05, D4                                                
                move.w  (Vertical_Scrolling).w, D5                   ; $FFFFEEB2
                ext.l   D5                                                      
                asl.l   #$06, D5                                                
                bsr     Scroll_Block_1                         ; Offset_0x00AE22
                move.w  (Horizontal_Scrolling).w, D4                 ; $FFFFEEB0
                ext.l   D4                                                      
                asl.l   #$07, D4                                                
                moveq   #$04, D6                                                
                bsr     Scroll_Block_4                         ; Offset_0x00AEF4
                move.w  (Camera_Y_x4).w, D0                          ; $FFFFEE0C
                move.w  D0, (Camera_Y_x4_Mod_10).w                   ; $FFFFEE14
                move.w  D0, ($FFFFF618).w                                       
                move.b  (Scroll_Flag_Array+$0002).w, D0              ; $FFFFEE52
                or.b    ($FFFFEE54).w, D0                                       
                move.b  D0, (Scroll_Flag_Array+$0006).w              ; $FFFFEE56
                clr.b   (Scroll_Flag_Array+$0002).w                  ; $FFFFEE52
                clr.b   (Scroll_Flag_Array+$0004).w                  ; $FFFFEE54
                move.b  ($FFFFFE0F).w, D1                                       
                andi.w  #$0007, D1                                              
                bne.s   Offset_0x00A88C                                         
                subq.w  #$01, ($FFFFA800).w                                     
Offset_0x00A88C:
                lea     (Draw_CPz_Bg_Data+$0001), A0           ; Offset_0x00B2FD                            
                move.w  (Camera_Y_x4).w, D0                          ; $FFFFEE0C
                move.w  D0, D2                                                  
                andi.w  #$03F0, D0                                              
                lsr.w   #$04, D0                                                
                lea     $00(A0, D0), A0                                         
                move.w  D0, D4                                                  
                lea     (Scroll_Buffer_Data).w, A1                   ; $FFFFE000
                move.w  #$000E, D1                                              
                move.w  (Camera_X).w, D0                             ; $FFFFEE00
                neg.w   D0                                                      
                swap.w  D0                                                      
                andi.w  #$000F, D2                                              
                move.w  (Camera_X_x2).w, D0                          ; $FFFFEE08
                cmpi.b  #$12, D4                                                
                beq.s   Offset_0x00A90A                                         
                bcs.s   Offset_0x00A8C8                                         
                move.w  (Camera_X_x8).w, D0                          ; $FFFFEE10
Offset_0x00A8C8:
                neg.w   D0                                                      
                add.w   D2, D2                                                  
                jmp     CPz_Bg_Scroll_X_Start_Index(PC, D2)    ; Offset_0x00A8E2 
CPz_Bg_Scroll_X_Loop:                                          ; Offset_0x00A8D0
                move.w  (Camera_X_x2).w, D0                          ; $FFFFEE08
                cmpi.b  #$12, D4                                                
                beq.s   Offset_0x00A914                                         
                bcs.s   CPz_Process_Scroll_X                   ; Offset_0x00A8E0                                         
                move.w  (Camera_X_x8).w, D0                          ; $FFFFEE10
CPz_Process_Scroll_X:                                          ; Offset_0x00A8E0
                neg.w   D0      
CPz_Bg_Scroll_X_Start_Index:                                   ; Offset_0x00A8E2                             
                move.l  D0, (A1)+                                               
                move.l  D0, (A1)+                                               
                move.l  D0, (A1)+                                               
                move.l  D0, (A1)+                                               
                move.l  D0, (A1)+                                               
                move.l  D0, (A1)+                                               
                move.l  D0, (A1)+                                               
                move.l  D0, (A1)+                                               
                move.l  D0, (A1)+                                               
                move.l  D0, (A1)+                                               
                move.l  D0, (A1)+                                               
                move.l  D0, (A1)+                                               
                move.l  D0, (A1)+                                               
                move.l  D0, (A1)+                                               
                move.l  D0, (A1)+                                               
                move.l  D0, (A1)+                                               
                addq.b  #$01, D4                                                
                dbra    D1, CPz_Bg_Scroll_X_Loop               ; Offset_0x00A8D0                                     
                rts                                                             
Offset_0x00A90A:
                move.w  #$000F, D0                                              
                sub.w   D2, D0                                                  
                move.w  D0, D2                                                  
                bra.s   Offset_0x00A918                                         
Offset_0x00A914:
                move.w  #$000F, D2                                              
Offset_0x00A918:
                move.w  (Camera_X_x2).w, D3                          ; $FFFFEE08
                neg.w   D3                                                      
                move.w  ($FFFFA800).w, D0                                       
                andi.w  #$001F, D0                                              
                lea     Bg_Scroll_Data(PC), A2                 ; Offset_0x009D2C                      
                lea     $00(A2, D0), A2                                         
Offset_0x00A92E:
                move.b  (A2)+, D0                                               
                ext.w   D0                                                      
                add.w   D3, D0                                                  
                move.l  D0, (A1)+                                               
                dbra    D2, Offset_0x00A92E                                     
                addq.b  #$01, D4                                                
                dbra    D1, CPz_Bg_Scroll_X_Loop               ; Offset_0x00A8D0                                     
                rts                                                                                                     
;-------------------------------------------------------------------------------
Bg_Scroll_DEz:                                                 ; Offset_0x00A942  
                move.w  (Horizontal_Scrolling).w, D4                 ; $FFFFEEB0
                ext.l   D4                                                      
                asl.l   #$08, D4                                                
                move.w  (Vertical_Scrolling).w, D5                   ; $FFFFEEB2
                ext.l   D5                                                      
                asl.l   #$08, D5                                                
                bsr     Scroll_Block_1                         ; Offset_0x00AE22
                move.w  (Camera_Y_x4).w, ($FFFFF618).w               ; $FFFFEE0C
                move.w  (Camera_X).w, D4                             ; $FFFFEE00
                lea     ($FFFFA800).w, A2                                       
                move.w  D4, (A2)+                                               
                addq.w  #$03, (A2)+                                             
                addq.w  #$02, (A2)+                                             
                addq.w  #$04, (A2)+                                             
                addq.w  #$01, (A2)+                                             
                addq.w  #$02, (A2)+                                             
                addq.w  #$04, (A2)+                                             
                addq.w  #$03, (A2)+                                             
                addq.w  #$04, (A2)+                                             
                addq.w  #$02, (A2)+                                             
                addq.w  #$06, (A2)+                                             
                addq.w  #$03, (A2)+                                             
                addq.w  #$04, (A2)+                                             
                addq.w  #$01, (A2)+                                             
                addq.w  #$02, (A2)+                                             
                addq.w  #$04, (A2)+                                             
                addq.w  #$03, (A2)+                                             
                addq.w  #$02, (A2)+                                             
                addq.w  #$03, (A2)+                                             
                addq.w  #$04, (A2)+                                             
                addq.w  #$01, (A2)+                                             
                addq.w  #$03, (A2)+                                             
                addq.w  #$04, (A2)+                                             
                addq.w  #$02, (A2)+                                             
                addq.w  #$01, (A2)                                              
                move.w  (A2)+, D0                                               
                moveq   #$00, D1                                                
                move.w  D0, D1                                                  
                lsr.w   #$01, D0                                                
                move.w  D0, (A2)+                                               
                addq.w  #$03, (A2)+                                             
                addq.w  #$02, (A2)+                                             
                addq.w  #$04, (A2)+                                             
                swap.w  D1                                                      
                move.l  D1, D0                                                  
                lsr.l   #$03, D1                                                
                sub.l   D1, D0                                                  
                swap.w  D0                                                      
                move.w  D0, $0004(A2)                                           
                swap.w  D0                                                      
                sub.l   D1, D0                                                  
                swap.w  D0                                                      
                move.w  D0, $0002(A2)                                           
                swap.w  D0                                                      
                sub.l   D1, D0                                                  
                swap.w  D0                                                      
                move.w  D0, (A2)+                                               
                addq.w  #$04, A2                                                
                addq.w  #$01, (A2)+                                             
                move.w  D4, (A2)+                                               
                move.w  D4, (A2)+                                               
                move.w  D4, (A2)+                                               
                lea     (DEz_Bg_Scroll_Data), A3               ; Offset_0x00AA12                         
                lea     ($FFFFA800).w, A2                                       
                lea     (Scroll_Buffer_Data).w, A1                   ; $FFFFE000
                move.w  (Camera_Y_x4).w, D1                          ; $FFFFEE0C
                moveq   #$00, D0                                                
Offset_0x00A9E4:
                move.b  (A3)+, D0                                               
                addq.w  #$02, A2                                                
                sub.w   D0, D1                                                  
                bcc.s   Offset_0x00A9E4                                         
                neg.w   D1                                                      
                subq.w  #$02, A2                                                
                move.w  #$00DF, D2                                              
                move.w  (Camera_X).w, D0                             ; $FFFFEE00
                neg.w   D0                                                      
                swap.w  D0                                                      
                move.w  (A2)+, D0                                               
                neg.w   D0                                                      
Offset_0x00AA00:
                move.l  D0, (A1)+                                               
                subq.w  #$01, D1                                                
                bne.s   Offset_0x00AA0C                                         
                move.b  (A3)+, D1                                               
                move.w  (A2)+, D0                                               
                neg.w   D0                                                      
Offset_0x00AA0C:
                dbra    D2, Offset_0x00AA00                                     
                rts                                                             
;-------------------------------------------------------------------------------
DEz_Bg_Scroll_Data:                                            ; Offset_0x00AA12
                dc.b    $80, $08, $08, $08, $08, $08, $08, $08
                dc.b    $08, $08, $08, $08, $08, $08, $08, $08
                dc.b    $08, $08, $08, $08, $08, $08, $08, $08
                dc.b    $08, $08, $08, $08, $08, $03, $05, $08
                dc.b    $10, $80, $80, $80
;-------------------------------------------------------------------------------
Bg_Scroll_NGHz:                                                ; Offset_0x00AA36 
                move.w  (Horizontal_Scrolling).w, D4                 ; $FFFFEEB0
                ext.l   D4                                                      
                muls.w  #$0119, D4                                              
                moveq   #$02, D6                                                
                bsr     Scroll_Block_2                         ; Offset_0x00AE8C
                move.w  (Vertical_Scrolling).w, D5                   ; $FFFFEEB2
                ext.l   D5                                                      
                asl.l   #$07, D5                                                
                tst.b   (Act_Id).w                                   ; $FFFFFE11
                bne.s   Bg_Scroll_NGHz_Act_2                   ; Offset_0x00AA56                                         
                asl.l   #$01, D5                                                
Bg_Scroll_NGHz_Act_2:                                          ; Offset_0x00AA56
                moveq   #$06, D6                                                
                bsr     Scroll_Block_3                         ; Offset_0x00AEC0
                move.w  (Camera_Y_x4).w, ($FFFFF618).w               ; $FFFFEE0C
                moveq   #$00, D2                                                
                tst.b   ($FFFFEEBD).w                                           
                beq.s   Offset_0x00AA90                                         
                move.w  ($FFFFFE04).w, D0                                       
                andi.w  #$003F, D0                                              
                lea     Bg_Scroll_Data(PC), A1                 ; Offset_0x009D2C                        
                lea     $00(A1, D0), A1                                         
                moveq   #$00, D0                                                
                move.b  (A1)+, D0                                               
                add.w   D0, ($FFFFF616).w                                       
                add.w   D0, ($FFFFF618).w                                       
                add.w   D0, ($FFFFEEF4).w                                       
                move.b  (A1)+, D2                                               
                add.w   D2, ($FFFFEEF0).w                                       
Offset_0x00AA90:
                lea     ($FFFFA800).w, A2                                       
                lea     $0006(A2), A3                                           
                move.w  (Camera_X).w, D0                             ; $FFFFEE00
                ext.l   D0                                                      
                asl.l   #$04, D0                                                
                divs.w  #$000A, D0                                              
                ext.l   D0                                                      
                asl.l   #$04, D0                                                
                asl.l   #$08, D0                                                
                move.l  D0, D1                                                  
                swap.w  D1                                                      
                move.w  D1, (A3)+                                               
                swap.w  D1                                                      
                add.l   D1, D1                                                  
                add.l   D0, D1                                                  
                swap.w  D1                                                      
                move.w  D1, (A3)+                                               
                swap.w  D1                                                      
                add.l   D0, D1                                                  
                swap.w  D1                                                      
                move.w  D1, (A3)+                                               
                swap.w  D1                                                      
                add.l   D0, D1                                                  
                swap.w  D1                                                      
                move.w  D1, (A3)+                                               
                swap.w  D1                                                      
                add.l   D0, D1                                                  
                swap.w  D1                                                      
                move.w  D1, (A3)+                                               
                swap.w  D1                                                      
                add.l   D0, D1                                                  
                swap.w  D1                                                      
                move.w  D1, (A3)+                                               
                swap.w  D1                                                      
                add.l   D0, D1                                                  
                swap.w  D1                                                      
                move.w  D1, (A3)+                                               
                swap.w  D1                                                      
                add.l   D0, D1                                                  
                swap.w  D1                                                      
                move.w  D1, (A3)+                                               
                move.w  D1, (A2)                                                
                move.w  D1, $0004(A2)                                           
                move.w  (Camera_X_x2).w, D0                          ; $FFFFEE08
                move.w  D0, $0002(A2)                                           
                move.w  D0, $0016(A2)                                           
                move.w  D0, $0000(A2)                                           
                move.w  D0, $0004(A2)                                           
                move.w  D0, $0018(A2)                                           
                move.w  D0, $001A(A2)                                           
                move.w  D0, $001C(A2)                                           
                move.w  D0, $001E(A2)                                           
                lea     (NGHz_Bg_Scroll_Data), A3              ; Offset_0x00AB56                        
                lea     ($FFFFA800).w, A2                                       
                lea     (Scroll_Buffer_Data).w, A1                   ; $FFFFE000
                move.w  (Camera_Y_x4).w, D1                          ; $FFFFEE0C
                moveq   #$00, D0                                                
Offset_0x00AB28:
                move.b  (A3)+, D0                                               
                addq.w  #$02, A2                                                
                sub.w   D0, D1                                                  
                bcc.s   Offset_0x00AB28                                         
                neg.w   D1                                                      
                subq.w  #$02, A2                                                
                move.w  #$00DF, D2                                              
                move.w  (Camera_X).w, D0                             ; $FFFFEE00
                neg.w   D0                                                      
                swap.w  D0                                                      
                move.w  (A2)+, D0                                               
                neg.w   D0                                                      
Offset_0x00AB44:
                move.l  D0, (A1)+                                               
                subq.w  #$01, D1                                                
                bne.s   Offset_0x00AB50                                         
                move.b  (A3)+, D1                                               
                move.w  (A2)+, D0                                               
                neg.w   D0                                                      
Offset_0x00AB50:
                dbra    D2, Offset_0x00AB44                                     
                rts                                                             
;-------------------------------------------------------------------------------
NGHz_Bg_Scroll_Data:                                           ; Offset_0x00AB56
                dc.b    $B0, $70, $30, $60, $15, $0C, $0E, $06
                dc.b    $0C, $1F, $30, $C0, $F0, $F0, $F0, $F0    
;-------------------------------------------------------------------------------
Bg_Scroll_SCz:                                                 ; Offset_0x00AB66   
                tst.w   (Debug_Mode_Flag_Index).w                    ; $FFFFFE08
                bne     Bg_Scroll_Default                      ; Offset_0x00ABEE                                         
                lea     (Camera_X).w, A1                             ; $FFFFEE00
                lea     (Scroll_Flag_Array).w, A3                    ; $FFFFEE50
                lea     (Horizontal_Scrolling).w, A4                 ; $FFFFEEB0
                move.w  ($FFFFF736).w, D0                                       
                move.w  (A1), D4                                                
                add.w   (A1), D0                                                
                move.w  D0, D1                                                  
                sub.w   (A1), D1                                                
                asl.w   #$08, D1                                                
                move.w  D0, (A1)                                                
                move.w  D1, (A4)                                                
                lea     ($FFFFEE40).w, A2                                       
                bsr     Scroll_Horizontal_2                    ; Offset_0x00AC6A
                lea     (Camera_Y).w, A1                             ; $FFFFEE04
                lea     (Vertical_Scrolling).w, A4                   ; $FFFFEEB2
                move.w  ($FFFFF738).w, D0                                       
                move.w  (A1), D4                                                
                add.w   (A1), D0                                                
                move.w  D0, D1                                                  
                sub.w   (A1), D1                                                
                asl.w   #$08, D1                                                
                move.w  D0, (A1)                                                
                move.w  D1, (A4)                                                
                lea     ($FFFFEE41).w, A2                                       
                bsr     Scroll_Vertical_2                      ; Offset_0x00AE00
                move.w  (Horizontal_Scrolling).w, D4                 ; $FFFFEEB0
                beq.s   Offset_0x00ABC0                                         
                move.w  #$0100, D4                                              
Offset_0x00ABC0:
                ext.l   D4                                                      
                asl.l   #$07, D4                                                
                moveq   #$00, D5                                                
                bsr     Scroll_Block_1                         ; Offset_0x00AE22
                move.w  (Camera_Y_x4).w, ($FFFFF618).w               ; $FFFFEE0C
                lea     (Scroll_Buffer_Data).w, A1                   ; $FFFFE000
                move.w  #$00DF, D1                                              
                move.w  (Camera_X).w, D0                             ; $FFFFEE00
                neg.w   D0                                                      
                swap.w  D0                                                      
                move.w  (Camera_X_x2).w, D0                          ; $FFFFEE08
                neg.w   D0                                                      
Offset_0x00ABE6:
                move.l  D0, (A1)+                                               
                dbra    D1, Offset_0x00ABE6                                     
                rts                                                                                                                      
;-------------------------------------------------------------------------------  
Bg_Scroll_Lvl1:                                                ; Offset_0x00ABEE
Bg_Scroll_Lvl3:                                                ; Offset_0x00ABEE
Bg_Scroll_Lvl9:                                                ; Offset_0x00ABEE 
Bg_Scroll_Default:
                move.w  (Horizontal_Scrolling).w, D4                 ; $FFFFEEB0
                ext.l   D4                                                      
                asl.l   #$05, D4                                                
                move.w  (Vertical_Scrolling).w, D5                   ; $FFFFEEB2
                ext.l   D5                                                      
                asl.l   #$06, D5                                                
                bsr     Scroll_Block_1                         ; Offset_0x00AE22
                move.w  (Camera_Y_x4).w, ($FFFFF618).w               ; $FFFFEE0C
                lea     (Scroll_Buffer_Data).w, A1                   ; $FFFFE000
                move.w  #$00DF, D1                                              
                move.w  (Camera_X).w, D0                             ; $FFFFEE00
                neg.w   D0                                                      
                swap.w  D0                                                      
                move.w  (Camera_X_x2).w, D0                          ; $FFFFEE08
                neg.w   D0                                                      
Offset_0x00AC1E:
                move.l  D0, (A1)+                                               
                dbra    D1, Offset_0x00AC1E                                     
                rts  
;-------------------------------------------------------------------------------
Bg_Scroll_X:                                                   ; Offset_0x00AC26
                lea     (Scroll_Buffer_Data).w, A1                   ; $FFFFE000                          
                move.w  #$000E, D1               ; Varredura de tela * 16 pixels                               
                move.w  (Camera_X).w, D0                             ; $FFFFEE00
                neg.w   D0                                                      
                swap.w  D0                                                      
                andi.w  #$000F, D2                                              
                add.w   D2, D2                                                  
                move.w  (A2)+, D0                                               
                jmp     Bg_Scroll_X_Start_Index(PC, D2)        ; Offset_0x00AC44 
Bg_Scroll_X_Loop:                                              ; Offset_0x00AC42
                move.w  (A2)+, D0 
Bg_Scroll_X_Start_Index:                                                              
                move.l  D0, (A1)+                                               
                move.l  D0, (A1)+                                               
                move.l  D0, (A1)+                                               
                move.l  D0, (A1)+                                               
                move.l  D0, (A1)+                                               
                move.l  D0, (A1)+                                               
                move.l  D0, (A1)+                                               
                move.l  D0, (A1)+                                               
                move.l  D0, (A1)+                                               
                move.l  D0, (A1)+                                               
                move.l  D0, (A1)+                                               
                move.l  D0, (A1)+                                               
                move.l  D0, (A1)+                                               
                move.l  D0, (A1)+                                               
                move.l  D0, (A1)+                                               
                move.l  D0, (A1)+                                               
                dbra    D1, Bg_Scroll_X_Loop                   ; Offset_0x00AC42                                     
                rts                                                                                                             
;-------------------------------------------------------------------------------
Scroll_Horizontal_2:                                           ; Offset_0x00AC6A   
                move.w  (A1), D0                                                
                andi.w  #$0010, D0                                              
                move.b  (A2), D1                                                
                eor.b   D1, D0                                                  
                bne.s   Offset_0x00AC8A                                         
                eori.b  #$10, (A2)                                              
                move.w  (A1), D0                                                
                sub.w   D4, D0                                                  
                bpl.s   Offset_0x00AC86                                         
                bset    #$02, (A3)                                              
                rts                                                             
Offset_0x00AC86:
                bset    #$03, (A3)                                              
Offset_0x00AC8A:
                rts                                                             
;-------------------------------------------------------------------------------
Scroll_Horizontal:                                             ; Offset_0x00AC8C     
                move.w  (A1), D4                                                
                move.w  (A5), D1                                                
                beq.s   Offset_0x00ACB0                                         
                subi.w  #$0100, D1                                              
                move.w  D1, (A5)                                                
                moveq   #$00, D1                                                
                move.b  (A5), D1                                                
                lsl.b   #$02, D1                                                
                addq.b  #$04, D1                                                
                move.w  $0002(A5), D0                                           
                sub.b   D1, D0                                                  
                move.w  $00(A6, D0), D0                                         
                andi.w  #$3FFF, D0                                              
                bra.s   Offset_0x00ACB4                                         
Offset_0x00ACB0:
                move.w  $0008(A0), D0                                           
Offset_0x00ACB4:
                sub.w   (A1), D0                                                
                subi.w  #$0090, D0                                              
                blt.s   Offset_0x00ACC6                                         
                subi.w  #$0010, D0                                              
                bge.s   Offset_0x00ACDA                                         
                clr.w   (A4)                                                    
                rts                                                             
Offset_0x00ACC6:
                cmpi.w  #$FFF0, D0                                              
                bgt.s   Offset_0x00ACD0                                         
                move.w  #$FFF0, D0                                              
Offset_0x00ACD0:
                add.w   (A1), D0                                                
                cmp.w   (A2), D0                                                
                bgt.s   Offset_0x00ACF0                                         
                move.w  (A2), D0                                                
                bra.s   Offset_0x00ACF0                                         
Offset_0x00ACDA:
                cmpi.w  #$0010, D0                                              
                bcs.s   Offset_0x00ACE4                                         
                move.w  #$0010, D0                                              
Offset_0x00ACE4:
                add.w   (A1), D0                                                
                cmp.w   $0002(A2), D0                                           
                blt.s   Offset_0x00ACF0                                         
                move.w  $0002(A2), D0                                           
Offset_0x00ACF0:
                move.w  D0, D1                                                  
                sub.w   (A1), D1                                                
                asl.w   #$08, D1                                                
                move.w  D0, (A1)                                                
                move.w  D1, (A4)                                                
                rts                                                             
;-------------------------------------------------------------------------------
Scroll_Vertical:                                               ; Offset_0x00ACFC
                moveq   #$00, D1                                                
                move.w  $000C(A0), D0                                           
                sub.w   (A1), D0                                                
                cmpi.w  #$FF00, (Camera_Min_Y).w                     ; $FFFFEECC
                bne.s   Offset_0x00AD10                                         
                andi.w  #$07FF, D0                                              
Offset_0x00AD10:
                btst    #$02, $0022(A0)                                         
                beq.s   Offset_0x00AD1A                                         
                subq.w  #$05, D0                                                
Offset_0x00AD1A:
                btst    #$01, $0022(A0)                                         
                beq.s   Offset_0x00AD3A                                         
                addi.w  #$0020, D0                                              
                sub.w   ($FFFFEED8).w, D0                                       
                bcs.s   Offset_0x00AD84                                         
                subi.w  #$0040, D0                                              
                bcc.s   Offset_0x00AD84                                         
                tst.b   (Vertical_Scroll_Flag).w                     ; $FFFFEEDE
                bne.s   Offset_0x00AD96                                         
                bra.s   Offset_0x00AD46                                         
Offset_0x00AD3A:
                sub.w   ($FFFFEED8).w, D0                                       
                bne.s   Offset_0x00AD4A                                         
                tst.b   (Vertical_Scroll_Flag).w                     ; $FFFFEEDE
                bne.s   Offset_0x00AD96                                         
Offset_0x00AD46:
                clr.w   (A4)                                                    
                rts                                                             
Offset_0x00AD4A:
                cmpi.w  #$0060, ($FFFFEED8).w                                   
                bne.s   Offset_0x00AD72                                         
                move.w  $0014(A0), D1                                           
                bpl.s   Offset_0x00AD5A                                         
                neg.w   D1                                                      
Offset_0x00AD5A:
                cmpi.w  #$0800, D1                                              
                bcc.s   Offset_0x00AD84                                         
                move.w  #$0600, D1                                              
                cmpi.w  #$0006, D0                                              
                bgt.s   Offset_0x00ADD2                                         
                cmpi.w  #$FFFA, D0                                              
                blt.s   Offset_0x00ADAC                                         
                bra.s   Offset_0x00AD9C                                         
Offset_0x00AD72:
                move.w  #$0200, D1                                              
                cmpi.w  #$0002, D0                                              
                bgt.s   Offset_0x00ADD2                                         
                cmpi.w  #$FFFE, D0                                              
                blt.s   Offset_0x00ADAC                                         
                bra.s   Offset_0x00AD9C                                         
Offset_0x00AD84:
                move.w  #$1000, D1                                              
                cmpi.w  #$0010, D0                                              
                bgt.s   Offset_0x00ADD2                                         
                cmpi.w  #$FFF0, D0                                              
                blt.s   Offset_0x00ADAC                                         
                bra.s   Offset_0x00AD9C                                         
Offset_0x00AD96:
                moveq   #$00, D0                                                
                move.b  D0, (Vertical_Scroll_Flag).w                 ; $FFFFEEDE
Offset_0x00AD9C:
                moveq   #$00, D1                                                
                move.w  D0, D1                                                  
                add.w   (A1), D1                                                
                tst.w   D0                                                      
                bpl     Offset_0x00ADDA                                         
                bra     Offset_0x00ADB6                                         
Offset_0x00ADAC:
                neg.w   D1                                                      
                ext.l   D1                                                      
                asl.l   #$08, D1                                                
                add.l   (A1), D1                                                
                swap.w  D1                                                      
Offset_0x00ADB6:
                cmp.w   $0004(A2), D1                                           
                bgt.s   Offset_0x00ADF0                                         
                cmpi.w  #$FF00, D1                                              
                bgt.s   Offset_0x00ADCC                                         
                andi.w  #$07FF, D1                                              
                andi.w  #$07FF, (A1)                                            
                bra.s   Offset_0x00ADF0                                         
Offset_0x00ADCC:
                move.w  $0004(A2), D1                                           
                bra.s   Offset_0x00ADF0                                         
Offset_0x00ADD2:
                ext.l   D1                                                      
                asl.l   #$08, D1                                                
                add.l   (A1), D1                                                
                swap.w  D1                                                      
Offset_0x00ADDA:
                cmp.w   $0006(A2), D1                                           
                blt.s   Offset_0x00ADF0                                         
                subi.w  #$0800, D1                                              
                bcs.s   Offset_0x00ADEC                                         
                subi.w  #$0800, (A1)                                            
                bra.s   Offset_0x00ADF0                                         
Offset_0x00ADEC:
                move.w  $0006(A2), D1                                           
Offset_0x00ADF0:
                move.w  (A1), D4                                                
                swap.w  D1                                                      
                move.l  D1, D3                                                  
                sub.l   (A1), D3                                                
                ror.l   #$08, D3                                                
                move.w  D3, (A4)                                                
                move.l  D1, (A1)                                                
                rts    
;-------------------------------------------------------------------------------
Scroll_Vertical_2:                                             ; Offset_0x00AE00
                move.w  (A1), D0                                                
                andi.w  #$0010, D0                                              
                move.b  (A2), D1                                                
                eor.b   D1, D0                                                  
                bne.s   Offset_0x00AE20                                         
                eori.b  #$10, (A2)                                              
                move.w  (A1), D0                                                
                sub.w   D4, D0                                                  
                bpl.s   Offset_0x00AE1C                                         
                bset    #$00, (A3)                                              
                rts                                                             
Offset_0x00AE1C:
                bset    #$01, (A3)                                              
Offset_0x00AE20:
                rts     
;-------------------------------------------------------------------------------
Scroll_Block_1:                                                ; Offset_0x00AE22
                move.l  (Camera_X_x2).w, D2                          ; $FFFFEE08
                move.l  D2, D0                                                  
                add.l   D4, D0                                                  
                move.l  D0, (Camera_X_x2).w                          ; $FFFFEE08
                move.l  D0, D1                                                  
                swap.w  D1                                                      
                andi.w  #$0010, D1                                              
                move.b  ($FFFFEE42).w, D3                                       
                eor.b   D3, D1                                                  
                bne.s   Offset_0x00AE56                                         
                eori.b  #$10, ($FFFFEE42).w                                     
                sub.l   D2, D0                                                  
                bpl.s   Offset_0x00AE50                                         
                bset    #$02, (Scroll_Flag_Array+$0002).w            ; $FFFFEE52                             
                bra.s   Offset_0x00AE56                                         
Offset_0x00AE50:
                bset    #$03, (Scroll_Flag_Array+$0002).w            ; $FFFFEE52                               
Offset_0x00AE56:
                move.l  (Camera_Y_x4).w, D3                          ; $FFFFEE0C
                move.l  D3, D0                                                  
                add.l   D5, D0                                                  
                move.l  D0, (Camera_Y_x4).w                          ; $FFFFEE0C
                move.l  D0, D1                                                  
                swap.w  D1                                                      
                andi.w  #$0010, D1                                              
                move.b  ($FFFFEE43).w, D2                                       
                eor.b   D2, D1                                                  
                bne.s   Offset_0x00AE8A                                         
                eori.b  #$10, ($FFFFEE43).w                                     
                sub.l   D3, D0                                                  
                bpl.s   Offset_0x00AE84                                         
                bset    #$00, (Scroll_Flag_Array+$0002).w            ; $FFFFEE52                   
                rts                                                             
Offset_0x00AE84:
                bset    #$01, (Scroll_Flag_Array+$0002).w            ; $FFFFEE52                     
Offset_0x00AE8A:
                rts 
;-------------------------------------------------------------------------------
Scroll_Block_2:                                                ; Offset_0x00AE8C    
                move.l  (Camera_X_x2).w, D2                          ; $FFFFEE08
                move.l  D2, D0                                                  
                add.l   D4, D0                                                  
                move.l  D0, (Camera_X_x2).w                          ; $FFFFEE08
                move.l  D0, D1                                                  
                swap.w  D1                                                      
                andi.w  #$0010, D1                                              
                move.b  ($FFFFEE42).w, D3                                       
                eor.b   D3, D1                                                  
                bne.s   Offset_0x00AEBE                                         
                eori.b  #$10, ($FFFFEE42).w                                     
                sub.l   D2, D0                                                  
                bpl.s   Offset_0x00AEB8                                         
                bset    D6, (Scroll_Flag_Array+$0002).w              ; $FFFFEE52                                  
                bra.s   Offset_0x00AEBE                                         
Offset_0x00AEB8:
                addq.b  #$01, D6                                                
                bset    D6, (Scroll_Flag_Array+$0002).w              ; $FFFFEE52                                  
Offset_0x00AEBE:
                rts                                                             
;-------------------------------------------------------------------------------
Scroll_Block_3:                                                ; Offset_0x00AEC0  
                move.l  (Camera_Y_x4).w, D3                          ; $FFFFEE0C
                move.l  D3, D0                                                  
                add.l   D5, D0 
Scroll_Block_3_D0:                                             ; Offset_0x00AEC8                                                                 
                move.l  D0, (Camera_Y_x4).w                          ; $FFFFEE0C
                move.l  D0, D1                                                  
                swap.w  D1                                                      
                andi.w  #$0010, D1                                              
                move.b  ($FFFFEE43).w, D2                                       
                eor.b   D2, D1                                                  
                bne.s   Offset_0x00AEF2                                         
                eori.b  #$10, ($FFFFEE43).w                                     
                sub.l   D3, D0                                                  
                bpl.s   Offset_0x00AEEC                                         
                bset    D6, (Scroll_Flag_Array+$0002).w              ; $FFFFEE52                              
                rts                                                             
Offset_0x00AEEC:
                addq.b  #$01, D6                                                
                bset    D6, (Scroll_Flag_Array+$0002).w              ; $FFFFEE52                     
Offset_0x00AEF2:
                rts  
;-------------------------------------------------------------------------------
Scroll_Block_4:                                                ; Offset_0x00AEF4    
                move.l  (Camera_X_x8).w, D2                          ; $FFFFEE10
                move.l  D2, D0                                                  
                add.l   D4, D0                                                  
                move.l  D0, (Camera_X_x8).w                          ; $FFFFEE10
                move.l  D0, D1                                                  
                swap.w  D1                                                      
                andi.w  #$0010, D1                                              
                move.b  ($FFFFEE44).w, D3                                       
                eor.b   D3, D1                                                  
                bne.s   Offset_0x00AF26                                         
                eori.b  #$10, ($FFFFEE44).w                                     
                sub.l   D2, D0                                                  
                bpl.s   Offset_0x00AF20                                         
                bset    D6, (Scroll_Flag_Array+$0004).w              ; $FFFFEE54                                 
                bra.s   Offset_0x00AF26                                         
Offset_0x00AF20:
                addq.b  #$01, D6                                                
                bset    D6, (Scroll_Flag_Array+$0004).w              ; $FFFFEE54                                  
Offset_0x00AF26:
                rts    
;-------------------------------------------------------------------------------    
; Scroll_Block_5: ; Left over do Sonic 1, não usado            ; Offset_0x00AF28
                move.l  (Camera_X_x4).w, D2                          ; $FFFFEE18
                move.l  D2, D0
                add.l   D4, D0
                move.l  D0, (Camera_X_x4).w                          ; $FFFFEE18
                move.l  D0, D1
                swap.w  D1
                andi.w  #$0010, D1
                move.b  ($FFFFEE46).w, D3
                eor.b   D3, D1
                bne.s   Offset_0x00AF5A
                eori.b  #$10, ($FFFFEE46).w
                sub.l   D2, D0
                bpl.s   Offset_0x00AF54
                bset    D6, ($FFFFEE56).w
                bra.s   Offset_0x00AF5A
Offset_0x00AF54:
                addq.b  #$01, D6
                bset    D6, ($FFFFEE56).w
Offset_0x00AF5A:
                rts    
;------------------------------------------------------------------------------- 
; Offset_0x00AF5C: ; Left over do Sonic 1, não usado         
                lea     (VDP_Control_Port), A5                       ; $00C00004
                lea     (VDP_Data_Port), A6                          ; $00C00000
                lea     (Scroll_Flag_Array+$0002).w, A2              ; $FFFFEE52
                lea     (Camera_X_x2).w, A3                          ; $FFFFEE08
                lea     (Level_Map_Bg_Buffer).w, A4                  ; $FFFF8080
                move.w  #$6000, D2
                bsr     Offset_0x00B0EE
                lea     (Scroll_Flag_Array+$0004).w, A2              ; $FFFFEE54
                lea     (Camera_X_x8).w, A3                          ; $FFFFEE10
                bra     Offset_0x00B1BE                                                                                                                                                                                                                                                                                                                                              
;===============================================================================
; Rotina para rolar a tela de acordo com a posição do personagem
; <<<-
;===============================================================================  

;===============================================================================
; Rotina de processamento de rolagem da tela durante o movimento dos personagens  
; ->>>
;=============================================================================== 
LoadTilesAsYouMove:                                            ; Offset_0x00AF88
                lea     (VDP_Control_Port), A5                       ; $00C00004
                lea     (VDP_Data_Port), A6                          ; $00C00000
                lea     (Scroll_Flag_Array_2+$0002).w, A2            ; $FFFFEEA2                               
                lea     ($FFFFEE68).w, A3                                       
                lea     (Level_Map_Bg_Buffer).w, A4                  ; $FFFF8080
                move.w  #$6000, D2                                              
                bsr     Offset_0x00B0EE                                         
                lea     (Scroll_Flag_Array_2+$0004).w, A2            ; $FFFFEEA4                         
                lea     ($FFFFEE70).w, A3                                       
                bsr     Offset_0x00B1BE                                         
                lea     (Scroll_Flag_Array_2+$0006).w, A2            ; $FFFFEEA6                                
                lea     ($FFFFEE78).w, A3                                       
                bsr     Offset_0x00B2AE                                         
                tst.w   (Two_Player_Flag).w                          ; $FFFFFFD8
                beq.s   Offset_0x00AFDA                                         
                lea     (Scroll_Flag_Array_2+$0008).w, A2            ; $FFFFEEA8                              
                lea     ($FFFFEE80).w, A3                                       
                lea     (Level_Map_Buffer).w, A4                     ; $FFFF8000
                move.w  #$6000, D2                                              
                bsr     Offset_0x00B088                                         
Offset_0x00AFDA:
                lea     (Scroll_Flag_Array_2).w, A2                  ; $FFFFEEA0                            
                lea     ($FFFFEE60).w, A3                                       
                lea     (Level_Map_Buffer).w, A4                     ; $FFFF8000
                move.w  #$4000, D2                                              
                tst.b   (Refresh_Level_Layout).w                     ; $FFFFF72C
                beq.s   Draw_FG                                ; Offset_0x00B022
                move.b  #$00, (Refresh_Level_Layout).w               ; $FFFFF72C
                moveq   #-$10, D4                                          
                moveq   #$0F, D6                                                
Draw_All:                                                      ; Offset_0x00AFFA
                movem.l D4-D6, -(A7)                                            
                moveq   #-$10, D5                                          
                move.w  D4, D1                                                  
                bsr     Calc_VRAM_Pos                          ; Offset_0x00B7B2
                move.w  D1, D4                                                  
                moveq   #-$10, D5                                          
                bsr     DrawTiles_LeftRight                    ; Offset_0x00B4BE
                movem.l (A7)+, D4-D6                                            
                addi.w  #$0010, D4                                              
                dbra    D6, Draw_All                           ; Offset_0x00AFFA                                     
                move.b  #$00, (Scroll_Flag_Array_2).w                ; $FFFFEEA0                            
                rts                                                             
Draw_FG:                                                       ; Offset_0x00B022
                tst.b   (A2)                                                    
                beq.s   Offset_0x00B086                                         
                bclr    #$00, (A2)                                              
                beq.s   Offset_0x00B03C                                         
                moveq   #-$10, D4                                          
                moveq   #-$10, D5                                          
                bsr     Calc_VRAM_Pos                          ; Offset_0x00B7B2
                moveq   #-$10, D4                                          
                moveq   #-$10, D5                                          
                bsr     DrawTiles_LeftRight                    ; Offset_0x00B4BE
Offset_0x00B03C:
                bclr    #$01, (A2)                                              
                beq.s   Offset_0x00B056                                         
                move.w  #$00E0, D4                                              
                moveq   #-$10, D5                                          
                bsr     Calc_VRAM_Pos                          ; Offset_0x00B7B2
                move.w  #$00E0, D4                                              
                moveq   #-$10, D5                                          
                bsr     DrawTiles_LeftRight                    ; Offset_0x00B4BE
Offset_0x00B056:
                bclr    #$02, (A2)                                              
                beq.s   Offset_0x00B06C                                         
                moveq   #-$10, D4                                          
                moveq   #-$10, D5                                          
                bsr     Calc_VRAM_Pos                          ; Offset_0x00B7B2
                moveq   #-$10, D4                                          
                moveq   #-$10, D5                                          
                bsr     DrawTiles_TopBottom                    ; Offset_0x00B430
Offset_0x00B06C:
                bclr    #$03, (A2)                                              
                beq.s   Offset_0x00B086                                         
                moveq   #-$10, D4                                          
                move.w  #$0140, D5                                              
                bsr     Calc_VRAM_Pos                          ; Offset_0x00B7B2
                moveq   #-$10, D4                                          
                move.w  #$0140, D5                                              
                bsr     DrawTiles_TopBottom                    ; Offset_0x00B430
Offset_0x00B086:
                rts                                                             
Offset_0x00B088:
                tst.b   (A2)                                                    
                beq.s   Offset_0x00B0EC                                         
                bclr    #$00, (A2)                                              
                beq.s   Offset_0x00B0A2                                         
                moveq   #-$10, D4                                          
                moveq   #-$10, D5                                          
                bsr     Calc_VRAM_Pos_2                        ; Offset_0x00B7EE
                moveq   #-$10, D4                                          
                moveq   #-$10, D5                                          
                bsr     DrawTiles_LeftRight                    ; Offset_0x00B4BE
Offset_0x00B0A2:
                bclr    #$01, (A2)                                              
                beq.s   Offset_0x00B0BC                                         
                move.w  #$00E0, D4                                              
                moveq   #-$10, D5                                          
                bsr     Calc_VRAM_Pos_2                        ; Offset_0x00B7EE
                move.w  #$00E0, D4                                              
                moveq   #-$10, D5                                          
                bsr     DrawTiles_LeftRight                    ; Offset_0x00B4BE
Offset_0x00B0BC:
                bclr    #$02, (A2)                                              
                beq.s   Offset_0x00B0D2                                         
                moveq   #-$10, D4                                          
                moveq   #-$10, D5                                          
                bsr     Calc_VRAM_Pos_2                        ; Offset_0x00B7EE
                moveq   #-$10, D4                                          
                moveq   #-$10, D5                                          
                bsr     DrawTiles_TopBottom                    ; Offset_0x00B430
Offset_0x00B0D2:
                bclr    #$03, (A2)                                              
                beq.s   Offset_0x00B0EC                                         
                moveq   #-$10, D4                                          
                move.w  #$0140, D5                                              
                bsr     Calc_VRAM_Pos_2                        ; Offset_0x00B7EE
                moveq   #-$10, D4                                          
                move.w  #$0140, D5                                              
                bsr     DrawTiles_TopBottom                    ; Offset_0x00B430
Offset_0x00B0EC:
                rts                                                             
Offset_0x00B0EE:
                tst.b   (A2)                                                    
                beq     Offset_0x00B1BC                                         
                bclr    #$00, (A2)                                              
                beq.s   Offset_0x00B10A                                         
                moveq   #-$10, D4                                          
                moveq   #-$10, D5                                          
                bsr     Calc_VRAM_Pos                          ; Offset_0x00B7B2
                moveq   #-$10, D4                                          
                moveq   #-$10, D5                                          
                bsr     DrawTiles_LeftRight                    ; Offset_0x00B4BE
Offset_0x00B10A:
                bclr    #$01, (A2)                                              
                beq.s   Offset_0x00B124                                         
                move.w  #$00E0, D4                                              
                moveq   #-$10, D5                                          
                bsr     Calc_VRAM_Pos                          ; Offset_0x00B7B2
                move.w  #$00E0, D4                                              
                moveq   #-$10, D5                                          
                bsr     DrawTiles_LeftRight                    ; Offset_0x00B4BE
Offset_0x00B124:
                bclr    #$02, (A2)                                              
                beq.s   Offset_0x00B13A                                         
                moveq   #-$10, D4                                          
                moveq   #-$10, D5                                          
                bsr     Calc_VRAM_Pos                          ; Offset_0x00B7B2
                moveq   #-$10, D4                                          
                moveq   #-$10, D5                                          
                bsr     DrawTiles_TopBottom                    ; Offset_0x00B430
Offset_0x00B13A:
                bclr    #$03, (A2)                                              
                beq.s   Offset_0x00B154                                         
                moveq   #-$10, D4                                          
                move.w  #$0140, D5                                              
                bsr     Calc_VRAM_Pos                          ; Offset_0x00B7B2
                moveq   #-$10, D4                                          
                move.w  #$0140, D5                                              
                bsr     DrawTiles_TopBottom                    ; Offset_0x00B430
Offset_0x00B154:
                bclr    #$04, (A2)                                              
                beq.s   Offset_0x00B16C                                         
                moveq   #-$10, D4                                          
                moveq   #$00, D5                                                
                bsr     Calc_VRAM_Pos_D5                       ; Offset_0x00B7B4
                moveq   #-$10, D4                                          
                moveq   #$00, D5                                                
                moveq   #$1F, D6                                                
                bsr     DrawTiles_LeftRight_D6                 ; Offset_0x00B4C2
Offset_0x00B16C:
                bclr    #$05, (A2)                                              
                beq.s   Offset_0x00B188                                         
                move.w  #$00E0, D4                                              
                moveq   #$00, D5                                                
                bsr     Calc_VRAM_Pos_D5                       ; Offset_0x00B7B4
                move.w  #$00E0, D4                                              
                moveq   #$00, D5                                                
                moveq   #$1F, D6                                                
                bsr     DrawTiles_LeftRight_D6                 ; Offset_0x00B4C2
Offset_0x00B188:
                bclr    #$06, (A2)                                              
                beq.s   Offset_0x00B1A0                                         
                moveq   #-$10, D4                                          
                moveq   #-$10, D5                                          
                bsr     Calc_VRAM_Pos                          ; Offset_0x00B7B2
                moveq   #-$10, D4                                          
                moveq   #-$10, D5                                          
                moveq   #$1F, D6                                                
                bsr     Offset_0x00B4B6                                         
Offset_0x00B1A0:
                bclr    #$07, (A2)                                              
                beq.s   Offset_0x00B1BC                                         
                move.w  #$00E0, D4                                              
                moveq   #-$10, D5                                          
                bsr     Calc_VRAM_Pos                          ; Offset_0x00B7B2
                move.w  #$00E0, D4                                              
                moveq   #-$10, D5                                          
                moveq   #$1F, D6                                                
                bsr     Offset_0x00B4B6                                         
Offset_0x00B1BC:
                rts                                                             
Offset_0x00B1BE:
                tst.b   (A2)                                                    
                beq     Offset_0x00B200                                         
                bclr    #$00, (A2)                                              
                beq.s   Offset_0x00B1E0                                         
                move.w  #$0070, D4                                              
                moveq   #-$10, D5                                          
                bsr     Calc_VRAM_Pos                          ; Offset_0x00B7B2
                move.w  #$0070, D4                                              
                moveq   #-$10, D5                                          
                moveq   #$02, D6                                                
                bsr     DrawTiles_TopBottom_D6                 ; Offset_0x00B432
Offset_0x00B1E0:
                bclr    #$01, (A2)                                              
                beq.s   Offset_0x00B200                                         
                move.w  #$0070, D4                                              
                move.w  #$0140, D5                                              
                bsr     Calc_VRAM_Pos                          ; Offset_0x00B7B2
                move.w  #$0070, D4                                              
                move.w  #$0140, D5                                              
                moveq   #$02, D6                                                
                bsr     DrawTiles_TopBottom_D6                 ; Offset_0x00B432
Offset_0x00B200:
                rts  
;-------------------------------------------------------------------------------
; Rotina de controle da rolagem da fase Scrap Brain Zone 1 
; Left over do Sonic 1
; ->>>
;-------------------------------------------------------------------------------
Draw_SBz_Bg_Data:                                              ; Offset_0x00B202
                dc.b    $00, $00, $00, $00, $00, $06, $06, $06, $06, $06, $06, $06, $06, $06, $06, $04
                dc.b    $04, $04, $04, $04, $04, $04, $02, $02, $02, $02, $02, $02, $02, $02, $02, $02
                dc.b    $02, $00 
;-------------------------------------------------------------------------------
Draw_SBz_Bg:                                                   ; Offset_0x00B224
                moveq   #-$10, D4                                               
                bclr    #$00, (A2)                                              
                bne.s   Offset_0x00B236                                         
                bclr    #$01, (A2)                                              
                beq.s   Offset_0x00B27E                                         
                move.w  #$00E0, D4                                              
Offset_0x00B236:
                lea     Draw_SBz_Bg_Data+$01(PC), A0           ; Offset_0x00B203                            
                move.w  (Camera_Y_x4).w, D0                          ; $FFFFEE0C                             
                add.w   D4, D0                                                  
                andi.w  #$01F0, D0                                              
                lsr.w   #$04, D0                                                
                move.b  $00(A0, D0), D0                                         
                lea     (Scroll_Mem_Address_Data), A3          ; Offset_0x00B3AA
                move.w  $00(A3, D0), A3                                         
                beq.s   Offset_0x00B26A                                         
                moveq   #-$10, D5                                               
                movem.l D4/D5, -(A7)                                            
                bsr     Calc_VRAM_Pos                          ; Offset_0x00B7B2
                movem.l (A7)+, D4/D5                                            
                bsr     DrawTiles_LeftRight                    ; Offset_0x00B4BE
                bra.s   Offset_0x00B27E                                         
Offset_0x00B26A:
                moveq   #$00, D5                                                
                movem.l D4/D5, -(A7)                                            
                bsr     Calc_VRAM_Pos_D5                       ; Offset_0x00B7B4
                movem.l (A7)+, D4/D5                                            
                moveq   #$1F, D6                                                
                bsr     DrawTiles_LeftRight_D6                 ; Offset_0x00B4C2
Offset_0x00B27E:
                tst.b   (A2)                                                    
                bne.s   Offset_0x00B284                                         
                rts                                                             
Offset_0x00B284:
                moveq   #-$10, D4                                               
                moveq   #-$10, D5                                               
                move.b  (A2), D0                                                
                andi.b  #$A8, D0                                                
                beq.s   Offset_0x00B298                                         
                lsr.b   #$01, D0                                                
                move.b  D0, (A2)                                                
                move.w  #$0140, D5                                              
Offset_0x00B298:
                lea     Draw_SBz_Bg_Data(PC), A0               ; Offset_0x00B202                           
                move.w  (Camera_Y_x4).w, D0                          ; $FFFFEE0C                                   
                andi.w  #$01F0, D0                                              
                lsr.w   #$04, D0                                                
                lea     $00(A0, D0), A0                                         
                bra     Offset_0x00B3B2                                               
;-------------------------------------------------------------------------------
; Rotina de controle da rolagem da fase Scrap Brain Zone 1 
; Left over do Sonic 1
; <<<-
;-------------------------------------------------------------------------------
Offset_0x00B2AE:
                tst.b   (A2)                                                    
                beq     Offset_0x00B2FA                                         
                cmpi.b  #$0D, (Level_Id).w                           ; $FFFFFE10
                beq     Draw_CPz_Bg                            ; Offset_0x00B33E                                         
                bclr    #$00, (A2)                                              
                beq.s   Offset_0x00B2DA                                         
                move.w  #$0040, D4                                              
                moveq   #-$10, D5                                               
                bsr     Calc_VRAM_Pos                          ; Offset_0x00B7B2
                move.w  #$0040, D4                                              
                moveq   #-$10, D5                                               
                moveq   #$02, D6                                                
                bsr     DrawTiles_TopBottom_D6                 ; Offset_0x00B432
Offset_0x00B2DA:
                bclr    #$01, (A2)                                              
                beq.s   Offset_0x00B2FA                                         
                move.w  #$0040, D4                                              
                move.w  #$0140, D5                                              
                bsr     Calc_VRAM_Pos                          ; Offset_0x00B7B2
                move.w  #$0040, D4                                              
                move.w  #$0140, D5                                              
                moveq   #$02, D6                                                
                bsr     DrawTiles_TopBottom_D6                 ; Offset_0x00B432
Offset_0x00B2FA:
                rts                                                             
;-------------------------------------------------------------------------------  
; Rotina de controle da rolagem da fase Chemical Plant
; ->>>
;-------------------------------------------------------------------------------              
Draw_CPz_Bg_Data:                                              ; Offset_0x00B2FC
                dc.b    $02, $02, $02, $02, $02, $02, $02, $02, $02, $02, $02, $02, $02, $02, $02, $02
                dc.b    $02, $02, $02, $02, $04, $04, $04, $04, $04, $04, $04, $04, $04, $04, $04, $04
                dc.b    $04, $04, $04, $04, $04, $04, $04, $04, $04, $04, $04, $04, $04, $04, $04, $04
                dc.b    $04, $04, $04, $04, $04, $04, $04, $04, $04, $04, $04, $04, $04, $04, $04, $04
                dc.b    $04, $00
Draw_CPz_Bg:                                                   ; Offset_0x00B33E
                moveq   #-$10, D4                                               
                bclr    #$00, (A2)                                              
                bne.s   Offset_0x00B350                                         
                bclr    #$01, (A2)                                              
                beq.s   Offset_0x00B37A                                         
                move.w  #$00E0, D4                                              
Offset_0x00B350:
                lea     Draw_CPz_Bg_Data+$01(PC), A0           ; Offset_0x00B2FD                              
                move.w  (Camera_Y_x4).w, D0                          ; $FFFFEE0C                                
                add.w   D4, D0                                                  
                andi.w  #$03F0, D0                                              
                lsr.w   #$04, D0                                                
                move.b  $00(A0, D0), D0                                         
                move.w  Scroll_Mem_Address_Data(PC, D0), A3    ; Offset_0x00B3AA                           
                moveq   #-$10, D5                                               
                movem.l D4/D5, -(A7)                                            
                bsr     Calc_VRAM_Pos                          ; Offset_0x00B7B2
                movem.l (A7)+, D4/D5                                            
                bsr     DrawTiles_LeftRight                    ; Offset_0x00B4BE
Offset_0x00B37A:
                tst.b   (A2)                                                    
                bne.s   Offset_0x00B380                                         
                rts                                                             
Offset_0x00B380:
                moveq   #-$10, D4                                               
                moveq   #-$10, D5                                               
                move.b  (A2), D0                                                
                andi.b  #$A8, D0                                                
                beq.s   Offset_0x00B394                                         
                lsr.b   #$01, D0                                                
                move.b  D0, (A2)                                                
                move.w  #$0140, D5                                              
Offset_0x00B394:
                lea     Draw_CPz_Bg_Data(PC), A0               ; Offset_0x00B2FC                              
                move.w  (Camera_Y_x4).w, D0                          ; $FFFFEE0C                                
                andi.w  #$07F0, D0                                              
                lsr.w   #$04, D0                                                
                lea     $00(A0, D0), A0                                         
                bra     Offset_0x00B3B2    
;-------------------------------------------------------------------------------  
; Rotina de controle da rolagem da fase Chemical Plant
; <<<-
;-------------------------------------------------------------------------------              
Scroll_Mem_Address_Data:                                       ; Offset_0x00B3AA
                dc.w    $EE68, $EE68, $EE70, $EE78
;-------------------------------------------------------------------------------                  
Offset_0x00B3B2:
                tst.w   (Two_Player_Flag).w                          ; $FFFFFFD8
                bne.s   Offset_0x00B3F4                                         
                moveq   #$0F, D6                                                
                move.l  #$00800000, D7                                          
Offset_0x00B3C0:
                moveq   #$00, D0                                                
                move.b  (A0)+, D0                                               
                btst    D0, (A2)                                                
                beq.s   Offset_0x00B3E8                                         
                move.w  Scroll_Mem_Address_Data(PC, D0), A3    ; Offset_0x00B3AA                    
                movem.l D4/D5/A0, -(A7)                                         
                movem.l D4/D5, -(A7)                                            
                bsr     Draw_Blocks                            ; Offset_0x00B770
                movem.l (A7)+, D4/D5                                            
                bsr     Calc_VRAM_Pos                          ; Offset_0x00B7B2
                bsr     Draw_Tiles_3                           ; Offset_0x00B6A0
                movem.l (A7)+, D4/D5/A0                                         
Offset_0x00B3E8:
                addi.w  #$0010, D4                                              
                dbra    D6, Offset_0x00B3C0                                     
                clr.b   (A2)                                                    
                rts                                                             
Offset_0x00B3F4:
                moveq   #$0F, D6                                                
                move.l  #$00800000, D7                                          
Offset_0x00B3FC:
                moveq   #$00, D0                                                
                move.b  (A0)+, D0                                               
                btst    D0, (A2)                                                
                beq.s   Offset_0x00B424                                         
                move.w  Scroll_Mem_Address_Data(PC, D0), A3    ; Offset_0x00B3AA                       
                movem.l D4/D5/A0, -(A7)                                         
                movem.l D4/D5, -(A7)                                            
                bsr     Draw_Blocks                            ; Offset_0x00B770
                movem.l (A7)+, D4/D5                                            
                bsr     Calc_VRAM_Pos                          ; Offset_0x00B7B2
                bsr     Draw_Tiles_4                           ; Offset_0x00B726
                movem.l (A7)+, D4/D5/A0                                         
Offset_0x00B424:
                addi.w  #$0010, D4                                              
                dbra    D6, Offset_0x00B3FC                                     
                clr.b   (A2)                                                    
                rts  
;-------------------------------------------------------------------------------                
; Rotina para desenhar a tela na vertical
; ->>>
;-------------------------------------------------------------------------------  
DrawTiles_TopBottom:                                           ; Offset_0x00B430
                moveq   #$0F, D6  
DrawTiles_TopBottom_D6:                                        ; Offset_0x00B432                                                              
                add.w   (A3), D5                                                
                add.w   $0004(A3), D4                                           
                move.l  #$00800000, D7                                          
                move.l  D0, D1                                                  
                bsr     Calc_Chunk_RAM_Pos                     ; Offset_0x00B5CA                                         
                tst.w   (Two_Player_Flag).w                          ; $FFFFFFD8
                bne.s   DrawTiles_TopBottom_2P                 ; Offset_0x00B480                                         
Offset_0x00B44A:
                move.w  (A0), D3                                                
                andi.w  #$03FF, D3                                              
                lsl.w   #$03, D3                                                
                lea     (Blocks_Mem_Address).w, A1                   ; $FFFF9000                             
                adda.w  D3, A1                                                  
                move.l  D1, D0                                                  
                bsr     Draw_Tiles_3                           ; Offset_0x00B6A0
                adda.w  #$0010, A0                                              
                addi.w  #$0100, D1                                              
                andi.w  #$0FFF, D1                                              
                addi.w  #$0010, D4                                              
                move.w  D4, D0                                                  
                andi.w  #$0070, D0                                              
                bne.s   Offset_0x00B47A                                         
                bsr     Calc_Chunk_RAM_Pos                     ; Offset_0x00B5CA                                         
Offset_0x00B47A:
                dbra    D6, Offset_0x00B44A                                     
                rts                                                             
DrawTiles_TopBottom_2P:                                        ; Offset_0x00B480
                move.w  (A0), D3                                                
                andi.w  #$03FF, D3                                              
                lsl.w   #$03, D3                                                
                lea     (Blocks_Mem_Address).w, A1                   ; $FFFF9000                                 
                adda.w  D3, A1                                                  
                move.l  D1, D0                                                  
                bsr     Draw_Tiles_4                           ; Offset_0x00B726
                adda.w  #$0010, A0                                              
                addi.w  #$0080, D1                                              
                andi.w  #$0FFF, D1                                              
                addi.w  #$0010, D4                                              
                move.w  D4, D0                                                  
                andi.w  #$0070, D0                                              
                bne.s   Offset_0x00B4B0                                         
                bsr     Calc_Chunk_RAM_Pos                     ; Offset_0x00B5CA                                         
Offset_0x00B4B0:
                dbra    D6, DrawTiles_TopBottom_2P             ; Offset_0x00B480                                     
                rts                                                                            
;-------------------------------------------------------------------------------                
; Rotina para desenhar a tela na vertical
; <<<-
;-------------------------------------------------------------------------------
Offset_0x00B4B6:
                add.w   (A3), D5                                                
                add.w   $0004(A3), D4                                           
                bra.s   Offset_0x00B4C6  
;-------------------------------------------------------------------------------                
; Rotina para desenhar a tela na horizontal
; ->>>
;-------------------------------------------------------------------------------     
DrawTiles_LeftRight:                                           ; Offset_0x00B4BE
                moveq   #$15, D6                                                
                add.w   (A3), D5 
DrawTiles_LeftRight_D6:                                        ; Offset_0x00B4C2                                                               
                add.w   $0004(A3), D4                                           
Offset_0x00B4C6:
                tst.w   (Two_Player_Flag).w                          ; $FFFFFFD8
                bne.s   Offset_0x00B544                                         
                move.l  A2, -(A7)                                               
                move.w  D6, -(A7)                                               
                lea     ($FFFFEF00).w, A2                                       
                move.l  D0, D1                                                  
                or.w    D2, D1                                                  
                swap.w  D1                                                      
                move.l  D1, -(A7)                                               
                move.l  D1, (A5)                                                
                swap.w  D1                                                      
                bsr     Calc_Chunk_RAM_Pos                     ; Offset_0x00B5CA
Offset_0x00B4E4:
                move.w  (A0), D3                                                
                andi.w  #$03FF, D3                                              
                lsl.w   #$03, D3                                                
                lea     (Blocks_Mem_Address).w, A1                   ; $FFFF9000
                adda.w  D3, A1                                                  
                bsr     Draw_Tiles                             ; Offset_0x00B600                                         
                addq.w  #$02, A0                                                
                addq.b  #$04, D1                                                
                bpl.s   Offset_0x00B506                                         
                andi.b  #$7F, D1                                                
                swap.w  D1                                                      
                move.l  D1, (A5)                                                
                swap.w  D1                                                      
Offset_0x00B506:
                addi.w  #$0010, D5                                              
                move.w  D5, D0                                                  
                andi.w  #$0070, D0                                              
                bne.s   Offset_0x00B516                                         
                bsr     Calc_Chunk_RAM_Pos                     ; Offset_0x00B5CA
Offset_0x00B516:
                dbra    D6, Offset_0x00B4E4                                     
                move.l  (A7)+, D1                                               
                addi.l  #$00800000, D1                                          
                lea     ($FFFFEF00).w, A2                                       
                move.l  D1, (A5)                                                
                swap.w  D1                                                      
                move.w  (A7)+, D6                                               
Offset_0x00B52C:
                move.l  (A2)+, (A6)                                             
                addq.b  #$04, D1                                                
                bmi.s   Offset_0x00B53C                                         
                ori.b   #$80, D1                                                
                swap.w  D1                                                      
                move.l  D1, (A5)                                                
                swap.w  D1                                                      
Offset_0x00B53C:
                dbra    D6, Offset_0x00B52C                                     
                move.l  (A7)+, A2                                               
                rts                                                             
Offset_0x00B544:
                move.l  D0, D1                                                  
                or.w    D2, D1                                                  
                swap.w  D1                                                      
                move.l  D1, (A5)                                                
                swap.w  D1                                                      
                tst.b   D1                                                      
                bmi.s   Offset_0x00B58E                                         
                bsr     Calc_Chunk_RAM_Pos                     ; Offset_0x00B5CA
Offset_0x00B556:
                move.w  (A0), D3                                                
                andi.w  #$03FF, D3                                              
                lsl.w   #$03, D3                                                
                lea     (Blocks_Mem_Address).w, A1                   ; $FFFF9000
                adda.w  D3, A1                                                  
                bsr     Draw_Tiles_2                           ; Offset_0x00B662                                         
                addq.w  #$02, A0                                                
                addq.b  #$04, D1                                                
                bpl.s   Offset_0x00B578                                         
                andi.b  #$7F, D1                                                
                swap.w  D1                                                      
                move.l  D1, (A5)                                                
                swap.w  D1                                                      
Offset_0x00B578:
                addi.w  #$0010, D5                                              
                move.w  D5, D0                                                  
                andi.w  #$0070, D0                                              
                bne.s   Offset_0x00B588                                         
                bsr     Calc_Chunk_RAM_Pos                     ; Offset_0x00B5CA
Offset_0x00B588:
                dbra    D6, Offset_0x00B556                                     
                rts                                                             
Offset_0x00B58E:
                bsr     Calc_Chunk_RAM_Pos                     ; Offset_0x00B5CA
Offset_0x00B592:
                move.w  (A0), D3                                                
                andi.w  #$03FF, D3                                              
                lsl.w   #$03, D3                                                
                lea     (Blocks_Mem_Address).w, A1                   ; $FFFF9000
                adda.w  D3, A1                                                  
                bsr     Draw_Tiles_2                           ; Offset_0x00B662                                         
                addq.w  #$02, A0                                                
                addq.b  #$04, D1                                                
                bmi.s   Offset_0x00B5B4                                         
                ori.b   #$80, D1                                                
                swap.w  D1                                                      
                move.l  D1, (A5)                                                
                swap.w  D1                                                      
Offset_0x00B5B4:
                addi.w  #$0010, D5                                              
                move.w  D5, D0                                                  
                andi.w  #$0070, D0                                              
                bne.s   Offset_0x00B5C4                                         
                bsr     Calc_Chunk_RAM_Pos                     ; Offset_0x00B5CA
Offset_0x00B5C4:
                dbra    D6, Offset_0x00B592                                     
                rts   
;-------------------------------------------------------------------------------                
; Rotina para desenhar a tela na horizontal
; <<<-
;-------------------------------------------------------------------------------                   

;-------------------------------------------------------------------------------  
; Rotina para calcular o bloco em relação a posição da tela
; ->>>
;-------------------------------------------------------------------------------                                                                         
Calc_Chunk_RAM_Pos:                                            ; Offset_0x00B5CA
                movem.l D4/D5, -(A7)                                            
                move.w  D4, D3                                                  
                add.w   D3, D3                                                  
                andi.w  #$0F00, D3                                              
                lsr.w   #$03, D5                                                
                move.w  D5, D0                                                  
                lsr.w   #$04, D0                                                
                andi.w  #$007F, D0                                              
                add.w   D3, D0                                                  
                moveq   #-$01, D3                                               
                clr.w   D3                                                      
                move.b  $00(A4, D0), D3                                         
                lsl.w   #$07, D3                                                
                andi.w  #$0070, D4                                              
                andi.w  #$000E, D5                                              
                add.w   D4, D3                                                  
                add.w   D5, D3                                                  
                move.l  D3, A0                                                  
                movem.l (A7)+, D4/D5                                            
                rts                                                             
;-------------------------------------------------------------------------------  
; Rotina para calcular o bloco em relação a posição da tela
; <<<-
;-------------------------------------------------------------------------------                                    

;-------------------------------------------------------------------------------  
; Rotinas para desenhar os tiles 8x8
; ->>>
;-------------------------------------------------------------------------------  
Draw_Tiles:                                                    ; Offset_0x00B600
                btst    #$03, (A0)              ; Y Flip ?                              
                bne.s   Draw_FlipY                             ; Offset_0x00B62C
                btst    #$02, (A0)              ; X_Flip ?                              
                bne.s   Draw_FlipX                             ; Offset_0x00B612
                move.l  (A1)+, (A6)                                             
                move.l  (A1)+, (A2)+                                            
                rts                                                             
Draw_FlipX:                                                    ; Offset_0x00B612
                move.l  (A1)+, D3                                               
                eori.l  #$08000800, D3                                          
                swap.w  D3                                                      
                move.l  D3, (A6)                                                
                move.l  (A1)+, D3                                               
                eori.l  #$08000800, D3                                          
                swap.w  D3                                                      
                move.l  D3, (A2)+                                               
                rts                                                             
Draw_FlipY:                                                    ; Offset_0x00B62C
                btst    #$02, (A0)              ; X_Flip ?                              
                bne.s   Draw_FlipXY                            ; Offset_0x00B648
                move.l  (A1)+, D0                                               
                move.l  (A1)+, D3                                               
                eori.l  #$10001000, D3                                          
                move.l  D3, (A6)                                                
                eori.l  #$10001000, D0                                          
                move.l  D0, (A2)+                                               
                rts                                                             
Draw_FlipXY:                                                   ; Offset_0x00B648
                move.l  (A1)+, D0                                               
                move.l  (A1)+, D3                                               
                eori.l  #$18001800, D3                                          
                swap.w  D3                                                      
                move.l  D3, (A6)                                                
                eori.l  #$18001800, D0                                          
                swap.w  D0                                                      
                move.l  D0, (A2)+                                               
                rts         
;-------------------------------------------------------------------------------
Draw_Tiles_2:                                                  ; Offset_0x00B662
                btst    #$03, (A0)              ; Y Flip ?                                
                bne.s   Draw_FlipY_2                           ; Offset_0x00B680                                         
                btst    #$02, (A0)              ; X Flip ?                               
                bne.s   Draw_FlipX_2                           ; Offset_0x00B672                                         
                move.l  (A1)+, (A6)                                             
                rts                                                             
Draw_FlipX_2:                                                  ; Offset_0x00B672
                move.l  (A1)+, D3                                               
                eori.l  #$08000800, D3                                          
                swap.w  D3                                                      
                move.l  D3, (A6)                                                
                rts                                                             
Draw_FlipY_2:                                                  ; Offset_0x00B680
                btst    #$02, (A0)              ; X Flip ?                              
                bne.s   Draw_FlipXY_2                          ; Offset_0x00B692                                         
                move.l  (A1)+, D3                                               
                eori.l  #$10001000, D3                                          
                move.l  D3, (A6)                                                
                rts                                                             
Draw_FlipXY_2:                                                 ; Offset_0x00B692
                move.l  (A1)+, D3                                               
                eori.l  #$18001800, D3                                          
                swap.w  D3                                                      
                move.l  D3, (A6)                                                
                rts    
;-------------------------------------------------------------------------------    
Draw_Tiles_3:                                                  ; Offset_0x00B6A0
                or.w    D2, D0                                                  
                swap.w  D0                                                      
                btst    #$03, (A0)              ; Y Flip ?                                
                bne.s   Draw_FlipY_3                           ; Offset_0x00B6DC                                         
                btst    #$02, (A0)              ; X Flip ?                                
                bne.s   Draw_FlipX_3                           ; Offset_0x00B6BC                                         
                move.l  D0, (A5)                                                
                move.l  (A1)+, (A6)                                             
                add.l   D7, D0                                                  
                move.l  D0, (A5)                                                
                move.l  (A1)+, (A6)                                             
                rts                                                             
Draw_FlipX_3:                                                  ; Offset_0x00B6BC
                move.l  D0, (A5)                                                
                move.l  (A1)+, D3                                               
                eori.l  #$08000800, D3                                          
                swap.w  D3                                                      
                move.l  D3, (A6)                                                
                add.l   D7, D0                                                  
                move.l  D0, (A5)                                                
                move.l  (A1)+, D3                                               
                eori.l  #$08000800, D3                                          
                swap.w  D3                                                      
                move.l  D3, (A6)                                                
                rts                                                             
Draw_FlipY_3:                                                  ; Offset_0x00B6DC
                btst    #$02, (A0)              ; X Flip ?                              
                bne.s   Draw_FlipXY_3                          ; Offset_0x00B702                                         
                move.l  D5, -(A7)                                               
                move.l  D0, (A5)                                                
                move.l  (A1)+, D5                                               
                move.l  (A1)+, D3                                               
                eori.l  #$10001000, D3                                          
                move.l  D3, (A6)                                                
                add.l   D7, D0                                                  
                move.l  D0, (A5)                                                
                eori.l  #$10001000, D5                                          
                move.l  D5, (A6)                                                
                move.l  (A7)+, D5                                               
                rts                                                             
Draw_FlipXY_3:                                                 ; Offset_0x00B702
                move.l  D5, -(A7)                                               
                move.l  D0, (A5)                                                
                move.l  (A1)+, D5                                               
                move.l  (A1)+, D3                                               
                eori.l  #$18001800, D3                                          
                swap.w  D3                                                      
                move.l  D3, (A6)                                                
                add.l   D7, D0                                                  
                move.l  D0, (A5)                                                
                eori.l  #$18001800, D5                                          
                swap.w  D5                                                      
                move.l  D5, (A6)                                                
                move.l  (A7)+, D5                                               
                rts                                                                                                                                                                                                        
;-------------------------------------------------------------------------------  
Draw_Tiles_4:                                                  ; Offset_0x00B726
                or.w    D2, D0                                                  
                swap.w  D0                                                      
                btst    #$03, (A0)              ; Y Flip ?                                
                bne.s   Draw_FlipY_4                           ; Offset_0x00B74C                                         
                btst    #$02, (A0)              ; X Flip ?                                
                bne.s   Draw_FlipX_4                           ; Offset_0x00B73C                                         
                move.l  D0, (A5)                                                
                move.l  (A1)+, (A6)                                             
                rts                                                             
Draw_FlipX_4:                                                  ; Offset_0x00B73C
                move.l  D0, (A5)                                                
                move.l  (A1)+, D3                                               
                eori.l  #$08000800, D3                                          
                swap.w  D3                                                      
                move.l  D3, (A6)                                                
                rts                                                             
Draw_FlipY_4:                                                  ; Offset_0x00B74C
                btst    #$02, (A0)              ; X Flip ?                               
                bne.s   Draw_FlipXY_4                          ; Offset_0x00B760                                         
                move.l  D0, (A5)                                                
                move.l  (A1)+, D3                                               
                eori.l  #$10001000, D3                                          
                move.l  D3, (A6)                                                
                rts                                                             
Draw_FlipXY_4:                                                 ; Offset_0x00B760
                move.l  D0, (A5)                                                
                move.l  (A1)+, D3                                               
                eori.l  #$18001800, D3                                          
                swap.w  D3                                                      
                move.l  D3, (A6)                                                
                rts                                                             
;------------------------------------------------------------------------------- 
; Rotinas para desenhar os tiles 8x8
; <<<-
;-------------------------------------------------------------------------------  
             
;------------------------------------------------------------------------------- 
; Rotinas para desenhar os blocos 16x16
; ->>>
;-------------------------------------------------------------------------------
Draw_Blocks:                                                   ; Offset_0x00B770
                add.w   (A3), D5                                                
                add.w   $0004(A3), D4                                           
                lea     (Blocks_Mem_Address).w, A1                   ; $FFFF9000
                move.w  D4, D3                                                  
                add.w   D3, D3                                                  
                andi.w  #$0F00, D3                                              
                lsr.w   #$03, D5                                                
                move.w  D5, D0                                                  
                lsr.w   #$04, D0                                                
                andi.w  #$007F, D0                                              
                add.w   D3, D0                                                  
                moveq   #-$01, D3                                               
                clr.w   D3                                                      
                move.b  $00(A4, D0), D3                                         
                lsl.w   #$07, D3                                                
                andi.w  #$0070, D4                                              
                andi.w  #$000E, D5                                              
                add.w   D4, D3                                                  
                add.w   D5, D3                                                  
                move.l  D3, A0                                                  
                move.w  (A0), D3                                                
                andi.w  #$03FF, D3                                              
                lsl.w   #$03, D3                                                
                adda.w  D3, A1                                                  
                rts                                                                            
;------------------------------------------------------------------------------- 
; Rotinas para desenhar os blocos 16x16
; <<<-
;-------------------------------------------------------------------------------               

;------------------------------------------------------------------------------- 
; Rotinas para calcular a posição da VRAM
; ->>>
;-------------------------------------------------------------------------------   
Calc_VRAM_Pos:                                                 ; Offset_0x00B7B2
                add.w   (A3), D5                                     
Calc_VRAM_Pos_D5:                                              ; Offset_0x00B7B4                           
                tst.w   (Two_Player_Flag).w                          ; $FFFFFFD8
                bne.s   Calc_VRAM_Pos_2P                       ; Offset_0x00B7D4                                         
                add.w   $0004(A3), D4                                           
                andi.w  #$00F0, D4                                              
                andi.w  #$01F0, D5                                              
                lsl.w   #$04, D4                                                
                lsr.w   #$02, D5                                                
                add.w   D5, D4                                                  
                moveq   #$03, D0                                                
                swap.w  D0                                                      
                move.w  D4, D0                                                  
                rts                                                             
Calc_VRAM_Pos_2P:                                              ; Offset_0x00B7D4
                add.w   $0004(A3), D4
Calc_VRAM_Pos_2P_D4:                                           ; Offset_0x00B7D8                                                           
                andi.w  #$01F0, D4                                              
                andi.w  #$01F0, D5                                              
                lsl.w   #$03, D4                                                
                lsr.w   #$02, D5                                                
                add.w   D5, D4                                                  
                moveq   #$03, D0                                                
                swap.w  D0                                                      
                move.w  D4, D0                                                  
                rts          
;-------------------------------------------------------------------------------                 
Calc_VRAM_Pos_2:                                               ; Offset_0x00B7EE
                tst.w   (Two_Player_Flag).w                          ; $FFFFFFD8
                bne.s   Calc_VRAM_Pos_2_2P                     ; Offset_0x00B810                                         
                add.w   $0004(A3), D4                                           
                add.w   (A3), D5                                                
                andi.w  #$00F0, D4                                              
                andi.w  #$01F0, D5                                              
                lsl.w   #$04, D4                                                
                lsr.w   #$02, D5                                                
                add.w   D5, D4                                                  
                moveq   #$02, D0                                                
                swap.w  D0                                                      
                move.w  D4, D0                                                  
                rts                                                             
Calc_VRAM_Pos_2_2P:                                            ; Offset_0x00B810
                add.w   $0004(A3), D4                                           
                add.w   (A3), D5                                                
                andi.w  #$01F0, D4                                              
                andi.w  #$01F0, D5                                              
                lsl.w   #$03, D4                                                
                lsr.w   #$02, D5                                                
                add.w   D5, D4                                                  
                moveq   #$02, D0                                                
                swap.w  D0                                                      
                move.w  D4, D0                                                  
                rts                                                                                                                                            
;------------------------------------------------------------------------------- 
; Rotinas para calcular a posição da VRAM
; <<<-
;-------------------------------------------------------------------------------               
             
;===============================================================================
; Rotina de processamento de rolagem da tela durante o movimento dos personagens  
; <<<-
;=============================================================================== 

;===============================================================================
; Rotina para carregar os tiles da fase a partir da posição do jogador usado 
; ->>>          durante a carga da fase.
;===============================================================================
Load_Tiles_From_Start:                                         ; Offset_0x00B82C  
                lea     (VDP_Control_Port), A5                       ; $00C00004
                lea     (VDP_Data_Port), A6                          ; $00C00000
                tst.w   (Two_Player_Flag).w                          ; $FFFFFFD8
                beq.s   Offset_0x00B84C
                lea     (Camera_X_2).w, A3                           ; $FFFFEE20
                lea     (Level_Map_Buffer).w, A4                     ; $FFFF8000
                move.w  #$6000, D2
                bsr.s   Offset_0x00B8B4
Offset_0x00B84C:
                lea     (Camera_X).w, A3                             ; $FFFFEE00
                lea     (Level_Map_Buffer).w, A4                     ; $FFFF8000
                move.w  #$4000, D2
                bsr.s   Offset_0x00B884
                lea     (Camera_X_x2).w, A3                          ; $FFFFEE08
                lea     (Level_Map_Bg_Buffer).w, A4                  ; $FFFF8080
                move.w  #$6000, D2
                moveq   #$00, D4
                cmpi.b  #$0C, (Level_Id).w                           ; $FFFFFE10
                beq     Offset_0x00B886
                tst.w   (Two_Player_Flag).w                          ; $FFFFFFD8
                beq     Offset_0x00B884
                cmpi.b  #$0B, (Level_Id).w                           ; $FFFFFE10
                beq     Offset_0x00B8E4
Offset_0x00B884:
                moveq   #-$10, D4
Offset_0x00B886:
                moveq   #$0F, D6
Offset_0x00B888:
                movem.l D4-D6, -(A7)
                moveq   #$00, D5
                move.w  D4, D1
                bsr     Calc_VRAM_Pos                          ; Offset_0x00B7B2
                move.w  D1, D4
                moveq   #$00, D5
                moveq   #$1F, D6
                move    #$2700, SR
                bsr     Offset_0x00B4B6
                move    #$2300, SR
                movem.l (A7)+, D4-D6
                addi.w  #$0010, D4
                dbra    D6, Offset_0x00B888
                rts
Offset_0x00B8B4:
                moveq   #-$10, D4
                moveq   #$0F, D6
Offset_0x00B8B8:
                movem.l D4-D6, -(A7)
                moveq   #$00, D5
                move.w  D4, D1
                bsr     Calc_VRAM_Pos_2                        ; Offset_0x00B7EE
                move.w  D1, D4
                moveq   #$00, D5
                moveq   #$1F, D6
                move    #$2700, SR
                bsr     Offset_0x00B4B6
                move    #$2300, SR
                movem.l (A7)+, D4-D6
                addi.w  #$0010, D4
                dbra    D6, Offset_0x00B8B8
                rts
Offset_0x00B8E4:
                moveq   #$00, D4
                moveq   #$1F, D6
Offset_0x00B8E8:
                movem.l D4-D6, -(A7)
                moveq   #$00, D5
                move.w  D4, D1
                bsr     Calc_VRAM_Pos_2P_D4                    ; Offset_0x00B7D8
                move.w  D1, D4
                moveq   #$00, D5
                moveq   #$1F, D6
                move    #$2700, SR
                bsr     Offset_0x00B4C6
                move    #$2300, SR
                movem.l (A7)+, D4-D6
                addi.w  #$0010, D4
                dbra    D6, Offset_0x00B8E8
                rts
;===============================================================================
; Rotina para carregar os tiles da fase a partir da posição do jogador usado 
; <<<-          durante a carga da fase.
;===============================================================================

;===============================================================================
; Carregar os Tiles 16x16, 128x128 e o leiaute das fases    
; ->>>
;===============================================================================  
Main_Level_Load_16_128_Blocks:                                 ; Offset_0x00B914
                moveq   #$00, D0                                                
                move.b  (Level_Id).w, D0                             ; $FFFFFE10
                add.w   D0, D0                                                  
                add.w   D0, D0                                                  
                move.w  D0, D1                                                  
                add.w   D0, D0                                                  
                add.w   D1, D0                                                  
                lea     (TilesMainTable), A2                   ; Offset_0x03AB70
                lea     $00(A2, D0), A2                                         
                move.l  A2, -(A7)                                               
                addq.w  #$04, A2                                                
                move.l  (A2)+, D0                                               
                andi.l  #$00FFFFFF, D0                                          
                move.l  D0, A0                                                  
                lea     (Blocks_Mem_Address).w, A1                   ; $FFFF9000                                    
                bsr     J_KosinskiDec                          ; Offset_0x00BB1C
                cmpi.b  #$07, (Level_Id).w                           ; $FFFFFE10
                bne.s   Offset_0x00B960                                         
                lea     (Blocks_Mem_Address+$0980).w, A1             ; $FFFF9980                                   
                lea     (Hill_Top_16x16_Map), A0               ; Offset_0x0922E6
                move.w  #$03FF, D2                                              
Offset_0x00B95A:
                move.w  (A0)+, (A1)+                                            
                dbra    D2, Offset_0x00B95A                                     
Offset_0x00B960:
                tst.w   (Two_Player_Flag).w                          ; $FFFFFFD8
                beq.s   Offset_0x00B984                                         
                lea     (Blocks_Mem_Address).w, A1                   ; $FFFF9000                              
                move.w  #$0BFF, D2                                              
Offset_0x00B96E:
                move.w  (A1), D0                                                
                move.w  D0, D1                                                  
                andi.w  #$F800, D0                                              
                andi.w  #$07FF, D1                                              
                lsr.w   #$01, D1                                                
                or.w    D1, D0                                                  
                move.w  D0, (A1)+                                               
                dbra    D2, Offset_0x00B96E                                     
Offset_0x00B984:
                move.l  (A2)+, D0                                               
                andi.l  #$00FFFFFF, D0                                          
                move.l  D0, A0                                                  
                lea     (M68K_RAM_Start), A1                         ; $FFFF0000
                bsr     J_KosinskiDec                          ; Offset_0x00BB1C
                bsr     Offset_0x00B9B6                                         
                move.l  (A7)+, A2                                               
                addq.w  #$04, A2                                                
                moveq   #$00, D0                                                
                move.b  (A2), D0                                                
                beq.s   Offset_0x00B9AA                                         
                bsr     J_LoadPLC                              ; Offset_0x00BB16
Offset_0x00B9AA:
                addq.w  #$04, A2                                                
                moveq   #$00, D0                                                
                move.b  (A2), D0                                                
                bsr     J_PalLoad2                             ; Offset_0x00BB10
                rts                                                             
Offset_0x00B9B6:
                moveq   #$00, D0                                                
                move.w  (Level_Id).w, D0                             ; $FFFFFE10
                ror.b   #$01, D0                                                
                lsr.w   #$06, D0                                                
                lea     (Level_Layout), A0                     ; Offset_0x04BAEA
                move.w  $00(A0, D0), D0                                         
                lea     $00(A0, D0.l), A0                                       
                lea     (Level_Map_Buffer).w, A1                     ; $FFFF8000                                  
                bra     J_KosinskiDec                          ; Offset_0x00BB1C
;===============================================================================  
; S2B_Load_Level_Layout: ; Left over do Sonic 2 Beta, não usado ; Offset_0x00B9D6
                lea     (Level_Map_Buffer).w, A3                     ; $FFFF8000
                move.w  #$03FF, D1
                moveq   #$00, D0
Offset_0x00B9E0:
                move.l  D0, (A3)+
                dbra    D1, Offset_0x00B9E0
                lea     (Level_Map_Buffer).w, A3                     ; $FFFF8000
                moveq   #$00, D1
                bsr     Offset_0x00B9F6
                lea     (Level_Map_Bg_Buffer).w, A3                  ; $FFFF8080
                moveq   #$02, D1
Offset_0x00B9F6:
                moveq   #$00, D0
                move.w  (Level_Id).w, D0                             ; $FFFFFE10
                ror.b   #$01, D0
                lsr.w   #$05, D0
                add.w   D1, D0
                lea     (Level_Layout), A1                     ; Offset_0x04BAEA
                move.w  $00(A1, D0), D0
                lea     $00(A1, D0.l), A1
                moveq   #$00, D1
                move.w  D1, D2
                move.b  (A1)+, D1
                move.b  (A1)+, D2
                move.l  D1, D5
                addq.l  #$01, D5
                moveq   #$00, D3
                move.w  #$0080, D3
                divu.w  D5, D3
                subq.w  #$01, D3
Offset_0x00BA26:
                move.l  A3, A0
                move.w  D3, D4
Offset_0x00BA2A:
                move.l  A1, -(A7)
                move.w  D1, D0
Offset_0x00BA2E:
                move.b  (A1)+, (A0)+
                dbra    D0, Offset_0x00BA2E
                move.l  (A7)+, A1
                dbra    D4, Offset_0x00BA2A
                lea     $00(A1, D5), A1
                lea     $0100(A3), A3
                dbra    D2, Offset_0x00BA26
                rts    
;-------------------------------------------------------------------------------
; Offset_0x00BA48: ; Não usado
                lea     ($00FE0000), A1
                lea     ($00FE0080), A2
                lea     (M68K_RAM_Start), A3                         ; $FFFF0000
                move.w  #$003F, D1
Offset_0x00BA5E:
                bsr     Offset_0x00BAF0
                bsr     Offset_0x00BAF0
                dbra    D1, Offset_0x00BA5E
                lea     ($00FE0000), A1
                lea     (M68K_RAM_Start&$00FFFFFF), A2               ; $00FF0000
                move.w  #$003F, D1
Offset_0x00BA7A:
                move.w  #$0000, (A2)+
                dbra    D1, Offset_0x00BA7A
                move.w  #$3FBF, D1
Offset_0x00BA86:
                move.w  (A1)+, (A2)+
                dbra    D1, Offset_0x00BA86
                rts            
;-------------------------------------------------------------------------------
; Offset_0x00BA8E: ; Rotina não usada
                lea     ($00FE0000), A1
                lea     (M68K_RAM_Start), A3                         ; $FFFF0000
                moveq   #$1F, D0
Offset_0x00BA9C:
                move.l  (A1)+, (A3)+
                dbra    D0, Offset_0x00BA9C
                moveq   #$00, D7
                lea     ($00FE0000), A1
                move.w  #$00FF, D5
Offset_0x00BAAE:
                lea     (M68K_RAM_Start), A3                         ; $FFFF0000
                move.w  D7, D6
Offset_0x00BAB6:
                movem.l A1-A3, -(A7)
                move.w  #$003F, D0
Offset_0x00BABE:
                cmpm.w  (A1)+, (A3)+
                bne.s   Offset_0x00BAD4
                dbra    D0, Offset_0x00BABE
                movem.l (A7)+, A1-A3
                adda.w  #$0080, A1
                dbra    D5, Offset_0x00BAAE
                bra.s   Offset_0x00BAEE
Offset_0x00BAD4:
                movem.l (A7)+, A1-A3
                adda.w  #$0080, A3
                dbra    D6, Offset_0x00BAB6
                moveq   #$1F, D0
Offset_0x00BAE2:
                move.l  (A1)+, (A3)+
                dbra    D0, Offset_0x00BAE2
                addq.l  #$01, D7
                dbra    D5, Offset_0x00BAAE
Offset_0x00BAEE:
                bra.s   Offset_0x00BAEE
;-------------------------------------------------------------------------------
Offset_0x00BAF0: ; Referência de rotina não usada
                moveq   #$07, D0
Offset_0x00BAF2:
                move.l  (A3)+, (A1)+
                move.l  (A3)+, (A1)+
                move.l  (A3)+, (A1)+
                move.l  (A3)+, (A1)+
                move.l  (A3)+, (A2)+
                move.l  (A3)+, (A2)+
                move.l  (A3)+, (A2)+
                move.l  (A3)+, (A2)+
                dbra    D0, Offset_0x00BAF2
                adda.w  #$0080, A1
                adda.w  #$0080, A2
                rts                              
;===============================================================================
; Carregar os Tiles 16x16, 128x128 e o leiaute das fases    
; <<<-
;===============================================================================  
J_PalLoad2:                                                    ; Offset_0x00BB10
                jmp     (PalLoad1)                             ; Offset_0x002F32  
J_LoadPLC:                                                     ; Offset_0x00BB16  
                jmp     (LoadPLC)                              ; Offset_0x001BB4
J_KosinskiDec:                                                 ; Offset_0x00BB1C    
                jmp     (KosinskiDec)                          ; Offset_0x001ED0
                dc.w    $0000 
;===============================================================================
; Rotina para defenir os limites da tela e carregar os chefes de fase
; ->>>
;===============================================================================  
Dyn_Screen_Boss_Loader:                                        ; Offset_0x00BB24    
                moveq   #$00, D0
                move.b  (Level_Id).w, D0                             ; $FFFFFE10
                add.w   D0, D0
                move.w  DynResize_Index(PC, D0), D0            ; Offset_0x00BB8A
                jsr     DynResize_Index(PC, D0)                ; Offset_0x00BB8A
                moveq   #$02, D1
                move.w  ($FFFFEEC6).w, D0
                sub.w   ($FFFFEECE).w, D0
                beq.s   Offset_0x00BB62
                bcc.s   Offset_0x00BB64
                neg.w   D1
                move.w  (Camera_Y).w, D0                             ; $FFFFEE04
                cmp.w   ($FFFFEEC6).w, D0
                bls.s   Offset_0x00BB58
                move.w  D0, (Sonic_Level_Limits_Max_Y).w             ; $FFFFEECE
                andi.w  #$FFFE, (Sonic_Level_Limits_Max_Y).w         ; $FFFFEECE
Offset_0x00BB58:
                add.w   D1, ($FFFFEECE).w
                move.b  #$01, (Vertical_Scroll_Flag).w               ; $FFFFEEDE
Offset_0x00BB62:
                rts
Offset_0x00BB64:
                move.w  (Camera_Y).w, D0                             ; $FFFFEE04
                addi.w  #$0008, D0
                cmp.w   ($FFFFEECE).w, D0
                bcs.s   Offset_0x00BB7E
                btst    #$01, ($FFFFB022).w
                beq.s   Offset_0x00BB7E
                add.w   D1, D1
                add.w   D1, D1
Offset_0x00BB7E:
                add.w   D1, ($FFFFEECE).w
                move.b  #$01, (Vertical_Scroll_Flag).w               ; $FFFFEEDE
                rts   
;-------------------------------------------------------------------------------
DynResize_Index:                                               ; Offset_0x00BB8A
                dc.w    DynResize_GHz-DynResize_Index          ; Offset_0x00BBAC
                dc.w    DynResize_Lvl1-DynResize_Index         ; Offset_0x00BC38
                dc.w    DynResize_Wz-DynResize_Index           ; Offset_0x00BC3A
                dc.w    DynResize_Lvl3-DynResize_Index         ; Offset_0x00BC3C
                dc.w    DynResize_Mz-DynResize_Index           ; Offset_0x00BC3E
                dc.w    DynResize_Mz3-DynResize_Index          ; Offset_0x00BC40
                dc.w    DynResize_SFz-DynResize_Index          ; Offset_0x00BCE6
                dc.w    DynResize_HTz-DynResize_Index          ; Offset_0x00BDA8
                dc.w    DynResize_HPz-DynResize_Index          ; Offset_0x00C430
                dc.w    DynResize_Lvl9-DynResize_Index         ; Offset_0x00C432
                dc.w    DynResize_OOz-DynResize_Index          ; Offset_0x00C434
                dc.w    DynResize_DHz-DynResize_Index          ; Offset_0x00C4E2
                dc.w    DynResize_CNz-DynResize_Index          ; Offset_0x00C5D4
                dc.w    DynResize_CPz-DynResize_Index          ; Offset_0x00C68E
                dc.w    DynResize_DEz-DynResize_Index          ; Offset_0x00C736
                dc.w    DynResize_NGHz-DynResize_Index         ; Offset_0x00C7C0
                dc.w    DynResize_SCz-DynResize_Index          ; Offset_0x00C868
;===============================================================================                     
DynResize_GHz:                                                 ; Offset_0x00BBAC
                tst.b   (Act_Id).w                                   ; $FFFFFE11
                bne.s   DynResize_GHz_Act_2                    ; Offset_0x00BBB4
                rts                                                                   
;-------------------------------------------------------------------------------  
DynResize_GHz_Act_2:                                           ; Offset_0x00BBB4
                moveq   #$00, D0
                move.b  (Dyn_Resize_Routine).w, D0                   ; $FFFFEEDF
                move.w  DynResize_GHz_Idx(PC, D0), D0          ; Offset_0x00BBC2
                jmp     DynResize_GHz_Idx(PC, D0)              ; Offset_0x00BBC2        
;-------------------------------------------------------------------------------  
DynResize_GHz_Idx:                                             ; Offset_0x00BBC2
                dc.w    Offset_0x00BBC8-DynResize_GHz_Idx
                dc.w    Offset_0x00BC12-DynResize_GHz_Idx
                dc.w    Offset_0x00BC2C-DynResize_GHz_Idx           
;------------------------------------------------------------------------------- 
Offset_0x00BBC8:
                cmpi.w  #$26E0, (Camera_X).w                         ; $FFFFEE00
                bcs.s   Offset_0x00BC10
                move.w  (Camera_X).w, (Sonic_Level_Limits_Min_X).w ; $FFFFEE00, $FFFFEEC8
                move.w  #$0390, ($FFFFEEC6).w
                addq.b  #$02, (Dyn_Resize_Routine).w                 ; $FFFFEEDF
                bsr     SingleObjectLoad                       ; Offset_0x013BAA
                bne.s   Offset_0x00BBFC
                move.b  #$56, (A1)        ; Carrega o objeto 0x56 - Chefe da GHz
                move.b  #$81, Obj_Subtype(A1)                            ; $0028
                move.w  #$29D0, Obj_X(A1)                                ; $0008
                move.w  #$0426, Obj_Y(A1)                                ; $000C
Offset_0x00BBFC:
                move.w  #$0093, D0
                bsr     Jmp_00_To_Play_Music                   ; Offset_0x00C908
                move.b  #$02, (Boss_Flag).w                          ; $FFFFF7AA
                moveq   #$29, D0
                bra     Jmp_00_To_LoadPLC                      ; Offset_0x00C902
Offset_0x00BC10:
                rts 
;------------------------------------------------------------------------------- 
Offset_0x00BC12:
                cmpi.w  #$2880, (Camera_X).w                         ; $FFFFEE00
                bcs.s   Offset_0x00BC2A
                move.w  #$2940, (Sonic_Level_Limits_Min_X).w         ; $FFFFEEC8
                move.w  #$28F0, (Sonic_Level_Limits_Min_X).w         ; $FFFFEEC8
                addq.b  #$02, (Dyn_Resize_Routine).w                 ; $FFFFEEDF
Offset_0x00BC2A:
                rts   
;------------------------------------------------------------------------------- 
Offset_0x00BC2C:
                tst.b   ($FFFFF7A7).w
                beq.s   Offset_0x00BC36
                bsr     Jmp_00_To_Load_Level_Results           ; Offset_0x00C8FC
Offset_0x00BC36:
                rts
;===============================================================================  
DynResize_Lvl1:                                                ; Offset_0x00BC38   
                rts
;===============================================================================  
DynResize_Wz:                                                  ; Offset_0x00BC3A   
                rts
;=============================================================================== 
DynResize_Lvl3:                                                ; Offset_0x00BC3C   
                rts
;=============================================================================== 
DynResize_Mz:                                                  ; Offset_0x00BC3E    
                rts
;=============================================================================== 
DynResize_Mz3:                                                 ; Offset_0x00BC40  
                moveq   #$00, D0
                move.b  (Dyn_Resize_Routine).w, D0                   ; $FFFFEEDF
                move.w  DynResize_Mz3_Idx(PC, D0), D0          ; Offset_0x00BC4E
                jmp     DynResize_Mz3_Idx(PC, D0)              ; Offset_0x00BC4E
;------------------------------------------------------------------------------- 
DynResize_Mz3_Idx:                                             ; Offset_0x00BC4E
                dc.w    Offset_0x00BC56-DynResize_Mz3_Idx
                dc.w    Offset_0x00BC70-DynResize_Mz3_Idx
                dc.w    Offset_0x00BCA8-DynResize_Mz3_Idx
                dc.w    Offset_0x00BCDA-DynResize_Mz3_Idx
;-------------------------------------------------------------------------------  
Offset_0x00BC56:
                cmpi.w  #$2980, (Camera_X).w                         ; $FFFFEE00
                bcs.s   Offset_0x00BC6E
                move.w  (Camera_X).w, (Sonic_Level_Limits_Min_X).w ; $FFFFEE00, $FFFFEEC8
                move.w  #$0400, ($FFFFEEC6).w
                addq.b  #$02, (Dyn_Resize_Routine).w                 ; $FFFFEEDF
Offset_0x00BC6E:
                rts  
;-------------------------------------------------------------------------------   
Offset_0x00BC70:
                cmpi.w  #$2A80, (Camera_X).w                         ; $FFFFEE00
                bcs.s   Offset_0x00BCA6
                move.w  #$2AB0, (Sonic_Level_Limits_Min_X).w         ; $FFFFEEC8
                move.w  #$2AB0, (Sonic_Level_Limits_Max_X).w         ; $FFFFEECA
                move.w  #$2AB0, (Sonic_Level_Limits_Max_X).w         ; $FFFFEECA
                addq.b  #$02, (Dyn_Resize_Routine).w                 ; $FFFFEEDF
                move.w  #$00F9, D0
                bsr     Jmp_00_To_Play_Music                   ; Offset_0x00C908
                clr.b   ($FFFFF73A).w
                move.b  #$07, (Boss_Flag).w                          ; $FFFFF7AA
                moveq   #$2E, D0
                bsr     Jmp_00_To_LoadPLC                      ; Offset_0x00C902
Offset_0x00BCA6:
                rts    
;------------------------------------------------------------------------------- 
Offset_0x00BCA8:
                cmpi.w  #$0400, (Camera_Y).w                         ; $FFFFEE04
                bcs.s   Offset_0x00BCB6
                move.w  #$0400, (Camera_Min_Y).w                     ; $FFFFEECC
Offset_0x00BCB6:
                addq.b  #$01, ($FFFFF73A).w
                cmpi.b  #$5A, ($FFFFF73A).w
                bcs.s   Offset_0x00BCD8
                bsr     SingleObjectLoad                       ; Offset_0x013BAA
                bne.s   Offset_0x00BCCC
                move.b  #$54, (A1)         ; Carrega o objeto 0x54 - Chefe da Mz
Offset_0x00BCCC:
                addq.b  #$02, (Dyn_Resize_Routine).w                 ; $FFFFEEDF
                move.w  #$0093, D0
                bsr     Jmp_00_To_Play_Music                   ; Offset_0x00C908
Offset_0x00BCD8:
                rts     
;------------------------------------------------------------------------------- 
Offset_0x00BCDA:
                tst.b   ($FFFFF7A7).w
                beq.s   Offset_0x00BCE4
                bsr     Jmp_00_To_Load_Level_Results           ; Offset_0x00C8FC
Offset_0x00BCE4:
                rts    
;=============================================================================== 
DynResize_SFz:                                                 ; Offset_0x00BCE6 
                moveq   #$00, D0
                move.b  (Dyn_Resize_Routine).w, D0                   ; $FFFFEEDF
                move.w  DynResize_SFz_Idx(PC, D0), D0          ; Offset_0x00BCF4
                jmp     DynResize_SFz_Idx(PC, D0)              ; Offset_0x00BCF4
;-------------------------------------------------------------------------------  
DynResize_SFz_Idx:                                             ; Offset_0x00BCF4
                dc.w    Offset_0x00BCFC-DynResize_SFz_Idx
                dc.w    Offset_0x00BD20-DynResize_SFz_Idx
                dc.w    Offset_0x00BD42-DynResize_SFz_Idx
                dc.w    Offset_0x00BD74-DynResize_SFz_Idx
;-------------------------------------------------------------------------------    
Offset_0x00BCFC:
                move.l  (Camera_X).w, (Camera_X_x2).w     ; $FFFFEE00, $FFFFEE08
                move.l  (Camera_Y).w, (Camera_Y_x4).w     ; $FFFFEE04, $FFFFEE0C
                moveq   #$00, D0
                move.w  D0, (Horizontal_Scrolling_Sub).w             ; $FFFFEEB4
                move.w  D0, (Vertical_Scrolling_Sub).w               ; $FFFFEEB6
                move.w  D0, ($FFFFEEE2).w
                move.w  D0, ($FFFFEEE4).w
                addq.b  #$02, (Dyn_Resize_Routine).w                 ; $FFFFEEDF
                rts
Offset_0x00BD20:
                tst.b   ($FFFFF606).w
                bpl.s   Offset_0x00BD2A
                addq.b  #$02, (Dyn_Resize_Routine).w                 ; $FFFFEEDF
Offset_0x00BD2A:
                move.w  (Horizontal_Scrolling).w, (Horizontal_Scrolling_Sub).w ; $FFFFEEB0, $FFFFEEB4
                move.w  (Vertical_Scrolling).w, (Vertical_Scrolling_Sub).w ; $FFFFEEB2, $FFFFEEB6
                move.w  (Camera_X).w, D0                             ; $FFFFEE00
                move.w  (Camera_Y).w, D1                             ; $FFFFEE04
                bra     Offset_0x00BF9A
Offset_0x00BD42:
                cmpi.w  #$0380, (Camera_Y).w                         ; $FFFFEE04
                bhi.s   Offset_0x00BD50
                addq.b  #$02, (Dyn_Resize_Routine).w                 ; $FFFFEEDF
                bra.s   Offset_0x00BD74
Offset_0x00BD50:
                cmpi.w  #$0800, ($FFFFEEE2).w
                beq.s   Offset_0x00BD5C
                addq.w  #$02, ($FFFFEEE2).w
Offset_0x00BD5C:
                move.w  (Horizontal_Scrolling).w, (Horizontal_Scrolling_Sub).w ; $FFFFEEB0, $FFFFEEB4
                move.w  (Vertical_Scrolling).w, (Vertical_Scrolling_Sub).w ; $FFFFEEB2, $FFFFEEB6
                move.w  (Camera_X).w, D0                             ; $FFFFEE00
                move.w  (Camera_Y).w, D1                             ; $FFFFEE04
                bra     Offset_0x00BF9A
Offset_0x00BD74:
                cmpi.w  #$FE00, ($FFFFEEE2).w
                beq.s   Offset_0x00BD90
                subi.w  #$0001, ($FFFFEEE2).w
                cmpi.w  #$0380, ($FFFFEEE4).w
                beq.s   Offset_0x00BD90
                addi.w  #$0001, ($FFFFEEE4).w
Offset_0x00BD90:
                move.w  (Horizontal_Scrolling).w, (Horizontal_Scrolling_Sub).w ; $FFFFEEB0, $FFFFEEB4
                move.w  (Vertical_Scrolling).w, (Vertical_Scrolling_Sub).w ; $FFFFEEB2, $FFFFEEB6
                move.w  (Camera_X).w, D0                             ; $FFFFEE00
                move.w  (Camera_Y).w, D1                             ; $FFFFEE04
                bra     Offset_0x00BF9A
;=============================================================================== 
DynResize_HTz:                                                 ; Offset_0x00BDA8
                tst.b   (Act_Id).w                                   ; $FFFFFE11
                bne     DynResize_HTz_Act_2                    ; Offset_0x00C00C
                moveq   #$00, D0
                move.b  (Dyn_Resize_Routine).w, D0                   ; $FFFFEEDF
                move.w  DynResize_HTz_Act_1_Idx(PC, D0), D0    ; Offset_0x00BDBE
                jmp     DynResize_HTz_Act_1_Idx(PC, D0)        ; Offset_0x00BDBE
;-------------------------------------------------------------------------------   
DynResize_HTz_Act_1_Idx:                                       ; Offset_0x00BDBE
                dc.w    Offset_0x00BDC4-DynResize_HTz_Act_1_Idx
                dc.w    Offset_0x00BE30-DynResize_HTz_Act_1_Idx
                dc.w    Offset_0x00BF36-DynResize_HTz_Act_1_Idx   
;-------------------------------------------------------------------------------     
Offset_0x00BDC4:
                cmpi.w  #$0400, (Camera_Y).w                         ; $FFFFEE04
                bcs.s   Offset_0x00BE0C
                cmpi.w  #$1800, (Camera_X).w                         ; $FFFFEE00
                bcs.s   Offset_0x00BE0C
                move.b  #$01, ($FFFFEEBC).w
                move.l  (Camera_X).w, (Camera_X_x2).w     ; $FFFFEE00, $FFFFEE08
                move.l  (Camera_Y).w, (Camera_Y_x4).w     ; $FFFFEE04, $FFFFEE0C
                moveq   #$00, D0
                move.w  D0, (Horizontal_Scrolling_Sub).w             ; $FFFFEEB4
                move.w  D0, (Vertical_Scrolling_Sub).w               ; $FFFFEEB6
                move.w  D0, ($FFFFEEE2).w
                move.w  #$0140, ($FFFFEEE4).w
                subi.w  #$0100, ($FFFFEE0C).w
                move.w  #$0000, ($FFFFEEE6).w
                addq.b  #$02, (Dyn_Resize_Routine).w                 ; $FFFFEEDF
Offset_0x00BE0A:
                rts
Offset_0x00BE0C:
                tst.b   ($FFFFEEBC).w
                beq.s   Offset_0x00BE0A
                move.w  #$0200, D0
                moveq   #$00, D1
                move.w  D1, (Horizontal_Scrolling_Sub).w             ; $FFFFEEB4
                move.w  D1, (Vertical_Scrolling_Sub).w               ; $FFFFEEB6
                bsr     Offset_0x00BF9A
                or.w    D0, D1
                bne.s   Offset_0x00BE0A
                move.b  #$00, ($FFFFEEBC).w
                rts         
;-------------------------------------------------------------------------------  
Offset_0x00BE30:
                cmpi.w  #$1978, (Camera_X).w                         ; $FFFFEE00
                bcs     Offset_0x00BEC2
                cmpi.w  #$1E00, (Camera_X).w                         ; $FFFFEE00
                bcs.s   Offset_0x00BE4A
                move.b  #$00, ($FFFFEEBD).w
                bra.s   Offset_0x00BEC2
Offset_0x00BE4A:
                tst.b   ($FFFFEEE8).w
                bne.s   Offset_0x00BE7A
                cmpi.w  #$0140, ($FFFFEEE4).w
                beq.s   Offset_0x00BEA4
                move.w  ($FFFFFE04).w, D0
                move.w  D0, D1
                andi.w  #$0003, D0
                bne.s   Offset_0x00BEC2
                addq.w  #$01, ($FFFFEEE4).w
                andi.w  #$003F, D1
                bne.s   Offset_0x00BEC2
                move.w  #$00E1, D0
                jsr     (Play_Sfx)                             ; Offset_0x001912
                bra.s   Offset_0x00BEC2
Offset_0x00BE7A:
                cmpi.w  #$00E0, ($FFFFEEE4).w
                beq.s   Offset_0x00BEA4
                move.w  ($FFFFFE04).w, D0
                move.w  D0, D1
                andi.w  #$0003, D0
                bne.s   Offset_0x00BEC2
                subq.w  #$01, ($FFFFEEE4).w
                andi.w  #$003F, D1
                bne.s   Offset_0x00BEC2
                move.w  #$00E1, D0
                jsr     (Play_Sfx)                             ; Offset_0x001912
                bra.s   Offset_0x00BEC2
Offset_0x00BEA4:
                move.b  #$00, ($FFFFEEBD).w
                subq.w  #$01, ($FFFFEEE6).w
                bpl.s   Offset_0x00BEC2
                move.w  #$0078, ($FFFFEEE6).w
                eori.b  #$01, ($FFFFEEE8).w
                move.b  #$01, ($FFFFEEBD).w
Offset_0x00BEC2:
                cmpi.w  #$1800, (Camera_X).w                         ; $FFFFEE00
                bcs.s   Offset_0x00BEEA
                cmpi.w  #$1F00, (Camera_X).w                         ; $FFFFEE00
                bcc.s   Offset_0x00BF10
                move.w  (Horizontal_Scrolling).w, (Horizontal_Scrolling_Sub).w ; $FFFFEEB0, $FFFFEEB4
                move.w  (Vertical_Scrolling).w, (Vertical_Scrolling_Sub).w ; $FFFFEEB2, $FFFFEEB6
                move.w  (Camera_X).w, D0                             ; $FFFFEE00
                move.w  (Camera_Y).w, D1                             ; $FFFFEE04
                bra     Offset_0x00BF9A
Offset_0x00BEEA:
                move.l  #$04000000, (Camera_X_x2).w                  ; $FFFFEE08
                moveq   #$00, D0
                move.l  D0, (Camera_Y_x4).w                          ; $FFFFEE0C
                move.l  D0, ($FFFFEEE2).w
                move.b  D0, ($FFFFEEE8).w
                subq.b  #$02, (Dyn_Resize_Routine).w                 ; $FFFFEEDF
                move.w  #$00F8, D0
                jsr     (Play_Sfx)                             ; Offset_0x001912
                rts
Offset_0x00BF10:
                move.l  #$04000000, (Camera_X_x2).w                  ; $FFFFEE08
                moveq   #$00, D0
                move.l  D0, (Camera_Y_x4).w                          ; $FFFFEE0C
                move.l  D0, ($FFFFEEE2).w
                move.b  D0, ($FFFFEEE8).w
                addq.b  #$02, (Dyn_Resize_Routine).w                 ; $FFFFEEDF
                move.w  #$00F8, D0
                jsr     (Play_Sfx)                             ; Offset_0x001912
                rts   
;-------------------------------------------------------------------------------  
Offset_0x00BF36:
                cmpi.w  #$1F00, (Camera_X).w                         ; $FFFFEE00
                bcc.s   Offset_0x00BF76
                move.b  #$01, ($FFFFEEBC).w
                move.l  (Camera_X).w, (Camera_X_x2).w     ; $FFFFEE00, $FFFFEE08
                move.l  (Camera_Y).w, (Camera_Y_x4).w     ; $FFFFEE04, $FFFFEE0C
                moveq   #$00, D0
                move.w  D0, (Horizontal_Scrolling_Sub).w             ; $FFFFEEB4
                move.w  D0, (Vertical_Scrolling_Sub).w               ; $FFFFEEB6
                move.w  D0, ($FFFFEEE2).w
                move.w  #$0140, ($FFFFEEE4).w
                subi.w  #$0100, ($FFFFEE0C).w
                move.w  #$0000, ($FFFFEEE6).w
                subq.b  #$02, (Dyn_Resize_Routine).w                 ; $FFFFEEDF
Offset_0x00BF74:
                rts
Offset_0x00BF76:
                tst.b   ($FFFFEEBC).w
                beq.s   Offset_0x00BF74
                move.w  #$0200, D0
                moveq   #$00, D1
                move.w  D1, (Horizontal_Scrolling_Sub).w             ; $FFFFEEB4
                move.w  D1, (Vertical_Scrolling_Sub).w               ; $FFFFEEB6
                bsr     Offset_0x00BF9A
                or.w    D0, D1
                bne.s   Offset_0x00BF74
                move.b  #$00, ($FFFFEEBC).w
                rts
;-------------------------------------------------------------------------------                
Offset_0x00BF9A:  ; Usado também pela rotina DynResize_SFz ( Sky Fortress )
                sub.w   ($FFFFEE08).w, D0
                sub.w   ($FFFFEEE2).w, D0
                bpl.s   Offset_0x00BFB0
                cmpi.w  #$FFF0, D0
                bgt.s   Offset_0x00BFAE
                move.w  #$FFF0, D0
Offset_0x00BFAE:
                bra.s   Offset_0x00BFBA
Offset_0x00BFB0:
                cmpi.w  #$0010, D0
                bcs.s   Offset_0x00BFBA
                move.w  #$0010, D0
Offset_0x00BFBA:
                move.b  D0, (Horizontal_Scrolling_Sub).w             ; $FFFFEEB4
                sub.w   ($FFFFEE0C).w, D1
                sub.w   ($FFFFEEE4).w, D1
                bpl.s   Offset_0x00BFD4
                cmpi.w  #$FFF0, D1
                bgt.s   Offset_0x00BFD2
                move.w  #$FFF0, D1
Offset_0x00BFD2:
                bra.s   Offset_0x00BFDE
Offset_0x00BFD4:
                cmpi.w  #$0010, D1
                bcs.s   Offset_0x00BFDE
                move.w  #$0010, D1
Offset_0x00BFDE:
                move.b  D1, (Vertical_Scrolling_Sub).w               ; $FFFFEEB6
                rts    
;-------------------------------------------------------------------------------
; Offset_0x00BFE4: ; Não usado
                btst    #$00, ($FFFFF606).w
                beq.s   Offset_0x00BFF6
                tst.w   ($FFFFEEE4).w
                beq.s   Offset_0x00BFF6
                subq.w  #$01, ($FFFFEEE4).w
Offset_0x00BFF6:
                btst    #$01, ($FFFFF606).w
                beq.s   Offset_0x00C00A
                cmpi.w  #$0700, ($FFFFEEE4).w
                beq.s   Offset_0x00C00A
                addq.w  #$01, ($FFFFEEE4).w
Offset_0x00C00A:
                rts
;-------------------------------------------------------------------------------
DynResize_HTz_Act_2:                                           ; Offset_0x00C00C
                bsr     Offset_0x00C388
                moveq   #$00, D0
                move.b  (Dyn_Resize_Routine).w, D0                   ; $FFFFEEDF
                move.w  DynResize_HTz_Act_2_Idx(PC, D0), D0    ; Offset_0x00C01E
                jmp     DynResize_HTz_Act_2_Idx(PC, D0)        ; Offset_0x00C01E
;-------------------------------------------------------------------------------
DynResize_HTz_Act_2_Idx:                                       ; Offset_0x00C01E
                dc.w    Offset_0x00C030-DynResize_HTz_Act_2_Idx
                dc.w    Offset_0x00C0B2-DynResize_HTz_Act_2_Idx
                dc.w    Offset_0x00C1B8-DynResize_HTz_Act_2_Idx
                dc.w    Offset_0x00C21C-DynResize_HTz_Act_2_Idx
                dc.w    Offset_0x00C31A-DynResize_HTz_Act_2_Idx
                dc.w    Offset_0x00C3A6-DynResize_HTz_Act_2_Idx
                dc.w    Offset_0x00C3C0-DynResize_HTz_Act_2_Idx
                dc.w    Offset_0x00C3F2-DynResize_HTz_Act_2_Idx
                dc.w    Offset_0x00C424-DynResize_HTz_Act_2_Idx   
;-------------------------------------------------------------------------------
Offset_0x00C030:
                cmpi.w  #$14C0, (Camera_X).w                         ; $FFFFEE00
                bcs.s   Offset_0x00C08E
                move.b  #$01, ($FFFFEEBC).w
                move.l  (Camera_X).w, (Camera_X_x2).w     ; $FFFFEE00, $FFFFEE08
                move.l  (Camera_Y).w, (Camera_Y_x4).w     ; $FFFFEE04, $FFFFEE0C
                moveq   #$00, D0
                move.w  D0, (Horizontal_Scrolling_Sub).w             ; $FFFFEEB4
                move.w  D0, (Vertical_Scrolling_Sub).w               ; $FFFFEEB6
                move.w  D0, ($FFFFEEE2).w
                move.w  #$02C0, ($FFFFEEE4).w
                subi.w  #$0100, ($FFFFEE0C).w
                move.w  #$0000, ($FFFFEEE6).w
                addq.b  #$02, (Dyn_Resize_Routine).w                 ; $FFFFEEDF
                cmpi.w  #$0380, (Camera_Y).w                         ; $FFFFEE04
                bcs.s   Offset_0x00C08C
                move.w  #$F980, ($FFFFEEE2).w
                addi.w  #$0480, ($FFFFEE08).w
                move.w  #$0300, ($FFFFEEE4).w
                addq.b  #$06, (Dyn_Resize_Routine).w                 ; $FFFFEEDF
Offset_0x00C08C:
                rts
Offset_0x00C08E:
                tst.b   ($FFFFEEBC).w
                beq.s   Offset_0x00C08C
                move.w  #$0200, D0
                moveq   #$00, D1
                move.w  D1, (Horizontal_Scrolling_Sub).w             ; $FFFFEEB4
                move.w  D1, (Vertical_Scrolling_Sub).w               ; $FFFFEEB6
                bsr     Offset_0x00BF9A
                or.w    D0, D1
                bne.s   Offset_0x00C08C
                move.b  #$00, ($FFFFEEBC).w
                rts        
;-------------------------------------------------------------------------------
Offset_0x00C0B2:
                cmpi.w  #$1678, (Camera_X).w                         ; $FFFFEE00
                bcs     Offset_0x00C144
                cmpi.w  #$1A00, (Camera_X).w                         ; $FFFFEE00
                bcs.s   Offset_0x00C0CC
                move.b  #$00, ($FFFFEEBD).w
                bra.s   Offset_0x00C144
Offset_0x00C0CC:
                tst.b   ($FFFFEEE8).w
                bne.s   Offset_0x00C0FC
                cmpi.w  #$02C0, ($FFFFEEE4).w
                beq.s   Offset_0x00C126
                move.w  ($FFFFFE04).w, D0
                move.w  D0, D1
                andi.w  #$0003, D0
                bne.s   Offset_0x00C144
                addq.w  #$01, ($FFFFEEE4).w
                andi.w  #$003F, D1
                bne.s   Offset_0x00C144
                move.w  #$00E1, D0
                jsr     (Play_Sfx)                             ; Offset_0x001912
                bra.s   Offset_0x00C144
Offset_0x00C0FC:
                cmpi.w  #$0000, ($FFFFEEE4).w
                beq.s   Offset_0x00C126
                move.w  ($FFFFFE04).w, D0
                move.w  D0, D1
                andi.w  #$0003, D0
                bne.s   Offset_0x00C144
                subq.w  #$01, ($FFFFEEE4).w
                andi.w  #$003F, D1
                bne.s   Offset_0x00C144
                move.w  #$00E1, D0
                jsr     (Play_Sfx)                             ; Offset_0x001912
                bra.s   Offset_0x00C144
Offset_0x00C126:
                move.b  #$00, ($FFFFEEBD).w
                subq.w  #$01, ($FFFFEEE6).w
                bpl.s   Offset_0x00C144
                move.w  #$0078, ($FFFFEEE6).w
                eori.b  #$01, ($FFFFEEE8).w
                move.b  #$01, ($FFFFEEBD).w
Offset_0x00C144:
                cmpi.w  #$14C0, (Camera_X).w                         ; $FFFFEE00
                bcs.s   Offset_0x00C16C
                cmpi.w  #$1B00, (Camera_X).w                         ; $FFFFEE00
                bcc.s   Offset_0x00C192
                move.w  (Horizontal_Scrolling).w, (Horizontal_Scrolling_Sub).w ; $FFFFEEB0, $FFFFEEB4
                move.w  (Vertical_Scrolling).w, (Vertical_Scrolling_Sub).w ; $FFFFEEB2, $FFFFEEB6
                move.w  (Camera_X).w, D0                             ; $FFFFEE00
                move.w  (Camera_Y).w, D1                             ; $FFFFEE04
                bra     Offset_0x00BF9A
Offset_0x00C16C:
                move.l  #$04000000, (Camera_X_x2).w                  ; $FFFFEE08
                moveq   #$00, D0
                move.l  D0, (Camera_Y_x4).w                          ; $FFFFEE0C
                move.l  D0, ($FFFFEEE2).w
                move.b  D0, ($FFFFEEE8).w
                subq.b  #$02, (Dyn_Resize_Routine).w                 ; $FFFFEEDF
                move.w  #$00F8, D0
                jsr     (Play_Sfx)                             ; Offset_0x001912
                rts
Offset_0x00C192:
                move.l  #$04000000, (Camera_X_x2).w                  ; $FFFFEE08
                moveq   #$00, D0
                move.l  D0, (Camera_Y_x4).w                          ; $FFFFEE0C
                move.l  D0, ($FFFFEEE2).w
                move.b  D0, ($FFFFEEE8).w
                addq.b  #$02, (Dyn_Resize_Routine).w                 ; $FFFFEEDF
                move.w  #$00F8, D0
                jsr     (Play_Sfx)                             ; Offset_0x001912
                rts   
;-------------------------------------------------------------------------------
Offset_0x00C1B8:
                cmpi.w  #$1B00, (Camera_X).w                         ; $FFFFEE00
                bcc.s   Offset_0x00C1F8
                move.b  #$01, ($FFFFEEBC).w
                move.l  (Camera_X).w, (Camera_X_x2).w     ; $FFFFEE00, $FFFFEE08
                move.l  (Camera_Y).w, (Camera_Y_x4).w     ; $FFFFEE04, $FFFFEE0C
                moveq   #$00, D0
                move.w  D0, (Horizontal_Scrolling_Sub).w             ; $FFFFEEB4
                move.w  D0, (Vertical_Scrolling_Sub).w               ; $FFFFEEB6
                move.w  D0, ($FFFFEEE2).w
                move.w  #$02C0, ($FFFFEEE4).w
                subi.w  #$0100, ($FFFFEE0C).w
                move.w  #$0000, ($FFFFEEE6).w
                subq.b  #$02, (Dyn_Resize_Routine).w                 ; $FFFFEEDF
Offset_0x00C1F6:
                rts
Offset_0x00C1F8:
                tst.b   ($FFFFEEBC).w
                beq.s   Offset_0x00C1F6
                move.w  #$0200, D0
                moveq   #$00, D1
                move.w  D1, (Horizontal_Scrolling_Sub).w             ; $FFFFEEB4
                move.w  D1, (Vertical_Scrolling_Sub).w               ; $FFFFEEB6
                bsr     Offset_0x00BF9A
                or.w    D0, D1
                bne.s   Offset_0x00C1F6
                move.b  #$00, ($FFFFEEBC).w
                rts     
;-------------------------------------------------------------------------------
Offset_0x00C21C:
                cmpi.w  #$15F0, (Camera_X).w                         ; $FFFFEE00
                bcs     Offset_0x00C2A6
                cmpi.w  #$1AC0, (Camera_X).w                         ; $FFFFEE00
                bcc.s   Offset_0x00C2A6
                tst.b   ($FFFFEEE8).w
                bne.s   Offset_0x00C25E
                cmpi.w  #$0300, ($FFFFEEE4).w
                beq.s   Offset_0x00C288
                move.w  ($FFFFFE04).w, D0
                move.w  D0, D1
                andi.w  #$0003, D0
                bne.s   Offset_0x00C2A6
                addq.w  #$01, ($FFFFEEE4).w
                andi.w  #$003F, D1
                bne.s   Offset_0x00C2A6
                move.w  #$00E1, D0
                jsr     (Play_Sfx)                             ; Offset_0x001912
                bra.s   Offset_0x00C2A6
Offset_0x00C25E:
                cmpi.w  #$0000, ($FFFFEEE4).w
                beq.s   Offset_0x00C288
                move.w  ($FFFFFE04).w, D0
                move.w  D0, D1
                andi.w  #$0003, D0
                bne.s   Offset_0x00C2A6
                subq.w  #$01, ($FFFFEEE4).w
                andi.w  #$003F, D1
                bne.s   Offset_0x00C2A6
                move.w  #$00E1, D0
                jsr     (Play_Sfx)                             ; Offset_0x001912
                bra.s   Offset_0x00C2A6
Offset_0x00C288:
                move.b  #$00, ($FFFFEEBD).w
                subq.w  #$01, ($FFFFEEE6).w
                bpl.s   Offset_0x00C2A6
                move.w  #$0078, ($FFFFEEE6).w
                eori.b  #$01, ($FFFFEEE8).w
                move.b  #$01, ($FFFFEEBD).w
Offset_0x00C2A6:
                cmpi.w  #$14C0, (Camera_X).w                         ; $FFFFEE00
                bcs.s   Offset_0x00C2CE
                cmpi.w  #$1B00, (Camera_X).w                         ; $FFFFEE00
                bcc.s   Offset_0x00C2F4
                move.w  (Horizontal_Scrolling).w, (Horizontal_Scrolling_Sub).w ; $FFFFEEB0, $FFFFEEB4
                move.w  (Vertical_Scrolling).w, (Vertical_Scrolling_Sub).w ; $FFFFEEB2, $FFFFEEB6
                move.w  (Camera_X).w, D0                             ; $FFFFEE00
                move.w  (Camera_Y).w, D1                             ; $FFFFEE04
                bra     Offset_0x00BF9A
Offset_0x00C2CE:
                move.l  #$04000000, (Camera_X_x2).w                  ; $FFFFEE08
                moveq   #$00, D0
                move.l  D0, (Camera_Y_x4).w                          ; $FFFFEE0C
                move.l  D0, ($FFFFEEE2).w
                move.b  D0, ($FFFFEEE8).w
                subq.b  #$06, (Dyn_Resize_Routine).w                 ; $FFFFEEDF
                move.w  #$00F8, D0
                jsr     (Play_Sfx)                             ; Offset_0x001912
                rts
Offset_0x00C2F4:
                move.l  #$04000000, (Camera_X_x2).w                  ; $FFFFEE08
                moveq   #$00, D0
                move.l  D0, (Camera_Y_x4).w                          ; $FFFFEE0C
                move.l  D0, ($FFFFEEE2).w
                move.b  D0, ($FFFFEEE8).w
                addq.b  #$02, (Dyn_Resize_Routine).w                 ; $FFFFEEDF
                move.w  #$00F8, D0
                jsr     (Play_Sfx)                             ; Offset_0x001912
                rts    
;-------------------------------------------------------------------------------
Offset_0x00C31A:
                cmpi.w  #$1B00, (Camera_X).w                         ; $FFFFEE00
                bcc.s   Offset_0x00C362
                move.b  #$01, ($FFFFEEBC).w
                move.l  (Camera_X).w, (Camera_X_x2).w     ; $FFFFEE00, $FFFFEE08
                move.l  (Camera_Y).w, (Camera_Y_x4).w     ; $FFFFEE04, $FFFFEE0C
                moveq   #$00, D0
                move.w  D0, (Horizontal_Scrolling_Sub).w             ; $FFFFEEB4
                move.w  D0, (Vertical_Scrolling_Sub).w               ; $FFFFEEB6
                move.w  #$F980, ($FFFFEEE2).w
                addi.w  #$0480, ($FFFFEE08).w
                move.w  #$0300, ($FFFFEEE4).w
                subi.w  #$0100, ($FFFFEE0C).w
                move.w  #$0000, ($FFFFEEE6).w
                subq.b  #$02, (Dyn_Resize_Routine).w                 ; $FFFFEEDF
Offset_0x00C360:
                rts
Offset_0x00C362:
                tst.b   ($FFFFEEBC).w
                beq.s   Offset_0x00C360
                move.w  #$0200, D0
                moveq   #$00, D1
                move.w  D1, (Horizontal_Scrolling_Sub).w             ; $FFFFEEB4
                move.w  D1, (Vertical_Scrolling_Sub).w               ; $FFFFEEB6
                bsr     Offset_0x00BF9A
                or.w    D0, D1
                bne.s   Offset_0x00C360
                move.b  #$00, ($FFFFEEBC).w
                rts             
;-------------------------------------------------------------------------------    
                rts          
;-------------------------------------------------------------------------------
Offset_0x00C388:
                cmpi.w  #$2B00, (Camera_X).w                         ; $FFFFEE00
                bcs.s   Offset_0x00C3A4
                cmpi.b  #$0A, (Dyn_Resize_Routine).w                 ; $FFFFEEDF
                bge.s   Offset_0x00C3A4
                move.b  #$0A, (Dyn_Resize_Routine).w                 ; $FFFFEEDF
                move.b  #$00, ($FFFFEEBC).w
Offset_0x00C3A4:
                rts    
;-------------------------------------------------------------------------------
Offset_0x00C3A6:
                cmpi.w  #$2C00, (Camera_X).w                         ; $FFFFEE00
                bcs.s   Offset_0x00C3BE
                move.w  (Camera_X).w, (Sonic_Level_Limits_Min_X).w ; $FFFFEE00, $FFFFEEC8
                move.w  #$0480, ($FFFFEEC6).w
                addq.b  #$02, (Dyn_Resize_Routine).w                 ; $FFFFEEDF
Offset_0x00C3BE:
                rts     
;-------------------------------------------------------------------------------
Offset_0x00C3C0:
                cmpi.w  #$2EDF, (Camera_X).w                         ; $FFFFEE00
                bcs.s   Offset_0x00C3F0
                move.w  #$2EE0, (Sonic_Level_Limits_Min_X).w         ; $FFFFEEC8
                move.w  #$2F5E, (Sonic_Level_Limits_Max_X).w         ; $FFFFEECA
                addq.b  #$02, (Dyn_Resize_Routine).w                 ; $FFFFEEDF
                move.w  #$00F9, D0
                bsr     Jmp_00_To_Play_Music                   ; Offset_0x00C908
                clr.b   ($FFFFF73A).w
                move.b  #$03, (Boss_Flag).w                          ; $FFFFF7AA
                moveq   #$2A, D0
                bra     Jmp_00_To_LoadPLC                      ; Offset_0x00C902
Offset_0x00C3F0:
                rts     
;-------------------------------------------------------------------------------
Offset_0x00C3F2:
                cmpi.w  #$0478, (Camera_Y).w                         ; $FFFFEE04
                bcs.s   Offset_0x00C400
                move.w  #$0478, (Camera_Min_Y).w                     ; $FFFFEECC
Offset_0x00C400:
                addq.b  #$01, ($FFFFF73A).w
                cmpi.b  #$5A, ($FFFFF73A).w
                bcs.s   Offset_0x00C422
                bsr     SingleObjectLoad                       ; Offset_0x013BAA
                bne.s   Offset_0x00C416
                move.b  #$52, (A1)        ; Carrega o objeto 0x52 - Chefe da HTz
Offset_0x00C416:
                addq.b  #$02, (Dyn_Resize_Routine).w                 ; $FFFFEEDF
                move.w  #$0093, D0
                bsr     Jmp_00_To_Play_Music                   ; Offset_0x00C908
Offset_0x00C422:
                rts    
;-------------------------------------------------------------------------------
Offset_0x00C424:
                tst.b   ($FFFFF7A7).w
                beq.s   Offset_0x00C42E
                bsr     Jmp_00_To_Load_Level_Results           ; Offset_0x00C8FC
Offset_0x00C42E:
                rts
;=============================================================================== 
DynResize_HPz:                                                 ; Offset_0x00C430  
                rts
;=============================================================================== 
DynResize_Lvl9:                                                ; Offset_0x00C432  
                rts
;=============================================================================== 
DynResize_OOz:                                                 ; Offset_0x00C434
                tst.b   (Act_Id).w                                   ; $FFFFFE11
                bne.s   DynResize_OOz_Act_2                    ; Offset_0x00C43C
                rts
DynResize_OOz_Act_2:                                           ; Offset_0x00C43C
                moveq   #$00, D0
                move.b  (Dyn_Resize_Routine).w, D0                   ; $FFFFEEDF
                move.w  DynResize_OOz_Idx(PC, D0), D0          ; Offset_0x00C44A
                jmp     DynResize_OOz_Idx(PC, D0)              ; Offset_0x00C44A
;-------------------------------------------------------------------------------  
DynResize_OOz_Idx:                                             ; Offset_0x00C44A
                dc.w    Offset_0x00C452-DynResize_OOz_Idx
                dc.w    Offset_0x00C472-DynResize_OOz_Idx
                dc.w    Offset_0x00C4A4-DynResize_OOz_Idx
                dc.w    Offset_0x00C4D6-DynResize_OOz_Idx
;-------------------------------------------------------------------------------    
Offset_0x00C452:
                cmpi.w  #$2668, (Camera_X).w                         ; $FFFFEE00
                bcs.s   Offset_0x00C470
                move.w  (Camera_X).w, (Sonic_Level_Limits_Min_X).w ; $FFFFEE00, $FFFFEEC8
                move.w  #$02D8, ($FFFFB78C).w
                move.w  #$01E0, ($FFFFEEC6).w
                addq.b  #$02, (Dyn_Resize_Routine).w                 ; $FFFFEEDF
Offset_0x00C470:
                rts   
;-------------------------------------------------------------------------------  
Offset_0x00C472:
                cmpi.w  #$2880, (Camera_X).w                         ; $FFFFEE00
                bcs.s   Offset_0x00C4A2
                move.w  #$2880, (Sonic_Level_Limits_Min_X).w         ; $FFFFEEC8
                move.w  #$28C0, (Sonic_Level_Limits_Max_X).w         ; $FFFFEECA
                addq.b  #$02, (Dyn_Resize_Routine).w                 ; $FFFFEEDF
                move.w  #$00F9, D0
                bsr     Jmp_00_To_Play_Music                   ; Offset_0x00C908
                clr.b   ($FFFFF73A).w
                move.b  #$08, (Boss_Flag).w                          ; $FFFFF7AA
                moveq   #$2F, D0
                bra     Jmp_00_To_LoadPLC                      ; Offset_0x00C902
Offset_0x00C4A2:
                rts   
;-------------------------------------------------------------------------------  
Offset_0x00C4A4:
                cmpi.w  #$01D8, (Camera_Y).w                         ; $FFFFEE04
                bcs.s   Offset_0x00C4B2
                move.w  #$01D8, (Camera_Min_Y).w                     ; $FFFFEECC
Offset_0x00C4B2:
                addq.b  #$01, ($FFFFF73A).w
                cmpi.b  #$5A, ($FFFFF73A).w
                bcs.s   Offset_0x00C4D4
                bsr     SingleObjectLoad                       ; Offset_0x013BAA
                bne.s   Offset_0x00C4C8
                move.b  #$55, (A1)        ; Carrega o objeto 0x55 - Chefe da OOz
Offset_0x00C4C8:
                addq.b  #$02, (Dyn_Resize_Routine).w                 ; $FFFFEEDF
                move.w  #$0093, D0
                bsr     Jmp_00_To_Play_Music                   ; Offset_0x00C908
Offset_0x00C4D4:
                rts    
;-------------------------------------------------------------------------------  
Offset_0x00C4D6:
                tst.b   ($FFFFF7A7).w
                beq.s   Offset_0x00C4E0
                bsr     Jmp_00_To_Load_Level_Results           ; Offset_0x00C8FC
Offset_0x00C4E0:
                rts
;=============================================================================== 
DynResize_DHz:                                                 ; Offset_0x00C4E2
                tst.b   (Act_Id).w                                   ; $FFFFFE11
                bne.s   DynResize_DHz_Act_2                    ; Offset_0x00C4EA
                rts      
;------------------------------------------------------------------------------- 
DynResize_DHz_Act_2:                                           ; Offset_0x00C4EA
                moveq   #$00, D0
                move.b  (Dyn_Resize_Routine).w, D0                   ; $FFFFEEDF
                move.w  DynResize_DHz_Idx(PC, D0), D0          ; Offset_0x00C4F8
                jmp     DynResize_DHz_Idx(PC, D0)              ; Offset_0x00C4F8
;------------------------------------------------------------------------------- 
DynResize_DHz_Idx:                                             ; Offset_0x00C4F8
                dc.w    Offset_0x00C500-DynResize_DHz_Idx
                dc.w    Offset_0x00C51A-DynResize_DHz_Idx
                dc.w    Offset_0x00C57E-DynResize_DHz_Idx
                dc.w    Offset_0x00C5B0-DynResize_DHz_Idx              
;-------------------------------------------------------------------------------  
Offset_0x00C500:
                cmpi.w  #$2080, (Camera_X).w                         ; $FFFFEE00
                bcs.s   Offset_0x00C518
                move.w  (Camera_X).w, (Sonic_Level_Limits_Min_X).w ; $FFFFEE00, $FFFFEEC8
                move.w  #$05D0, ($FFFFEEC6).w
                addq.b  #$02, (Dyn_Resize_Routine).w                 ; $FFFFEEDF
Offset_0x00C518:
                rts      
;-------------------------------------------------------------------------------
Offset_0x00C51A:
                cmpi.w  #$20F0, (Camera_X).w                         ; $FFFFEE00
                bcs.s   Offset_0x00C57C
                move.w  #$20F0, (Sonic_Level_Limits_Max_X).w         ; $FFFFEECA
                move.w  #$20F0, (Sonic_Level_Limits_Min_X).w         ; $FFFFEEC8
                addq.b  #$02, (Dyn_Resize_Routine).w                 ; $FFFFEEDF
                move.w  #$00F9, D0
                bsr     Jmp_00_To_Play_Music                   ; Offset_0x00C908
                clr.b   ($FFFFF73A).w
                move.l  #$6C000002, (VDP_Control_Port)               ; $00C00004
                lea     (VDP_Data_Port), A6                          ; $00C00000
                lea     (Art_DHz_Boss_Rocks), A2               ; Offset_0x0876BA
                moveq   #$07, D0
Offset_0x00C556:
                move.l  (A2)+, (A6)
                move.l  (A2)+, (A6)
                move.l  (A2)+, (A6)
                move.l  (A2)+, (A6)
                move.l  (A2)+, (A6)
                move.l  (A2)+, (A6)
                move.l  (A2)+, (A6)
                move.l  (A2)+, (A6)
                dbra    D0, Offset_0x00C556
                move.b  #$05, (Boss_Flag).w                          ; $FFFFF7AA
                moveq   #$2C, D0
                bsr     Jmp_00_To_LoadPLC                      ; Offset_0x00C902
                moveq   #$19, D0
                bsr     Jmp_00_To_PalLoad2                     ; Offset_0x00C8F6
Offset_0x00C57C:
                rts     
;-------------------------------------------------------------------------------
Offset_0x00C57E:
                cmpi.w  #$05C8, (Camera_Y).w                         ; $FFFFEE04
                bcs.s   Offset_0x00C58C
                move.w  #$05C8, (Camera_Min_Y).w                     ; $FFFFEECC
Offset_0x00C58C:
                addq.b  #$01, ($FFFFF73A).w
                cmpi.b  #$5A, ($FFFFF73A).w
                bcs.s   Offset_0x00C5AE
                bsr     SingleObjectLoad                       ; Offset_0x013BAA
                bne.s   Offset_0x00C5A2
                move.b  #$57, (A1)        ; Carrega o objeto 0x57 - Chefe da DHz
Offset_0x00C5A2:
                addq.b  #$02, (Dyn_Resize_Routine).w                 ; $FFFFEEDF
                move.w  #$0093, D0
                bsr     Jmp_00_To_Play_Music                   ; Offset_0x00C908
Offset_0x00C5AE:
                rts  
;-------------------------------------------------------------------------------
Offset_0x00C5B0:
                tst.b   ($FFFFEEBD).w
                beq.s   Offset_0x00C5C8
                move.w  ($FFFFFE04).w, D0
                andi.w  #$001F, D0
                bne.s   Offset_0x00C5C8
                move.w  #$00E1, D0
                bsr     Jmp_00_To_Play_Sfx                     ; Offset_0x00C8F0
Offset_0x00C5C8:
                tst.b   ($FFFFF7A7).w
                beq.s   Offset_0x00C5D2
                bsr     Jmp_00_To_Load_Level_Results           ; Offset_0x00C8FC
Offset_0x00C5D2:
                rts
;=============================================================================== 
DynResize_CNz:                                                 ; Offset_0x00C5D4  
                jsr     (Process_Slot_Machine)                 ; Offset_0x026810
                tst.b   (Act_Id).w                                   ; $FFFFFE11
                bne.s   DynResize_CNz_Act_2                    ; Offset_0x00C5E2
                rts     
;------------------------------------------------------------------------------- 
DynResize_CNz_Act_2:                                           ; Offset_0x00C5E2
                moveq   #$00, D0
                move.b  (Dyn_Resize_Routine).w, D0                   ; $FFFFEEDF
                move.w  DynResize_CNz_Idx(PC, D0), D0          ; Offset_0x00C5F0
                jmp     DynResize_CNz_Idx(PC, D0)              ; Offset_0x00C5F0
;------------------------------------------------------------------------------- 
DynResize_CNz_Idx:                                             ; Offset_0x00C5F0
                dc.w    Offset_0x00C5F8-DynResize_CNz_Idx
                dc.w    Offset_0x00C618-DynResize_CNz_Idx
                dc.w    Offset_0x00C650-DynResize_CNz_Idx
                dc.w    Offset_0x00C682-DynResize_CNz_Idx       
;-------------------------------------------------------------------------------
Offset_0x00C5F8:
                cmpi.w  #$27C0, (Camera_X).w                         ; $FFFFEE00
                bcs.s   Offset_0x00C616
                move.w  (Camera_X).w, (Sonic_Level_Limits_Min_X).w ; $FFFFEE00, $FFFFEEC8
                move.w  #$062E, ($FFFFEEC6).w
                move.b  #$F9, ($FFFF8C54).w
                addq.b  #$02, (Dyn_Resize_Routine).w                 ; $FFFFEEDF
Offset_0x00C616:
                rts   
;-------------------------------------------------------------------------------
Offset_0x00C618:
                cmpi.w  #$2890, (Camera_X).w                         ; $FFFFEE00
                bcs.s   Offset_0x00C64E
                move.b  #$F9, ($FFFF8C50).w
                move.w  #$2860, (Sonic_Level_Limits_Min_X).w         ; $FFFFEEC8
                move.w  #$28E0, (Sonic_Level_Limits_Max_X).w         ; $FFFFEECA
                addq.b  #$02, (Dyn_Resize_Routine).w                 ; $FFFFEEDF
                move.w  #$00F9, D0
                bsr     Jmp_00_To_Play_Music                   ; Offset_0x00C908
                clr.b   ($FFFFF73A).w
                move.b  #$06, (Boss_Flag).w                          ; $FFFFF7AA
                moveq   #$2D, D0
                bra     Jmp_00_To_LoadPLC                      ; Offset_0x00C902
Offset_0x00C64E:
                rts  
;-------------------------------------------------------------------------------
Offset_0x00C650:
                cmpi.w  #$04E0, (Camera_Y).w                         ; $FFFFEE04
                bcs.s   Offset_0x00C65E
                move.w  #$04E0, (Camera_Min_Y).w                     ; $FFFFEECC
Offset_0x00C65E:
                addq.b  #$01, ($FFFFF73A).w
                cmpi.b  #$5A, ($FFFFF73A).w
                bcs.s   Offset_0x00C680
                bsr     SingleObjectLoad                       ; Offset_0x013BAA
                bne.s   Offset_0x00C674
                move.b  #$51, (A1)        ; Carrega o objeto 0x51 - Chefe da CNz
Offset_0x00C674:
                addq.b  #$02, (Dyn_Resize_Routine).w                 ; $FFFFEEDF
                move.w  #$0093, D0
                bsr     Jmp_00_To_Play_Music                   ; Offset_0x00C908
Offset_0x00C680:
                rts       
;-------------------------------------------------------------------------------
Offset_0x00C682:
                tst.b   ($FFFFF7A7).w
                beq.s   Offset_0x00C68C
                bsr     Jmp_00_To_Load_Level_Results           ; Offset_0x00C8FC
Offset_0x00C68C:
                rts
;=============================================================================== 
DynResize_CPz:                                                 ; Offset_0x00C68E
                tst.b   (Act_Id).w                                   ; $FFFFFE11
                bne.s   DynResize_CPz_Act_2                    ; Offset_0x00C696
                rts 
;-------------------------------------------------------------------------------  
DynResize_CPz_Act_2:                                           ; Offset_0x00C696
                moveq   #$00, D0
                move.b  (Dyn_Resize_Routine).w, D0                   ; $FFFFEEDF
                move.w  DynResize_CPz_Idx(PC, D0), D0          ; Offset_0x00C6A4
                jmp     DynResize_CPz_Idx(PC, D0)              ; Offset_0x00C6A4
;-------------------------------------------------------------------------------  
DynResize_CPz_Idx:                                             ; Offset_0x00C6A4
                dc.w    Offset_0x00C6AC-DynResize_CPz_Idx
                dc.w    Offset_0x00C6C6-DynResize_CPz_Idx
                dc.w    Offset_0x00C6F8-DynResize_CPz_Idx
                dc.w    Offset_0x00C72A-DynResize_CPz_Idx    
;-------------------------------------------------------------------------------
Offset_0x00C6AC:
                cmpi.w  #$2680, (Camera_X).w                         ; $FFFFEE00
                bcs.s   Offset_0x00C6C4
                move.w  (Camera_X).w, (Sonic_Level_Limits_Min_X).w ; $FFFFEE00, $FFFFEEC8
                move.w  #$0450, ($FFFFEEC6).w
                addq.b  #$02, (Dyn_Resize_Routine).w                 ; $FFFFEEDF
Offset_0x00C6C4:
                rts  
;-------------------------------------------------------------------------------
Offset_0x00C6C6:
                cmpi.w  #$2A20, (Camera_X).w                         ; $FFFFEE00
                bcs.s   Offset_0x00C6F6
                move.w  #$2A20, (Sonic_Level_Limits_Min_X).w         ; $FFFFEEC8
                move.w  #$2A20, (Sonic_Level_Limits_Max_X).w         ; $FFFFEECA
                addq.b  #$02, (Dyn_Resize_Routine).w                 ; $FFFFEEDF
                move.w  #$00F9, D0
                bsr     Jmp_00_To_Play_Music                   ; Offset_0x00C908
                clr.b   ($FFFFF73A).w
                move.b  #$01, (Boss_Flag).w                          ; $FFFFF7AA
                moveq   #$28, D0
                bra     Jmp_00_To_LoadPLC                      ; Offset_0x00C902
Offset_0x00C6F6:
                rts      
;-------------------------------------------------------------------------------
Offset_0x00C6F8:
                cmpi.w  #$0448, (Camera_Y).w                         ; $FFFFEE04
                bcs.s   Offset_0x00C706
                move.w  #$0448, (Camera_Min_Y).w                     ; $FFFFEECC
Offset_0x00C706:
                addq.b  #$01, ($FFFFF73A).w
                cmpi.b  #$5A, ($FFFFF73A).w
                bcs.s   Offset_0x00C728
                bsr     SingleObjectLoad                       ; Offset_0x013BAA
                bne.s   Offset_0x00C71C
                move.b  #$5D, (A1)        ; Carrega o objeto 0x5D - Chefe da CPz
Offset_0x00C71C:
                addq.b  #$02, (Dyn_Resize_Routine).w                 ; $FFFFEEDF
                move.w  #$0093, D0
                bsr     Jmp_00_To_Play_Music                   ; Offset_0x00C908
Offset_0x00C728:
                rts    
;-------------------------------------------------------------------------------
Offset_0x00C72A:
                tst.b   ($FFFFF7A7).w
                beq.s   Offset_0x00C734
                bsr     Jmp_00_To_Load_Level_Results           ; Offset_0x00C8FC
Offset_0x00C734:
                rts 
;=============================================================================== 
DynResize_DEz:                                                 ; Offset_0x00C736
                moveq   #$00, D0
                move.b  (Dyn_Resize_Routine).w, D0                   ; $FFFFEEDF
                move.w  DynResize_DEz_Idx(PC, D0), D0          ; Offset_0x00C744
                jmp     DynResize_DEz_Idx(PC, D0)              ; Offset_0x00C744
;------------------------------------------------------------------------------- 
DynResize_DEz_Idx:                                             ; Offset_0x00C744
                dc.w    Offset_0x00C74E-DynResize_DEz_Idx
                dc.w    Offset_0x00C780-DynResize_DEz_Idx
                dc.w    Offset_0x00C782-DynResize_DEz_Idx
                dc.w    Offset_0x00C79C-DynResize_DEz_Idx
                dc.w    Offset_0x00C7BE-DynResize_DEz_Idx     
;-------------------------------------------------------------------------------
Offset_0x00C74E:
                move.w  #$0140, D0
                cmp.w   ($FFFFEE00).w, D0
                bhi.s   Offset_0x00C77E
                addq.b  #$02, (Dyn_Resize_Routine).w                 ; $FFFFEEDF
                bsr     SingleObjectLoad                       ; Offset_0x013BAA
                bne.s   Offset_0x00C77E
                move.b  #$AF, (A1)        ; Carrega o objeto 0xAF - Chefe da DEz
                move.b  #$48, Obj_Subtype(A1)                            ; $0028
                move.w  #$0348, Obj_X(A1)                                ; $0008
                move.w  #$00A0, Obj_Y(A1)                                ; $000C
                moveq   #$30, D0
                bra     Jmp_00_To_LoadPLC                      ; Offset_0x00C902
Offset_0x00C77E:
                rts      
;-------------------------------------------------------------------------------
Offset_0x00C780:
                rts     
;-------------------------------------------------------------------------------
Offset_0x00C782:
                move.w  (Camera_X).w, (Sonic_Level_Limits_Min_X).w ; $FFFFEE00, $FFFFEEC8
                cmpi.w  #$0300, (Camera_X).w                         ; $FFFFEE00
                bcs.s   Offset_0x00C79A
                addq.b  #$02, (Dyn_Resize_Routine).w                 ; $FFFFEEDF
                moveq   #$31, D0
                bra     Jmp_00_To_LoadPLC                      ; Offset_0x00C902
Offset_0x00C79A:
                rts   
;-------------------------------------------------------------------------------
Offset_0x00C79C:
                move.w  (Camera_X).w, (Sonic_Level_Limits_Min_X).w ; $FFFFEE00, $FFFFEEC8
                move.w  #$0680, D0
                cmp.w   ($FFFFEE00).w, D0
                bhi.s   Offset_0x00C7BC
                addq.b  #$02, (Dyn_Resize_Routine).w                 ; $FFFFEEDF
                move.w  D0, (Sonic_Level_Limits_Min_X).w             ; $FFFFEEC8
                addi.w  #$00C0, D0
                move.w  D0, (Sonic_Level_Limits_Max_X).w             ; $FFFFEECA
Offset_0x00C7BC:
                rts     
;-------------------------------------------------------------------------------
Offset_0x00C7BE:
                rts 
;===============================================================================  
DynResize_NGHz:                                                ; Offset_0x00C7C0   
                tst.b   (Act_Id).w                                   ; $FFFFFE11
                bne.s   DynResize_NGHz_Act_2                   ; Offset_0x00C7C8
                rts     
;------------------------------------------------------------------------------- 
DynResize_NGHz_Act_2:                                          ; Offset_0x00C7C8
                moveq   #$00, D0
                move.b  (Dyn_Resize_Routine).w, D0                   ; $FFFFEEDF
                move.w  DynResize_NGHz_Idx(PC, D0), D0         ; Offset_0x00C7D6
                jmp     DynResize_NGHz_Idx(PC, D0)             ; Offset_0x00C7D6
;------------------------------------------------------------------------------- 
DynResize_NGHz_Idx:                                            ; Offset_0x00C7D6
                dc.w    Offset_0x00C7DE-DynResize_NGHz_Idx
                dc.w    Offset_0x00C804-DynResize_NGHz_Idx
                dc.w    Offset_0x00C834-DynResize_NGHz_Idx
                dc.w    Offset_0x00C85C-DynResize_NGHz_Idx     
;-------------------------------------------------------------------------------
Offset_0x00C7DE:
                cmpi.w  #$2800, (Camera_X).w                         ; $FFFFEE00
                bcs.s   Offset_0x00C802
                move.w  #$2800, (Sonic_Level_Limits_Min_X).w         ; $FFFFEEC8
                move.w  #$0400, ($FFFFEEC6).w
                addq.b  #$02, (Dyn_Resize_Routine).w                 ; $FFFFEEDF
                move.b  #$04, (Boss_Flag).w                          ; $FFFFF7AA
                moveq   #$2B, D0
                bsr     Jmp_00_To_LoadPLC                      ; Offset_0x00C902
Offset_0x00C802:
                rts      
;-------------------------------------------------------------------------------
Offset_0x00C804:
                cmpi.w  #$2A40, (Camera_X).w                         ; $FFFFEE00
                bcs.s   Offset_0x00C832
                move.w  #$2A40, (Sonic_Level_Limits_Max_X).w         ; $FFFFEECA
                move.w  #$2A40, (Sonic_Level_Limits_Min_X).w         ; $FFFFEEC8
                addq.b  #$02, (Dyn_Resize_Routine).w                 ; $FFFFEEDF
                move.w  #$00F9, D0
                bsr     Jmp_00_To_Play_Music                   ; Offset_0x00C908
                clr.b   ($FFFFF73A).w
                bsr     SingleObjectLoad                       ; Offset_0x013BAA
                bne.s   Offset_0x00C832
                move.b  #$89, (A1)       ; Carrega o objeto 0x89 - Chefe da NGHz
Offset_0x00C832:
                rts  
;-------------------------------------------------------------------------------
Offset_0x00C834:
                cmpi.w  #$03F8, (Camera_Y).w                         ; $FFFFEE04
                bcs.s   Offset_0x00C842
                move.w  #$03F8, (Camera_Min_Y).w                     ; $FFFFEECC
Offset_0x00C842:
                addq.b  #$01, ($FFFFF73A).w
                cmpi.b  #$5A, ($FFFFF73A).w
                bcs.s   Offset_0x00C85A
                addq.b  #$02, (Dyn_Resize_Routine).w                 ; $FFFFEEDF
                move.w  #$0093, D0
                bsr     Jmp_00_To_Play_Music                   ; Offset_0x00C908
Offset_0x00C85A:
                rts 
;-------------------------------------------------------------------------------
Offset_0x00C85C:
                tst.b   ($FFFFF7A7).w
                beq.s   Offset_0x00C866
                bsr     Jmp_00_To_Load_Level_Results           ; Offset_0x00C8FC
Offset_0x00C866:
                rts
;===============================================================================  
DynResize_SCz:                                                 ; Offset_0x00C868  
                tst.b   (Act_Id).w                                   ; $FFFFFE11
                bne     DynResize_SCz_Act_2                    ; Offset_0x00C8EE
                moveq   #$00, D0
                move.b  (Dyn_Resize_Routine).w, D0                   ; $FFFFEEDF
                move.w  DynResize_SCz_Idx(PC, D0), D0          ; Offset_0x00C87E
                jmp     DynResize_SCz_Idx(PC, D0)              ; Offset_0x00C87E  
;-------------------------------------------------------------------------------  
DynResize_SCz_Idx:                                             ; Offset_0x00C87E
                dc.w    Offset_0x00C888-DynResize_SCz_Idx
                dc.w    Offset_0x00C89A-DynResize_SCz_Idx
                dc.w    Offset_0x00C8BA-DynResize_SCz_Idx
                dc.w    Offset_0x00C8D4-DynResize_SCz_Idx
                dc.w    Offset_0x00C8EC-DynResize_SCz_Idx       
;-------------------------------------------------------------------------------
Offset_0x00C888:
                move.w  #$0001, ($FFFFF736).w
                move.w  #$0000, ($FFFFF738).w
                addq.b  #$02, (Dyn_Resize_Routine).w                 ; $FFFFEEDF
                rts     
;-------------------------------------------------------------------------------
Offset_0x00C89A:
                cmpi.w  #$1180, (Camera_X).w                         ; $FFFFEE00
                bcs.s   Offset_0x00C8B8
                move.w  #$FFFF, ($FFFFF736).w
                move.w  #$0001, ($FFFFF738).w
                move.w  #$0500, ($FFFFEEC6).w
                addq.b  #$02, (Dyn_Resize_Routine).w                 ; $FFFFEEDF
Offset_0x00C8B8:
                rts    
;-------------------------------------------------------------------------------
Offset_0x00C8BA:
                cmpi.w  #$0500, (Camera_Y).w                         ; $FFFFEE04
                bcs.s   Offset_0x00C8D2
                move.w  #$0001, ($FFFFF736).w
                move.w  #$0000, ($FFFFF738).w
                addq.b  #$02, (Dyn_Resize_Routine).w                 ; $FFFFEEDF
Offset_0x00C8D2:
                rts     
;-------------------------------------------------------------------------------
Offset_0x00C8D4:
                cmpi.w  #$1480, (Camera_X).w                         ; $FFFFEE00
                bcs.s   Offset_0x00C8EC
                move.w  #$0000, ($FFFFF736).w
                move.w  #$0000, ($FFFFF738).w
                addq.b  #$02, (Dyn_Resize_Routine).w                 ; $FFFFEEDF 
;-------------------------------------------------------------------------------
Offset_0x00C8EC:
                rts 
;-------------------------------------------------------------------------------
DynResize_SCz_Act_2:                                           ; Offset_0x00C8EE
                rts
;===============================================================================
; Rotina para defenir os limites da tela e carregar os chefes de fase
; <<<-
;===============================================================================
Jmp_00_To_Play_Sfx:                                            ; Offset_0x00C8F0
                jmp     (Play_Sfx)                             ; Offset_0x001912
Jmp_00_To_PalLoad2:                                            ; Offset_0x00C8F6
                jmp     (PalLoad2)                             ; Offset_0x002F4E
Jmp_00_To_Load_Level_Results:                                  ; Offset_0x00C8FC
                jmp     (Load_Level_Results)                   ; Offset_0x0146A2
Jmp_00_To_LoadPLC:                                             ; Offset_0x00C902
                jmp     (LoadPLC)                              ; Offset_0x001BB4
Jmp_00_To_Play_Music:                                          ; Offset_0x00C908
                jmp     (Play_Music)                           ; Offset_0x00190C
                dc.w    $0000
;-------------------------------------------------------------------------------  
Obj_0x11_Bridge:                                               ; Offset_0x00C910
                include 'data\objects\obj_0x11.asm' 
;-------------------------------------------------------------------------------                   
Offset_0x00CF2C:
                jmp     (Offset_0x014E6C)                                       
Jmp_00_To_CalcSine:                                            ; Offset_0x00CF32
                jmp     (CalcSine)                             ; Offset_0x00396A   
;-------------------------------------------------------------------------------                  
Obj_0x15_Swing_Platform:                                       ; Offset_0x00CF38  
                include 'data\objects\obj_0x15.asm'       
;-------------------------------------------------------------------------------                
                nop
Jmp_01_To_CalcSine:                                            ; Offset_0x00D594
                jmp     (CalcSine)                             ; Offset_0x00396A
Offset_0x00D59A:
                jmp     (Object_HitWall_Right)                 ; Offset_0x019C7A
;-------------------------------------------------------------------------------
Obj_0x17_Log_Spikes:                                           ; Offset_0x00D5A0
                include 'data\objects\obj_0x17.asm'
;-------------------------------------------------------------------------------   
                nop 
Obj_0x18_Platforms:                                            ; Offset_0x00D73C
                include 'data\objects\obj_0x18.asm'
;-------------------------------------------------------------------------------
                nop   
Jmp_02_To_CalcSine:                                            ; Offset_0x00DB38
                jmp     (CalcSine)              
                dc.w     $0000
;-------------------------------------------------------------------------------
Obj_0x1A_Collapsing_Platforms:                                 ; Offset_0x00DB40
                include 'data\objects\obj_0x1A.asm'  
Obj_0x1F_Collapsing_Platforms:                                 ; Offset_0x00DC8C
                include 'data\objects\obj_0x1F.asm' 
;------------------------------------------------------------------------------- 
Collapsing_Platforms_Data:                                     ; Offset_0x00DE76
                dc.b    $1C, $18, $14, $10, $1A, $16, $12, $0E
                dc.b    $0A, $06, $18, $14, $10, $0C, $08, $04
                dc.b    $16, $12, $0E, $0A, $06, $02, $14, $10
                dc.b    $0C
;-------------------------------------------------------------------------------
HPz_Collapsing_Platforms_Data:                                 ; Offset_0x00DE8F
                dc.b    $18, $1C, $20, $1E, $1A, $16, $06, $0E
                dc.b    $14, $12, $0A, $02
;-------------------------------------------------------------------------------
Collapsing_Platforms_2_Data:                                   ; Offset_0x00DE9B
                dc.b    $1E, $16, $0E, $06, $1A, $12, $0A, $02                
;-------------------------------------------------------------------------------
Collapsing_Platforms_2_Data_2:                                 ; Offset_0x00DEA3
                dc.b    $16, $1E, $1A, $12, $06, $0E, $0A, $02  
;-------------------------------------------------------------------------------
OOz_Collapsing_Platforms_Data:                                 ; Offset_0x00DEAB
                dc.b    $1A, $12, $0A, $02, $16, $0E, $06
;-------------------------------------------------------------------------------
DHz_Collapsing_Platforms_Data:                                 ; Offset_0x00DEB2
                dc.b    $1A, $16, $12, $0E, $0A, $02
;-------------------------------------------------------------------------------
NGHz_Collapsing_Platforms_Data:                                ; Offset_0x00DEB8
                dc.b    $16, $1A, $18, $12, $06, $0E, $0A, $02
;-------------------------------------------------------------------------------
Offset_0x00DEC0:
                dc.b    $20, $20, $20, $20, $20, $20, $20, $20
                dc.b    $21, $21, $22, $22, $23, $23, $24, $24
                dc.b    $25, $25, $26, $26, $27, $27, $28, $28
                dc.b    $29, $29, $2A, $2A, $2B, $2B, $2C, $2C
                dc.b    $2D, $2D, $2E, $2E, $2F, $2F, $30, $30
                dc.b    $30, $30, $30, $30, $30, $30, $30, $30   
;-------------------------------------------------------------------------------   
Collapsing_Platforms_Mappings:                                 ; Offset_0x00DEF0
                dc.w    Offset_0x00DEF8-Collapsing_Platforms_Mappings
                dc.w    Offset_0x00DF7A-Collapsing_Platforms_Mappings
                dc.w    Offset_0x00DFFC-Collapsing_Platforms_Mappings
                dc.w    Offset_0x00E0C6-Collapsing_Platforms_Mappings
Offset_0x00DEF8:
                dc.w    $0010
                dc.l    $C80E0057, $002B0010
                dc.l    $D00D0063, $0031FFF0
                dc.l    $E00D006B, $00350010
                dc.l    $E00D0073, $0039FFF0
                dc.l    $D806007B, $003DFFE0
                dc.l    $D8060081, $0040FFD0
                dc.l    $F00D0087, $00430010
                dc.l    $F00D008F, $0047FFF0
                dc.l    $F0050097, $004BFFE0
                dc.l    $F005009B, $004DFFD0
                dc.l    $000D009F, $004F0010
                dc.l    $000500A7, $00530000
                dc.l    $000D00AB, $0055FFE0
                dc.l    $000500B3, $0059FFD0
                dc.l    $100D00AB, $00550010
                dc.l    $100500B7, $005B0000
Offset_0x00DF7A:
                dc.w    $0010
                dc.l    $C80E0057, $002B0010
                dc.l    $D00D0063, $0031FFF0
                dc.l    $E00D006B, $00350010
                dc.l    $E00D0073, $0039FFF0
                dc.l    $D806007B, $003DFFE0
                dc.l    $D80600BB, $005DFFD0
                dc.l    $F00D0087, $00430010
                dc.l    $F00D008F, $0047FFF0
                dc.l    $F0050097, $004BFFE0
                dc.l    $F00500C1, $0060FFD0
                dc.l    $000D009F, $004F0010
                dc.l    $000500A7, $00530000
                dc.l    $000D00AB, $0055FFE0
                dc.l    $000500B7, $005BFFD0
                dc.l    $100D00AB, $00550010
                dc.l    $100500B7, $005B0000
Offset_0x00DFFC:
                dc.w    $0019
                dc.l    $C806005D, $002E0020
                dc.l    $C8060057, $002B0010
                dc.l    $D0050067, $00330000
                dc.l    $D0050063, $0031FFF0
                dc.l    $E005006F, $00370020
                dc.l    $E005006B, $00350010
                dc.l    $E0050077, $003B0000
                dc.l    $E0050073, $0039FFF0
                dc.l    $D806007B, $003DFFE0
                dc.l    $D8060081, $0040FFD0
                dc.l    $F005008B, $00450020
                dc.l    $F0050087, $00430010
                dc.l    $F0050093, $00490000
                dc.l    $F005008F, $0047FFF0
                dc.l    $F0050097, $004BFFE0
                dc.l    $F005009B, $004DFFD0
                dc.l    $0005008B, $00450020
                dc.l    $0005008B, $00450010
                dc.l    $000500A7, $00530000
                dc.l    $000500AB, $0055FFF0
                dc.l    $000500AB, $0055FFE0
                dc.l    $000500B3, $0059FFD0
                dc.l    $100500AB, $00550020
                dc.l    $100500AB, $00550010
                dc.l    $100500B7, $005B0000
Offset_0x00E0C6:
                dc.w    $0019
                dc.l    $C806005D, $002E0020
                dc.l    $C8060057, $002B0010
                dc.l    $D0050067, $00330000
                dc.l    $D0050063, $0031FFF0
                dc.l    $E005006F, $00370020
                dc.l    $E005006B, $00350010
                dc.l    $E0050077, $003B0000
                dc.l    $E0050073, $0039FFF0
                dc.l    $D806007B, $003DFFE0
                dc.l    $D80600BB, $005DFFD0
                dc.l    $F005008B, $00450020
                dc.l    $F0050087, $00430010
                dc.l    $F0050093, $00490000
                dc.l    $F005008F, $0047FFF0
                dc.l    $F0050097, $004BFFE0
                dc.l    $F00500C1, $0060FFD0
                dc.l    $0005008B, $00450020
                dc.l    $0005008B, $00450010
                dc.l    $000500A7, $00530000
                dc.l    $000500AB, $0055FFF0
                dc.l    $000500AB, $0055FFE0
                dc.l    $000500B7, $005BFFD0
                dc.l    $100500AB, $00550020
                dc.l    $100500AB, $00550010
                dc.l    $100500B7, $005B0000
;------------------------------------------------------------------------------- 
Collapsing_Platforms_Mappings_2:                               ; Offset_0x00E190
                dc.w    Offset_0x00E198-Collapsing_Platforms_Mappings_2
                dc.w    Offset_0x00E1BA-Collapsing_Platforms_Mappings_2
                dc.w    Offset_0x00E1FC-Collapsing_Platforms_Mappings_2
                dc.w    Offset_0x00E21E-Collapsing_Platforms_Mappings_2
Offset_0x00E198:
                dc.w    $0004
                dc.l    $F80D0000, $0000FFE0
                dc.l    $080D0000, $0000FFE0
                dc.l    $F80D0000, $00000000
                dc.l    $080D0000, $00000000
Offset_0x00E1BA:
                dc.w    $0008
                dc.l    $F8050000, $0000FFE0
                dc.l    $F8050000, $0000FFF0
                dc.l    $F8050000, $00000000
                dc.l    $F8050000, $00000010
                dc.l    $08050000, $0000FFE0
                dc.l    $08050000, $0000FFF0
                dc.l    $08050000, $00000000
                dc.l    $08050000, $00000010
Offset_0x00E1FC:
                dc.w    $0004
                dc.l    $F80D0000, $0000FFE0
                dc.l    $080D0008, $0004FFE0
                dc.l    $F80D0000, $00000000
                dc.l    $080D0008, $00040000
Offset_0x00E21E:
                dc.w    $0008
                dc.l    $F8050000, $0000FFE0
                dc.l    $F8050004, $0002FFF0
                dc.l    $F8050000, $00000000
                dc.l    $F8050004, $00020010
                dc.l    $08050008, $0004FFE0
                dc.l    $0805000C, $0006FFF0
                dc.l    $08050008, $00040000
                dc.l    $0805000C, $00060010
;-------------------------------------------------------------------------------
Offset_0x00E260:
                dc.b    $10, $10, $10, $10, $10, $10, $10, $10
                dc.b    $10, $10, $10, $10, $10, $10, $10, $10               
;-------------------------------------------------------------------------------
Offset_0x00E270:
                dc.b    $10, $10, $10, $10, $10, $10, $10, $10
                dc.b    $10, $10, $10, $10, $10, $10, $10, $10
                dc.b    $10, $10, $10, $10, $10, $10, $10, $10
                dc.b    $10, $10, $10, $10, $10, $10, $10, $10
                dc.b    $10, $10, $10, $10, $10, $10, $10, $10
                dc.b    $10, $10, $10, $10, $10, $10, $10, $10
;-------------------------------------------------------------------------------   
HPz_Collapsing_Platforms_Mappings:                             ; Offset_0x00E2A0
                dc.w    Offset_0x00E2A6-HPz_Collapsing_Platforms_Mappings
                dc.w    Offset_0x00E2E8-HPz_Collapsing_Platforms_Mappings
                dc.w    Offset_0x00E2E8-HPz_Collapsing_Platforms_Mappings
Offset_0x00E2A6:
                dc.w    $0008
                dc.l    $F00D0000, $0000FFD0
                dc.l    $000D0008, $0004FFD0
                dc.l    $F0050004, $0002FFF0
                dc.l    $F0050804, $08020000
                dc.l    $0005000C, $0006FFF0
                dc.l    $0005080C, $08060000
                dc.l    $F00D0800, $08000010
                dc.l    $000D0808, $08040010
Offset_0x00E2E8:
                dc.w    $000C
                dc.l    $F0050000, $0000FFD0
                dc.l    $F0050004, $0002FFE0
                dc.l    $F0050004, $0002FFF0
                dc.l    $F0050804, $08020000
                dc.l    $F0050804, $08020010
                dc.l    $F0050800, $08000020
                dc.l    $00050008, $0004FFD0
                dc.l    $0005000C, $0006FFE0
                dc.l    $0005000C, $0006FFF0
                dc.l    $0005080C, $08060000
                dc.l    $0005080C, $08060010
                dc.l    $00050808, $08040020      
;-------------------------------------------------------------------------------
OOz_Collapsing_Platforms_Mappings:                             ; Offset_0x00E34A
                dc.w    Offset_0x00E350-OOz_Collapsing_Platforms_Mappings
                dc.w    Offset_0x00E350-OOz_Collapsing_Platforms_Mappings
                dc.w    Offset_0x00E350-OOz_Collapsing_Platforms_Mappings
Offset_0x00E350:
                dc.w    $0007
                dc.l    $F00F0810, $0808FFC0
                dc.l    $F00F0810, $0808FFE0
                dc.l    $F00F0810, $08080000
                dc.l    $F00F0800, $08000020
                dc.l    $100D0820, $0810FFC0
                dc.l    $100D0820, $0810FFE0
                dc.l    $100D0820, $08100000         
;-------------------------------------------------------------------------------
DHz_Collapsing_Platforms_Mappings:                             ; Offset_0x00E38A
                dc.w    Offset_0x00E38E-DHz_Collapsing_Platforms_Mappings
                dc.w    Offset_0x00E3B0-DHz_Collapsing_Platforms_Mappings
Offset_0x00E38E:
                dc.w    $0004
                dc.l    $F00D0000, $0000FFE0
                dc.l    $F00D0800, $08000000
                dc.l    $00090008, $0004FFF0
                dc.l    $000B000E, $00070008
Offset_0x00E3B0:
                dc.w    $0006
                dc.l    $F0050000, $0000FFE0
                dc.l    $F0050004, $0002FFF0
                dc.l    $F0050804, $08020000
                dc.l    $F0050800, $08000010
                dc.l    $00090008, $0004FFF0
                dc.l    $000B000E, $00070008                    
;-------------------------------------------------------------------------------
NGHz_Collapsing_Platforms_Mappings:                            ; Offset_0x00E3E2
                dc.w    Offset_0x00E3E6-NGHz_Collapsing_Platforms_Mappings
                dc.w    Offset_0x00E408-NGHz_Collapsing_Platforms_Mappings
Offset_0x00E3E6:
                dc.w    $0004
                dc.l    $F00D0055, $002AFFE0
                dc.l    $F00D0855, $082A0000
                dc.l    $000D00A3, $0051FFE0
                dc.l    $000D08A3, $08510000
Offset_0x00E408:
                dc.w    $0008
                dc.l    $F0050055, $002AFFE0
                dc.l    $F0050059, $002CFFF0
                dc.l    $F0050859, $082C0000
                dc.l    $F0050855, $082A0010
                dc.l    $000500A3, $0051FFE0
                dc.l    $000500A7, $0053FFF0
                dc.l    $000508A7, $08530000
                dc.l    $000508A3, $08510010
;------------------------------------------------------------------------------- 
                nop
Obj_0x1C_Misc:                                                 ; Offset_0x00E44C
                include 'data\objects\obj_0x1C.asm'
Obj_0x71_Mz_HPz_Misc:                                          ; Offset_0x00E504
                include 'data\objects\obj_0x71.asm'   
;-------------------------------------------------------------------------------
HTz_Misc_Mappings:                                             ; Offset_0x00E5EA
                dc.w    Offset_0x00E5EE-HTz_Misc_Mappings
                dc.w    Offset_0x00E5F8-HTz_Misc_Mappings
Offset_0x00E5EE:
                dc.w    $0001
                dc.l    $F8050002, $0001FFF8
Offset_0x00E5F8:
                dc.w    $0001
                dc.l    $F8050006, $0003FFF8
;-------------------------------------------------------------------------------
Offset_0x00E602:
                dc.w    Offset_0x00E606-Offset_0x00E602
                dc.w    Offset_0x00E610-Offset_0x00E602
Offset_0x00E606:
                dc.w    $0001
                dc.l    $F8010000, $0000FFFC
Offset_0x00E610:
                dc.w    $0001
                dc.l    $F8010002, $0001FFFC       
;-------------------------------------------------------------------------------
OOz_Misc_Mappings:                                             ; Offset_0x00E61A
                dc.w    Offset_0x00E622-OOz_Misc_Mappings
                dc.w    Offset_0x00E62C-OOz_Misc_Mappings
                dc.w    Offset_0x00E636-OOz_Misc_Mappings
                dc.w    Offset_0x00E640-OOz_Misc_Mappings
Offset_0x00E622:
                dc.w    $0001
                dc.l    $F8050000, $0000FFF8
Offset_0x00E62C:
                dc.w    $0001
                dc.l    $F8050004, $0002FFF8
Offset_0x00E636:
                dc.w    $0001
                dc.l    $F8052008, $2004FFF8
Offset_0x00E640:
                dc.w    $0001
                dc.l    $F801000C, $0006FFFC                     
;-------------------------------------------------------------------------------
Mz_Misc_Mappings:                                              ; Offset_0x00E64A
                dc.w    Offset_0x00E650-Mz_Misc_Mappings
                dc.w    Offset_0x00E65A-Mz_Misc_Mappings
                dc.w    Offset_0x00E664-Mz_Misc_Mappings
Offset_0x00E650:
                dc.w    $0001
                dc.l    $F8010004, $0002FFFC
Offset_0x00E65A:
                dc.w    $0001
                dc.l    $F8010006, $0003FFFC
Offset_0x00E664:
                dc.w    $0001
                dc.l    $FC0C0000, $0000FFF0
;-------------------------------------------------------------------------------
Mz_Lava_Bubble_Mappings:                                       ; Offset_0x00E66E
                dc.w    Offset_0x00E67C-Mz_Lava_Bubble_Mappings
                dc.w    Offset_0x00E686-Mz_Lava_Bubble_Mappings
                dc.w    Offset_0x00E690-Mz_Lava_Bubble_Mappings
                dc.w    Offset_0x00E69A-Mz_Lava_Bubble_Mappings
                dc.w    Offset_0x00E6A4-Mz_Lava_Bubble_Mappings
                dc.w    Offset_0x00E6AE-Mz_Lava_Bubble_Mappings
                dc.w    Offset_0x00E6B8-Mz_Lava_Bubble_Mappings
Offset_0x00E67C:
                dc.w    $0001
                dc.l    $02040000, $0000FFF8
Offset_0x00E686:
                dc.w    $0001
                dc.l    $00040000, $0000FFF8
Offset_0x00E690:
                dc.w    $0001
                dc.l    $FE040000, $0000FFF8
Offset_0x00E69A:
                dc.w    $0001
                dc.l    $FC040000, $0000FFF8
Offset_0x00E6A4:
                dc.w    $0001
                dc.l    $FC080002, $0001FFF4
Offset_0x00E6AE:
                dc.w    $0001
                dc.l    $FC0C0005, $0002FFF0
Offset_0x00E6B8:
                dc.w    $0000        
;------------------------------------------------------------------------------- 
                nop
Obj_0x2A_Up_Down_Pillar:                                       ; Offset_0x00E6BC
                include 'data\objects\obj_0x2A.asm' 
Obj_0x2D_Automatic_Door:                                       ; Offset_0x00E792 
                include 'data\objects\obj_0x2D.asm'   
                nop 
Obj_0x28_Flickies:                                             ; Offset_0x00E97C
                include 'data\objects\obj_0x28.asm'         
Obj_0x29_Enemy_Points:                                         ; Offset_0x00EEB6  
                include 'data\objects\obj_0x29.asm' 
;-------------------------------------------------------------------------------  
Flickies_Mappings:                                             ; Offset_0x00EF0C
                dc.w    Offset_0x00EF1C-Flickies_Mappings
                dc.w    Offset_0x00EF26-Flickies_Mappings
                dc.w    Offset_0x00EF12-Flickies_Mappings
Offset_0x00EF12:
                dc.w    $0001
                dc.l    $EC070000, $0000FFF8
Offset_0x00EF1C:
                dc.w    $0001
                dc.l    $F8050008, $0004FFF8
Offset_0x00EF26:
                dc.w    $0001
                dc.l    $F805000C, $0006FFF8      
;-------------------------------------------------------------------------------
Flickies_Mappings_01:                                          ; Offset_0x00EF30
                dc.w    Offset_0x00EF40-Flickies_Mappings_01
                dc.w    Offset_0x00EF4A-Flickies_Mappings_01
                dc.w    Offset_0x00EF36-Flickies_Mappings_01
Offset_0x00EF36:                              
                dc.w    $0001
                dc.l    $EC070000, $0000FFF8
Offset_0x00EF40:
                dc.w    $0001
                dc.l    $F8090008, $0004FFF4
Offset_0x00EF4A:
                dc.w    $0001
                dc.l    $F809000E, $0007FFF4               
;-------------------------------------------------------------------------------
Flickies_Mappings_02:                                          ; Offset_0x00EF54
                dc.w    Offset_0x00EF64-Flickies_Mappings_02
                dc.w    Offset_0x00EF6E-Flickies_Mappings_02
                dc.w    Offset_0x00EF5A-Flickies_Mappings_02
Offset_0x00EF5A:
                dc.w    $0001
                dc.l    $F4060000, $0000FFF8
Offset_0x00EF64:
                dc.w    $0001
                dc.l    $F8090006, $0003FFF4
Offset_0x00EF6E:
                dc.w    $0001
                dc.l    $F809000C, $0006FFF4                 
;-------------------------------------------------------------------------------
Flickies_Mappings_03:                                          ; Offset_0x00EF78
                dc.w    Offset_0x00EF88-Flickies_Mappings_03
                dc.w    Offset_0x00EF92-Flickies_Mappings_03
                dc.w    Offset_0x00EF7E-Flickies_Mappings_03
Offset_0x00EF7E:
                dc.w    $0001
                dc.l    $F4060000, $0000FFF8
Offset_0x00EF88:
                dc.w    $0001
                dc.l    $F8050006, $0003FFF8
Offset_0x00EF92:
                dc.w    $0001
                dc.l    $F805000A, $0005FFF8              
;-------------------------------------------------------------------------------
Flickies_Mappings_04:                                          ; Offset_0x00EF9C
                dc.w    Offset_0x00EFAC-Flickies_Mappings_04
                dc.w    Offset_0x00EFB6-Flickies_Mappings_04
                dc.w    Offset_0x00EFA2-Flickies_Mappings_04
Offset_0x00EFA2:
                dc.w    $0001
                dc.l    $F4060000, $0000FFF8
Offset_0x00EFAC:
                dc.w    $0001
                dc.l    $F4060006, $0003FFF8
Offset_0x00EFB6:
                dc.w    $0001
                dc.l    $F406000C, $0006FFF8               
;-------------------------------------------------------------------------------
Enemy_Points_Mappings:                                         ; Offset_0x00EFC0
                dc.w    Offset_0x00EFCE-Enemy_Points_Mappings
                dc.w    Offset_0x00EFD8-Enemy_Points_Mappings
                dc.w    Offset_0x00EFE2-Enemy_Points_Mappings
                dc.w    Offset_0x00EFEC-Enemy_Points_Mappings
                dc.w    Offset_0x00EFFE-Enemy_Points_Mappings
                dc.w    Offset_0x00F008-Enemy_Points_Mappings
                dc.w    Offset_0x00F01A-Enemy_Points_Mappings
Offset_0x00EFCE:
                dc.w    $0001
                dc.l    $F8050002, $0001FFF8
Offset_0x00EFD8:
                dc.w    $0001
                dc.l    $F8050006, $0003FFF8
Offset_0x00EFE2:
                dc.w    $0001
                dc.l    $F805000A, $0005FFF8
Offset_0x00EFEC:
                dc.w    $0002
                dc.l    $F8010000, $0000FFF8
                dc.l    $F805000E, $00070000
Offset_0x00EFFE:
                dc.w    $0001
                dc.l    $F8010000, $0000FFFC
Offset_0x00F008:
                dc.w    $0002
                dc.l    $F8050002, $0001FFF0
                dc.l    $F805000E, $00070000
Offset_0x00F01A:
                dc.w    $0002
                dc.l    $F805000A, $0005FFF0
                dc.l    $F805000E, $00070000
;-------------------------------------------------------------------------------                  
Jmp_00_To_PseudoRandomNumber:                                  ; Offset_0x00F02C
                jmp     (PseudoRandomNumber)  
;-------------------------------------------------------------------------------  
                dc.w    $0000
Obj_0x25_Rings:                                                ; Offset_0x00F034
                include 'data\objects\obj_0x25.asm'                      
;-------------------------------------------------------------------------------   
; Rotina para adicionar anéis ao contador, verificando o limmite e bonificando
; ->>>          com vida extra ao adiquirir 100 e 200 anéis
;-------------------------------------------------------------------------------   
Add_Rings:                                                     ; Offset_0x00F12E
                addq.w  #$01, (Ring_Count).w                         ; $FFFFFE20
                ori.b   #$01, (HUD_Rings_Refresh_Flag).w             ; $FFFFFE1D
                move.w  #$00B5, D0
                cmpi.w  #$0064, (Ring_Count).w                       ; $FFFFFE20
                bcs.s   Offset_0x00F168
                bset    #$01, (Ring_Life_Flag).w                     ; $FFFFFE1B
                beq.s   Offset_0x00F15C
                cmpi.w  #$00C8, (Ring_Count).w                       ; $FFFFFE20
                bcs.s   Offset_0x00F168
                bset    #$02, (Ring_Life_Flag).w                     ; $FFFFFE1B
                bne.s   Offset_0x00F168
Offset_0x00F15C:
                addq.b  #$01, (Life_Count).w                         ; $FFFFFE12
                addq.b  #$01, (HUD_Life_Refresh_Flag).w              ; $FFFFFE1C
                move.w  #$0098, D0
Offset_0x00F168:
                jmp     (Play_Music_Ex)                        ; Offset_0x001918              
;-------------------------------------------------------------------------------   
; Rotina para adicionar anéis ao contador, verificando o limmite e bonificando
; <<<-          com vida extra ao adiquirir 100 e 200 anéis
;-------------------------------------------------------------------------------  
Obj_0x37_Rings_Lost:                                           ; Offset_0x00F16E
                include 'data\objects\obj_0x37.asm'
Obj_S1_0x4B_Big_Ring:                                          ; Offset_0x00F2C2
                include 'data\objects\objs1_4B.asm' 
Obj_S1_0x7C_Big_Ring_Flash:                                    ; Offset_0x00F386
                include 'data\objects\objs1_7C.asm' 
;-------------------------------------------------------------------------------                 
Rings_Animate_Data:                                            ; Offset_0x00F43C
                dc.w    Offset_0x00F43E-Rings_Animate_Data
Offset_0x00F43E:
                dc.b    $05, $04, $05, $06, $07, $FC
;-------------------------------------------------------------------------------
Rings_Mappings:                                                ; Offset_0x00F444
                dc.w    Offset_0x00F456-Rings_Mappings
                dc.w    Offset_0x00F460-Rings_Mappings
                dc.w    Offset_0x00F46A-Rings_Mappings
                dc.w    Offset_0x00F474-Rings_Mappings
                dc.w    Offset_0x00F47E-Rings_Mappings
                dc.w    Offset_0x00F488-Rings_Mappings
                dc.w    Offset_0x00F492-Rings_Mappings
                dc.w    Offset_0x00F49C-Rings_Mappings
                dc.w    Offset_0x00F4A6-Rings_Mappings
Offset_0x00F456:
                dc.w    $0001
                dc.l    $F8050000, $0000FFF8
Offset_0x00F460:
                dc.w    $0001
                dc.l    $F8050004, $0002FFF8
Offset_0x00F46A:
                dc.w    $0001
                dc.l    $F8010008, $0004FFFC
Offset_0x00F474:
                dc.w    $0001
                dc.l    $F8050804, $0802FFF8
Offset_0x00F47E:
                dc.w    $0001
                dc.l    $F805000A, $0005FFF8
Offset_0x00F488:
                dc.w    $0001
                dc.l    $F805180A, $1805FFF8
Offset_0x00F492:
                dc.w    $0001
                dc.l    $F805080A, $0805FFF8
Offset_0x00F49C:
                dc.w    $0001
                dc.l    $F805100A, $1005FFF8
Offset_0x00F4A6:
                dc.w    $0000
;-------------------------------------------------------------------------------
Big_Ring_Mappings:                                             ; Offset_0x00F4A8
                dc.w    Offset_0x00F4B0-Big_Ring_Mappings
                dc.w    Offset_0x00F502-Big_Ring_Mappings
                dc.w    Offset_0x00F544-Big_Ring_Mappings
                dc.w    Offset_0x00F566-Big_Ring_Mappings
Offset_0x00F4B0:
                dc.w    $000A
                dc.l    $E0080000, $0000FFE8
                dc.l    $E0080003, $00010000
                dc.l    $E80C0006, $0003FFE0
                dc.l    $E80C000A, $00050000
                dc.l    $F007000E, $0007FFE0
                dc.l    $F0070016, $000B0010
                dc.l    $100C001E, $000FFFE0
                dc.l    $100C0022, $00110000
                dc.l    $18080026, $0013FFE8
                dc.l    $18080029, $00140000
Offset_0x00F502:
                dc.w    $0008
                dc.l    $E00C002C, $0016FFF0
                dc.l    $E8080030, $0018FFE8
                dc.l    $E8090033, $00190000
                dc.l    $F0070039, $001CFFE8
                dc.l    $F8050041, $00200008
                dc.l    $08090045, $00220000
                dc.l    $1008004B, $0025FFE8
                dc.l    $180C004E, $0027FFF0
Offset_0x00F544:
                dc.w    $0004
                dc.l    $E0070052, $0029FFF4
                dc.l    $E0030852, $08290004
                dc.l    $0007005A, $002DFFF4
                dc.l    $0003085A, $082D0004
Offset_0x00F566:
                dc.w    $0008
                dc.l    $E00C082C, $0816FFF0
                dc.l    $E8080830, $08180000
                dc.l    $E8090833, $0819FFE8
                dc.l    $F0070839, $081C0008
                dc.l    $F8050841, $0820FFE8
                dc.l    $08090845, $0822FFE8
                dc.l    $1008084B, $08250000
                dc.l    $180C084E, $0827FFF0
;------------------------------------------------------------------------------- 
Big_Ring_Flash_Mappings:                                       ; Offset_0x00F5A8
                dc.w    Offset_0x00F5B8-Big_Ring_Flash_Mappings
                dc.w    Offset_0x00F5CA-Big_Ring_Flash_Mappings
                dc.w    Offset_0x00F5EC-Big_Ring_Flash_Mappings
                dc.w    Offset_0x00F60E-Big_Ring_Flash_Mappings
                dc.w    Offset_0x00F630-Big_Ring_Flash_Mappings
                dc.w    Offset_0x00F652-Big_Ring_Flash_Mappings
                dc.w    Offset_0x00F674-Big_Ring_Flash_Mappings
                dc.w    Offset_0x00F686-Big_Ring_Flash_Mappings
Offset_0x00F5B8:
                dc.w    $0002
                dc.l    $E00F0000, $00000000
                dc.l    $000F1000, $10000000
Offset_0x00F5CA:
                dc.w    $0004
                dc.l    $E00F0010, $0008FFF0
                dc.l    $E0070020, $00100010
                dc.l    $000F1010, $1008FFF0
                dc.l    $00071020, $10100010
Offset_0x00F5EC:
                dc.w    $0004
                dc.l    $E00F0028, $0014FFE8
                dc.l    $E00B0038, $001C0008
                dc.l    $000F1028, $1014FFE8
                dc.l    $000B1038, $101C0008
Offset_0x00F60E:
                dc.w    $0004
                dc.l    $E00F0834, $081AFFE0
                dc.l    $E00F0034, $001A0000
                dc.l    $000F1834, $181AFFE0
                dc.l    $000F1034, $101A0000
Offset_0x00F630:
                dc.w    $0004
                dc.l    $E00B0838, $081CFFE0
                dc.l    $E00F0828, $0814FFF8
                dc.l    $000B1838, $181CFFE0
                dc.l    $000F1828, $1814FFF8
Offset_0x00F652:
                dc.w    $0004
                dc.l    $E0070820, $0810FFE0
                dc.l    $E00F0810, $0808FFF0
                dc.l    $00071820, $1810FFE0
                dc.l    $000F1810, $1808FFF0
Offset_0x00F674:
                dc.w    $0002
                dc.l    $E00F0800, $0800FFE0
                dc.l    $000F1800, $1800FFE0
Offset_0x00F686:
                dc.w    $0004
                dc.l    $E00F0044, $0022FFE0
                dc.l    $E00F0844, $08220000
                dc.l    $000F1044, $1022FFE0
                dc.l    $000F1844, $18220000
;------------------------------------------------------------------------------- 
Jmp_03_To_CalcSine:                                            ; Offset_0x00F6A8
                jmp     (CalcSine)  
                dc.w    $0000  
;-------------------------------------------------------------------------------                                
Obj_0x26_Monitors                                              ; Offset_0x00F6B0
                include 'data\objects\obj_0x26.asm'
Obj_0x2E_Monitors_Contents:                                    ; Offset_0x00F87E
                include 'data\objects\obj_0x2E.asm'   
;-------------------------------------------------------------------------------   
; Rotinas complementares referenciadas no objeto 0x26
; ->>>
;-------------------------------------------------------------------------------      
Offset_0x00FA42:
                subq.w  #$01, Obj_Ani_Time(A0)                           ; $001E
                bmi     DeleteObject                           ; Offset_0x0120D0
                bra     DisplaySprite                          ; Offset_0x0120DE 
;-------------------------------------------------------------------------------                   
Offset_0x00FA4E:
                lea     (Obj_Memory_Address).w, A1                   ; $FFFFB000
                move.w  Obj_X(A1), D0                                    ; $0008
                sub.w   Obj_X(A0), D0                                    ; $0008
                add.w   D1, D0
                bmi.s   Offset_0x00FAA6
                move.w  D1, D3
                add.w   D3, D3
                cmp.w   D3, D0
                bhi.s   Offset_0x00FAA6
                move.b  Obj_Height_2(A1), D3                             ; $0016
                ext.w   D3
                add.w   D3, D2
                move.w  Obj_Y(A1), D3                                    ; $000C
                sub.w   Obj_Y(A0), D3                                    ; $000C
                add.w   D2, D3
                bmi.s   Offset_0x00FAA6
                add.w   D2, D2
                cmp.w   D2, D3
                bcc.s   Offset_0x00FAA6
                tst.b   Obj_Timer(A1)                                    ; $002A
                bmi.s   Offset_0x00FAA6
                cmpi.b  #$06, ($FFFFB024).w
                bcc.s   Offset_0x00FAA6
                tst.w   (Debug_Mode_Flag_Index).w                    ; $FFFFFE08
                bne.s   Offset_0x00FAA6
                cmp.w   D0, D1
                bcc.s   Offset_0x00FA9C
                add.w   D1, D1
                sub.w   D1, D0
Offset_0x00FA9C:
                cmpi.w  #$0010, D3
                bcs.s   Offset_0x00FAAA
Offset_0x00FAA2:
                moveq   #$01, D1
                rts
Offset_0x00FAA6:
                moveq   #$00, D1
                rts
Offset_0x00FAAA:
                moveq   #$00, D1
                move.b  Obj_Width(A0), D1                                ; $0019
                addq.w  #$04, D1
                move.w  D1, D2
                add.w   D2, D2
                add.w   Obj_X(A1), D1                                    ; $0008
                sub.w   Obj_X(A0), D1                                    ; $0008
                bmi.s   Offset_0x00FAA2
                cmp.w   D2, D1
                bcc.s   Offset_0x00FAA2
                moveq   #-$01, D1
                rts
;-------------------------------------------------------------------------------                   
Monitors_Animate_Data:                                         ; Offset_0x00FAC8
                dc.w    Offset_0x00FADE-Monitors_Animate_Data
                dc.w    Offset_0x00FAE2-Monitors_Animate_Data
                dc.w    Offset_0x00FAEA-Monitors_Animate_Data
                dc.w    Offset_0x00FAF2-Monitors_Animate_Data
                dc.w    Offset_0x00FAFA-Monitors_Animate_Data
                dc.w    Offset_0x00FB02-Monitors_Animate_Data
                dc.w    Offset_0x00FB0A-Monitors_Animate_Data
                dc.w    Offset_0x00FB12-Monitors_Animate_Data
                dc.w    Offset_0x00FB1A-Monitors_Animate_Data
                dc.w    Offset_0x00FB22-Monitors_Animate_Data
                dc.w    Offset_0x00FB2A-Monitors_Animate_Data
Offset_0x00FADE:
                dc.b    $01, $00, $01, $FF
Offset_0x00FAE2:
                dc.b    $01, $00, $02, $02, $01, $02, $02, $FF
Offset_0x00FAEA:
                dc.b    $01, $00, $03, $03, $01, $03, $03, $FF
Offset_0x00FAF2:
                dc.b    $01, $00, $04, $04, $01, $04, $04, $FF
Offset_0x00FAFA:
                dc.b    $01, $00, $05, $05, $01, $05, $05, $FF
Offset_0x00FB02:
                dc.b    $01, $00, $06, $06, $01, $06, $06, $FF
Offset_0x00FB0A:
                dc.b    $01, $00, $07, $07, $01, $07, $07, $FF
Offset_0x00FB12:
                dc.b    $01, $00, $08, $08, $01, $08, $08, $FF
Offset_0x00FB1A:
                dc.b    $01, $00, $09, $09, $01, $09, $09, $FF
Offset_0x00FB22:
                dc.b    $01, $00, $0A, $0A, $01, $0A, $0A, $FF
Offset_0x00FB2A:
                dc.b    $02, $00, $01, $0B, $FE, $01    
;-------------------------------------------------------------------------------
Monitors_Mappings:                                             ; Offset_0x00FB30
                dc.w    Monitor_Empty_Map-Monitors_Mappings    ; Offset_0x00FB48
                dc.w    Monitor_Empty_2_Map-Monitors_Mappings  ; Offset_0x00FB52
                dc.w    Monitor_SonicLife_Map-Monitors_Mappings ; Offset_0x00FB64
                dc.w    Monitor_MilesLife_Map-Monitors_Mappings ; Offset_0x00FB76
                dc.w    Monitor_Robotnik_Map-Monitors_Mappings ; Offset_0x00FB88
                dc.w    Monitor_Rings_Map-Monitors_Mappings    ; Offset_0x00FB9A
                dc.w    Monitor_Shoes_Map-Monitors_Mappings    ; Offset_0x00FBAC
                dc.w    Monitor_Shield_Map-Monitors_Mappings   ; Offset_0x00FBBE
                dc.w    Monitor_Invincibility_Map-Monitors_Mappings ; Offset_0x00FBD0
                dc.w    Monitor_Question_Mark_Map-Monitors_Mappings ; Offset_0x00FBE2
                dc.w    Monitor_Spring_Map-Monitors_Mappings   ; Offset_0x00FBF4
                dc.w    Monitor_Broken_Map-Monitors_Mappings   ; Offset_0x00FC06
Monitor_Empty_Map:                                             ; Offset_0x00FB48
                dc.w    $0001
                dc.l    $EF0F0000, $0000FFF0
Monitor_Empty_2_Map:                                           ; Offset_0x00FB52
                dc.w    $0002
                dc.l    $F5050018, $000CFFF8, $EF0F0000, $0000FFF0
Monitor_SonicLife_Map:                                         ; Offset_0x00FB64
                dc.w    $0002
                dc.l    $F5050154, $00AAFFF8, $EF0F0000, $0000FFF0
Monitor_MilesLife_Map:                                         ; Offset_0x00FB76
                dc.w    $0002
                dc.l    $F505001C, $000EFFF8, $EF0F0000, $0000FFF0
Monitor_Robotnik_Map:                                          ; Offset_0x00FB88
                dc.w    $0002
                dc.l    $F5050020, $0010FFF8, $EF0F0000, $0000FFF0
Monitor_Rings_Map:                                             ; Offset_0x00FB9A
                dc.w    $0002
                dc.l    $F5052024, $2012FFF8, $EF0F0000, $0000FFF0
Monitor_Shoes_Map:                                             ; Offset_0x00FBAC
                dc.w    $0002
                dc.l    $F5050028, $0014FFF8, $EF0F0000, $0000FFF0
Monitor_Shield_Map:                                            ; Offset_0x00FBBE
                dc.w    $0002
                dc.l    $F505002C, $0016FFF8, $EF0F0000, $0000FFF0
Monitor_Invincibility_Map:                                     ; Offset_0x00FBD0
                dc.w    $0002
                dc.l    $F5050030, $0018FFF8, $EF0F0000, $0000FFF0
Monitor_Question_Mark_Map:                                     ; Offset_0x00FBE2
                dc.w    $0002
                dc.l    $F5050034, $001AFFF8, $EF0F0000, $0000FFF0
Monitor_Spring_Map:                                            ; Offset_0x00FBF4
                dc.w    $0002
                dc.l    $F5050038, $001CFFF8, $EF0F0000, $0000FFF0
Monitor_Broken_Map:                                            ; Offset_0x00FC06
                dc.w    $0001
                dc.l    $FF0D0010, $0008FFF0                   
;-------------------------------------------------------------------------------   
; Rotinas complementares referenciadas no objeto 0x26
; <<<-
;-------------------------------------------------------------------------------  
Obj_0x0E_Sonic_Miles:                                          ; Offset_0x00FC10
                include 'data\objects\obj_0x0E.asm'  
Obj_0x0F_1Player2Vs:                                           ; Offset_0x00FC96
                include 'data\objects\obj_0x0F.asm'  
;-------------------------------------------------------------------------------  
; Offset_0x00FCE0:
                lea     (Unk_Offset_0x00FCF8), A1                                   
                bra     AnimateSprite                          ; Offset_0x01212E
;-------------------------------------------------------------------------------
Unk_Offset_0x00FCEA:                 
                dc.w    Offset_0x00FCEC-Unk_Offset_0x00FCEA
Offset_0x00FCEC:
                dc.b    $07, $00, $01, $02, $03, $04, $05, $06, $07, $FE, $02, $00 
;-------------------------------------------------------------------------------
Unk_Offset_0x00FCF8:
                dc.w    Offset_0x00FCFA-Unk_Offset_0x00FCF8
Offset_0x00FCFA:
                dc.b    $1F, $00, $01, $FF  
;-------------------------------------------------------------------------------  
_1Player2Vs_Options_Mappings:                                  ; Offset_0x00FCFE   
                dc.w    Offset_0x00FD02-_1Player2Vs_Options_Mappings
                dc.w    Offset_0x00FD3C-_1Player2Vs_Options_Mappings
Offset_0x00FD02:
                dc.w    $0007
                dc.l    $F4000000, $0000FFD4, $F40C0001, $0000FFE4
                dc.l    $F4040005, $00020004, $04002007, $2003FFD4
                dc.l    $040C2001, $2000FFE4, $04042005, $20020004
                dc.l    $04042008, $2004001C
Offset_0x00FD3C:
                dc.w    $0007
                dc.l    $F4002000, $2000FFD4, $F40C2001, $2000FFE4
                dc.l    $F4042005, $20020004, $04000007, $0003FFD4
                dc.l    $040C0001, $0000FFE4, $04040005, $00020004
                dc.l    $04040008, $0004001C             
;-------------------------------------------------------------------------------                    
Sonic_Miles_Mappings:                                          ; Offset_0x00FD76 
                dc.w    Sonic_In_Title_Screen_Map-Sonic_Miles_Mappings ; Offset_0x00FD7A
                dc.w    Miles_In_Title_Screen_Map-Sonic_Miles_Mappings ; Offset_0x00FDD4
Sonic_In_Title_Screen_Map:                                     ; Offset_0x00FD7A
                dc.w    $000B
                dc.l    $D40D0000, $0000FFD8, $CC0E0008, $0004FFF8
                dc.l    $CC070014, $000A0018, $E40F001C, $000EFFE0
                dc.l    $E40B002C, $00160000, $EC070038, $001C0018
                dc.l    $040F0040, $0020FFD8, $040F0050, $0028FFF8
                dc.l    $0C060060, $00300018, $24040066, $0033FFE8
                dc.l    $240D0068, $0034FFF8
Miles_In_Title_Screen_Map:                                     ; Offset_0x00FDD4
                dc.w    $000A
                dc.l    $DC060070, $0038FFEC, $F40F0076, $003BFFD4
                dc.l    $F40F0086, $0043FFF4, $E4090096, $004BFFFC
                dc.l    $DC0B009C, $004E0014, $FC0800A8, $00540014
                dc.l    $040500AB, $00550014, $140400AF, $0057FFD4
                dc.l    $140D00B1, $0058FFE4, $140D00B9, $005C0004      
;-------------------------------------------------------------------------------  
                nop
Obj_0x34_Title_Cards:                                          ; Offset_0x00FE28 
                include 'data\objects\obj_0x34.asm'
Obj_0x39_Time_Over_Game_Over:                                  ; Offset_0x00FF7E
                include 'data\objects\obj_0x39.asm'  
Obj_0x3A_Level_Results:                                        ; Offset_0x010040
                include 'data\objects\obj_0x3A.asm' 
Obj_S1_0x7E_Special_Stage_Results:                             ; Offset_0x0102CE
                include 'data\objects\objs1_7E.asm' 
Obj_S1_0x7F_Emeralds:                                          ; Offset_0x010474
                include 'data\objects\objs1_7F.asm'            
;-------------------------------------------------------------------------------                
; Mapeamento dos títulos das fases
; ->>>                
;-------------------------------------------------------------------------------
Title_Cards_Mappings:                                          ; Offset_0x010506    
                dc.w    GHz_TC_Map-Title_Cards_Mappings        ; Offset_0x010530
                dc.w    Lvl1_TC_Map-Title_Cards_Mappings       ; Offset_0x010530
                dc.w    Wz_TC_Map-Title_Cards_Mappings         ; Offset_0x010530
                dc.w    Lvl3_TC_Map-Title_Cards_Mappings       ; Offset_0x010530
                dc.w    Mz_TC_Map-Title_Cards_Mappings         ; Offset_0x01057A
                dc.w    Mz_TC_Map-Title_Cards_Mappings         ; Offset_0x01057A
                dc.w    SFz_TC_Map-Title_Cards_Mappings        ; Offset_0x010854
                dc.w    HTz_TC_Map-Title_Cards_Mappings        ; Offset_0x0105CC
                dc.w    HPz_TC_Map-Title_Cards_Mappings        ; Offset_0x010606
                dc.w    Lvl9_TC_Map-Title_Cards_Mappings       ; Offset_0x010530
                dc.w    OOz_TC_Map-Title_Cards_Mappings        ; Offset_0x010668
                dc.w    DHz_TC_Map-Title_Cards_Mappings        ; Offset_0x0106AA
                dc.w    CNz_TC_Map-Title_Cards_Mappings        ; Offset_0x0106EC
                dc.w    CPz_TC_Map-Title_Cards_Mappings        ; Offset_0x010746
                dc.w    DEz_TC_Map-Title_Cards_Mappings        ; Offset_0x0108AE
                dc.w    NGHz_TC_Map-Title_Cards_Mappings       ; Offset_0x0107B0
                dc.w    SCz_TC_Map-Title_Cards_Mappings        ; Offset_0x010812
                dc.w    ZONE_TC_Map-Title_Cards_Mappings       ; Offset_0x0108F0
                dc.w    Act_1_TC_Map-Title_Cards_Mappings      ; Offset_0x010912
                dc.w    Act_2_TC_Map-Title_Cards_Mappings      ; Offset_0x01091C
                dc.w    Act_3_TC_Map-Title_Cards_Mappings      ; Offset_0x010926
GHz_TC_Map:                                                    ; Offset_0x010530
Lvl1_TC_Map:
Wz_TC_Map:                                                    
Lvl3_TC_Map:
Lvl9_TC_Map:
                dc.w    $0009
                dc.l    $000505DE, $02EFFFE8  ; G
                dc.l    $000505E2, $02F1FFF8  ; R
                dc.l    $00050580, $02C00008  ; E
                dc.l    $00050580, $02C00018  ; E
                dc.l    $00050584, $02C20028  ; N
                dc.l    $000505E6, $02F30048  ; H
                dc.l    $000105EA, $02F50058  ; I
                dc.l    $000505EC, $02F60060  ; L
                dc.l    $000505EC, $02F60070  ; L
Mz_TC_Map:                                                     ; Offset_0x01057A
                dc.w    $000A
                dc.l    $000905DE, $02EFFFE0  ; M
                dc.l    $00050580, $02C0FFF8  ; E
                dc.l    $000505E4, $02F20008  ; T
                dc.l    $000505E8, $02F40018  ; R
                dc.l    $00050588, $02C40028  ; O
                dc.l    $000505EC, $02F60038  ; P
                dc.l    $00050588, $02C40048  ; O
                dc.l    $000505F0, $02F80058  ; L
                dc.l    $000105F4, $02FA0068  ; I
                dc.l    $000505F6, $02FB0070  ; S        
HTz_TC_Map:                                                    ; Offset_0x0105CC
                dc.w    $0007
                dc.l    $000505DE, $02EF0008  ; H
                dc.l    $000105E2, $02F10018  ; I
                dc.l    $000505E4, $02F20020  ; L
                dc.l    $000505E4, $02F20030  ; L
                dc.l    $000505E8, $02F40050  ; T
                dc.l    $00050588, $02C40060  ; O
                dc.l    $000505EC, $02F60070  ; P
HPz_TC_Map:                                                    ; Offset_0x010606
                dc.w    $000C
                dc.l    $000505DE, $02EFFFB8  ; H
                dc.l    $000105E2, $02F1FFC8  ; I
                dc.l    $000505E4, $02F2FFD0  ; D
                dc.l    $000505E4, $02F2FFE0  ; D
                dc.l    $00050580, $02C0FFF0  ; E
                dc.l    $00050584, $02C20000  ; N
                dc.l    $000505E8, $02F40020  ; P
                dc.l    $000505EC, $02F60030  ; A
                dc.l    $000505F0, $02F80040  ; L
                dc.l    $000505EC, $02F60050  ; A
                dc.l    $000505F4, $02FA0060  ; C
                dc.l    $00050580, $02C00070  ; E     
OOz_TC_Map:                                                    ; Offset_0x010668
                dc.w    $0008
                dc.l    $00050588, $02C4FFF8  ; O
                dc.l    $000105DE, $02EF0008  ; I
                dc.l    $000505E0, $02F00010  ; L
                dc.l    $00050588, $02C40030  ; O
                dc.l    $000505E4, $02F20040  ; C
                dc.l    $00050580, $02C00050  ; E
                dc.l    $000505E8, $02F40060  ; A
                dc.l    $00050584, $02C20070  ; N
DHz_TC_Map:                                                    ; Offset_0x0106AA
                dc.w    $0008
                dc.l    $000505DE, $02EFFFF8  ; D
                dc.l    $000505E2, $02F10008  ; U
                dc.l    $000505E6, $02F30018  ; S
                dc.l    $000505EA, $02F50028  ; T
                dc.l    $000505EE, $02F70048  ; H
                dc.l    $000105F2, $02F90058  ; I
                dc.l    $000505F4, $02FA0060  ; L
                dc.l    $000505F4, $02FA0070  ; L 
CNz_TC_Map:                                                    ; Offset_0x0106EC
                dc.w    $000B
                dc.l    $000505DE, $02EFFFD0  ; C
                dc.l    $000505E2, $02F1FFE0  ; A
                dc.l    $000505E6, $02F3FFF0  ; S
                dc.l    $000105EA, $02F50000  ; I
                dc.l    $00050584, $02C20008  ; N
                dc.l    $00050588, $02C40018  ; O
                dc.l    $00050584, $02C20038  ; N
                dc.l    $000105EA, $02F50048  ; I
                dc.l    $000505EC, $02F60050  ; G
                dc.l    $000505F0, $02F80060  ; H
                dc.l    $000505F4, $02FA0070  ; T
CPz_TC_Map:                                                    ; Offset_0x010746
                dc.w    $000D
                dc.l    $000505DE, $02EFFFA0  ; C
                dc.l    $000505E2, $02F1FFB0  ; H
                dc.l    $00050580, $02C0FFC0  ; E
                dc.l    $000905E6, $02F3FFD0  ; M
                dc.l    $000105EC, $02F6FFE8  ; I
                dc.l    $000505DE, $02EFFFF0  ; C
                dc.l    $000505EE, $02F70000  ; A
                dc.l    $000505F2, $02F90010  ; L
                dc.l    $000505F6, $02FB0030  ; P
                dc.l    $000505F2, $02F90040  ; L
                dc.l    $000505EE, $02F70050  ; A
                dc.l    $00050584, $02C20060  ; N
                dc.l    $000505FA, $02FD0070  ; T
NGHz_TC_Map:                                                   ; Offset_0x0107B0
                dc.w    $000C
                dc.l    $00050584, $02C2FFA8  ; N
                dc.l    $00050580, $02C0FFB8  ; E
                dc.l    $00050588, $02C4FFC8  ; O
                dc.l    $000505DE, $02EFFFE8  ; G
                dc.l    $000505E2, $02F1FFF8  ; R
                dc.l    $00050580, $02C00008  ; E
                dc.l    $00050580, $02C00018  ; E
                dc.l    $00050584, $02C20028  ; N
                dc.l    $000505E6, $02F30048  ; H
                dc.l    $000105EA, $02F50058  ; I
                dc.l    $000505EC, $02F60060  ; L
                dc.l    $000505EC, $02F60070  ; L
SCz_TC_Map:                                                    ; Offset_0x010812
                dc.w    $0008
                dc.l    $000505DE, $02EFFFF0  ; S
                dc.l    $000505E2, $02F10000  ; K
                dc.l    $000505E6, $02F30010  ; Y
                dc.l    $000505EA, $02F50030  ; C
                dc.l    $000505EE, $02F70040  ; H
                dc.l    $000505F2, $02F90050  ; A
                dc.l    $000505DE, $02EF0060  ; S
                dc.l    $00050580, $02C00070  ; E
SFz_TC_Map:                                                    ; Offset_0x010854
                dc.w    $000B
                dc.l    $000505DE, $02EFFFC0  ; S
                dc.l    $000505E2, $02F1FFD0  ; K
                dc.l    $000505E6, $02F3FFE0  ; Y
                dc.l    $000505EA, $02F50000  ; F
                dc.l    $00050588, $02C40010  ; O
                dc.l    $000505EE, $02F70020  ; R
                dc.l    $000505F2, $02F90030  ; T
                dc.l    $000505EE, $02F70040  ; R
                dc.l    $00050580, $02C00050  ; E
                dc.l    $000505DE, $02EF0060  ; S
                dc.l    $000505DE, $02EF0070  ; S
DEz_TC_Map:                                                    ; Offset_0x0108AE
                dc.w    $0008
                dc.l    $000505DE, $02EFFFF0  ; D
                dc.l    $00050580, $02C00000  ; E
                dc.l    $000505E2, $02F10010  ; A
                dc.l    $000505E6, $02F30020  ; T
                dc.l    $000505EA, $02F50030  ; H
                dc.l    $00050580, $02C00050  ; E
                dc.l    $000505EE, $02F70060  ; G
                dc.l    $000505EE, $02F70070  ; G
ZONE_TC_Map:                                                   ; Offset_0x0108F0
                dc.w    $0004
                dc.l    $0005058C, $02C60001  ; Z
                dc.l    $00050588, $02C40010  ; O
                dc.l    $00050584, $02C20020  ; N
                dc.l    $00050580, $02C00030  ; E
Act_1_TC_Map:                                                  ; Offset_0x010912
                dc.w    $0001
                dc.l    $00072590, $22C80000  ; 1
Act_2_TC_Map:                                                  ; Offset_0x01091C
                dc.w    $0001
                dc.l    $000B2598, $22CC0000  ; 2
Act_3_TC_Map:                                                  ; Offset_0x010926
                dc.w    $0001
                dc.l    $000B25A4, $22D20000  ; 3
TC_Oval_Map:                                                   ; Offset_0x010930
                dc.w    $000D
                dc.l    $E40C0070, $0038FFF4
                dc.l    $E4020074, $003A0014
                dc.l    $EC040077, $003BFFEC
                dc.l    $F4050079, $003CFFE4
                dc.l    $140C1870, $1838FFEC
                dc.l    $04021874, $183AFFE4
                dc.l    $0C041877, $183B0004
                dc.l    $FC051879, $183C000C
                dc.l    $EC08007D, $003EFFFC
                dc.l    $F40C007C, $003EFFF4
                dc.l    $FC08007C, $003EFFF4
                dc.l    $040C007C, $003EFFEC
                dc.l    $0C08007C, $003EFFEC   
; TC_Final: ; Left over do Sonic 1,  Mapeamento não usado      ; Offset_0x01099A 
                dc.w    $0005
                dc.l    $F8050014, $000AFFDC
                dc.l    $F8010020, $0010FFEC
                dc.l    $F805002E, $0017FFF4
                dc.l    $F8050000, $00000004
                dc.l    $F8050026, $00130014                                             
;-------------------------------------------------------------------------------                
; Mapeamento dos títulos das fases
; <<<-                
;-------------------------------------------------------------------------------                  

;-------------------------------------------------------------------------------                
; Mapeamento das mensagens de "GAME OVER" e "TIME OVER"
; ->>>                
;-------------------------------------------------------------------------------                 
Time_Over_Game_Over_Mappings:                                  ; Offset_0x0109C4
                dc.w    Offset_0x0109CC-Time_Over_Game_Over_Mappings
                dc.w    Offset_0x0109DE-Time_Over_Game_Over_Mappings
                dc.w    Offset_0x0109F0-Time_Over_Game_Over_Mappings
                dc.w    Offset_0x010A02-Time_Over_Game_Over_Mappings
Offset_0x0109CC:
                dc.w    $0002
                dc.l    $F80D0000, $0000FFB8, $F80D0008, $0004FFD8
Offset_0x0109DE:
                dc.w    $0002
                dc.l    $F80D0014, $000A0008, $F80D000C, $00060028
Offset_0x0109F0:
                dc.w    $0002
                dc.l    $F809001C, $000EFFC4, $F80D0008, $0004FFDC
Offset_0x010A02:
                dc.w    $0002
                dc.l    $F80D0014, $000A000C, $F80D000C, $0006002C        
;-------------------------------------------------------------------------------                
; Mapeamento das mensagens de "GAME OVER" e "TIME OVER"
; <<<-                
;-------------------------------------------------------------------------------
                 
;-------------------------------------------------------------------------------                
; Mapeamento da tela de resultado das fases
; ->>>                
;------------------------------------------------------------------------------- 
Level_Results_Mappings:                                        ; Offset_0x010A14
                dc.w    LR_Sonic_Has_Map-Level_Results_Mappings ; Offset_0x010A26
                dc.w    LR_Passed_Map-Level_Results_Mappings   ; Offset_0x010A68
                dc.w    LR_Score_Map-Level_Results_Mappings    ; Offset_0x010A9A
                dc.w    LR_Time_Bonus_Map-Level_Results_Mappings ; Offset_0x010ACC
                dc.w    LR_Ring_Bonus_Map-Level_Results_Mappings ; Offset_0x010B06
                dc.w    TC_Oval_Map-Level_Results_Mappings     ; Offset_0x010930
                dc.w    CPz_TC_Map-Level_Results_Mappings      ; Offset_0x010746
                dc.w    NGHz_TC_Map-Level_Results_Mappings     ; Offset_0x0107B0
                dc.w    SCz_TC_Map-Level_Results_Mappings      ; Offset_0x010812   
LR_Sonic_Has_Map:                                              ; Offset_0x010A26
                dc.w    $0008
                dc.l    $F805003E, $001FFFB8  ; S
                dc.l    $F8050032, $0019FFC8  ; O
                dc.l    $F805002E, $0017FFD8  ; N
                dc.l    $F8010020, $0010FFE8  ; I
                dc.l    $F8050008, $0004FFF0  ; C
                dc.l    $F805001C, $000E0010  ; H
                dc.l    $F8050000, $00000020  ; A
                dc.l    $F805003E, $001F0030  ; S
LR_Passed_Map:                                                 ; Offset_0x010A68
                dc.w    $0006
                dc.l    $F8050036, $001BFFD0  ; P 
                dc.l    $F8050000, $0000FFE0  ; A
                dc.l    $F805003E, $001FFFF0  ; S
                dc.l    $F805003E, $001F0000  ; S
                dc.l    $F8050010, $00080010  ; E
                dc.l    $F805000C, $00060020  ; D
LR_Score_Map:                                                  ; Offset_0x010A9A
                dc.w    $0006
                dc.l    $F80D014A, $00A5FFB0  ; SCOR
                dc.l    $F8010162, $00B1FFD0  ; E
                dc.l    $F8090164, $00B20018  
                dc.l    $F80D016A, $00B50030  
                dc.l    $F704006E, $0037FFCD
                dc.l    $FF04186E, $1837FFCD
LR_Time_Bonus_Map:                                             ; Offset_0x010ACC
                dc.w    $0007
                dc.l    $F80D015A, $00ADFFB0  ; TIME
                dc.l    $F80D0066, $0033FFD9  ; BONU
                dc.l    $F801014A, $00A5FFF9  ; S
                dc.l    $F704006E, $0037FFF6  
                dc.l    $FF04186E, $1837FFF6
                dc.l    $F80DFFF0, $FBF80028
                dc.l    $F8010170, $00B80048
LR_Ring_Bonus_Map:                                             ; Offset_0x010B06
                dc.w    $0007
                dc.l    $F80D0152, $00A9FFB0  ; RING
                dc.l    $F80D0066, $0033FFD9  ; BONU
                dc.l    $F801014A, $00A5FFF9  ; S
                dc.l    $F704006E, $0037FFF6
                dc.l    $FF04186E, $1837FFF6
                dc.l    $F80DFFF8, $FBFC0028
                dc.l    $F8010170, $00B80048
;-------------------------------------------------------------------------------                
; Mapeamento da tela de resultado das fases
; <<<-                
;-------------------------------------------------------------------------------   
                 
;-------------------------------------------------------------------------------                
; Mapeamento da tela de resultado dos estágios especiais
; ->>>                
;-------------------------------------------------------------------------------
Special_Stage_Results_Mappings:                                ; Offset_0x010B40       
                dc.w    SS_Res_CHAOS_EMERALDS_Map-Special_Stage_Results_Mappings ; Offset_0x010B52
                dc.w    SS_Res_SCORE_Map-Special_Stage_Results_Mappings ; Offset_0x010BBC
                dc.w    SS_Res_RING_BONUS_Map-Special_Stage_Results_Mappings ; Offset_0x010BEE
                dc.w    TC_Oval_Map-Special_Stage_Results_Mappings ; Offset_0x010930
                dc.w    SS_Res_CONTINUE_Frame1_Map-Special_Stage_Results_Mappings ; Offset_0x010C28
                dc.w    SS_Res_CONTINUE_Frame2_Map-Special_Stage_Results_Mappings ; Offset_0x010C4A
                dc.w    SS_Res_CONTINUE_Frame3_Map-Special_Stage_Results_Mappings ; Offset_0x010C6C
                dc.w    SS_Res_SPECIAL_STAGE_Map-Special_Stage_Results_Mappings ; Offset_0x010C86
                dc.w    SS_Res_SONIC_GOT_THEM_ALL_Map-Special_Stage_Results_Mappings ; Offset_0x010CE8
SS_Res_CHAOS_EMERALDS_Map:                                     ; Offset_0x010B52
                dc.w    $000D
                dc.l    $F8050008, $0004FF90  ; C
                dc.l    $F805001C, $000EFFA0  ; H
                dc.l    $F8050000, $0000FFB0  ; A
                dc.l    $F8050032, $0019FFC0  ; O
                dc.l    $F805003E, $001FFFD0  ; S
                dc.l    $F8050010, $0008FFF0  ; E
                dc.l    $F805002A, $00150000  ; M
                dc.l    $F8050010, $00080010  ; E
                dc.l    $F805003A, $001D0020  ; R
                dc.l    $F8050000, $00000030  ; A
                dc.l    $F8050026, $00130040  ; L
                dc.l    $F805000C, $00060050  ; D
                dc.l    $F805003E, $001F0060  ; S
SS_Res_SCORE_Map:                                              ; Offset_0x010BBC
                dc.w    $0006
                dc.l    $F80D014A, $00A5FFB0  ; SCOR
                dc.l    $F8010162, $00B1FFD0  ; E
                dc.l    $F8090164, $00B20018
                dc.l    $F80D016A, $00B50030
                dc.l    $F704006E, $0037FFCD
                dc.l    $FF04186E, $1837FFCD
SS_Res_RING_BONUS_Map:                                         ; Offset_0x010BEE
                dc.w    $0007
                dc.l    $F80D0152, $00A9FFB0  ; RING
                dc.l    $F80D0066, $0033FFD9  ; BONU
                dc.l    $F801014A, $00A5FFF9  ; S
                dc.l    $F704006E, $0037FFF6
                dc.l    $FF04186E, $1837FFF6
                dc.l    $F80DFFF8, $FBFC0028
                dc.l    $F8010170, $00B80048
SS_Res_CONTINUE_Frame1_Map:                                    ; Offset_0x010C28
                dc.w    $0004
                dc.l    $F80DFFD1, $FBE8FFB0
                dc.l    $F80DFFD9, $FBECFFD0
                dc.l    $F801FFE1, $FBF0FFF0
                dc.l    $F8061FE3, $1BF10040
SS_Res_CONTINUE_Frame2_Map:                                    ; Offset_0x010C4A
                dc.w    $0004
                dc.l    $F80DFFD1, $FBE8FFB0
                dc.l    $F80DFFD9, $FBECFFD0
                dc.l    $F801FFE1, $FBF0FFF0
                dc.l    $F8061FE9, $1BF40040
SS_Res_CONTINUE_Frame3_Map:                                    ; Offset_0x010C6C
                dc.w    $0003
                dc.l    $F80DFFD1, $FBE8FFB0
                dc.l    $F80DFFD9, $FBECFFD0
                dc.l    $F801FFE1, $FBF0FFF0
SS_Res_SPECIAL_STAGE_Map:                                      ; Offset_0x010C86
                dc.w    $000C
                dc.l    $F805003E, $001FFF9C  ; S
                dc.l    $F8050036, $001BFFAC  ; P
                dc.l    $F8050010, $0008FFBC  ; E
                dc.l    $F8050008, $0004FFCC  ; C
                dc.l    $F8010020, $0010FFDC  ; I
                dc.l    $F8050000, $0000FFE4  ; A
                dc.l    $F8050026, $0013FFF4  ; L
                dc.l    $F805003E, $001F0014  ; S
                dc.l    $F8050042, $00210024  ; T
                dc.l    $F8050000, $00000034  ; A
                dc.l    $F8050018, $000C0044  ; G
                dc.l    $F8050010, $00080054  ; E
SS_Res_SONIC_GOT_THEM_ALL_Map:                                 ; Offset_0x010CE8
                dc.w    $000F
                dc.l    $F805003E, $001FFF88  ; S
                dc.l    $F8050032, $0019FF98  ; O
                dc.l    $F805002E, $0017FFA8  ; N
                dc.l    $F8010020, $0010FFB8  ; I
                dc.l    $F8050008, $0004FFC0  ; C
                dc.l    $F8050018, $000CFFD8  ; G
                dc.l    $F8050032, $0019FFE8  ; O
                dc.l    $F8050042, $0021FFF8  ; T
                dc.l    $F8050042, $00210010  ; T
                dc.l    $F805001C, $000E0020  ; H
                dc.l    $F8050010, $00080030  ; E
                dc.l    $F805002A, $00150040  ; M
                dc.l    $F8050000, $00000058  ; A
                dc.l    $F8050026, $00130068  ; L
                dc.l    $F8050026, $00130078  ; L
;-------------------------------------------------------------------------------                
; Mapeamento da tela de resultado dos estágios especiais
; <<<-                
;-------------------------------------------------------------------------------   

;-------------------------------------------------------------------------------                
; Mapeamento das esmeraldas usadas na tela de resultado dos estágios especiais
; ->>>                
;-------------------------------------------------------------------------------
Emeralds_Mappings:                                             ; Offset_0x010D62
                dc.w    Offset_0x010D70-Emeralds_Mappings
                dc.w    Offset_0x010D7A-Emeralds_Mappings
                dc.w    Offset_0x010D84-Emeralds_Mappings
                dc.w    Offset_0x010D8E-Emeralds_Mappings
                dc.w    Offset_0x010D98-Emeralds_Mappings
                dc.w    Offset_0x010DA2-Emeralds_Mappings
                dc.w    Offset_0x010DAC-Emeralds_Mappings
Offset_0x010D70:
                dc.w    $0001
                dc.l    $F8052004, $2002FFF8
Offset_0x010D7A:
                dc.w    $0001
                dc.l    $F8050000, $0000FFF8
Offset_0x010D84:
                dc.w    $0001
                dc.l    $F8054004, $4002FFF8
Offset_0x010D8E:
                dc.w    $0001
                dc.l    $F8056004, $6002FFF8
Offset_0x010D98:
                dc.w    $0001
                dc.l    $F8052008, $2004FFF8
Offset_0x010DA2:
                dc.w    $0001
                dc.l    $F805200C, $2006FFF8
Offset_0x010DAC:
                dc.w    $0000  
;-------------------------------------------------------------------------------                
; Mapeamento das esmeraldas usadas na tela de resultado dos estágios especiais
; <<<-                
;-------------------------------------------------------------------------------                  
                 
;===============================================================================
; Carrega os gráficos dos títulos das fases     
; ->>>
;===============================================================================                 
Load_Title_Cards_Art:                                          ; Offset_0x010DAE
                move.l  #$70000002, (VDP_Control_Port)               ; $00C00004
                lea     Title_Card_ZONE_123(PC), A0            ; Offset_0x010EBE                            
                jsr     Jmp_00_To_NemesisDec(PC)               ; Offset_0x011518                                
                lea     (Level_Map_Buffer).w, A4                     ; $FFFF8000
                lea     Title_Card_AY(PC), A0                  ; Offset_0x011112                      
                jsr     Jmp_00_To_NemesisDecToRAM(PC)          ; Offset_0x01151E                                 
                moveq   #$00, D0                                                
                move.b  (Level_Id).w, D0                             ; $FFFFFE10
                move.b  TC_List(PC, D0), D0                    ; Offset_0x010E10                        
                lea     TC_Data(PC), A0                        ; Offset_0x010E22                            
                lea     $00(A0, D0), A0                                         
                move.l  #$7BC00002, (VDP_Control_Port)               ; $00C00004
                lea     (Level_Map_Buffer).w, A1                     ; $FFFF8000
                lea     (VDP_Data_Port), A6                          ; $00C00000
Offset_0x010DF2:
                moveq   #$00, D0                                                
                move.b  (A0)+, D0                                               
                bmi.s   Offset_0x010E0E                                         
                lsl.w   #$05, D0                                                
                lea     $00(A1, D0), A2                                         
                moveq   #$00, D1                                                
                move.b  (A0)+, D1                                               
                lsl.w   #$03, D1                                                
                subq.w  #$01, D1                                                
Offset_0x010E06:
                move.l  (A2)+, (A6)                                             
                dbra    D1, Offset_0x010E06                                     
                bra.s   Offset_0x010DF2                                         
Offset_0x010E0E:
                rts  
;-------------------------------------------------------------------------------
TC_List:                                                       ; Offset_0x010E10
                dc.b    TC_GHz_Data-TC_Data                    ; Offset_0x010E22
                dc.b    TC_Lvl1_Data-TC_Data                   ; Offset_0x010E22
                dc.b    TC_Wz_Data-TC_Data                     ; Offset_0x010E22
                dc.b    TC_Lvl3_Data-TC_Data                   ; Offset_0x010E22
                dc.b    TC_Mz_Data-TC_Data                     ; Offset_0x010E2E
                dc.b    TC_Mz_Data-TC_Data                     ; Offset_0x010E2E
                dc.b    TC_SFz_Data-TC_Data                    ; Offset_0x010EA4
                dc.b    TC_HTz_Data-TC_Data                    ; Offset_0x010E3E
                dc.b    TC_HPz_Data-TC_Data                    ; Offset_0x010E4A
                dc.b    TC_Lvl9_Data-TC_Data                   ; Offset_0x010E22
                dc.b    TC_OOz_Data-TC_Data                    ; Offset_0x010E5A
                dc.b    TC_DHz_Data-TC_Data                    ; Offset_0x010E64
                dc.b    TC_CNz_Data-TC_Data                    ; Offset_0x010E74
                dc.b    TC_CPz_Data-TC_Data                    ; Offset_0x010E84
                dc.b    TC_DEz_Data-TC_Data                    ; Offset_0x010EB2
                dc.b    TC_NGHz_Data-TC_Data                   ; Offset_0x010E22
                dc.b    TC_SCz_Data-TC_Data                    ; Offset_0x010E96
                align   $02                 
;-------------------------------------------------------------------------------                
TC_Data:                                                       ; Offset_0x010E22
TC_GHz_Data:  
TC_Lvl1_Data: 
TC_Wz_Data:
TC_Lvl3_Data: 
TC_Lvl9_Data:
TC_NGHz_Data:  
                dc.w    TC_G, TC_R, TC_H, TC_I, TC_L, TC_Break   
TC_Mz_Data:                                                    ; Offset_0x010E2E
                dc.w    TC_M, TC_T, TC_R, TC_P, TC_L, TC_I, TC_S, TC_Break 
TC_HTz_Data:                                                   ; Offset_0x010E3E  
                dc.w    TC_H, TC_I, TC_L, TC_T, TC_P, TC_Break   
TC_HPz_Data:                                                   ; Offset_0x010E4A  
                dc.w    TC_H, TC_I, TC_D, TC_P, TC_A, TC_L, TC_C, TC_Break
TC_OOz_Data:                                                   ; Offset_0x010E5A  
                dc.w    TC_I, TC_L, TC_C, TC_A, TC_Break
TC_DHz_Data:                                                   ; Offset_0x010E64
                dc.w    TC_D, TC_U, TC_S, TC_T, TC_H, TC_I, TC_L, TC_Break
TC_CNz_Data:                                                   ; Offset_0x010E74
                dc.w    TC_C, TC_A, TC_S, TC_I, TC_G, TC_H, TC_T, TC_Break
TC_CPz_Data:                                                   ; Offset_0x010E84 
                dc.w    TC_C, TC_H, TC_M, TC_I, TC_A, TC_L, TC_P, TC_T, TC_Break
TC_SCz_Data:                                                   ; Offset_0x010E96 
                dc.w    TC_S, TC_K, TC_Y, TC_C, TC_H, TC_A, TC_Break   
TC_SFz_Data:                                                   ; Offset_0x010EA4
                dc.w    TC_S, TC_K, TC_Y, TC_F, TC_R, TC_T, TC_Break 
TC_DEz_Data:                                                   ; Offset_0x010EB2
                dc.w    TC_D, TC_A, TC_T, TC_H, TC_G, TC_Break 
;-------------------------------------------------------------------------------
Title_Card_ZONE_123:                                           ; Offset_0x010EBE                      
                incbin  'data\art\zone_123.nem'   
Title_Card_AY:                                                 ; Offset_0x011112      
                incbin  'data\art\tc_ay.nem'   
Jmp_00_To_NemesisDec:                                          ; Offset_0x011518
                jmp     (NemesisDec)                           ; Offset_0x001A74
Jmp_00_To_NemesisDecToRAM:                                     ; Offset_0x01151E                
                jmp     (NemesisDecToRAM)                      ; Offset_0x001A86                                           
;===============================================================================
; Carrega os gráficos dos títulos das fases     
; <<<-
;===============================================================================  
Obj_0x36_Spikes:                                               ; Offset_0x011524
                include 'data\objects\obj_0x36.asm'
                nop
Obj_0x3B_Rock:                                                 ; Offset_0x0118E4    
                include 'data\objects\obj_0x3B.asm'
                dc.w    $0000
Obj_0x3C_Breakable_Wall:                                       ; Offset_0x011960
                include 'data\objects\obj_0x3C.asm'
;-------------------------------------------------------------------------------                
                bra     Obj_Null                               ; Offset_0x011F66
;===============================================================================
; Carrega os objetos na memória     
; ->>>
;===============================================================================
Load_Objects:                                                  ; Offset_0x011BB8  
                lea     (Obj_Memory_Address).w, A0                   ; $FFFFB000
                moveq   #$7F, D7                                                
                moveq   #$00, D0                                                
                cmpi.b  #$06, (Obj_Memory_Address+Obj_Routine).w     ; $FFFFB024                               
                bcc.s   Offset_0x011BE2                                         
Loop_Load_Object:                                              ; Offset_0x011BC8
                move.b  (A0), D0                                                
                beq.s   Load_Next_Object                       ; Offset_0x011BD8                                         
                add.w   D0, D0                                                  
                add.w   D0, D0                                                  
                move.l  Object_List-$0004(PC, D0), A1          ; Offset_0x011BFE                    
                jsr     (A1)                                                    
                moveq   #$00, D0                                                
Load_Next_Object:                                              ; Offset_0x011BD8
                lea     $0040(A0), A0                                           
                dbra    D7, Loop_Load_Object                   ; Offset_0x011BC8                                     
                rts                                                             
Offset_0x011BE2:
                moveq   #$1F, D7                                                
                bsr.s   Loop_Load_Object                       ; Offset_0x011BC8                                         
                moveq   #$5F, D7                                                
Loop_Load_Object_2:                                            ; Offset_0x011BE8
                moveq   #$00, D0                                                
                move.b  (A0), D0                                                
                beq.s   Load_Next_Object_2                     ; Offset_0x011BF8                                         
                tst.b   $0001(A0)                                               
                bpl.s   Load_Next_Object_2                     ; Offset_0x011BF8                                         
                bsr     DisplaySprite                          ; Offset_0x0120DE                                         
Load_Next_Object_2:                                            ; Offset_0x011BF8
                lea     Obj_Size(A0), A0                                 ; $0040                                   
                dbra    D7, Loop_Load_Object_2                 ; Offset_0x011BE8                                     
                rts   
;-------------------------------------------------------------------------------
Object_List:                                                   ; Offset_0x011C02                
                dc.l    Obj_0x01_Sonic                         ; Offset_0x015054  
                dc.l    Obj_0x02_Miles                         ; Offset_0x016710
                dc.l    Obj_0x03_Layer_Switch                  ; Offset_0x01A758
                dc.l    Obj_0x04_Water_Surface                 ; Offset_0x01B368
                dc.l    Obj_0x05_Miles_Tail                    ; Offset_0x017D5E
                dc.l    Obj_0x06_Spiral_Attributes             ; Offset_0x01BF70
                dc.l    Obj_0x07_0il_Attributes                ; Offset_0x01EA90
                dc.l    Obj_0x08_Dust_Water_Splash             ; Offset_0x018B06
                dc.l    Obj_0x09_Sonic_In_Special_Stage        ; Offset_0x02ED2C
                dc.l    Obj_0x0A_Sonic_Miles_Underwater        ; Offset_0x017E80
                dc.l    Obj_0x0B_Open_Close_Platform           ; Offset_0x01AB40
                dc.l    Obj_0x0C_Unk_Platform                  ; Offset_0x01AC9C
                dc.l    Obj_0x0D_End_Panel                     ; Offset_0x014544
                dc.l    Obj_0x0E_Sonic_Miles                   ; Offset_0x00FC10
                dc.l    Obj_0x0F_1Player2Vs                    ; Offset_0x00FC96
                dc.l    Obj_0x10_Miles_In_Special_Stage        ; Offset_0x02FC1C
                dc.l    Obj_0x11_Bridge                        ; Offset_0x00C910
                dc.l    Obj_0x12_HPz_Master_Emerald            ; Offset_0x01ADA8
                dc.l    Obj_0x13_HPz_Waterfalls                ; Offset_0x01AE38
                dc.l    Obj_0x14_Seesaw                        ; Offset_0x01C3D4
                dc.l    Obj_0x15_Swing_Platform                ; Offset_0x00CF38
                dc.l    Obj_0x16_Teleferics                    ; Offset_0x01C858
                dc.l    Obj_0x17_Log_Spikes                    ; Offset_0x00D5A0
                dc.l    Obj_0x18_Platforms                     ; Offset_0x00D73C  
                dc.l    Obj_0x19_Rotating_Platforms            ; Offset_0x01CA90
                dc.l    Obj_0x1A_Collapsing_Platforms          ; Offset_0x00DB40
                dc.l    Obj_0x1B_Speed_Booster                 ; Offset_0x01CD1C
                dc.l    Obj_0x1C_Misc                          ; Offset_0x00E44C
                dc.l    Obj_0x1D_Worms                         ; Offset_0x01CE78
                dc.l    Obj_0x1E_Tube_Attributes               ; Offset_0x01D00C
                dc.l    Obj_0x1F_Collapsing_Platforms          ; Offset_0x00DC8C
                dc.l    Obj_0x20_HTz_Boss_FireBall             ; Offset_0x01DA68
                dc.l    Obj_0x21_Head_Up_Display               ; Offset_0x0392FC
                dc.l    Obj_0x22_Arrow_Shooter                 ; Offset_0x02009C
                dc.l    Obj_0x23_Pillar                        ; Offset_0x020294
                dc.l    Obj_0x24_Oxygen_Bubbles                ; Offset_0x01A348
                dc.l    Obj_0x25_Rings                         ; Offset_0x00F034
                dc.l    Obj_0x26_Monitors                      ; Offset_0x00F6B0
                dc.l    Obj_0x27_Object_Hit                    ; Offset_0x01BB26
                dc.l    Obj_0x28_Flickies                      ; Offset_0x00E97C
                dc.l    Obj_0x29_Enemy_Points                  ; Offset_0x00EEB6
                dc.l    Obj_0x2A_Up_Down_Pillar                ; Offset_0x00E6BC
                dc.l    Obj_0x2B_Raising_Pillar                ; Offset_0x020462
                dc.l    Obj_0x2C_Leaves                        ; Offset_0x020B08
                dc.l    Obj_0x2D_Automatic_Door                ; Offset_0x00E792
                dc.l    Obj_0x2E_Monitors_Contents             ; Offset_0x00F87E
                dc.l    Obj_0x2F_Breakable_Floor               ; Offset_0x01DD70
                dc.l    Obj_0x30_Earthquake_Tiles_Attributes   ; Offset_0x01E34C 
                dc.l    Obj_0x31_Lava_Attributes               ; Offset_0x01B878
                dc.l    Obj_0x32_Breakable_Obstacle            ; Offset_0x01DF8A
                dc.l    Obj_0x33_Touch_Booster                 ; Offset_0x01E564
                dc.l    Obj_0x34_Title_Cards                   ; Offset_0x00FE28  
                dc.l    Obj_0x35_Invincibility                 ; Offset_0x0184BC
                dc.l    Obj_0x36_Spikes                        ; Offset_0x011524
                dc.l    Obj_0x37_Rings_Lost                    ; Offset_0x00F16E
                dc.l    Obj_0x38_Shield                        ; Offset_0x01842C
                dc.l    Obj_0x39_Time_Over_Game_Over           ; Offset_0x00FF7E
                dc.l    Obj_0x3A_Level_Results                 ; Offset_0x010040
                dc.l    Obj_0x3B_Rock                          ; Offset_0x0118E4
                dc.l    Obj_0x3C_Breakable_Wall                ; Offset_0x011960
                dc.l    Obj_0x3D_Break_Boost                   ; Offset_0x01F838
                dc.l    Obj_0x3E_Egg_Prison                    ; Offset_0x037D78
                dc.l    Obj_0x3F_Fans                          ; Offset_0x02531C
                dc.l    Obj_0x40_Diagonal_Springs              ; Offset_0x020D7C
                dc.l    Obj_0x41_Springs                       ; Offset_0x013BF0
                dc.l    Obj_0x42_Steam_Vent                    ; Offset_0x021040
                dc.l    Obj_0x43_Giant_Spikeball               ; Offset_0x01E8B0
                dc.l    Obj_0x44_Red_Ball_Bumper               ; Offset_0x01A1DC
                dc.l    Obj_0x45_Spring_Push_Boost             ; Offset_0x01EB60
                dc.l    Obj_0x46_Spring_Ball                   ; Offset_0x01F47E
                dc.l    Obj_0x47_Switch                        ; Offset_0x01F75C
                dc.l    Obj_0x48_Cannon                        ; Offset_0x01FC7C
                dc.l    Obj_0x49_Waterfall                     ; Offset_0x01B62A
                dc.l    Obj_0x4A_Octus                         ; Offset_0x027C84
                dc.l    Obj_0x4B_Buzzer                        ; Offset_0x02890C
                dc.l    Obj_0x4C_Batbot                        ; Offset_0x027504
                dc.l    Obj_0x4D_Rhinobot                      ; Offset_0x02863C
                dc.l    Obj_0x4E_Crocobot                      ; Offset_0x02798C
                dc.l    Obj_0x4F_Dinobot                       ; Offset_0x027F34
                dc.l    Obj_0x50_Aquis                         ; Offset_0x028098
                dc.l    Obj_0x51_CNz_Boss                      ; Offset_0x02CE18
                dc.l    Obj_0x52_HTz_Boss                      ; Offset_0x02B280
                dc.l    Obj_0x53_Mz_Boss_Balls_Robotniks       ; Offset_0x02DDDE
                dc.l    Obj_0x54_Mz_Boss                       ; Offset_0x02D73C
                dc.l    Obj_0x55_OOz_Boss                      ; Offset_0x02E3F0
                dc.l    Obj_0x56_GHz_Boss                      ; Offset_0x02A6A8
                dc.l    Obj_0x57_DHz_Boss                      ; Offset_0x02C4E0
                dc.l    Obj_0x58_Boss_Explosions               ; Offset_0x028D28
                dc.l    Obj_Null                               ; Offset_0x011F66
                dc.l    Obj_Null                               ; Offset_0x011F66
                dc.l    Obj_0x5B_SS_Ring_Out                   ; Offset_0x030646
                dc.l    Obj_0x5C_Masher                        ; Offset_0x028C28
                dc.l    Obj_0x5D_CPz_Boss                      ; Offset_0x028FDC
                dc.l    Obj_0x5E_SS_Head_Up_Display            ; Offset_0x00907A
                dc.l    Obj_0x5F_SS_Flag_START_Flag            ; Offset_0x0090E8
                dc.l    Obj_0x60_SS_Rings                      ; Offset_0x030316
                dc.l    Obj_0x61_SS_Bomb                       ; Offset_0x030218
                dc.l    Obj_0x62_SS_Time_Count_Down            ; Offset_0x0093BE
                dc.l    Obj_0x63_SS_Objects_Shadow             ; Offset_0x02F436
                dc.l    Obj_0x64_Pistons                       ; Offset_0x02132C
                dc.l    Obj_0x65_Platform_Over_Gear            ; Offset_0x0214EC
                dc.l    Obj_0x66_Springs_Wall                  ; Offset_0x021954
                dc.l    Obj_0x67_Teleport_Attributes           ; Offset_0x021B5C
                dc.l    Obj_0x68_Block_Harpon                  ; Offset_0x021F94
                dc.l    Obj_0x69_Screw_Nut                     ; Offset_0x022284
                dc.l    Obj_0x6A_MCz_Three_Boxes_Mz_Ptfrm      ; Offset_0x0224B0
                dc.l    Obj_0x6B_Mz_Platform                   ; Offset_0x02276C
                dc.l    Obj_0x6C_Mz_Moving_Platforms           ; Offset_0x022A28
                dc.l    Obj_0x6D_Harpoon                       ; Offset_0x022194
                dc.l    Obj_0x6E_Machine                       ; Offset_0x022DA0
                dc.l    Obj_Ox6F_Parallelogram_Elevator        ; Offset_0x022FB4
                dc.l    Obj_0x70_Rotating_Gears                ; Offset_0x02330C
                dc.l    Obj_0x71_Mz_HPz_Misc                   ; Offset_0x00E504
                dc.l    Obj_0x72_Conveyor_Belt_Attributes      ; Offset_0x023688
                dc.l    Obj_0x73_Rotating_Rings                ; Offset_0x023710
                dc.l    Obj_0x74_Invisible_Block               ; Offset_0x01B96C
                dc.l    Obj_0x75_Spikeball_Chain               ; Offset_0x023904
                dc.l    Obj_0x76_Platform_Spikes               ; Offset_0x023B34
                dc.l    Obj_0x77_Bridge                        ; Offset_0x023CC4
                dc.l    Obj_0x78_Stair_Case_Platforms          ; Offset_0x023F08
                dc.l    Obj_0x79_Lamp_Post                     ; Offset_0x019E30
                dc.l    Obj_0x7A_Platform_Horizontal           ; Offset_0x0240DC
                dc.l    Obj_0x7B_Spring_Tubes                  ; Offset_0x0242CC
                dc.l    Obj_0x7C_Metal_Structure               ; Offset_0x01BA70
                dc.l    Obj_0x7D_Hidden_Bonus                  ; Offset_0x01A0D8
                dc.l    Obj_0x7E_Super_Sonic_Stars             ; Offset_0x018EC2
                dc.l    Obj_0x7F_Vines_Switch                  ; Offset_0x024514
                dc.l    Obj_0x80_Vines_Chain_Hook              ; Offset_0x0246AC
                dc.l    Obj_0x81_Vertical_Bridge               ; Offset_0x024B6C
                dc.l    Obj_0x82_Falling_Pillar                ; Offset_0x024DFC
                dc.l    Obj_0x83_Three_Rotating_Platforms      ; Offset_0x025068
                dc.l    Obj_0x84_Auto_Spin                     ; Offset_0x01BBFA
                dc.l    Obj_0x85_CNz_Pinball_Spring            ; Offset_0x0256D4
                dc.l    Obj_0x86_CNz_Flippers                  ; Offset_0x025C34
                dc.l    Obj_0x87_SS_Ring_Count_Display         ; Offset_0x0094FA
                dc.l    Obj_0x88_Miles_Tail_In_SS              ; Offset_0x02FDDE
                dc.l    Obj_0x89_NGHz_Boss                     ; Offset_0x02BA0C
                dc.l    Obj_0x8A_S1_Credits                    ; Offset_0x03765C
                dc.l    Obj_0x8B_Palette_Cycling_Switch        ; Offset_0x01BE30
                dc.l    Obj_0x8C_NGHz_Whisp                    ; Offset_0x030D9A
                dc.l    Obj_0x8D_Hidden_Grounder               ; Offset_0x030EC8
                dc.l    Obj_0x8E_Grounder                      ; Offset_0x030EC8
                dc.l    Obj_0x8F_Wall_Hidden_Grounder          ; Offset_0x030FDA
                dc.l    Obj_0x90_Rock_Hidden_Grounder          ; Offset_0x031026
                dc.l    Obj_0x91_Chop_Chop                     ; Offset_0x0311FE
                dc.l    Obj_0x92_Spiker                        ; Offset_0x031360
                dc.l    Obj_0x93_Spiker_Drill                  ; Offset_0x031434
                dc.l    Obj_0x94_Rexon_Body                    ; Offset_0x031770
                dc.l    Obj_0x95_Sol                           ; Offset_0x03154C
                dc.l    Obj_0x96_Rexon_Body                    ; Offset_0x031770
                dc.l    Obj_0x97_Rexon_Head                    ; Offset_0x03181E
                dc.l    Obj_0x98_Enemies_Weapons               ; Offset_0x031B36  
                dc.l    Obj_0x99_Nebula                        ; Offset_0x031C16
                dc.l    Obj_0x9A_Turtloid                      ; Offset_0x031D84
                dc.l    Obj_0x9B_Turtloid_Rider                ; Offset_0x031E54
                dc.l    Obj_0x9C_Enemy_Boost                   ; Offset_0x031ED0
                dc.l    Obj_0x9D_Coconuts                      ; Offset_0x032048
                dc.l    Obj_0x9E_Crawlton                      ; Offset_0x032264
                dc.l    Obj_0x9F_Shellcracker                  ; Offset_0x03243A
                dc.l    Obj_0xA0_Shellcracker_Craw             ; Offset_0x03258A
                dc.l    Obj_0xA1_Slicer                        ; Offset_0x0327E2
                dc.l    Obj_0xA2_Slicer_Pincers                ; Offset_0x0328C0
                dc.l    Obj_0xA3_Flasher                       ; Offset_0x032B26
                dc.l    Obj_0xA4_Asteron                       ; Offset_0x032D84
                dc.l    Obj_0xA5_Horizontal_Spiny              ; Offset_0x032ED2
                dc.l    Obj_0xA6_Vertical_Spiny                ; Offset_0x032F6E
                dc.l    Obj_0xA7_Grabber                       ; Offset_0x0331A2
                dc.l    Obj_0xA8_Grabber_Sub                   ; Offset_0x03334E
                dc.l    Obj_0xA9_Grabber_Sub                   ; Offset_0x033410
                dc.l    Obj_0xAA_Grabber_Sub                   ; Offset_0x033444
                dc.l    Obj_0xAB_Grabber_Sub                   ; Offset_0x033480
                dc.l    Obj_0xAC_Balkiry                       ; Offset_0x033758
                dc.l    Obj_0xAD_Clucker_Platform              ; Offset_0x0337FA
                dc.l    Obj_0xAE_Clucker                       ; Offset_0x033830
                dc.l    Obj_0xAF_Metal_Sonic                   ; Offset_0x033B0A
                dc.l    Obj_0xB0_Sonic_Sega_Logo               ; Offset_0x03454A
                dc.l    Obj_0xB1_Sonic_Sega_Logo               ; Offset_0x034766
                dc.l    Obj_0xB2_Tornado                       ; Offset_0x034C9C
                dc.l    Obj_0xB3_Clouds                        ; Offset_0x03521A
                dc.l    Obj_0xB4_Vertical_Helix                ; Offset_0x0352A4
                dc.l    Obj_0xB5_Horizontal_Helix              ; Offset_0x035316
                dc.l    Obj_0xB6_Platform_Helix                ; Offset_0x035528
                dc.l    Obj_0xB7_Vertical_Large_Laser          ; Offset_0x0357EE
                dc.l    Obj_0xB8_Cannon                        ; Offset_0x0358B0
                dc.l    Obj_0xB9_Laser                         ; Offset_0x035A02
                dc.l    Obj_0xBA_Conveyor_Belt_Wheels          ; Offset_0x035A90
                dc.l    Obj_0xBB                               ; Offset_0x035AC0
                dc.l    Obj_0xBC_Rocket_Boost                  ; Offset_0x035B00
                dc.l    Obj_0xBD_SFz_Elevators                 ; Offset_0x035B42
                dc.l    Obj_0xBE_Hatchways                     ; Offset_0x035C82
                dc.l    Obj_0xBF_Engine_Part                   ; Offset_0x035D86
                dc.l    Obj_0xC0_Speed_Booster                 ; Offset_0x035DE0
                dc.l    Obj_0xC1_SFz_Breakable_Wall            ; Offset_0x035F44
                dc.l    Obj_0xC2_SFz_Boss_Access_Switch        ; Offset_0x0361C0
                dc.l    Obj_0xC3_SFz_Rotating_Platforms        ; Offset_0x036262
                dc.l    Obj_0xC4_SFz_Tornado_Smoke             ; Offset_0x03629A
                dc.l    Obj_0xC5_SFz_Boss                      ; Offset_0x036306
                dc.l    Obj_0xC6_Robotnik_Running              ; Offset_0x03689C
                dc.l    Obj_0xC7_DEz_Final_Boss                ; Offset_0x036BD0
                dc.l    Obj_0xC8_Crawl                         ; Offset_0x0374C2
                dc.l    Obj_Null                         ; $C9 ; Offset_0x011F66
                dc.l    Obj_Null                         ; $CA ; Offset_0x011F66
                dc.l    Obj_Null                         ; $CB ; Offset_0x011F66
                dc.l    Obj_Null                         ; $CC ; Offset_0x011F66
                dc.l    Obj_Null                         ; $CD ; Offset_0x011F66
                dc.l    Obj_Null                         ; $CE ; Offset_0x011F66
                dc.l    Obj_Null                         ; $CF ; Offset_0x011F66 
                dc.l    Obj_Null                         ; $D0 ; Offset_0x011F66  
                dc.l    Obj_Null                         ; $D1 ; Offset_0x011F66
                dc.l    Obj_0xD2_Green_Platform                ; Offset_0x026014
                dc.l    Obj_0xD3_CNz_Spikeball                 ; Offset_0x026338
                dc.l    Obj_0xD4_CNz_Box                       ; Offset_0x0263C4
                dc.l    Obj_0xD5_CNz_Elevator                  ; Offset_0x0264E0
                dc.l    Obj_0xD6_CNz_Slot_Machine_Bonus        ; Offset_0x026644
                dc.l    Obj_0xD7_CNz_Blue_Bumper               ; Offset_0x026F38
                dc.l    Obj_0xD8_CNz_Green_Bumper              ; Offset_0x02719C
                dc.l    Obj_0xD9_SFz_Hang_Attributes           ; Offset_0x02741C      
;===============================================================================
; Carrega os objetos na memória     
; <<<-
;===============================================================================

Obj_Null:                                                      ; Offset_0x011F66
                bra     DeleteObject                           ; Offset_0x0120D0

ObjectFall:                                                    ; Offset_0x011F6A
                move.l  Obj_X(A0), D2                                    ; $0008
                move.l  Obj_Y(A0), D3                                    ; $000C
                move.w  Obj_Speed(A0), D0                                ; $0010
                ext.l   D0
                asl.l   #$08, D0
                add.l   D0, D2
                move.w  Obj_Speed_Y(A0), D0                              ; $0012
                addi.w  #$0038, Obj_Speed_Y(A0)                          ; $0012
                ext.l   D0
                asl.l   #$08, D0
                add.l   D0, D3
                move.l  D2, Obj_X(A0)                                    ; $0008
                move.l  D3, Obj_Y(A0)                                    ; $000C
                rts
;-------------------------------------------------------------------------------
SpeedToPos:                                                    ; Offset_0x011F96
                move.l  Obj_X(A0), D2                                    ; $0008
                move.l  Obj_Y(A0), D3                                    ; $000C
                move.w  Obj_Speed(A0), D0                                ; $0010
                ext.l   D0
                asl.l   #$08, D0
                add.l   D0, D2
                move.w  Obj_Speed_Y(A0), D0                              ; $0012
                ext.l   D0
                asl.l   #$08, D0
                add.l   D0, D3
                move.l  D2, Obj_X(A0)                                    ; $0008
                move.l  D3, Obj_Y(A0)                                    ; $000C
                rts                
;-------------------------------------------------------------------------------
MarkObjGone:                                                   ; Offset_0x011FBC
                tst.w   (Two_Player_Flag).w                          ; $FFFFFFD8
                beq.s   Offset_0x011FC6
                bra     DisplaySprite                          ; Offset_0x0120DE
Offset_0x011FC6:
                move.w  Obj_X(A0), D0                                    ; $0008
                andi.w  #$FF80, D0
                sub.w   ($FFFFF7DA).w, D0
                cmpi.w  #$0280, D0
                bhi     Offset_0x011FDE
                bra     DisplaySprite                          ; Offset_0x0120DE
Offset_0x011FDE:
                lea     ($FFFFFC00).w, A2
                moveq   #$00, D0
                move.b  Obj_Respaw_Ref(A0), D0                           ; $0023
                beq.s   Offset_0x011FF0
                bclr    #$07, $02(A2, D0)
Offset_0x011FF0:
                bra     DeleteObject                           ; Offset_0x0120D0
;-------------------------------------------------------------------------------
MarkObjGone_2:                                                 ; Offset_0x011FF4
                tst.w   (Two_Player_Flag).w                          ; $FFFFFFD8
                beq.s   Offset_0x011FFE
                bra     DisplaySprite                          ; Offset_0x0120DE
Offset_0x011FFE:
                andi.w  #$FF80, D0
                sub.w   ($FFFFF7DA).w, D0
                cmpi.w  #$0280, D0
                bhi     Offset_0x012012
                bra     DisplaySprite                          ; Offset_0x0120DE
Offset_0x012012:
                lea     ($FFFFFC00).w, A2
                moveq   #$00, D0
                move.b  Obj_Respaw_Ref(A0), D0                           ; $0023
                beq.s   Offset_0x012024
                bclr    #$07, $02(A2, D0)
Offset_0x012024:
                bra     DeleteObject                           ; Offset_0x0120D0 
;-------------------------------------------------------------------------------
MarkObjGone_3:                                                 ; Offset_0x012028
                tst.w   (Two_Player_Flag).w                          ; $FFFFFFD8
                beq.s   Offset_0x012030
                rts
Offset_0x012030:
                move.w  Obj_X(A0), D0                                    ; $0008
                andi.w  #$FF80, D0
                sub.w   ($FFFFF7DA).w, D0
                cmpi.w  #$0280, D0
                bhi     Offset_0x012046
                rts
Offset_0x012046:
                lea     ($FFFFFC00).w, A2
                moveq   #$00, D0
                move.b  Obj_Respaw_Ref(A0), D0                           ; $0023
                beq.s   Offset_0x012058
                bclr    #$07, $02(A2, D0)
Offset_0x012058:
                bra     DeleteObject                           ; Offset_0x0120D0     
;-------------------------------------------------------------------------------
MarkObjGone_4:                                                 ; Offset_0x01205C
                tst.w   (Two_Player_Flag).w                          ; $FFFFFFD8
                bne.s   MarkObjGone_4_2P                       ; Offset_0x012090
                move.w  Obj_X(A0), D0                                    ; $0008
                andi.w  #$FF80, D0
                sub.w   ($FFFFF7DA).w, D0
                cmpi.w  #$0280, D0
                bhi     Offset_0x01207A
                bra     DisplaySprite                          ; Offset_0x0120DE
Offset_0x01207A:
                lea     ($FFFFFC00).w, A2
                moveq   #$00, D0
                move.b  Obj_Respaw_Ref(A0), D0                           ; $0023
                beq.s   Offset_0x01208C
                bclr    #$07, $02(A2, D0)
Offset_0x01208C:
                bra     DeleteObject                           ; Offset_0x0120D0
MarkObjGone_4_2P                                               ; Offset_0x012090
                move.w  Obj_X(A0), D0                                    ; $0008
                andi.w  #$FF00, D0
                move.w  D0, D1
                sub.w   ($FFFFF7DA).w, D0
                cmpi.w  #$0300, D0
                bhi     Offset_0x0120AA
                bra     DisplaySprite                          ; Offset_0x0120DE
Offset_0x0120AA:
                sub.w   ($FFFFF7DC).w, D1
                cmpi.w  #$0300, D1
                bhi     Offset_0x0120BA
                bra     DisplaySprite                          ; Offset_0x0120DE
Offset_0x0120BA:
                lea     ($FFFFFC00).w, A2
                moveq   #$00, D0
                move.b  Obj_Respaw_Ref(A0), D0                           ; $0023
                beq.s   Offset_0x0120CC
                bclr    #$07, $02(A2, D0)
Offset_0x0120CC:
                bra     DeleteObject                           ; Offset_0x0120D0                                                        
;===============================================================================
; Rotinas para limpar a memória alocada pelo objeto   
; ->>>
;===============================================================================  
DeleteObject:                                                  ; Offset_0x0120D0
                move.l  A0, A1   
DeleteObject_A1:                                               ; Offset_0x0120D2                                               
                moveq   #$00, D1                                                
                moveq   #$0F, D0                                                
DeleteObject_FreeRam_Loop:                                     ; Offset_0x0120D6
                move.l  D1, (A1)+                                               
                dbra    D0, DeleteObject_FreeRam_Loop          ; Offset_0x0120D6                                     
                rts                                                             
;===============================================================================
; Rotinas para limpar a memória alocada pelo objeto   
; <<<-
;===============================================================================

;===============================================================================
; Rotinas para exibição do sprite   
; ->>>
;=============================================================================== 
DisplaySprite:                                                 ; Offset_0x0120DE
                lea     ($FFFFAC00).w, A1
                move.w  Obj_Priority(A0), D0                             ; $0018
                lsr.w   #$01, D0
                andi.w  #$0380, D0
                adda.w  D0, A1
                cmpi.w  #$007E, (A1)
                bcc.s   Exit_DisplaySprite                     ; Offset_0x0120FA
                addq.w  #$02, (A1)
                adda.w  (A1), A1
                move.w  A0, (A1)
Exit_DisplaySprite:                                            ; Offset_0x0120FA
                rts
;-------------------------------------------------------------------------------
DisplaySprite_A1:                                              ; Offset_0x0120FC
                lea     ($FFFFAC00).w, A2
                move.w  Obj_Priority(A1), D0                             ; $0018
                lsr.w   #$01, D0
                andi.w  #$0380, D0
                adda.w  D0, A2
                cmpi.w  #$007E, (A2)
                bcc.s   Exit_DisplaySprite_A1                  ; Offset_0x012118
                addq.w  #$02, (A2)
                adda.w  (A2), A2
                move.w  A1, (A2)
Exit_DisplaySprite_A1:                                         ; Offset_0x012118
                rts
;-------------------------------------------------------------------------------
DisplaySprite_Param:                                           ; Offset_0x01211A
                lea     ($FFFFAC00).w, A1
                adda.w  D0, A1
                cmpi.w  #$007E, (A1)
                bcc.s   Exit_DisplaySprite_Param               ; Offset_0x01212C
                addq.w  #$02, (A1)
                adda.w  (A1), A1
                move.w  A0, (A1)
Exit_DisplaySprite_Param:                                      ; Offset_0x01212C
                rts                                                                                                                                           
;===============================================================================
; Rotinas para exibição do sprite   
; <<<-
;===============================================================================

;===============================================================================
; Rotina para animação do sprite   
; ->>>
;===============================================================================      
AnimateSprite:                                                 ; Offset_0x01212E
                moveq   #$00, D0                                          
                move.b  Obj_Ani_Number(A0), D0                           ; $001C
                cmp.b   Obj_Ani_Flag(A0), D0                             ; $001D
                beq.s   Offset_0x01214A
                move.b  D0, Obj_Ani_Flag(A0)                             ; $001D
                move.b  #$00, Obj_Ani_Frame(A0)                          ; $001B
                move.b  #$00, Obj_Ani_Time(A0)                           ; $001E
Offset_0x01214A:
                subq.b  #$01, Obj_Ani_Time(A0)                           ; $001E
                bpl.s   Offset_0x012184
                add.w   D0, D0
                adda.w  $00(A1, D0), A1
                move.b  (A1), Obj_Ani_Time(A0)                           ; $001E
                moveq   #$00, D1
                move.b  Obj_Ani_Frame(A0), D1                            ; $001B
                move.b  $01(A1, D1), D0
                bmi.s   Offset_0x012186
Offset_0x012166:
                andi.b  #$7F, D0
                move.b  D0, Obj_Map_Id(A0)                               ; $001A
                move.b  Obj_Status(A0), D1                               ; $0022
                andi.b  #$03, D1
                andi.b  #$FC, Obj_Flags(A0)                              ; $0001
                or.b    D1, Obj_Flags(A0)                                ; $0001
                addq.b  #$01, Obj_Ani_Frame(A0)                          ; $001B
Offset_0x012184:
                rts
Offset_0x012186:
                addq.b  #$01, D0
                bne.s   Offset_0x012196
                move.b  #$00, Obj_Ani_Frame(A0)                          ; $001B
                move.b  Obj_Flags(A1), D0                                ; $0001
                bra.s   Offset_0x012166
Offset_0x012196:
                addq.b  #$01, D0
                bne.s   Offset_0x0121AA
                move.b  $02(A1, D1), D0
                sub.b   D0, Obj_Ani_Frame(A0)                            ; $001B
                sub.b   D0, D1
                move.b  $01(A1, D1), D0
                bra.s   Offset_0x012166
Offset_0x0121AA:
                addq.b  #$01, D0
                bne.s   Offset_0x0121B6
                move.b  $02(A1, D1), Obj_Ani_Number(A0)                  ; $001C
                rts
Offset_0x0121B6:
                addq.b  #$01, D0
                bne.s   Offset_0x0121CA
                addq.b  #$02, Obj_Routine(A0)                            ; $0024
                move.b  #$00, Obj_Ani_Time(A0)                           ; $001E
                addq.b  #$01, Obj_Ani_Frame(A0)                          ; $001B
                rts
Offset_0x0121CA:
                addq.b  #$01, D0
                bne.s   Offset_0x0121DA
                move.b  #$00, Obj_Ani_Frame(A0)                          ; $001B
                clr.b   Obj_Routine_2(A0)                                ; $0025
                rts
Offset_0x0121DA:
                addq.b  #$01, D0
                bne.s   Offset_0x0121E4
                addq.b  #$02, Obj_Routine_2(A0)                          ; $0025
                rts
Offset_0x0121E4:
                addq.b  #$01, D0
                bne.s   Offset_0x0121EC
                addq.b  #$02, Obj_Timer(A0)                              ; $002A
Offset_0x0121EC:
                rts                                                           
;===============================================================================
; Rotina para animação do sprite   
; <<<-
;===============================================================================

;===============================================================================
; Rotina para compilar os sprites de acordo com as definições dos objetos
; ->>>
;===============================================================================
Build_Sprites_Screen_Pos:                                      ; Offset_0x0121EE
                dc.l    $00000000, $FFFFEEF0, $FFFFEE08, $FFFFEE18
Build_Sprites:                                                 ; Offset_0x0121FE           
                tst.w   (Two_Player_Flag).w                          ; $FFFFFFD8
                bne     Build_Sprites_2P                       ; Offset_0x01255E
                lea     ($FFFFF800).w, A2
                moveq   #$00, D5
                moveq   #$00, D4
                tst.b   ($FFFFF711).w
                beq.s   Offset_0x012218
                bsr     Build_Rings                            ; Offset_0x012D7C
Offset_0x012218:
                lea     ($FFFFAC00).w, A4
                moveq   #$07, D7
Offset_0x01221E:
                tst.w   (A4)
                beq     Offset_0x0122F8
                moveq   #$02, D6
Offset_0x012226:
                move.w  $00(A4, D6), A0
                tst.b   (A0)
                beq     Offset_0x01231A
                tst.l   Obj_Map(A0)                                      ; $0004
                beq     Offset_0x01231A
                andi.b  #$7F, Obj_Flags(A0)                              ; $0001
                move.b  Obj_Flags(A0), D0                                ; $0001
                move.b  D0, D4
                btst    #$06, D0
                bne     Offset_0x01231C
                andi.w  #$000C, D0
                beq.s   Offset_0x0122A4
                move.l  Build_Sprites_Screen_Pos(PC, D0), A1   ; Offset_0x0121EE
                moveq   #$00, D0
                move.b  Obj_Width(A0), D0                                ; $0019
                move.w  Obj_X(A0), D3                                    ; $0008
                sub.w   (A1), D3
                move.w  D3, D1
                add.w   D0, D1
                bmi     Offset_0x0122F0
                move.w  D3, D1
                sub.w   D0, D1
                cmpi.w  #$0140, D1
                bge     Offset_0x0122F0
                addi.w  #$0080, D3
                btst    #$04, D4
                beq.s   Offset_0x0122AE
                moveq   #$00, D0
                move.b  Obj_Height_2(A0), D0                             ; $0016
                move.w  Obj_Y(A0), D2                                    ; $000C
                sub.w   Obj_Map(A1), D2                                  ; $0004
                move.w  D2, D1
                add.w   D0, D1
                bmi.s   Offset_0x0122F0
                move.w  D2, D1
                sub.w   D0, D1
                cmpi.w  #$00E0, D1
                bge.s   Offset_0x0122F0
                addi.w  #$0080, D2
                bra.s   Offset_0x0122CA
Offset_0x0122A4:
                move.w  Obj_Sub_Y(A0), D2                                ; $000A
                move.w  Obj_X(A0), D3                                    ; $0008
                bra.s   Offset_0x0122CA
Offset_0x0122AE:
                move.w  Obj_Y(A0), D2                                    ; $000C
                sub.w   Obj_Map(A1), D2                                  ; $0004
                addi.w  #$0080, D2
                andi.w  #$07FF, D2
                cmpi.w  #$0060, D2
                bcs.s   Offset_0x0122F0
                cmpi.w  #$0180, D2
                bcc.s   Offset_0x0122F0
Offset_0x0122CA:
                move.l  Obj_Map(A0), A1                                  ; $0004
                moveq   #$00, D1
                btst    #$05, D4
                bne.s   Offset_0x0122E6
                move.b  Obj_Map_Id(A0), D1                               ; $001A
                add.w   D1, D1
                adda.w  $00(A1, D1), A1
                move.w  (A1)+, D1
                subq.w  #$01, D1
                bmi.s   Offset_0x0122EA
Offset_0x0122E6:
                bsr     Offset_0x012412
Offset_0x0122EA:
                ori.b   #$80, Obj_Flags(A0)                              ; $0001
Offset_0x0122F0:
                addq.w  #$02, D6
                subq.w  #$02, (A4)
                bne     Offset_0x012226
Offset_0x0122F8:
                lea     $0080(A4), A4
                dbra    D7, Offset_0x01221E
                move.b  D5, ($FFFFF62C).w
                cmpi.b  #$50, D5
                beq.s   Offset_0x012312
                move.l  #$00000000, (A2)
                rts
Offset_0x012312:
                move.b  #$00, $FFFFFFFB(A2)
                rts
Offset_0x01231A:
                bra.s   Offset_0x0122F0
Offset_0x01231C:
                move.l  A4, -(A7)
                lea     (Camera_X).w, A4                             ; $FFFFEE00
                move.w  Obj_Art_VRAM(A0), A3                             ; $0002
                move.l  Obj_Map(A0), A5                                  ; $0004
                moveq   #$00, D0
                move.b  $000E(A0), D0
                move.w  Obj_X(A0), D3                                    ; $0008
                sub.w   (A4), D3
                move.w  D3, D1
                add.w   D0, D1
                bmi     Offset_0x012404
                move.w  D3, D1
                sub.w   D0, D1
                cmpi.w  #$0140, D1
                bge     Offset_0x012404
                addi.w  #$0080, D3
                btst    #$04, D4
                beq.s   Offset_0x01237C
                moveq   #$00, D0
                move.b  Obj_Inertia(A0), D0                              ; $0014
                move.w  Obj_Y(A0), D2                                    ; $000C
                sub.w   Obj_Map(A4), D2                                  ; $0004
                move.w  D2, D1
                add.w   D0, D1
                bmi     Offset_0x012404
                move.w  D2, D1
                sub.w   D0, D1
                cmpi.w  #$00E0, D1
                bge     Offset_0x012404
                addi.w  #$0080, D2
                bra.s   Offset_0x012398
Offset_0x01237C:
                move.w  Obj_Y(A0), D2                                    ; $000C
                sub.w   Obj_Map(A4), D2                                  ; $0004
                addi.w  #$0080, D2
                andi.w  #$07FF, D2
                cmpi.w  #$0060, D2
                bcs.s   Offset_0x012404
                cmpi.w  #$0180, D2
                bcc.s   Offset_0x012404
Offset_0x012398:
                moveq   #$00, D1
                move.b  Obj_Boss_Ani_Map(A0), D1                         ; $000B
                beq.s   Offset_0x0123B6
                add.w   D1, D1
                move.l  A5, A1
                adda.w  $00(A1, D1), A1
                move.w  (A1)+, D1
                subq.w  #$01, D1
                bmi.s   Offset_0x0123B6
                move.w  D4, -(A7)
                bsr     Offset_0x01240A
                move.w  (A7)+, D4
Offset_0x0123B6:
                ori.b   #$80, Obj_Flags(A0)                              ; $0001
                lea     Obj_Speed(A0), A6                                ; $0010
                moveq   #$00, D0
                move.b  Obj_Ani_Boss_Cnt(A0), D0                         ; $000F
                subq.w  #$01, D0
                bcs.s   Offset_0x012404
Offset_0x0123CA:
                swap.w  D0
                move.w  (A6)+, D3
                sub.w   (A4), D3
                addi.w  #$0080, D3
                move.w  (A6)+, D2
                sub.w   Obj_Map(A4), D2                                  ; $0004
                addi.w  #$0080, D2
                andi.w  #$07FF, D2
                addq.w  #$01, A6
                moveq   #$00, D1
                move.b  (A6)+, D1
                add.w   D1, D1
                move.l  A5, A1
                adda.w  $00(A1, D1), A1
                move.w  (A1)+, D1
                subq.w  #$01, D1
                bmi.s   Offset_0x0123FE
                move.w  D4, -(A7)
                bsr     Offset_0x01240A
                move.w  (A7)+, D4
Offset_0x0123FE:
                swap.w  D0
                dbra    D0, Offset_0x0123CA
Offset_0x012404:
                move.l  (A7)+, A4
                bra     Offset_0x0122F0
Offset_0x01240A:
                cmpi.b  #$50, D5
                bcs.s   Offset_0x01241C
                rts
Offset_0x012412:
                move.w  Obj_Art_VRAM(A0), A3                             ; $0002
                cmpi.b  #$50, D5
                bcc.s   Offset_0x012452
Offset_0x01241C:
                btst    #$00, D4
                bne.s   Offset_0x012454
                btst    #$01, D4
                bne     Build_Sprite_Upside_Down_Right         ; Offset_0x0124B4
Build_Sprite_Right:                                            ; Offset_0x01242A
                move.b  (A1)+, D0
                ext.w   D0
                add.w   D2, D0
                move.w  D0, (A2)+
                move.b  (A1)+, (A2)+
                addq.b  #$01, D5
                move.b  D5, (A2)+
                move.w  (A1)+, D0
                add.w   A3, D0
                move.w  D0, (A2)+
                addq.w  #$02, A1
                move.w  (A1)+, D0
                add.w   D3, D0
                andi.w  #$01FF, D0
                bne.s   Offset_0x01244C
                addq.w  #$01, D0
Offset_0x01244C:
                move.w  D0, (A2)+
                dbra    D1, Build_Sprite_Right                 ; Offset_0x01242A
Offset_0x012452:
                rts
Offset_0x012454:
                btst    #$01, D4
                bne     Build_Sprite_Upside_Down_Left          ; Offset_0x0124FC
Build_Sprite_Left:                                             ; Offset_0x01245C
                move.b  (A1)+, D0
                ext.w   D0
                add.w   D2, D0
                move.w  D0, (A2)+
                move.b  (A1)+, D4
                move.b  D4, (A2)+
                addq.b  #$01, D5
                move.b  D5, (A2)+
                move.w  (A1)+, D0
                add.w   A3, D0
                eori.w  #$0800, D0
                move.w  D0, (A2)+
                addq.w  #$02, A1
                move.w  (A1)+, D0
                neg.w   D0
                move.b  Offset_0x012494(PC, D4), D4
                sub.w   D4, D0
                add.w   D3, D0
                andi.w  #$01FF, D0
                bne.s   Offset_0x01248C
                addq.w  #$01, D0
Offset_0x01248C:
                move.w  D0, (A2)+
                dbra    D1, Build_Sprite_Left                  ; Offset_0x01245C
                rts   
Offset_0x012494:
                dc.b    $08, $08, $08, $08, $10, $10, $10, $10, $18, $18, $18, $18, $20, $20, $20, $20
Offset_0x0124A4:
                dc.b    $08, $10, $18, $20, $08, $10, $18, $20, $08, $10, $18, $20, $08, $10, $18, $20
Build_Sprite_Upside_Down_Right:                                ; Offset_0x0124B4
                move.b  (A1)+, D0                                               
                move.b  (A1), D4                                                
                ext.w   D0                                                      
                neg.w   D0                                                      
                move.b  Offset_0x0124A4(PC, D4), D4                             
                sub.w   D4, D0                                                  
                add.w   D2, D0                                                  
                move.w  D0, (A2)+                                               
                move.b  (A1)+, (A2)+                                            
                addq.b  #$01, D5                                                
                move.b  D5, (A2)+                                               
                move.w  (A1)+, D0                                               
                add.w   A3, D0                                                  
                eori.w  #$1000, D0                                              
                move.w  D0, (A2)+                                               
                addq.w  #$02, A1                                                
                move.w  (A1)+, D0                                               
                add.w   D3, D0                                                  
                andi.w  #$01FF, D0                                              
                bne.s   Offset_0x0124E4                                         
                addq.w  #$01, D0                                                
Offset_0x0124E4:
                move.w  D0, (A2)+                                               
                dbra    D1, Build_Sprite_Upside_Down_Right     ; Offset_0x0124B4                                     
                rts     
Offset_0x0124EC:
                dc.b    $08, $10, $18, $20, $08, $10, $18, $20, $08, $10, $18, $20, $08, $10, $18, $20  
Build_Sprite_Upside_Down_Left:                                 ; Offset_0x0124FC
                move.b  (A1)+, D0                                               
                move.b  (A1), D4                                                
                ext.w   D0                                                      
                neg.w   D0                                                      
                move.b  Offset_0x0124EC(PC, D4), D4                             
                sub.w   D4, D0                                                  
                add.w   D2, D0                                                  
                move.w  D0, (A2)+                                               
                move.b  (A1)+, D4                                               
                move.b  D4, (A2)+                                               
                addq.b  #$01, D5                                                
                move.b  D5, (A2)+                                               
                move.w  (A1)+, D0                                               
                add.w   A3, D0                                                  
                eori.w  #$1800, D0                                              
                move.w  D0, (A2)+                                               
                addq.w  #$02, A1                                                
                move.w  (A1)+, D0                                               
                neg.w   D0                                                      
                move.b  Offset_0x01253E(PC, D4), D4                             
                sub.w   D4, D0                                                  
                add.w   D3, D0                                                  
                andi.w  #$01FF, D0                                              
                bne.s   Offset_0x012536                                         
                addq.w  #$01, D0                                                
Offset_0x012536:
                move.w  D0, (A2)+                                               
                dbra    D1, Build_Sprite_Upside_Down_Left      ; Offset_0x0124FC                                     
                rts        
Offset_0x01253E:
                dc.b    $08, $08, $08, $08, $10, $10, $10, $10, $18, $18, $18, $18, $20, $20, $20, $20  
Build_Sprites_Screen_Pos_2P:                                   ; Offset_0x01254E
                dc.l    $00000000, $FFFFEE00, $FFFFEE08, $FFFFEE18  
Build_Sprites_2P:                                              ; Offset_0x01255E
                tst.w   ($FFFFF644).w
                bne.s   Build_Sprites_2P                       ; Offset_0x01255E
                lea     ($FFFFF800).w, A2
                moveq   #$02, D5
                moveq   #$00, D4
                move.l  #$01D80F01, (A2)+
                move.l  #$00000001, (A2)+
                move.l  #$01D80F02, (A2)+
                move.l  #$00000000, (A2)+
                tst.b   ($FFFFF711).w
                beq.s   Offset_0x01258E
                bsr     Build_Rings_2P                         ; Offset_0x012DFC
Offset_0x01258E:
                lea     ($FFFFAC00).w, A4
                moveq   #$07, D7
Offset_0x012594:
                move.w  (A4), D0
                beq     Offset_0x01266C
                move.w  D0, -(A7)
                moveq   #$02, D6
Offset_0x01259E:
                move.w  $00(A4, D6), A0
                tst.b   (A0)
                beq     Offset_0x012662
                andi.b  #$7F, Obj_Flags(A0)                              ; $0001
                move.b  Obj_Flags(A0), D0                                ; $0001
                move.b  D0, D4
                btst    #$06, D0
                bne     Offset_0x0127BA
                andi.w  #$000C, D0
                beq.s   Offset_0x012612
                move.l  Build_Sprites_Screen_Pos_2P(PC, D0), A1 ; Offset_0x01254E
                moveq   #$00, D0
                move.b  Obj_Width(A0), D0                                ; $0019
                move.w  Obj_X(A0), D3                                    ; $0008
                sub.w   (A1), D3
                move.w  D3, D1
                add.w   D0, D1
                bmi     Offset_0x012662
                move.w  D3, D1
                sub.w   D0, D1
                cmpi.w  #$0140, D1
                bge.s   Offset_0x012662
                addi.w  #$0080, D3
                btst    #$04, D4
                beq.s   Offset_0x012620
                moveq   #$00, D0
                move.b  Obj_Height_2(A0), D0                             ; $0016
                move.w  Obj_Y(A0), D2                                    ; $000C
                sub.w   Obj_Map(A1), D2                                  ; $0004
                move.w  D2, D1
                add.w   D0, D1
                bmi.s   Offset_0x012662
                move.w  D2, D1
                sub.w   D0, D1
                cmpi.w  #$00E0, D1
                bge.s   Offset_0x012662
                addi.w  #$0100, D2
                bra.s   Offset_0x01263C
Offset_0x012612:
                move.w  Obj_Sub_Y(A0), D2                                ; $000A
                move.w  Obj_X(A0), D3                                    ; $0008
                addi.w  #$0080, D2
                bra.s   Offset_0x01263C
Offset_0x012620:
                move.w  Obj_Y(A0), D2                                    ; $000C
                sub.w   Obj_Map(A1), D2                                  ; $0004
                addi.w  #$0080, D2
                cmpi.w  #$0060, D2
                bcs.s   Offset_0x012662
                cmpi.w  #$0180, D2
                bcc.s   Offset_0x012662
                addi.w  #$0080, D2
Offset_0x01263C:
                move.l  Obj_Map(A0), A1                                  ; $0004
                moveq   #$00, D1
                btst    #$05, D4
                bne.s   Offset_0x012658
                move.b  Obj_Map_Id(A0), D1                               ; $001A
                add.w   D1, D1
                adda.w  $00(A1, D1), A1
                move.w  (A1)+, D1
                subq.w  #$01, D1
                bmi.s   Offset_0x01265C
Offset_0x012658:
                bsr     Build_Sprites_2P_Sub_01                ; Offset_0x0129CE
Offset_0x01265C:
                ori.b   #$80, Obj_Flags(A0)                              ; $0001
Offset_0x012662:
                addq.w  #$02, D6
                subq.w  #$02, (A7)
                bne     Offset_0x01259E
                addq.w  #$02, A7
Offset_0x01266C:
                lea     $0080(A4), A4
                dbra    D7, Offset_0x012594
                move.b  D5, ($FFFFF62C).w
                cmpi.b  #$50, D5
                bcc.s   Offset_0x012686
                move.l  #$00000000, (A2)
                bra.s   Offset_0x01269E
Offset_0x012686:
                move.b  #$00, $FFFFFFFB(A2)
                bra.s   Offset_0x01269E    
Offset_0x01268E:
                dc.l    $00000000, $FFFFEE20, $FFFFEE28, $FFFFEE38   
Offset_0x01269E:
                lea     ($FFFFDD00).w, A2
                moveq   #$00, D5
                moveq   #$00, D4
                tst.b   ($FFFFF711).w
                beq.s   Offset_0x0126B0
                bsr     Build_Rings_2P_Miles                   ; Offset_0x012E12
Offset_0x0126B0:
                move.l  A2, D7
                move.l  D7, -(A7)
                lea     ($FFFFAC00).w, A4
                moveq   #$07, D7
Offset_0x0126BA:
                tst.w   (A4)
                beq     Offset_0x012788
                moveq   #$02, D6
Offset_0x0126C2:
                move.w  $00(A4, D6), A0
                tst.b   (A0)
                beq     Offset_0x012780
                move.b  Obj_Flags(A0), D0                                ; $0001
                move.b  D0, D4
                btst    #$06, D0
                bne     Offset_0x0128A4
                andi.w  #$000C, D0
                beq.s   Offset_0x012730
                move.l  Offset_0x01268E(PC, D0), A1
                moveq   #$00, D0
                move.b  Obj_Width(A0), D0                                ; $0019
                move.w  Obj_X(A0), D3                                    ; $0008
                sub.w   (A1), D3
                move.w  D3, D1
                add.w   D0, D1
                bmi     Offset_0x012780
                move.w  D3, D1
                sub.w   D0, D1
                cmpi.w  #$0140, D1
                bge.s   Offset_0x012780
                addi.w  #$0080, D3
                btst    #$04, D4
                beq.s   Offset_0x01273E
                moveq   #$00, D0
                move.b  Obj_Height_2(A0), D0                             ; $0016
                move.w  Obj_Y(A0), D2                                    ; $000C
                sub.w   Obj_Map(A1), D2                                  ; $0004
                move.w  D2, D1
                add.w   D0, D1
                bmi.s   Offset_0x012780
                move.w  D2, D1
                sub.w   D0, D1
                cmpi.w  #$00E0, D1
                bge.s   Offset_0x012780
                addi.w  #$01E0, D2
                bra.s   Offset_0x01275A
Offset_0x012730:
                move.w  Obj_Sub_Y(A0), D2                                ; $000A
                move.w  Obj_X(A0), D3                                    ; $0008
                addi.w  #$0160, D2
                bra.s   Offset_0x01275A
Offset_0x01273E:
                move.w  Obj_Y(A0), D2                                    ; $000C
                sub.w   Obj_Map(A1), D2                                  ; $0004
                addi.w  #$0080, D2
                cmpi.w  #$0060, D2
                bcs.s   Offset_0x012780
                cmpi.w  #$0180, D2
                bcc.s   Offset_0x012780
                addi.w  #$0160, D2
Offset_0x01275A:
                move.l  Obj_Map(A0), A1                                  ; $0004
                moveq   #$00, D1
                btst    #$05, D4
                bne.s   Offset_0x012776
                move.b  Obj_Map_Id(A0), D1                               ; $001A
                add.w   D1, D1
                adda.w  $00(A1, D1), A1
                move.w  (A1)+, D1
                subq.w  #$01, D1
                bmi.s   Offset_0x01277A
Offset_0x012776:
                bsr     Build_Sprites_2P_Sub_01                ; Offset_0x0129CE
Offset_0x01277A:
                ori.b   #$80, Obj_Flags(A0)                              ; $0001
Offset_0x012780:
                addq.w  #$02, D6
                subq.w  #$02, (A4)
                bne     Offset_0x0126C2
Offset_0x012788:
                lea     $0080(A4), A4
                dbra    D7, Offset_0x0126BA
                move.l  (A7)+, A3
                adda.w  #$0044, A3
                cmpi.w  #$83EA, (A3)
                bne.s   Offset_0x0127A0
                move.w  #$834E, (A3)
Offset_0x0127A0:
                move.b  D5, ($FFFFF62C).w
                cmpi.b  #$50, D5
                beq.s   Offset_0x0127B2
                move.l  #$00000000, (A2)
                rts
Offset_0x0127B2:
                move.b  #$00, $FFFFFFFB(A2)
                rts
Offset_0x0127BA:
                move.l  A4, -(A7)
                lea     (Camera_X).w, A4                             ; $FFFFEE00
                move.w  Obj_Art_VRAM(A0), A3                             ; $0002
                move.l  Obj_Map(A0), A5                                  ; $0004
                moveq   #$00, D0
                move.b  $000E(A0), D0
                move.w  Obj_X(A0), D3                                    ; $0008
                sub.w   (A4), D3
                move.w  D3, D1
                add.w   D0, D1
                bmi     Offset_0x01289E
                move.w  D3, D1
                sub.w   D0, D1
                cmpi.w  #$0140, D1
                bge     Offset_0x01289E
                addi.w  #$0080, D3
                btst    #$04, D4
                beq.s   Offset_0x01281A
                moveq   #$00, D0
                move.b  Obj_Inertia(A0), D0                              ; $0014
                move.w  Obj_Y(A0), D2                                    ; $000C
                sub.w   Obj_Map(A4), D2                                  ; $0004
                move.w  D2, D1
                add.w   D0, D1
                bmi     Offset_0x01289E
                move.w  D2, D1
                sub.w   D0, D1
                cmpi.w  #$00E0, D1
                bge     Offset_0x01289E
                addi.w  #$0100, D2
                bra.s   Offset_0x012836
Offset_0x01281A:
                move.w  Obj_Y(A0), D2                                    ; $000C
                sub.w   Obj_Map(A4), D2                                  ; $0004
                addi.w  #$0080, D2
                cmpi.w  #$0060, D2
                bcs.s   Offset_0x01289E
                cmpi.w  #$0180, D2
                bcc.s   Offset_0x01289E
                addi.w  #$0080, D2
Offset_0x012836:
                moveq   #$00, D1
                move.b  Obj_Boss_Ani_Map(A0), D1                         ; $000B
                beq.s   Offset_0x012854
                add.w   D1, D1
                move.l  A5, A1
                adda.w  $00(A1, D1), A1
                move.w  (A1)+, D1
                subq.w  #$01, D1
                bmi.s   Offset_0x012854
                move.w  D4, -(A7)
                bsr     Build_Sprites_2P_Sub_00                ; Offset_0x0129C6
                move.w  (A7)+, D4
Offset_0x012854:
                ori.b   #$80, Obj_Flags(A0)                              ; $0001
                lea     Obj_Speed(A0), A6                                ; $0010
                moveq   #$00, D0
                move.b  Obj_Ani_Boss_Cnt(A0), D0                         ; $000F
                subq.w  #$01, D0
                bcs.s   Offset_0x01289E
Offset_0x012868:
                swap.w  D0
                move.w  (A6)+, D3
                sub.w   (A4), D3
                addi.w  #$0080, D3
                move.w  (A6)+, D2
                sub.w   Obj_Map(A4), D2                                  ; $0004
                addi.w  #$0100, D2
                addq.w  #$01, A6
                moveq   #$00, D1
                move.b  (A6)+, D1
                add.w   D1, D1
                move.l  A5, A1
                adda.w  $00(A1, D1), A1
                move.w  (A1)+, D1
                subq.w  #$01, D1
                bmi.s   Offset_0x012898
                move.w  D4, -(A7)
                bsr     Build_Sprites_2P_Sub_00                ; Offset_0x0129C6
                move.w  (A7)+, D4
Offset_0x012898:
                swap.w  D0
                dbra    D0, Offset_0x012868
Offset_0x01289E:
                move.l  (A7)+, A4
                bra     Offset_0x012662
Offset_0x0128A4:
                move.l  A4, -(A7)
                lea     (Camera_X_2).w, A4                           ; $FFFFEE20
                move.w  Obj_Art_VRAM(A0), A3                             ; $0002
                move.l  Obj_Map(A0), A5                                  ; $0004
                moveq   #$00, D0
                move.b  $000E(A0), D0
                move.w  Obj_X(A0), D3                                    ; $0008
                sub.w   (A4), D3
                move.w  D3, D1
                add.w   D0, D1
                bmi     Offset_0x012988
                move.w  D3, D1
                sub.w   D0, D1
                cmpi.w  #$0140, D1
                bge     Offset_0x012988
                addi.w  #$0080, D3
                btst    #$04, D4
                beq.s   Offset_0x012904
                moveq   #$00, D0
                move.b  Obj_Inertia(A0), D0                              ; $0014
                move.w  Obj_Y(A0), D2                                    ; $000C
                sub.w   Obj_Map(A4), D2                                  ; $0004
                move.w  D2, D1
                add.w   D0, D1
                bmi     Offset_0x012988
                move.w  D2, D1
                sub.w   D0, D1
                cmpi.w  #$00E0, D1
                bge     Offset_0x012988
                addi.w  #$01E0, D2
                bra.s   Offset_0x012920
Offset_0x012904:
                move.w  Obj_Y(A0), D2                                    ; $000C
                sub.w   Obj_Map(A4), D2                                  ; $0004
                addi.w  #$0080, D2
                cmpi.w  #$0060, D2
                bcs.s   Offset_0x012988
                cmpi.w  #$0180, D2
                bcc.s   Offset_0x012988
                addi.w  #$0160, D2
Offset_0x012920:
                moveq   #$00, D1
                move.b  Obj_Boss_Ani_Map(A0), D1                         ; $000B
                beq.s   Offset_0x01293E
                add.w   D1, D1
                move.l  A5, A1
                adda.w  $00(A1, D1), A1
                move.w  (A1)+, D1
                subq.w  #$01, D1
                bmi.s   Offset_0x01293E
                move.w  D4, -(A7)
                bsr     Build_Sprites_2P_Sub_00                ; Offset_0x0129C6
                move.w  (A7)+, D4
Offset_0x01293E:
                ori.b   #$80, Obj_Flags(A0)                              ; $0001
                lea     Obj_Speed(A0), A6                                ; $0010
                moveq   #$00, D0
                move.b  Obj_Ani_Boss_Cnt(A0), D0                         ; $000F
                subq.w  #$01, D0
                bcs.s   Offset_0x012988
Offset_0x012952:
                swap.w  D0
                move.w  (A6)+, D3
                sub.w   (A4), D3
                addi.w  #$0080, D3
                move.w  (A6)+, D2
                sub.w   Obj_Map(A4), D2                                  ; $0004
                addi.w  #$01E0, D2
                addq.w  #$01, A6
                moveq   #$00, D1
                move.b  (A6)+, D1
                add.w   D1, D1
                move.l  A5, A1
                adda.w  $00(A1, D1), A1
                move.w  (A1)+, D1
                subq.w  #$01, D1
                bmi.s   Offset_0x012982
                move.w  D4, -(A7)
                bsr     Build_Sprites_2P_Sub_00                ; Offset_0x0129C6
                move.w  (A7)+, D4
Offset_0x012982:
                swap.w  D0
                dbra    D0, Offset_0x012952
Offset_0x012988:
                move.l  (A7)+, A4
                bra     Offset_0x012780   

;-------------------------------------------------------------------------------
; Rotinas para modificar os atributos das sprites no modo entrelaçado / 2P
; ->>>
;-------------------------------------------------------------------------------
ModifySpriteAttr_2P:                                           ; Offset_0x01298E
                tst.w   (Two_Player_Flag).w                          ; $FFFFFFD8
                beq.s   Exit_ModifySpriteAttr_2P               ; Offset_0x0129A8
                move.w  Obj_Art_VRAM(A0), D0                             ; $0002
                andi.w  #$07FF, D0
                lsr.w   #$01, D0
                andi.w  #$F800, Obj_Art_VRAM(A0)                         ; $0002
                add.w   D0, Obj_Art_VRAM(A0)                             ; $0002
Exit_ModifySpriteAttr_2P:                                      ; Offset_0x0129A8
                rts  
;-------------------------------------------------------------------------------
ModifySpriteAttr_2P_A1:                                        ; Offset_0x0129AA
                tst.w   (Two_Player_Flag).w                          ; $FFFFFFD8
                beq.s   Exit_ModifySpriteAttr_2P_A1            ; Offset_0x0129C4
                move.w  Obj_Art_VRAM(A1), D0                             ; $0002
                andi.w  #$07FF, D0
                lsr.w   #$01, D0
                andi.w  #$F800, Obj_Art_VRAM(A1)                         ; $0002
                add.w   D0, Obj_Art_VRAM(A1)                             ; $0002
Exit_ModifySpriteAttr_2P_A1:                                   ; Offset_0x0129C4
                rts
;-------------------------------------------------------------------------------
; Rotinas para modificar os atributos das sprites no modo entrelaçado / 2P
; <<<-
;-------------------------------------------------------------------------------                
Build_Sprites_2P_Sub_00:                                       ; Offset_0x0129C6
                cmpi.b  #$50, D5
                bcs.s   Offset_0x0129E6
                rts
;-------------------------------------------------------------------------------                
Build_Sprites_2P_Sub_01:                                       ; Offset_0x0129CE
                move.w  Obj_Art_VRAM(A0), A3                             ; $0002
                cmpi.b  #$50, D5
                bcc.s   Offset_0x012A12
                btst    #$00, D4
                bne.s   Offset_0x012A24
                btst    #$01, D4
                bne     Offset_0x012A86
Offset_0x0129E6:
                move.b  (A1)+, D0
                ext.w   D0
                add.w   D2, D0
                move.w  D0, (A2)+
                move.b  (A1)+, D4
                move.b  Offset_0x012A14(PC, D4), (A2)+
                addq.b  #$01, D5
                move.b  D5, (A2)+
                addq.w  #$02, A1
                move.w  (A1)+, D0
                add.w   A3, D0
                move.w  D0, (A2)+
                move.w  (A1)+, D0
                add.w   D3, D0
                andi.w  #$01FF, D0
                bne.s   Offset_0x012A0C
                addq.w  #$01, D0
Offset_0x012A0C:
                move.w  D0, (A2)+
                dbra    D1, Offset_0x0129E6
Offset_0x012A12:
                rts   
Offset_0x012A14:
                dc.b    $00, $00, $01, $01, $04, $04, $05, $05, $08, $08, $09, $09, $0C, $0C, $0D, $0D   
Offset_0x012A24:
                btst    #$01, D4                                                
                bne     Offset_0x012AE2                                         
Offset_0x012A2C:
                move.b  (A1)+, D0                                               
                ext.w   D0                                                      
                add.w   D2, D0                                                  
                move.w  D0, (A2)+                                               
                move.b  (A1)+, D4                                               
                move.b  Offset_0x012A14(PC, D4), (A2)+                          
                addq.b  #$01, D5                                                
                move.b  D5, (A2)+                                               
                addq.w  #$02, A1                                                
                move.w  (A1)+, D0                                               
                add.w   A3, D0                                                  
                eori.w  #$0800, D0                                              
                move.w  D0, (A2)+                                               
                move.w  (A1)+, D0                                               
                neg.w   D0                                                      
                move.b  Offset_0x012A66(PC, D4), D4                             
                sub.w   D4, D0                                                  
                add.w   D3, D0                                                  
                andi.w  #$01FF, D0                                              
                bne.s   Offset_0x012A5E                                         
                addq.w  #$01, D0                                                
Offset_0x012A5E:
                move.w  D0, (A2)+                                               
                dbra    D1, Offset_0x012A2C                                     
                rts       
Offset_0x012A66:
                dc.b    $08, $08, $08, $08, $10, $10, $10, $10, $18, $18, $18, $18, $20, $20, $20, $20 
Offset_0x012A76:
                dc.b    $08, $10, $18, $20, $08, $10, $18, $20, $08, $10, $18, $20, $08, $10, $18, $20  
Offset_0x012A86:
                move.b  (A1)+, D0                                               
                move.b  (A1), D4                                                
                ext.w   D0                                                      
                neg.w   D0                                                      
                move.b  Offset_0x012A76(PC, D4), D4                             
                sub.w   D4, D0                                                  
                add.w   D2, D0                                                  
                move.w  D0, (A2)+                                               
                move.b  (A1)+, D4                                               
                move.b  Offset_0x012AC2(PC, D4), (A2)+                          
                addq.b  #$01, D5                                                
                move.b  D5, (A2)+                                               
                addq.w  #$02, A1                                                
                move.w  (A1)+, D0                                               
                add.w   A3, D0                                                  
                eori.w  #$1000, D0                                              
                move.w  D0, (A2)+                                               
                move.w  (A1)+, D0                                               
                add.w   D3, D0                                                  
                andi.w  #$01FF, D0                                              
                bne.s   Offset_0x012ABA                                         
                addq.w  #$01, D0                                                
Offset_0x012ABA:
                move.w  D0, (A2)+                                               
                dbra    D1, Offset_0x012A86                                     
                rts     
Offset_0x012AC2:
                dc.b    $00, $00, $01, $01, $04, $04, $05, $05, $08, $08, $09, $09, $0C, $0C, $0D, $0D
Offset_0x012AD2:
                dc.b    $08, $10, $18, $20, $08, $10, $18, $20, $08, $10, $18, $20, $08, $10, $18, $20  
Offset_0x012AE2:
                move.b  (A1)+, D0                                               
                move.b  (A1), D4                                                
                ext.w   D0                                                      
                neg.w   D0                                                      
                move.b  Offset_0x012AD2(PC, D4), D4                             
                sub.w   D4, D0                                                  
                add.w   D2, D0                                                  
                move.w  D0, (A2)+                                               
                move.b  (A1)+, D4                                               
                move.b  Offset_0x012AC2(PC, D4), (A2)+                          
                addq.b  #$01, D5                                                
                move.b  D5, (A2)+                                               
                addq.w  #$02, A1                                                
                move.w  (A1)+, D0                                               
                add.w   A3, D0                                                  
                eori.w  #$1800, D0                                              
                move.w  D0, (A2)+                                               
                move.w  (A1)+, D0                                               
                neg.w   D0                                                      
                move.b  Offset_0x012B26(PC, D4), D4                             
                sub.w   D4, D0                                                  
                add.w   D3, D0                                                  
                andi.w  #$01FF, D0                                              
                bne.s   Offset_0x012B1E                                         
                addq.w  #$01, D0                                                
Offset_0x012B1E:
                move.w  D0, (A2)+                                               
                dbra    D1, Offset_0x012AE2                                     
                rts  
Offset_0x012B26:
                dc.b    $08, $08, $08, $08, $10, $10, $10, $10, $18, $18, $18, $18, $20, $20, $20, $20                                                                                                                                     
;===============================================================================
; Rotina para compilar os sprites de acordo com as definições dos objetos
; <<<-
;===============================================================================
Check_Object_On_Screen:                                        ; Offset_0x012B36
                move.w  Obj_X(A0), D0                                    ; $0008
                sub.w   (Camera_X).w, D0                             ; $FFFFEE00
                bmi.s   Not_On_Screen                          ; Offset_0x012B5A
                cmpi.w  #$0140, D0
                bge.s   Not_On_Screen                          ; Offset_0x012B5A
                move.w  Obj_Y(A0), D1                                    ; $000C
                sub.w   (Camera_Y).w, D1                             ; $FFFFEE04
                bmi.s   Not_On_Screen                          ; Offset_0x012B5A
                cmpi.w  #$00E0, D1
                bge.s   Not_On_Screen                          ; Offset_0x012B5A
                moveq   #$00, D0
                rts
Not_On_Screen:                                                 ; Offset_0x012B5A
                moveq   #$01, D0
                rts
;-------------------------------------------------------------------------------
Check_Object_On_Screen_2:                                      ; Offset_0x012B5E
                moveq   #$00, D1
                move.b  Obj_Width(A0), D1                                ; $0019
                move.w  Obj_X(A0), D0                                    ; $0008
                sub.w   (Camera_X).w, D0                             ; $FFFFEE00
                add.w   D1, D0
                bmi.s   Not_On_Screen_2                        ; Offset_0x012B8E
                add.w   D1, D1
                sub.w   D1, D0
                cmpi.w  #$0140, D0
                bge.s   Not_On_Screen_2                        ; Offset_0x012B8E
                move.w  Obj_Y(A0), D1                                    ; $000C
                sub.w   (Camera_Y).w, D1                             ; $FFFFEE04
                bmi.s   Not_On_Screen_2                        ; Offset_0x012B8E
                cmpi.w  #$00E0, D1
                bge.s   Not_On_Screen_2                        ; Offset_0x012B8E
                moveq   #$00, D0
                rts
Not_On_Screen_2:                                               ; Offset_0x012B8E
                moveq   #$01, D0
                rts
                nop
;===============================================================================
; Rotina para carregar o pocicionamento dos anéis nas fases
; ->>>
;===============================================================================
Load_Ring_Pos:                                                 ; Offset_0x012B94 
                moveq   #$00, D0                                                
                move.b  ($FFFFF710).w, D0                                       
                move.w  Offset_0x012BA2(PC, D0), D0                             
                jmp     Offset_0x012BA2(PC, D0)
;-------------------------------------------------------------------------------                    
Offset_0x012BA2:                
                dc.w    Offset_0x012BA6-Offset_0x012BA2
                dc.w    Offset_0x012BF0-Offset_0x012BA2           
Offset_0x012BA6:
                addq.b  #$02, ($FFFFF710).w                                     
                bsr     Load_Rings_Layout                      ; Offset_0x012EA8                                         
                lea     ($FFFFE800).w, A1                                       
                move.w  (Camera_X).w, D4                             ; $FFFFEE00
                subq.w  #$08, D4                                                
                bhi.s   Offset_0x012BC2                                         
                moveq   #$01, D4                                                
                bra.s   Offset_0x012BC2         
Offset_0x012BBE:
                lea     $0006(A1), A1                                           
Offset_0x012BC2:
                cmp.w   $0002(A1), D4                                           
                bhi.s   Offset_0x012BBE                                         
                move.w  A1, ($FFFFF712).w                                       
                move.w  A1, ($FFFFF716).w                                       
                addi.w  #$0150, D4                                              
                bra.s   Offset_0x012BDA     
Offset_0x012BD6:
                lea     $0006(A1), A1                                           
Offset_0x012BDA:
                cmp.w   $0002(A1), D4                                           
                bhi.s   Offset_0x012BD6                                         
                move.w  A1, ($FFFFF714).w                                       
                move.w  A1, ($FFFFF718).w                                       
                move.b  #$01, ($FFFFF711).w                                     
                rts                                                             
Offset_0x012BF0:
                lea     ($FFFFEF80).w, A2                                       
                move.w  (A2)+, D1                                               
                subq.w  #$01, D1                                                
                bcs.s   Offset_0x012C26                                         
Offset_0x012BFA:
                move.w  (A2)+, D0                                               
                beq.s   Offset_0x012BFA                                         
                move.w  D0, A1                                                  
                subq.b  #$01, (A1)                                              
                bne.s   Offset_0x012C22                                         
                move.b  #$06, (A1)                                              
                addq.b  #$01, $0001(A1)                                         
                cmpi.b  #$08, $0001(A1)                                         
                bne.s   Offset_0x012C22                                         
                move.w  #$FFFF, (A1)                                            
                move.w  #$0000, $FFFFFFFE(A2)                                       
                subq.w  #$01, ($FFFFEF80).w                                     
Offset_0x012C22:
                dbra    D1, Offset_0x012BFA                                     
Offset_0x012C26:
                move.w  ($FFFFF712).w, A1                                       
                move.w  (Camera_X).w, D4                             ; $FFFFEE00
                subq.w  #$08, D4                                                
                bhi.s   Offset_0x012C3A                                         
                moveq   #$01, D4                                                
                bra.s   Offset_0x012C3A                  
Offset_0x012C36:
                lea     $0006(A1), A1                                           
Offset_0x012C3A:
                cmp.w   $0002(A1), D4                                           
                bhi.s   Offset_0x012C36                                         
                bra.s   Offset_0x012C44         
Offset_0x012C42:
                subq.w  #$06, A1                                                
Offset_0x012C44:
                cmp.w   $FFFFFFFC(A1), D4                                           
                bls.s   Offset_0x012C42                                         
                move.w  A1, ($FFFFF712).w                                       
                move.w  ($FFFFF714).w, A2                                       
                addi.w  #$0150, D4                                              
                bra.s   Offset_0x012C5C      
Offset_0x012C58:
                lea     $0006(A2), A2                                           
Offset_0x012C5C:
                cmp.w   $0002(A2), D4                                           
                bhi.s   Offset_0x012C58                                         
                bra.s   Offset_0x012C66       
Offset_0x012C64:
                subq.w  #$06, A2                                                
Offset_0x012C66:
                cmp.w   $FFFFFFFC(A2), D4                                           
                bls.s   Offset_0x012C64                                         
                move.w  A2, ($FFFFF714).w                                       
                tst.w   (Two_Player_Flag).w                          ; $FFFFFFD8
                bne.s   Offset_0x012C80                                         
                move.w  A1, ($FFFFF716).w                                       
                move.w  A2, ($FFFFF718).w                                       
                rts                                                             
Offset_0x012C80:
                move.w  ($FFFFF716).w, A1                                       
                move.w  (Camera_X_2).w, D4                           ; $FFFFEE20
                subq.w  #$08, D4                                                
                bhi.s   Offset_0x012C94                                         
                moveq   #$01, D4                                                
                bra.s   Offset_0x012C94     
Offset_0x012C90:
                lea     $0006(A1), A1                                           
Offset_0x012C94:
                cmp.w   $0002(A1), D4                                           
                bhi.s   Offset_0x012C90                                         
                bra.s   Offset_0x012C9E     
Offset_0x012C9C:
                subq.w  #$06, A1                                                
Offset_0x012C9E:
                cmp.w   $FFFFFFFC(A1), D4                                           
                bls.s   Offset_0x012C9C                                         
                move.w  A1, ($FFFFF716).w                                       
                move.w  ($FFFFF718).w, A2                                       
                addi.w  #$0150, D4                                              
                bra.s   Offset_0x012CB6     
Offset_0x012CB2:
                lea     $0006(A2), A2                                           
Offset_0x012CB6:
                cmp.w   $0002(A2), D4                                           
                bhi.s   Offset_0x012CB2                                         
                bra.s   Offset_0x012CC0    
Offset_0x012CBE:
                subq.w  #$06, A2                                                
Offset_0x012CC0:
                cmp.w   $FFFFFFFC(A2), D4                                           
                bls.s   Offset_0x012CBE                                         
                move.w  A2, ($FFFFF718).w                                       
                rts                                                                                                                        
;===============================================================================
; Rotina para carregar o pocicionamento dos anéis nas fases
; <<<-
;===============================================================================

;===============================================================================
; Rotinas para responder ao toque dos anéis pelo jogador
; ->>>
;===============================================================================
TouchRings:                                                    ; Offset_0x012CCC  
                move.w  ($FFFFF712).w, A1
                move.w  ($FFFFF714).w, A2
                cmpa.w  #Obj_Memory_Address, A0                          ; $B000
                beq.s   Offset_0x012CE2
                move.w  ($FFFFF716).w, A1
                move.w  ($FFFFF718).w, A2
Offset_0x012CE2:
                cmpa.l  A1, A2
                beq     Offset_0x012D7A
                cmpi.w  #$005A, Obj_P_Invunerblt_Time(A0)                ; $0030
                bcc     Offset_0x012D7A
                move.w  Obj_X(A0), D2                                    ; $0008
                move.w  Obj_Y(A0), D3                                    ; $000C
                subi.w  #$0008, D2
                moveq   #$00, D5
                move.b  Obj_Height_2(A0), D5                             ; $0016
                subq.b  #$03, D5
                sub.w   D5, D3
                cmpi.b  #$4D, Obj_Map_Id(A0)                             ; $001A
                bne.s   Touch_Rings_NoDuck                     ; Offset_0x012D16
                addi.w  #$000C, D3
                moveq   #$0A, D5
Touch_Rings_NoDuck:                                            ; Offset_0x012D16
                move.w  #$0006, D1
                move.w  #$000C, D6
                move.w  #$0010, D4
                add.w   D5, D5
Offset_0x012D24:
                tst.w   (A1)
                bne     Offset_0x012D70
                move.w  $0002(A1), D0   
                sub.w   D1, D0
                sub.w   D2, D0
                bcc.s   Offset_0x012D3C
                add.w   D6, D0
                bcs.s   Offset_0x012D42
                bra     Offset_0x012D70
Offset_0x012D3C:
                cmp.w   D4, D0
                bhi     Offset_0x012D70
Offset_0x012D42:
                move.w  Obj_Map(A1), D0                                  ; $0004
                sub.w   D1, D0
                sub.w   D3, D0
                bcc.s   Offset_0x012D54
                add.w   D6, D0
                bcs.s   Offset_0x012D5A
                bra     Offset_0x012D70
Offset_0x012D54:
                cmp.w   D5, D0
                bhi     Offset_0x012D70
Offset_0x012D5A:
                move.w  #$0604, (A1)
                bsr     Add_Rings                              ; Offset_0x00F12E
                lea     ($FFFFEF82).w, A3
Offset_0x012D66:
                tst.w   (A3)+
                bne.s   Offset_0x012D66
                move.w  A1, -(A3)
                addq.w  #$01, ($FFFFEF80).w
Offset_0x012D70:
                lea     $0006(A1), A1
                cmpa.l  A1, A2
                bne     Offset_0x012D24
Offset_0x012D7A:
                rts
;===============================================================================
; Rotinas para responder ao toque dos anéis pelo jogador
; <<<-
;===============================================================================

;===============================================================================
; Rotinas para mostrar os anéis de acordo com a localização do jogador na fase
; ->>>
;===============================================================================
Build_Rings:                                                   ; Offset_0x012D7C
                move.w  ($FFFFF712).w, A0                                       
                move.w  ($FFFFF714).w, A4                                       
                cmpa.l  A0, A4                                                  
                bne.s   Offset_0x012D8A                                         
                rts                                                             
Offset_0x012D8A:
                lea     (Camera_X).w, A3                             ; $FFFFEE00
Offset_0x012D8E:
                tst.w   (A0)                                                    
                bmi     Offset_0x012DF0                                         
                move.w  $0002(A0), D3                                           
                sub.w   (A3), D3                                                
                addi.w  #$0080, D3                                              
                move.w  $0004(A0), D2                                           
                sub.w   $0004(A3), D2                                           
                andi.w  #$07FF, D2                                              
                addi.w  #$0008, D2                                              
                bmi.s   Offset_0x012DF0                                         
                cmpi.w  #$00F0, D2                                              
                bge.s   Offset_0x012DF0                                         
                addi.w  #$0078, D2                                              
                lea     (Level_Rings_Mappings), A1             ; Offset_0x012F68                            
                moveq   #$00, D1                                                
                move.b  $0001(A0), D1                                           
                bne.s   Offset_0x012DCC                                         
                move.b  ($FFFFFEA3).w, D1                                       
Offset_0x012DCC:
                add.w   D1, D1                                                  
                adda.w  $00(A1, D1), A1                                         
                move.b  (A1)+, D0                                               
                ext.w   D0                                                      
                add.w   D2, D0                                                  
                move.w  D0, (A2)+                                               
                move.b  (A1)+, (A2)+                                            
                addq.b  #$01, D5                                                
                move.b  D5, (A2)+                                               
                move.w  (A1)+, D0                                               
                addi.w  #$26BC, D0                                              
                move.w  D0, (A2)+                                               
                addq.w  #$02, A1                                                
                move.w  (A1)+, D0                                               
                add.w   D3, D0                                                  
                move.w  D0, (A2)+                                               
Offset_0x012DF0:
                lea     $0006(A0), A0                                           
                cmpa.l  A0, A4                                                  
                bne     Offset_0x012D8E                                         
                rts   
;------------------------------------------------------------------------------- 
Build_Rings_2P:                                                ; Offset_0x012DFC
                lea     (Camera_X).w, A3                             ; $FFFFEE00
                move.w  #$0078, D6                                              
                move.w  ($FFFFF712).w, A0                                       
                move.w  ($FFFFF714).w, A4                                       
                cmpa.l  A0, A4                                                  
                bne.s   Offset_0x012E28                                         
                rts        
Build_Rings_2P_Miles:                                          ; Offset_0x012E12
                lea     (Camera_X_2).w, A3                           ; $FFFFEE20
                move.w  #$0158, D6                                              
                move.w  ($FFFFF716).w, A0                                       
                move.w  ($FFFFF718).w, A4                                       
                cmpa.l  A0, A4                                                  
                bne.s   Offset_0x012E28                                         
                rts                                                             
Offset_0x012E28:
                tst.w   (A0)                                                    
                bmi     Offset_0x012E8C                                         
                move.w  $0002(A0), D3                                           
                sub.w   (A3), D3                                                
                addi.w  #$0080, D3                                              
                move.w  $0004(A0), D2                                           
                sub.w   $0004(A3), D2                                           
                andi.w  #$07FF, D2                                              
                addi.w  #$0088, D2                                              
                bmi.s   Offset_0x012E8C                                         
                cmpi.w  #$0170, D2                                              
                bge.s   Offset_0x012E8C                                         
                add.w   D6, D2                                                  
                lea     (Level_Rings_Mappings), A1             ; Offset_0x012F68                         
                moveq   #$00, D1                                                
                move.b  $0001(A0), D1                                           
                bne.s   Offset_0x012E64                                         
                move.b  ($FFFFFEA3).w, D1                                       
Offset_0x012E64:
                add.w   D1, D1                                                  
                adda.w  $00(A1, D1), A1                                         
                move.b  (A1)+, D0                                               
                ext.w   D0                                                      
                add.w   D2, D0                                                  
                move.w  D0, (A2)+                                               
                move.b  (A1)+, D4                                               
                move.b  Offset_0x012E98(PC, D4), (A2)+                          
                addq.b  #$01, D5                                                
                move.b  D5, (A2)+                                               
                addq.w  #$02, A1                                                
                move.w  (A1)+, D0                                               
                addi.w  #$235E, D0                                              
                move.w  D0, (A2)+                                               
                move.w  (A1)+, D0                                               
                add.w   D3, D0                                                  
                move.w  D0, (A2)+                                               
Offset_0x012E8C:
                lea     $0006(A0), A0                                           
                cmpa.l  A0, A4                                                  
                bne     Offset_0x012E28                                         
                rts       
Offset_0x012E98:
                dc.b    $00, $00, $01, $01, $04, $04, $05, $05, $08, $08, $09, $09, $0C, $0C, $0D, $0D                                                                                                             
;===============================================================================
; Rotinas para mostrar os anéis de acordo com a localização do jogador na fase
; <<<-
;===============================================================================

;===============================================================================
; Rotina para carregar os anéis das fases
; ->>>
;===============================================================================
Load_Rings_Layout:                                             ; Offset_0x012EA8  
                lea     ($FFFFE800).w, A1                                       
                moveq   #$00, D0                                                
                move.w  #$017F, D1                                              
Offset_0x012EB2:
                move.l  D0, (A1)+                                               
                dbra    D1, Offset_0x012EB2                                     
                lea     ($FFFFEF80).w, A1                                       
                move.w  #$000F, D1                                              
Offset_0x012EC0:
                move.l  D0, (A1)+                                               
                dbra    D1, Offset_0x012EC0                                     
                moveq   #$00, D5                                                
                moveq   #$00, D0                                                
                move.w  (Level_Id).w, D0                             ; $FFFFFE10
                ror.b   #$01, D0                                                
                lsr.w   #$06, D0                                                
                lea     (Rings_Layout), A1                     ; Offset_0x0E8000                        
                move.w  $00(A1, D0), D0                                         
                lea     $00(A1, D0), A1                                         
                lea     ($FFFFE806).w, A2                                       
Offset_0x012EE4:
                move.w  (A1)+, D2                                               
                bmi.s   Offset_0x012F2C                                         
                move.w  (A1)+, D3                                               
                bmi.s   Offset_0x012F0C                                         
                move.w  D3, D0                                                  
                rol.w   #$04, D0                                                
                andi.w  #$0007, D0                                              
                andi.w  #$0FFF, D3                                              
Offset_0x012EF8:
                move.w  #$0000, (A2)+                                           
                move.w  D2, (A2)+                                               
                move.w  D3, (A2)+                                               
                addi.w  #$0018, D2                                              
                addq.w  #$01, D5                                                
                dbra    D0, Offset_0x012EF8                                     
                bra.s   Offset_0x012EE4                                         
Offset_0x012F0C:
                move.w  D3, D0                                                  
                rol.w   #$04, D0                                                
                andi.w  #$0007, D0                                              
                andi.w  #$0FFF, D3                                              
Offset_0x012F18:
                move.w  #$0000, (A2)+                                           
                move.w  D2, (A2)+                                               
                move.w  D3, (A2)+                                               
                addi.w  #$0018, D3                                              
                addq.w  #$01, D5                                                
                dbra    D0, Offset_0x012F18                                     
                bra.s   Offset_0x012EE4                                         
Offset_0x012F2C:
                move.w  D5, ($FFFFFF40).w                                       
                moveq   #-$01, D0                                               
                move.l  D0, (A2)+                                               
                lea     ($FFFFE802).w, A1                                       
                move.w  #$00FE, D3                                              
Offset_0x012F3C:
                move.w  D3, D4                                                  
                lea     $0006(A1), A2                                           
                move.w  (A1), D0                                                
Offset_0x012F44:
                tst.w   (A2)                                                    
                beq.s   Offset_0x012F56                                         
                cmp.w   (A2), D0                                                
                bls.s   Offset_0x012F56                                         
                move.l  (A1), D1                                                
                move.l  (A2), D0                                                
                move.l  D0, (A1)                                                
                move.l  D1, (A2)                                                
                swap.w  D0                                                      
Offset_0x012F56:
                lea     $0006(A2), A2                                           
                dbra    D4, Offset_0x012F44                                     
                lea     $0006(A1), A1                                           
                dbra    D3, Offset_0x012F3C                                     
                rts                                                             
;===============================================================================
; Rotina para carregar os anéis das fases
; <<<-
;===============================================================================
 
;===============================================================================
; Mapeamento dos anéis
; ->>>
;===============================================================================
Level_Rings_Mappings:                                          ; Offset_0x012F68  
                dc.w    Offset_0x012F78-Level_Rings_Mappings
                dc.w    Offset_0x012F80-Level_Rings_Mappings
                dc.w    Offset_0x012F88-Level_Rings_Mappings
                dc.w    Offset_0x012F90-Level_Rings_Mappings
                dc.w    Offset_0x012F98-Level_Rings_Mappings
                dc.w    Offset_0x012FA0-Level_Rings_Mappings
                dc.w    Offset_0x012FA8-Level_Rings_Mappings
                dc.w    Offset_0x012FB0-Level_Rings_Mappings
Offset_0x012F78:
                dc.b    $F8, $05, $00, $00, $00, $00, $FF, $F8
Offset_0x012F80:
                dc.b    $F8, $05, $00, $04, $00, $02, $FF, $F8
Offset_0x012F88:
                dc.b    $F8, $01, $00, $08, $00, $04, $FF, $FC
Offset_0x012F90:
                dc.b    $F8, $05, $08, $04, $08, $02, $FF, $F8
Offset_0x012F98:
                dc.b    $F8, $05, $00, $0A, $00, $05, $FF, $F8
Offset_0x012FA0:
                dc.b    $F8, $05, $18, $0A, $18, $05, $FF, $F8
Offset_0x012FA8:
                dc.b    $F8, $05, $08, $0A, $08, $05, $FF, $F8
Offset_0x012FB0:
                dc.b    $F8, $05, $10, $0A, $10, $05, $FF, $F8
;===============================================================================
; Mapeamento dos anéis
; <<<-
;===============================================================================

;===============================================================================
; Define os objetos dos triângulos na fase Casino Night
; ->>>
;===============================================================================
Load_Triangle_Pos:                                             ; Offset_0x012FB8
                moveq   #$00, D0                                                
                move.b  ($FFFFF71A).w, D0                                       
                move.w  Offset_0x012FC6(PC, D0), D0                             
                jmp     Offset_0x012FC6(PC, D0)
;-------------------------------------------------------------------------------                
Offset_0x012FC6:                
                dc.w    Offset_0x012FCA-Offset_0x012FC6
                dc.w    Offset_0x01301E-Offset_0x012FC6
Offset_0x012FCA:
                addq.b  #$02, ($FFFFF71A).w                                     
                lea     (CNz_Triangles_Act_1), A1              ; Offset_0x013416                        
                tst.b   (Act_Id).w                                   ; $FFFFFE11
                beq.s   Offset_0x012FE0                                         
                lea     (CNz_Triangles_Act_2), A1              ; Offset_0x01355A                             
Offset_0x012FE0:
                move.w  (Camera_X).w, D4                             ; $FFFFEE00
                subq.w  #$08, D4                                                
                bhi.s   Offset_0x012FF0                                         
                moveq   #$01, D4                                                
                bra.s   Offset_0x012FF0        
;-------------------------------------------------------------------------------
Offset_0x012FEC:
                lea     $0006(A1), A1                                           
Offset_0x012FF0:
                cmp.w   $0002(A1), D4                                           
                bhi.s   Offset_0x012FEC                                         
                move.l  A1, ($FFFFF71C).w                                       
                move.l  A1, ($FFFFF724).w                                       
                addi.w  #$0150, D4                                              
                bra.s   Offset_0x013008     
;-------------------------------------------------------------------------------    
Offset_0x013004:
                lea     $0006(A1), A1 
Offset_0x013008:
                cmp.w   $0002(A1), D4                                           
                bhi.s   Offset_0x013004                                         
                move.l  A1, ($FFFFF720).w                                       
                move.l  A1, ($FFFFF728).w                                       
                move.b  #$01, ($FFFFF71B).w                                     
                rts    
;-------------------------------------------------------------------------------                                                                          
Offset_0x01301E:
                move.l  ($FFFFF71C).w, A1                                       
                move.w  (Camera_X).w, D4                             ; $FFFFEE00
                subq.w  #$08, D4                                                
                bhi.s   Offset_0x013032                                         
                moveq   #$01, D4                                                
                bra.s   Offset_0x013032  
;------------------------------------------------------------------------------- 
Offset_0x01302E:
                lea     $0006(A1), A1                                           
Offset_0x013032:
                cmp.w   $0002(A1), D4                                           
                bhi.s   Offset_0x01302E                                         
                bra.s   Offset_0x01303C 
;-------------------------------------------------------------------------------  
Offset_0x01303A:
                subq.w  #$06, A1                                                
Offset_0x01303C:
                cmp.w   $FFFFFFFC(A1), D4                                           
                bls.s   Offset_0x01303A                                         
                move.l  A1, ($FFFFF71C).w                                       
                move.l  ($FFFFF720).w, A2                                       
                addi.w  #$0150, D4                                              
                bra.s   Offset_0x013054        
;-------------------------------------------------------------------------------   
Offset_0x013050:
                lea     $0006(A2), A2                                           
Offset_0x013054:
                cmp.w   $0002(A2), D4                                           
                bhi.s   Offset_0x013050                                         
                bra.s   Offset_0x01305E        
;-------------------------------------------------------------------------------  
Offset_0x01305C:
                subq.w  #$06, A2                                                
Offset_0x01305E:
                cmp.w   $FFFFFFFC(A2), D4                                           
                bls.s   Offset_0x01305C                                         
                move.l  A2, ($FFFFF720).w                                       
                tst.w   (Two_Player_Flag).w                          ; $FFFFFFD8
                bne.s   Offset_0x013078                                         
                move.l  A1, ($FFFFF724).w                                       
                move.l  A2, ($FFFFF728).w                                       
                rts                                                             
Offset_0x013078:
                move.l  ($FFFFF724).w, A1                                       
                move.w  (Camera_X_2).w, D4                           ; $FFFFEE20
                subq.w  #$08, D4                                                
                bhi.s   Offset_0x01308C                                         
                moveq   #$01, D4                                                
                bra.s   Offset_0x01308C     
;-------------------------------------------------------------------------------    
Offset_0x013088:
                lea     $0006(A1), A1                                           
Offset_0x01308C:
                cmp.w   $0002(A1), D4                                           
                bhi.s   Offset_0x013088                                         
                bra.s   Offset_0x013096    
;-------------------------------------------------------------------------------  
Offset_0x013094:
                subq.w  #$06, A1                                                
Offset_0x013096:
                cmp.w   $FFFFFFFC(A1), D4                                           
                bls.s   Offset_0x013094                                         
                move.l  A1, ($FFFFF724).w                                       
                move.l  ($FFFFF728).w, A2                                       
                addi.w  #$0150, D4                                              
                bra.s   Offset_0x0130AE  
;-------------------------------------------------------------------------------   
Offset_0x0130AA:
                lea     $0006(A2), A2                                           
Offset_0x0130AE:
                cmp.w   $0002(A2), D4                                           
                bhi.s   Offset_0x0130AA                                         
                bra.s   Offset_0x0130B8   
;-------------------------------------------------------------------------------   
Offset_0x0130B6:
                subq.w  #$06, A2                                                
Offset_0x0130B8:
                cmp.w   $FFFFFFFC(A2), D4                                           
                bls.s   Offset_0x0130B6                                         
                move.l  A2, ($FFFFF728).w                                       
                rts
;===============================================================================
; Define os objetos dos triângulos na fase Casino Night
; <<<-
;===============================================================================

;===============================================================================
; Rotina para detectar os triângulos e responder ao toque do jogador na fase 
; Casino Night
; ->>>
;===============================================================================
Touch_Response_Cnz_Triangles:                                  ; Offset_0x0130C4
                move.l  ($FFFFF71C).w, A1
                move.l  ($FFFFF720).w, A2
                cmpa.w  #Obj_Memory_Address, A0                          ; $B000
                beq.s   Offset_0x0130DA
                move.l  ($FFFFF724).w, A1
                move.l  ($FFFFF728).w, A2
Offset_0x0130DA:
                cmpa.l  A1, A2
                beq     Offset_0x013174
                move.w  Obj_X(A0), D2                                    ; $0008
                move.w  Obj_Y(A0), D3                                    ; $000C
                subi.w  #$0009, D2
                moveq   #$00, D5
                move.b  Obj_Height_2(A0), D5                             ; $0016
                subq.b  #$03, D5
                sub.w   D5, D3
                cmpi.b  #$4D, Obj_Map_Id(A0)                             ; $001A
                bne.s   Offset_0x013104
                addi.w  #$000C, D3
                moveq   #$0A, D5
Offset_0x013104:
                move.w  #$0012, D4
                add.w   D5, D5
Offset_0x01310A:                
                move.w  (A1), D0
                andi.w  #$000E, D0
                lea     Offset_0x013154(PC, D0), A3
                moveq   #$00, D1
                move.b  (A3)+, D1
                move.w  $0002(A1), D0                              
                sub.w   D1, D0
                sub.w   D2, D0
                bcc.s   Offset_0x01312C
                add.w   D1, D1
                add.w   D1, D0
                bcs.s   Offset_0x013132
                bra     Offset_0x01316A
Offset_0x01312C:
                cmp.w   D4, D0
                bhi     Offset_0x01316A
Offset_0x013132:
                moveq   #$00, D1
                move.b  (A3)+, D1
                move.w  $0004(A1), D0                                  
                sub.w   D1, D0
                sub.w   D3, D0
                bcc.s   Offset_0x01314C
                add.w   D1, D1
                add.w   D1, D0
                bcs     Offset_0x013160
                bra     Offset_0x01316A
Offset_0x01314C:
                cmp.w   D5, D0
                bhi     Offset_0x01316A
                bra.s   Offset_0x013160
;-------------------------------------------------------------------------------
Offset_0x013154:
                dc.b    $20, $20, $20, $20, $40, $08, $40, $08, $08, $40, $08, $40
;-------------------------------------------------------------------------------
Offset_0x013160:
                move.w  (A1), D0                                                
                move.w  Offset_0x013176(PC, D0), D0                             
                jmp     Offset_0x013176(PC, D0)                                 
Offset_0x01316A:
                lea     $0006(A1), A1                                           
                cmpa.l  A1, A2                                                  
                bne     Offset_0x01310A                                         
Offset_0x013174:
                rts 
;-------------------------------------------------------------------------------
Offset_0x013176:
                dc.w    Offset_0x013182-Offset_0x013176
                dc.w    Offset_0x013234-Offset_0x013176
                dc.w    Offset_0x01329A-Offset_0x013176
                dc.w    Offset_0x0132F2-Offset_0x013176
                dc.w    Offset_0x013348-Offset_0x013176
                dc.w    Offset_0x0133A0-Offset_0x013176       
Offset_0x013182:
                move.w  $0004(A1), D0                                   
                sub.w   Obj_Y(A0), D0                                    ; $000C
                neg.w   D0
                cmpi.w  #$0020, D0
                blt.s   Offset_0x01319C
                move.w  #$0A00, Obj_Speed_Y(A0)                          ; $0012
                bra     Offset_0x0133F6
Offset_0x01319C:
                move.w  $0002(A1), D0                              
                sub.w   Obj_X(A0), D0                                    ; $0008
                neg.w   D0
                cmpi.w  #$0020, D0
                blt.s   Offset_0x0131B6
                move.w  #$0A00, Obj_Speed(A0)                            ; $0010
                bra     Offset_0x0133F6
Offset_0x0131B6:
                move.w  $0002(A1), D0                              
                sub.w   Obj_X(A0), D0                                    ; $0008
                cmpi.w  #$0020, D0
                blt.s   Offset_0x0131C8
                move.w  #$0020, D0
Offset_0x0131C8:
                add.w   $0004(A1), D0                                   
                subq.w  #$08, D0
                move.w  Obj_Y(A0), D1                                    ; $000C
                addi.w  #$000E, D1
                sub.w   D1, D0
                bcc.s   Offset_0x0131E4
                move.w  #$0020, D3
                bsr.s   Offset_0x0131E6
                bra     Offset_0x0133F6
Offset_0x0131E4:
                rts
Offset_0x0131E6:
                move.w  Obj_Speed(A0), D1                                ; $0010
                move.w  Obj_Speed_Y(A0), D2                              ; $0012
                jsr     (CalcAngle)                            ; Offset_0x003C02
                move.b  D0, ($FFFFFFDC).w
                sub.w   D3, D0
                move.w  D0, D1
                bpl.s   Offset_0x013200
                neg.w   D1
Offset_0x013200:
                neg.w   D0
                add.w   D3, D0
                move.b  D0, ($FFFFFFDD).w
                move.b  D1, ($FFFFFFDF).w
                cmpi.b  #$38, D1
                bcs.s   Offset_0x013214
                move.w  D3, D0
Offset_0x013214:
                move.b  D0, ($FFFFFFDE).w
                jsr     (CalcSine)                             ; Offset_0x00396A
                muls.w  #$F600, D1
                asr.l   #$08, D1
                move.w  D1, Obj_Speed(A0)                                ; $0010
                muls.w  #$F600, D0
                asr.l   #$08, D0
                move.w  D0, Obj_Speed_Y(A0)                              ; $0012
                rts
Offset_0x013234:
                move.w  $0004(A1), D0                                  
                sub.w   Obj_Y(A0), D0                                    ; $000C
                neg.w   D0
                cmpi.w  #$0020, D0
                blt.s   Offset_0x01324E
                move.w  #$0A00, Obj_Speed_Y(A0)                          ; $0012
                bra     Offset_0x0133F6
Offset_0x01324E:
                move.w  $0002(A1), D0                              
                sub.w   Obj_X(A0), D0                                    ; $0008
                cmpi.w  #$0020, D0
                blt.s   Offset_0x013266
                move.w  #$F600, Obj_Speed(A0)                            ; $0010
                bra     Offset_0x0133F6
Offset_0x013266:
                move.w  $0002(A1), D0                              
                sub.w   Obj_X(A0), D0                                    ; $0008
                neg.w   D0
                cmpi.w  #$0020, D0
                blt.s   Offset_0x01327A
                move.w  #$0020, D0
Offset_0x01327A:
                add.w   $0004(A1), D0                                  
                subq.w  #$08, D0
                move.w  Obj_Y(A0), D1                                    ; $000C
                addi.w  #$000E, D1
                sub.w   D1, D0
                bcc.s   Offset_0x013298
                move.w  #$0060, D3
                bsr     Offset_0x0131E6
                bra     Offset_0x0133F6
Offset_0x013298:
                rts
Offset_0x01329A:
                move.w  $0004(A1), D0                                  
                sub.w   Obj_Y(A0), D0                                    ; $000C
                neg.w   D0
                cmpi.w  #$0008, D0
                blt.s   Offset_0x0132B4
                move.w  #$0A00, Obj_Speed_Y(A0)                          ; $0012
                bra     Offset_0x0133F6
Offset_0x0132B4:
                move.w  $0002(A1), D0                             
                sub.w   Obj_X(A0), D0                                    ; $0008
                cmpi.w  #$0040, D0
                blt.s   Offset_0x0132CC
                move.w  #$F600, Obj_Speed(A0)                            ; $0010
                bra     Offset_0x0133F6
Offset_0x0132CC:
                neg.w   D0
                cmpi.w  #$0040, D0
                blt.s   Offset_0x0132DE
                move.w  #$0A00, Obj_Speed(A0)                            ; $0010
                bra     Offset_0x0133F6
Offset_0x0132DE:
                move.w  #$0038, D3
                tst.w   D0
                bmi.s   Offset_0x0132EA
                move.w  #$0048, D3
Offset_0x0132EA:
                bsr     Offset_0x0131E6
                bra     Offset_0x0133F6
Offset_0x0132F2:
                move.w  $0004(A1), D0                                 
                sub.w   Obj_Y(A0), D0                                    ; $000C
                cmpi.w  #$0008, D0
                blt.s   Offset_0x01330A
                move.w  #$F600, Obj_Speed_Y(A0)                          ; $0012
                bra     Offset_0x0133F6
Offset_0x01330A:
                move.w  $0002(A1), D0                             
                sub.w   Obj_X(A0), D0                                    ; $0008
                cmpi.w  #$0040, D0
                blt.s   Offset_0x013322
                move.w  #$F600, Obj_Speed(A0)                            ; $0010
                bra     Offset_0x0133F6
Offset_0x013322:
                neg.w   D0
                cmpi.w  #$0040, D0
                blt.s   Offset_0x013334
                move.w  #$0A00, Obj_Speed(A0)                            ; $0010
                bra     Offset_0x0133F6
Offset_0x013334:
                move.w  #$00C8, D3
                tst.w   D0
                bmi.s   Offset_0x013340
                move.w  #$00B8, D3
Offset_0x013340:
                bsr     Offset_0x0131E6
                bra     Offset_0x0133F6
Offset_0x013348:
                move.w  $0002(A1), D0                              
                sub.w   Obj_X(A0), D0                                    ; $0008
                neg.w   D0
                cmpi.w  #$0008, D0
                blt.s   Offset_0x013362
                move.w  #$0A00, Obj_Speed(A0)                            ; $0010
                bra     Offset_0x0133F6
Offset_0x013362:
                move.w  $0004(A1), D0                                  
                sub.w   Obj_Y(A0), D0                                    ; $000C
                cmpi.w  #$0040, D0
                blt.s   Offset_0x01337A
                move.w  #$F600, Obj_Speed_Y(A0)                          ; $0012
                bra     Offset_0x0133F6
Offset_0x01337A:
                neg.w   D0
                cmpi.w  #$0040, D0
                blt.s   Offset_0x01338C
                move.w  #$0A00, Obj_Speed(A0)                            ; $0010
                bra     Offset_0x0133F6
Offset_0x01338C:
                move.w  #$0008, D3
                tst.w   D0
                bmi.s   Offset_0x013398
                move.w  #$00F8, D3
Offset_0x013398:
                bsr     Offset_0x0131E6
                bra     Offset_0x0133F6
Offset_0x0133A0:
                move.w  $0002(A1), D0                             
                sub.w   Obj_X(A0), D0                                    ; $0008
                cmpi.w  #$0008, D0
                blt.s   Offset_0x0133B8
                move.w  #$0A00, Obj_Speed(A0)                            ; $0010
                bra     Offset_0x0133F6
Offset_0x0133B8:
                move.w  $0004(A1), D0                                   
                sub.w   Obj_Y(A0), D0                                    ; $000C
                cmpi.w  #$0040, D0
                blt.s   Offset_0x0133D0
                move.w  #$F600, Obj_Speed_Y(A0)                          ; $0012
                bra     Offset_0x0133F6
Offset_0x0133D0:
                neg.w   D0
                cmpi.w  #$0040, D0
                blt.s   Offset_0x0133E2
                move.w  #$0A00, Obj_Speed(A0)                            ; $0010
                bra     Offset_0x0133F6
Offset_0x0133E2:
                move.w  #$0078, D3
                tst.w   D0
                bmi.s   Offset_0x0133EE
                move.w  #$0088, D3
Offset_0x0133EE:
                bsr     Offset_0x0131E6
                bra     Offset_0x0133F6
Offset_0x0133F6:
                bset    #$01, Obj_Status(A0)                             ; $0022
                bclr    #$04, Obj_Status(A0)                             ; $0022
                bclr    #$05, Obj_Status(A0)                             ; $0022
                clr.b   Obj_Player_Jump(A0)                              ; $003C
                move.w  #$00D9, D0
                jmp     (Play_Sfx)                             ; Offset_0x001912                                                                                                     
;===============================================================================
; Rotina para detectar os triângulos e responder ao toque do jogador na fase 
; Casino Night
; <<<-
;===============================================================================

CNz_Triangles_Act_1:                                           ; Offset_0x013416    
                incbin  'data\cnz\tri_act1.dat' 
CNz_Triangles_Act_2:                                           ; Offset_0x01355A
                incbin  'data\cnz\tri_act2.dat'   
                
                nop
;===============================================================================
; Rotina para carregar o posicionamento dos objetos nas fases
; ->>>
;===============================================================================
Load_Object_Pos:                                               ; Offset_0x013694  
                moveq   #$00, D0                                                
                move.b  ($FFFFF76C).w, D0                                       
                move.w  Offset_0x0136A2(PC, D0), D0                             
                jmp     Offset_0x0136A2(PC, D0)    
;-------------------------------------------------------------------------------  
Offset_0x0136A2:
                dc.w    Offset_0x0136A8-Offset_0x0136A2
                dc.w    Load_Object_Pos_1P_Mode-Offset_0x0136A2 ; Offset_0x013754
                dc.w    Load_Object_Pos_2P_Mode-Offset_0x0136A2 ; Offset_0x01389C       
Offset_0x0136A8:
                addq.b  #$02, ($FFFFF76C).w
                move.w  (Level_Id).w, D0                             ; $FFFFFE10
                ror.b   #$01, D0
                lsr.w   #$06, D0
                lea     (Objects_Layout), A0                   ; Offset_0x0E2000
                move.l  A0, A1
                adda.w  $00(A0, D0), A0
                move.l  A0, ($FFFFF770).w
                move.l  A0, ($FFFFF774).w
                move.l  A0, ($FFFFF778).w
                move.l  A0, ($FFFFF77C).w
                lea     ($FFFFFC00).w, A2
                move.w  #$0101, (A2)+
                move.w  #$005E, D0
Offset_0x0136DC:
                clr.l   (A2)+
                dbra    D0, Offset_0x0136DC
                lea     ($FFFFFC00).w, A2
                moveq   #$00, D2
                move.w  (Camera_X).w, D6                             ; $FFFFEE00
                subi.w  #$0080, D6
                bcc.s   Offset_0x0136F4
                moveq   #$00, D6
Offset_0x0136F4:
                andi.w  #$FF80, D6
                move.l  ($FFFFF770).w, A0
Offset_0x0136FC:
                cmp.w   (A0), D6
                bls.s   Offset_0x01370E
                tst.b   $0002(A0)                                  
                bpl.s   Offset_0x01370A
                move.b  (A2), D2
                addq.b  #$01, (A2)
Offset_0x01370A:
                addq.w  #$06, A0
                bra.s   Offset_0x0136FC
Offset_0x01370E:
                move.l  A0, ($FFFFF770).w
                move.l  A0, ($FFFFF778).w
                move.l  ($FFFFF774).w, A0
                subi.w  #$0080, D6
                bcs.s   Offset_0x013732
Offset_0x013720:
                cmp.w   (A0), D6
                bls.s   Offset_0x013732
                tst.b   $0002(A0)                                  
                bpl.s   Offset_0x01372E
                addq.b  #$01, $0001(A2)                               
Offset_0x01372E:
                addq.w  #$06, A0
                bra.s   Offset_0x013720
Offset_0x013732:
                move.l  A0, ($FFFFF774).w
                move.l  A0, ($FFFFF77C).w
                move.w  #$FFFF, ($FFFFF76E).w
                move.w  #$FFFF, ($FFFFF78C).w
                tst.w   (Two_Player_Flag).w                          ; $FFFFFFD8
                beq.s   Load_Object_Pos_1P_Mode                ; Offset_0x013754
                addq.b  #$02, ($FFFFF76C).w
                bra     Load_Object_Pos_2P_Mode_Init           ; Offset_0x013820
;-------------------------------------------------------------------------------                
Load_Object_Pos_1P_Mode:                                       ; Offset_0x013754
                move.w  (Camera_X).w, D1                             ; $FFFFEE00
                subi.w  #$0080, D1
                andi.w  #$FF80, D1
                move.w  D1, ($FFFFF7DA).w
                lea     ($FFFFFC00).w, A2
                moveq   #$00, D2
                move.w  (Camera_X).w, D6                             ; $FFFFEE00
                andi.w  #$FF80, D6
                cmp.w   ($FFFFF76E).w, D6
                beq     Offset_0x01381E
                bge.s   Offset_0x0137DA
                move.w  D6, ($FFFFF76E).w
                move.l  ($FFFFF774).w, A0
                subi.w  #$0080, D6
                bcs.s   Offset_0x0137B6
Offset_0x01378A:
                cmp.w   $FFFFFFFA(A0), D6
                bge.s   Offset_0x0137B6
                subq.w  #$06, A0
                tst.b   $0002(A0)                                 
                bpl.s   Offset_0x0137A0
                subq.b  #$01, $0001(A2)                              
                move.b  $0001(A2), D2                                
Offset_0x0137A0:
                bsr     Offset_0x013B06
                bne.s   Offset_0x0137AA
                subq.w  #$06, A0
                bra.s   Offset_0x01378A
Offset_0x0137AA:
                tst.b   $0002(A0)                                
                bpl.s   Offset_0x0137B4
                addq.b  #$01, $0001(A2)                             
Offset_0x0137B4:
                addq.w  #$06, A0
Offset_0x0137B6:
                move.l  A0, ($FFFFF774).w
                move.l  ($FFFFF770).w, A0
                addi.w  #$0300, D6
Offset_0x0137C2:
                cmp.w   $FFFFFFFA(A0), D6
                bgt.s   Offset_0x0137D4
                tst.b   $FFFFFFFC(A0)
                bpl.s   Offset_0x0137D0
                subq.b  #$01, (A2)
Offset_0x0137D0:
                subq.w  #$06, A0
                bra.s   Offset_0x0137C2
Offset_0x0137D4:
                move.l  A0, ($FFFFF770).w
                rts
Offset_0x0137DA:
                move.w  D6, ($FFFFF76E).w
                move.l  ($FFFFF770).w, A0
                addi.w  #$0280, D6
Offset_0x0137E6:
                cmp.w   (A0), D6
                bls.s   Offset_0x0137FA
                tst.b   $0002(A0)                                 
                bpl.s   Offset_0x0137F4
                move.b  (A2), D2
                addq.b  #$01, (A2)
Offset_0x0137F4:
                bsr     Offset_0x013B06
                beq.s   Offset_0x0137E6
Offset_0x0137FA:
                move.l  A0, ($FFFFF770).w
                move.l  ($FFFFF774).w, A0
                subi.w  #$0300, D6
                bcs.s   Offset_0x01381A
Offset_0x013808:
                cmp.w   (A0), D6
                bls.s   Offset_0x01381A
                tst.b   $0002(A0)                                 
                bpl.s   Offset_0x013816
                addq.b  #$01, $0001(A2)                              
Offset_0x013816:
                addq.w  #$06, A0
                bra.s   Offset_0x013808
Offset_0x01381A:
                move.l  A0, ($FFFFF774).w
Offset_0x01381E:
                rts
;-------------------------------------------------------------------------------                
Load_Object_Pos_2P_Mode_Init:                                  ; Offset_0x013820
                moveq   #-$01, D0
                move.l  D0, ($FFFFF780).w
                move.l  D0, ($FFFFF784).w
                move.l  D0, ($FFFFF788).w
                move.l  D0, ($FFFFF78C).w
                move.w  #$0000, ($FFFFF76E).w
                move.w  #$0000, ($FFFFF78C).w
                lea     ($FFFFFC00).w, A2
                move.w  (A2), ($FFFFF78E).w
                moveq   #$00, D2
                lea     ($FFFFFC00).w, A5
                lea     ($FFFFF770).w, A4
                lea     ($FFFFF786).w, A1
                lea     ($FFFFF789).w, A6
                moveq   #-$02, D6
                bsr     Offset_0x0139B4
                lea     ($FFFFF786).w, A1
                moveq   #-$01, D6
                bsr     Offset_0x0139B4
                lea     ($FFFFF786).w, A1
                moveq   #$00, D6
                bsr     Offset_0x0139B4
                lea     ($FFFFF78E).w, A5
                lea     ($FFFFF778).w, A4
                lea     ($FFFFF789).w, A1
                lea     ($FFFFF786).w, A6
                moveq   #-$02, D6
                bsr     Offset_0x0139B4
                lea     ($FFFFF789).w, A1
                moveq   #-$01, D6
                bsr     Offset_0x0139B4
                lea     ($FFFFF789).w, A1
                moveq   #$00, D6
                bsr     Offset_0x0139B4
;-------------------------------------------------------------------------------                
Load_Object_Pos_2P_Mode:                                       ; Offset_0x01389C
                move.w  (Camera_X).w, D1                             ; $FFFFEE00
                andi.w  #$FF00, D1
                move.w  D1, ($FFFFF7DA).w
                move.w  (Camera_X_2).w, D1                           ; $FFFFEE20
                andi.w  #$FF00, D1
                move.w  D1, ($FFFFF7DC).w
                move.b  (Camera_X).w, D6                             ; $FFFFEE00
                andi.w  #$00FF, D6
                move.w  ($FFFFF76E).w, D0
                cmp.w   ($FFFFF76E).w, D6
                beq.s   Offset_0x0138DC
                move.w  D6, ($FFFFF76E).w
                lea     ($FFFFFC00).w, A5
                lea     ($FFFFF770).w, A4
                lea     ($FFFFF786).w, A1
                lea     ($FFFFF789).w, A6
                bsr.s   Offset_0x013906
Offset_0x0138DC:
                move.b  (Camera_X_2).w, D6                           ; $FFFFEE20
                andi.w  #$00FF, D6
                move.w  ($FFFFF78C).w, D0
                cmp.w   ($FFFFF78C).w, D6
                beq.s   Offset_0x013904
                move.w  D6, ($FFFFF78C).w
                lea     ($FFFFF78E).w, A5
                lea     ($FFFFF778).w, A4
                lea     ($FFFFF789).w, A1
                lea     ($FFFFF786).w, A6
                bsr.s   Offset_0x013906
Offset_0x013904:
                rts
Offset_0x013906:
                lea     ($FFFFFC00).w, A2
                moveq   #$00, D2
                cmp.w   D0, D6
                beq     Offset_0x01381E
                bge     Offset_0x0139B4
                move.b  $0002(A1), D2                             
                move.b  $0001(A1), $0002(A1)            
                move.b  (A1), $0001(A1)                              
                move.b  D6, (A1)
                cmp.b   (A6), D2
                beq.s   Offset_0x01393C
                cmp.b   $0001(A6), D2                                 
                beq.s   Offset_0x01393C
                cmp.b   $0002(A6), D2                             
                beq.s   Offset_0x01393C
                bsr     Offset_0x013A96
                bra.s   Offset_0x013940
Offset_0x01393C:
                bsr     Offset_0x013A5A
Offset_0x013940:
                bsr     Offset_0x013A36
                bne.s   Offset_0x013964
                move.l  $0004(A4), A0                                   
Offset_0x01394A:
                cmp.b   $FFFFFFFA(A0), D6
                bne.s   Offset_0x01395E
                tst.b   $FFFFFFFC(A0)
                bpl.s   Offset_0x01395A
                subq.b  #$01, $0001(A5)                              
Offset_0x01395A:
                subq.w  #$06, A0
                bra.s   Offset_0x01394A
Offset_0x01395E:
                move.l  A0, $0004(A4)                                   
                bra.s   Offset_0x01399A
Offset_0x013964:
                move.l  $0004(A4), A0                                   
                move.b  D6, (A1)
Offset_0x01396A:
                cmp.b   $FFFFFFFA(A0), D6
                bne.s   Offset_0x013996
                subq.w  #$06, A0
                tst.b   $0002(A0)                                  
                bpl.s   Offset_0x013980
                subq.b  #$01, $0001(A5)                               
                move.b  $0001(A5), D2                                 
Offset_0x013980:
                bsr     Load_Object_2P                         ; Offset_0x013B50
                bne.s   Offset_0x01398A
                subq.w  #$06, A0
                bra.s   Offset_0x01396A
Offset_0x01398A:
                tst.b   $0002(A0)                                  
                bpl.s   Offset_0x013994
                addq.b  #$01, $0001(A5)                               
Offset_0x013994:
                addq.w  #$06, A0
Offset_0x013996:
                move.l  A0, $0004(A4)                                  
Offset_0x01399A:
                move.l  (A4), A0
                addq.w  #$03, D6
Offset_0x01399E:
                cmp.b   $FFFFFFFA(A0), D6
                bne.s   Offset_0x0139B0
                tst.b   $FFFFFFFC(A0)
                bpl.s   Offset_0x0139AC
                subq.b  #$01, (A5)
Offset_0x0139AC:
                subq.w  #$06, A0
                bra.s   Offset_0x01399E
Offset_0x0139B0:
                move.l  A0, (A4)
                rts
Offset_0x0139B4:
                addq.w  #$02, D6
                move.b  (A1), D2
                move.b  $0001(A1), (A1)                             
                move.b  $0002(A1), $0001(A1)           
                move.b  D6, $0002(A1)                              
                cmp.b   (A6), D2
                beq.s   Offset_0x0139DC
                cmp.b   $0001(A6), D2                               
                beq.s   Offset_0x0139DC
                cmp.b   $0002(A6), D2                              
                beq.s   Offset_0x0139DC
                bsr     Offset_0x013A96
                bra.s   Offset_0x0139E0
Offset_0x0139DC:
                bsr     Offset_0x013A5A
Offset_0x0139E0:
                bsr     Offset_0x013A36
                bne.s   Offset_0x0139FC
                move.l  (A4), A0
Offset_0x0139E8:
                cmp.b   (A0), D6
                bne.s   Offset_0x0139F8
                tst.b   $0002(A0)                                 
                bpl.s   Offset_0x0139F4
                addq.b  #$01, (A5)
Offset_0x0139F4:
                addq.w  #$06, A0
                bra.s   Offset_0x0139E8
Offset_0x0139F8:
                move.l  A0, (A4)
                bra.s   Offset_0x013A16
Offset_0x0139FC:
                move.l  (A4), A0
                move.b  D6, (A1)
Offset_0x013A00:
                cmp.b   (A0), D6
                bne.s   Offset_0x013A14
                tst.b   $0002(A0)                                 
                bpl.s   Offset_0x013A0E
                move.b  (A5), D2
                addq.b  #$01, (A5)
Offset_0x013A0E:
                bsr     Load_Object_2P                         ; Offset_0x013B50
                beq.s   Offset_0x013A00
Offset_0x013A14:
                move.l  A0, (A4)
Offset_0x013A16:
                move.l  $0004(A4), A0                                   
                subq.w  #$03, D6
                bcs.s   Offset_0x013A30
Offset_0x013A1E:
                cmp.b   (A0), D6
                bne.s   Offset_0x013A30
                tst.b   $0002(A0)                                  
                bpl.s   Offset_0x013A2C
                addq.b  #$01, $0001(A5)                               
Offset_0x013A2C:
                addq.w  #$06, A0
                bra.s   Offset_0x013A1E
Offset_0x013A30:
                move.l  A0, $0004(A4)                                   
                rts
Offset_0x013A36:
                move.l  A1, -(A7)
                lea     ($FFFFF780).w, A1
                cmp.b   (A1)+, D6
                beq.s   Offset_0x013A56
                cmp.b   (A1)+, D6
                beq.s   Offset_0x013A56
                cmp.b   (A1)+, D6
                beq.s   Offset_0x013A56
                cmp.b   (A1)+, D6
                beq.s   Offset_0x013A56
                cmp.b   (A1)+, D6
                beq.s   Offset_0x013A56
                cmp.b   (A1)+, D6
                beq.s   Offset_0x013A56
                moveq   #$01, D0
Offset_0x013A56:
                move.l  (A7)+, A1
                rts
Offset_0x013A5A:
                lea     ($FFFFF780).w, A1
                lea     (Obj_Start_Addr_2P).w, A3                    ; $FFFFBE00
                tst.b   (A1)+
                bmi.s   Offset_0x013A92
                lea     (Obj_Page_01_2P_Addr).w, A3                  ; $FFFFC100
                tst.b   (A1)+
                bmi.s   Offset_0x013A92
                lea     (Obj_Page_02_2P_Addr).w, A3                  ; $FFFFC400
                tst.b   (A1)+
                bmi.s   Offset_0x013A92
                lea     (Obj_Page_03_2P_Addr).w, A3                  ; $FFFFC700
                tst.b   (A1)+
                bmi.s   Offset_0x013A92
                lea     (Obj_Page_04_2P_Addr).w, A3                  ; $FFFFCA00
                tst.b   (A1)+
                bmi.s   Offset_0x013A92
                lea     (Obj_Page_05_2P_Addr).w, A3                  ; $FFFFCD00
                tst.b   (A1)+
                bmi.s   Offset_0x013A92
                nop
                nop
Offset_0x013A92:
                subq.w  #$01, A1
                rts
Offset_0x013A96:
                lea     ($FFFFF780).w, A1                                       
                lea     (Obj_Start_Addr_2P).w, A3                    ; $FFFFBE00
                cmp.b   (A1)+, D2                                               
                beq.s   Offset_0x013ACE                                         
                lea     (Obj_Page_01_2P_Addr).w, A3                  ; $FFFFC100
                cmp.b   (A1)+, D2                                               
                beq.s   Offset_0x013ACE                                         
                lea     (Obj_Page_02_2P_Addr).w, A3                  ; $FFFFC400
                cmp.b   (A1)+, D2                                               
                beq.s   Offset_0x013ACE                                         
                lea     (Obj_Page_03_2P_Addr).w, A3                  ; $FFFFC700
                cmp.b   (A1)+, D2                                               
                beq.s   Offset_0x013ACE                                         
                lea     (Obj_Page_04_2P_Addr).w, A3                  ; $FFFFCA00
                cmp.b   (A1)+, D2                                               
                beq.s   Offset_0x013ACE                                         
                lea     (Obj_Page_05_2P_Addr).w, A3                  ; $FFFFCD00
                cmp.b   (A1)+, D2                                               
                beq.s   Offset_0x013ACE 
                nop
                nop
Offset_0x013ACE:
                move.b  #$FF, -(A1)
                movem.l A1/A3, -(A7)
                moveq   #$00, D1
                moveq   #Obj_Page_Size_2P-$01, D2                          ; $0B
Offset_0x013ADA:
                tst.b   (A3)
                beq.s   Offset_0x013AF6
                move.l  A3, A1
                moveq   #$00, D0
                move.b  Obj_Respaw_Ref(A1), D0                           ; $0023
                beq.s   DeleteObject_2P                        ; Offset_0x013AEE
                bclr    #$07, $02(A2, D0)
;-------------------------------------------------------------------------------
;  Rotina para liberar a memória utilizada pelo Objeto em A1 no modo 2 jogadores
; ->>>                         
;------------------------------------------------------------------------------- 
DeleteObject_2P:                                               ; Offset_0x013AEE
                moveq   #$0F, D0
Offset_0x013AF0:
                move.l  D1, (A1)+
                dbra    D0, Offset_0x013AF0
;-------------------------------------------------------------------------------
;  Rotina para liberar a memória utilizada pelo Objeto em A1 no modo 2 jogadores
; <<<-                         
;-------------------------------------------------------------------------------                 
Offset_0x013AF6:
                lea     Obj_Size(A3), A3                                 ; $0040
                dbra    D2, Offset_0x013ADA
                moveq   #$00, D2
                movem.l (A7)+, A1/A3
                rts
Offset_0x013B06:
                tst.b   $0002(A0)                                  
                bpl.s   Offset_0x013B1A
                bset    #$07, $02(A2, D2)
                beq.s   Offset_0x013B1A
                addq.w  #$06, A0
                moveq   #$00, D0
                rts
Offset_0x013B1A:
                bsr     SingleObjectLoad                       ; Offset_0x013BAA
                bne.s   Offset_0x013B4E
                move.w  (A0)+, Obj_X(A1)                                 ; $0008
                move.w  (A0)+, D0
                bpl.s   Offset_0x013B2C
                move.b  D2, Obj_Respaw_Ref(A1)                           ; $0023
Offset_0x013B2C:
                move.w  D0, D1
                andi.w  #$0FFF, D0
                move.w  D0, Obj_Y(A1)                                    ; $000C
                rol.w   #$03, D1
                andi.b  #$03, D1
                move.b  D1, Obj_Flags(A1)                                ; $0001
                move.b  D1, Obj_Status(A1)                               ; $0022
                move.b  (A0)+, $0000(A1)
                move.b  (A0)+, Obj_Subtype(A1)                           ; $0028
                moveq   #$00, D0
Offset_0x013B4E:
                rts    
;------------------------------------------------------------------------------- 
Load_Object_2P:                                                ; Offset_0x013B50   
                tst.b   $0002(A0)                             
                bpl.s   Offset_0x013B64
                bset    #$07, $02(A2, D2)
                beq.s   Offset_0x013B64
                addq.w  #$06, A0
                moveq   #$00, D0
                rts
Offset_0x013B64:
                btst    #$04, $0002(A0)                            
                beq.s   Offset_0x013B74
                bsr     SingleObjectLoad                       ; Offset_0x013BAA
                bne.s   Offset_0x013BA8
                bra.s   Offset_0x013B7A
Offset_0x013B74:
                bsr     Load_Object_List                       ; Offset_0x013BDC
                bne.s   Offset_0x013BA8
Offset_0x013B7A:
                move.w  (A0)+, Obj_X(A1)                                 ; $0008
                move.w  (A0)+, D0
                bpl.s   Offset_0x013B86
                move.b  D2, Obj_Respaw_Ref(A1)                           ; $0023
Offset_0x013B86:
                move.w  D0, D1
                andi.w  #$0FFF, D0
                move.w  D0, Obj_Y(A1)                                    ; $000C
                rol.w   #$03, D1
                andi.b  #$03, D1
                move.b  D1, Obj_Flags(A1)                                ; $0001
                move.b  D1, Obj_Status(A1)                               ; $0022
                move.b  (A0)+, $0000(A1)
                move.b  (A0)+, Obj_Subtype(A1)                           ; $0028
                moveq   #$00, D0
Offset_0x013BA8:
                rts
;-------------------------------------------------------------------------------
; Rotina para carregar um objeto a partir do endereco $FFFFB800
; ->>>
;-------------------------------------------------------------------------------                
SingleObjectLoad:                                              ; Offset_0x013BAA
                lea     ($FFFFB800).w, A1
                move.w  #$005F, D0
Loop_Find_Free_Ram:                                            ; Offset_0x013BB2
                tst.b   (A1)
                beq.s   Exit_SingleObjectLoad                  ; Offset_0x013BBE
                lea     Obj_Size(A1), A1                                 ; $0040
                dbra    D0, Loop_Find_Free_Ram                 ; Offset_0x013BB2
Exit_SingleObjectLoad:                                         ; Offset_0x013BBE
                rts     
;-------------------------------------------------------------------------------
; Rotina para carregar um objeto a partir do endereco $FFFFB800
; <<<-
;------------------------------------------------------------------------------- 

;-------------------------------------------------------------------------------
; Rotina para carregar um objeto a partir do endereco $FFFFD000
; ->>>
;------------------------------------------------------------------------------- 
SingleObjectLoad_2:                                            ; Offset_0x013BC0
                move.l  A0, A1                                                  
                move.w  #$D000, D0                                              
                sub.w   A0, D0                                                  
                lsr.w   #$06, D0                                                
                subq.w  #$01, D0                                                
                bcs.s   Exit_SingleObjectLoad_2                ; Offset_0x013BDA                                         
Loop_Find_Free_Ram_2:                                          ; Offset_0x013BCE
                tst.b   (A1)                                                    
                beq.s   Exit_SingleObjectLoad_2                ; Offset_0x013BDA                                         
                lea     Obj_Size(A1), A1                                 ; $0040                              
                dbra    D0, Loop_Find_Free_Ram_2               ; Offset_0x013BCE                                     
Exit_SingleObjectLoad_2:                                       ; Offset_0x013BDA
                rts   
;-------------------------------------------------------------------------------
; Rotina para carregar um objeto a partir do endereco $FFFFD000
; <<<-
;-------------------------------------------------------------------------------                 

;-------------------------------------------------------------------------------
; Rotina para carregar a lista de objetos na memória
; ->>>
;------------------------------------------------------------------------------- 
Load_Object_List:                                              ; Offset_0x013BDC
                move.l  A3, A1                                                  
                move.w  #$000B, D0                                              
Loop_Find_Free_Ram_3:                                          ; Offset_0x013BE2
                tst.b   (A1)                                                    
                beq.s   Exit_Load_Object_List                  ; Offset_0x013BEE                                         
                lea     $0040(A1), A1                                           
                dbra    D0, Loop_Find_Free_Ram_3               ; Offset_0x013BE2                                     
Exit_Load_Object_List:                                         ; Offset_0x013BEE
                rts      
;-------------------------------------------------------------------------------                
Obj_0x41_Springs:                                              ; Offset_0x013BF0
                include 'data\objects\obj_0x41.asm'  
                nop   
Obj_0x0D_End_Panel:                                            ; Offset_0x014544
                include 'data\objects\obj_0x0D.asm'                                                   
;-------------------------------------------------------------------------------
; Rotina para carregar a lista de objetos na memória
; <<<-
;------------------------------------------------------------------------------- 
SolidObject:                                                   ; Offset_0x0147F4
                lea     (Obj_Memory_Address).w, A1                   ; $FFFFB000
                moveq   #$03, D6
                movem.l D1-D4, -(A7)
                bsr.s   SolidObject_A1                         ; Offset_0x014812
                movem.l (A7)+, D1-D4
                lea     (Obj_Memory_Address+$0040).w, A1             ; $FFFFB040
                tst.b   Obj_Flags(A1)                                    ; $0001
                bpl     Offset_0x014852
                addq.b  #$01, D6
SolidObject_A1:                                                ; Offset_0x014812
                btst    D6, Obj_Status(A0)                               ; $0022
                beq     SolidObject_Sub_00                     ; Offset_0x014AC4
                move.w  D1, D2
                add.w   D2, D2
                btst    #$01, Obj_Status(A1)                             ; $0022
                bne.s   Offset_0x014836
                move.w  Obj_X(A1), D0                                    ; $0008
                sub.w   Obj_X(A0), D0                                    ; $0008
                add.w   D1, D0
                bmi.s   Offset_0x014836
                cmp.w   D2, D0
                bcs.s   Offset_0x01484A
Offset_0x014836:
                bclr    #$03, Obj_Status(A1)                             ; $0022
                bset    #$01, Obj_Status(A1)                             ; $0022
                bclr    D6, Obj_Status(A0)                               ; $0022
                moveq   #$00, D4
                rts
Offset_0x01484A:
                move.w  D4, D2
                bsr     Player_On_Platform                     ; Offset_0x014C62
                moveq   #$00, D4
Offset_0x014852:
                rts          
;-------------------------------------------------------------------------------
SolidObject_2:                                                 ; Offset_0x014854
                lea     (Obj_Memory_Address).w, A1                   ; $FFFFB000
                moveq   #$03, D6
                movem.l D1-D4, -(A7)
                bsr.s   SolidObject_2_A1                       ; Offset_0x01486A
                movem.l (A7)+, D1-D4
                lea     (Obj_Memory_Address+$0040).w, A1             ; $FFFFB040
                addq.b  #$01, D6
SolidObject_2_A1:                                              ; Offset_0x01486A
                btst    D6, Obj_Status(A0)                               ; $0022
                beq     Solid_Object_Monitors                  ; Offset_0x014ACC
                move.w  D1, D2
                add.w   D2, D2
                btst    #$01, Obj_Status(A1)                             ; $0022
                bne.s   Offset_0x01488E
                move.w  Obj_X(A1), D0                                    ; $0008
                sub.w   Obj_X(A0), D0                                    ; $0008
                add.w   D1, D0
                bmi.s   Offset_0x01488E
                cmp.w   D2, D0
                bcs.s   Offset_0x0148A2
Offset_0x01488E:
                bclr    #$03, Obj_Status(A1)                             ; $0022
                bset    #$01, Obj_Status(A1)                             ; $0022
                bclr    D6, Obj_Status(A0)                               ; $0022
                moveq   #$00, D4
                rts
Offset_0x0148A2:
                move.w  D4, D2
                bsr     Player_On_Platform                     ; Offset_0x014C62
                moveq   #$00, D4
                rts
;-------------------------------------------------------------------------------
SolidObject_3:                                                 ; Offset_0x0148AC
                lea     (Obj_Memory_Address).w, A1                   ; $FFFFB000
                moveq   #$03, D6
                movem.l D1-D4, -(A7)
                bsr.s   SolidObject_3_A1                       ; Offset_0x0148C2
                movem.l (A7)+, D1-D4
                lea     (Obj_Memory_Address+$0040).w, A1             ; $FFFFB040
                addq.b  #$01, D6
SolidObject_3_A1:                                              ; Offset_0x0148C2
                btst    D6, Obj_Status(A0)                               ; $0022
                beq     SolidObject_3_Sub_00                   ; Offset_0x014A0A
                move.w  D1, D2
                add.w   D2, D2
                btst    #$01, Obj_Status(A1)                             ; $0022
                bne.s   Offset_0x0148E6
                move.w  Obj_X(A1), D0                                    ; $0008
                sub.w   Obj_X(A0), D0                                    ; $0008
                add.w   D1, D0
                bmi.s   Offset_0x0148E6
                cmp.w   D2, D0
                bcs.s   Offset_0x0148FA
Offset_0x0148E6:
                bclr    #$03, Obj_Status(A1)                             ; $0022
                bset    #$01, Obj_Status(A1)                             ; $0022
                bclr    D6, Obj_Status(A0)                               ; $0022
                moveq   #$00, D4
                rts
Offset_0x0148FA:
                move.w  D4, D2
                bsr     Offset_0x014C9C
                moveq   #$00, D4
                rts
;-------------------------------------------------------------------------------
Offset_0x014904:
                lea     (Obj_Memory_Address).w, A1                   ; $FFFFB000
                moveq   #$03, D6
                movem.l D1-D4, -(A7)
                bsr.s   Offset_0x01491A
                movem.l (A7)+, D1-D4
                lea     (Obj_Memory_Address+$0040).w, A1             ; $FFFFB040
                addq.b  #$01, D6
Offset_0x01491A:
                btst    D6, Obj_Status(A0)                               ; $0022
                beq     Offset_0x014A64
                move.w  D1, D2
                add.w   D2, D2
                btst    #$01, Obj_Status(A1)                             ; $0022
                bne.s   Offset_0x01493E
                move.w  Obj_X(A1), D0                                    ; $0008
                sub.w   Obj_X(A0), D0                                    ; $0008
                add.w   D1, D0
                bmi.s   Offset_0x01493E
                cmp.w   D2, D0
                bcs.s   Offset_0x014952
Offset_0x01493E:
                bclr    #$03, Obj_Status(A1)                             ; $0022
                bset    #$01, Obj_Status(A1)                             ; $0022
                bclr    D6, Obj_Status(A0)                               ; $0022
                moveq   #$00, D4
                rts
Offset_0x014952:
                move.w  D4, D2
                bsr     Offset_0x014CDE
                moveq   #$00, D4
                rts
;-------------------------------------------------------------------------------    
Offset_0x01495C:
                lea     (Obj_Memory_Address).w, A1                   ; $FFFFB000
                moveq   #$03, D6
                movem.l D1-D4, -(A7)
                bsr.s   Offset_0x014972
                movem.l (A7)+, D1-D4
                lea     (Obj_Memory_Address+$0040).w, A1             ; $FFFFB040
                addq.b  #$01, D6
Offset_0x014972:
                btst    D6, Obj_Status(A0)                               ; $0022
                beq     Offset_0x0149C8
                btst    #$01, Obj_Status(A1)                             ; $0022
                bne.s   Offset_0x014994
                move.w  Obj_X(A1), D0                                    ; $0008
                sub.w   Obj_X(A0), D0                                    ; $0008
                add.w   D1, D0
                bmi.s   Offset_0x014994
                add.w   D1, D1
                cmp.w   D1, D0
                bcs.s   Offset_0x0149A8
Offset_0x014994:
                bclr    #$03, Obj_Status(A1)                             ; $0022
                bset    #$01, Obj_Status(A1)                             ; $0022
                bclr    D6, Obj_Status(A0)                               ; $0022
                moveq   #$00, D4
                rts
Offset_0x0149A8:
                move.w  Obj_Y(A0), D0                                    ; $000C
                sub.w   D2, D0
                add.w   D3, D0
                moveq   #$00, D1
                move.b  Obj_Height_2(A1), D1                             ; $0016
                sub.w   D1, D0
                move.w  D0, Obj_Y(A1)                                    ; $000C
                sub.w   Obj_X(A0), D4                                    ; $0008
                sub.w   D4, Obj_X(A1)                                    ; $0008
                moveq   #$00, D4
                rts
Offset_0x0149C8:
                move.w  Obj_X(A1), D0                                    ; $0008
                sub.w   Obj_X(A0), D0                                    ; $0008
                add.w   D1, D0
                bmi     Offset_0x014BA0
                move.w  D1, D4
                add.w   D4, D4
                cmp.w   D4, D0
                bhi     Offset_0x014BA0
                move.w  Obj_Y(A0), D5                                    ; $000C
                add.w   D3, D5
                move.b  Obj_Height_2(A1), D3                             ; $0016
                ext.w   D3
                add.w   D3, D2
                move.w  Obj_Y(A1), D3                                    ; $000C
                sub.w   D5, D3
                addq.w  #$04, D3
                add.w   D2, D3
                bmi     Offset_0x014BA0
                move.w  D2, D4
                add.w   D4, D4
                cmp.w   D4, D3
                bcc     Offset_0x014BA0
                bra     SolidObject_3_Sub_01                   ; Offset_0x014B0A
;-------------------------------------------------------------------------------                
SolidObject_3_Sub_00:                                          ; Offset_0x014A0A
                move.w  Obj_X(A1), D0                                    ; $0008
                sub.w   Obj_X(A0), D0                                    ; $0008
                add.w   D1, D0
                bmi     Offset_0x014BA0
                move.w  D1, D3
                add.w   D3, D3
                cmp.w   D3, D0
                bhi     Offset_0x014BA0
                move.w  D0, D5
                btst    #$00, Obj_Flags(A0)                              ; $0001
                beq.s   Offset_0x014A30
                not.w   D5
                add.w   D3, D5
Offset_0x014A30:
                lsr.w   #$01, D5
                move.b  $00(A2, D5), D3
                sub.b   (A2), D3
                ext.w   D3
                move.w  Obj_Y(A0), D5                                    ; $000C
                sub.w   D3, D5
                move.b  Obj_Height_2(A1), D3                             ; $0016
                ext.w   D3
                add.w   D3, D2
                move.w  Obj_Y(A1), D3                                    ; $000C
                sub.w   D5, D3
                addq.w  #$04, D3
                add.w   D2, D3
                bmi     Offset_0x014BA0
                move.w  D2, D4
                add.w   D4, D4
                cmp.w   D4, D3
                bcc     Offset_0x014BA0
                bra     SolidObject_3_Sub_01                   ; Offset_0x014B0A
;-------------------------------------------------------------------------------
Offset_0x014A64:
                move.w  Obj_X(A1), D0                                    ; $0008
                sub.w   Obj_X(A0), D0                                    ; $0008
                add.w   D1, D0
                bmi     Offset_0x014BA0
                move.w  D1, D3
                add.w   D3, D3
                cmp.w   D3, D0
                bhi     Offset_0x014BA0
                move.w  D0, D5
                btst    #$00, Obj_Flags(A0)                              ; $0001
                beq.s   Offset_0x014A8A
                not.w   D5
                add.w   D3, D5
Offset_0x014A8A:
                andi.w  #$FFFE, D5
                move.b  $00(A2, D5), D3
                move.b  $01(A2, D5), D2
                ext.w   D2
                ext.w   D3
                move.w  Obj_Y(A0), D5                                    ; $000C
                sub.w   D3, D5
                move.w  Obj_Y(A1), D3                                    ; $000C
                sub.w   D5, D3
                move.b  Obj_Height_2(A1), D5                             ; $0016
                ext.w   D5
                add.w   D5, D3
                addq.w  #$04, D3
                bmi     Offset_0x014BA0
                add.w   D5, D2
                move.w  D2, D4
                add.w   D5, D4
                cmp.w   D4, D3
                bcc     Offset_0x014BA0
                bra     SolidObject_3_Sub_01                   ; Offset_0x014B0A
;-------------------------------------------------------------------------------
SolidObject_Sub_00:                                            ; Offset_0x014AC4
                tst.b   Obj_Flags(A0)                                    ; $0001
                bpl     Offset_0x014BA0
;-------------------------------------------------------------------------------                
Solid_Object_Monitors:                                         ; Offset_0x014ACC
                move.w  Obj_X(A1), D0                                    ; $0008
                sub.w   Obj_X(A0), D0                                    ; $0008
                add.w   D1, D0
                bmi     Offset_0x014BA0
                move.w  D1, D3
                add.w   D3, D3
                cmp.w   D3, D0
                bhi     Offset_0x014BA0
                move.b  Obj_Height_2(A1), D3                             ; $0016
                ext.w   D3
                add.w   D3, D2
                move.w  Obj_Y(A1), D3                                    ; $000C
                sub.w   Obj_Y(A0), D3                                    ; $000C
                addq.w  #$04, D3
                add.w   D2, D3
                bmi     Offset_0x014BA0
                andi.w  #$07FF, D3
                move.w  D2, D4
                add.w   D4, D4
                cmp.w   D4, D3
                bcc     Offset_0x014BA0
SolidObject_3_Sub_01:                                          ; Offset_0x014B0A
                tst.b   Obj_Timer(A1)                                    ; $002A
                bmi     Offset_0x014BA0
                cmpi.b  #$06, Obj_Routine(A1)                            ; $0024
                bcc     Offset_0x014BC6
                tst.w   (Debug_Mode_Flag_Index).w                    ; $FFFFFE08
                bne     Offset_0x014BC6
                move.w  D0, D5
                cmp.w   D0, D1
                bcc.s   Offset_0x014B32
                add.w   D1, D1
                sub.w   D1, D0
                move.w  D0, D5
                neg.w   D5
Offset_0x014B32:
                move.w  D3, D1
                cmp.w   D3, D2
                bcc.s   Offset_0x014B40
                subq.w  #$04, D3
                sub.w   D4, D3
                move.w  D3, D1
                neg.w   D1
Offset_0x014B40:
                cmp.w   D1, D5
                bhi     Offset_0x014BCA
Offset_0x014B46:
                cmpi.w  #$0004, D1
                bls.s   Offset_0x014B92
                tst.w   D0
                beq.s   Offset_0x014B6C
                bmi.s   Offset_0x014B5A
                tst.w   Obj_Speed(A1)                                    ; $0010
                bmi.s   Offset_0x014B6C
                bra.s   Offset_0x014B60
Offset_0x014B5A:
                tst.w   Obj_Speed(A1)                                    ; $0010
                bpl.s   Offset_0x014B6C
Offset_0x014B60:
                move.w  #$0000, Obj_Inertia(A1)                          ; $0014
                move.w  #$0000, Obj_Speed(A1)                            ; $0010
Offset_0x014B6C:
                sub.w   D0, Obj_X(A1)                                    ; $0008
                btst    #$01, Obj_Status(A1)                             ; $0022
                bne.s   Offset_0x014B92
                move.l  D6, D4
                addq.b  #$02, D4
                bset    D4, Obj_Status(A0)                               ; $0022
                bset    #$05, Obj_Status(A1)                             ; $0022
                move.w  D6, D4
                addi.b  #$0D, D4
                bset    D4, D6
                moveq   #$01, D4
                rts
Offset_0x014B92:
                bsr.s   Offset_0x014BB8
                move.w  D6, D4
                addi.b  #$0D, D4
                bset    D4, D6
                moveq   #$01, D4
                rts
Offset_0x014BA0:
                move.l  D6, D4
                addq.b  #$02, D4
                btst    D4, Obj_Status(A0)                               ; $0022
                beq.s   Offset_0x014BC6
                cmpi.b  #$02, Obj_Ani_Number(A1)                         ; $001C
                beq.s   Offset_0x014BB8
                move.w  #$0001, Obj_Ani_Number(A1)                       ; $001C
Offset_0x014BB8:
                move.l  D6, D4
                addq.b  #$02, D4
                bclr    D4, Obj_Status(A0)                               ; $0022
                bclr    #$05, Obj_Status(A1)                             ; $0022
Offset_0x014BC6:
                moveq   #$00, D4
                rts
Offset_0x014BCA:
                tst.w   D3
                bmi.s   Offset_0x014BD6
                cmpi.w  #$0010, D3
                bcs.s   Offset_0x014C26
                bra.s   Offset_0x014BA0
Offset_0x014BD6:
                tst.w   Obj_Speed_Y(A1)                                  ; $0012
                beq.s   Offset_0x014BF8
                bpl.s   Offset_0x014BEC
                tst.w   D3
                bpl.s   Offset_0x014BEC
                sub.w   D3, Obj_Y(A1)                                    ; $000C
                move.w  #$0000, Obj_Speed_Y(A1)                          ; $0012
Offset_0x014BEC:
                move.w  D6, D4
                addi.b  #$0F, D4
                bset    D4, D6
                moveq   #-$02, D4
                rts
Offset_0x014BF8:
                btst    #$01, Obj_Status(A1)                             ; $0022
                bne.s   Offset_0x014BEC
                move.w  D0, D4
                bpl.s   Offset_0x014C06
                neg.w   D4
Offset_0x014C06:
                cmpi.w  #$0010, D4
                bcs     Offset_0x014B46
                move.l  A0, -(A7)
                move.l  A1, A0
                jsr     (Kill_Player)                          ; Offset_0x038420
                move.l  (A7)+, A0
                move.w  D6, D4
                addi.b  #$0F, D4
                bset    D4, D6
                moveq   #-$02, D4
                rts
Offset_0x014C26:
                subq.w  #$04, D3
                moveq   #$00, D1
                move.b  Obj_Width(A0), D1                                ; $0019
                move.w  D1, D2
                add.w   D2, D2
                add.w   Obj_X(A1), D1                                    ; $0008
                sub.w   Obj_X(A0), D1                                    ; $0008
                bmi.s   Offset_0x014C5E
                cmp.w   D2, D1
                bcc.s   Offset_0x014C5E
                tst.w   Obj_Speed_Y(A1)                                  ; $0012
                bmi.s   Offset_0x014C5E
                sub.w   D3, Obj_Y(A1)                                    ; $000C
                subq.w  #$01, Obj_Y(A1)                                  ; $000C
                bsr     Player_On_Spiral                       ; Offset_0x014EE4
                move.w  D6, D4
                addi.b  #$11, D4
                bset    D4, D6
                moveq   #-$01, D4
                rts
Offset_0x014C5E:
                moveq   #$00, D4
                rts
;-------------------------------------------------------------------------------
Player_On_Platform:                                            ; Offset_0x014C62
                move.w  Obj_Y(A0), D0                                    ; $000C
                sub.w   D3, D0
                bra.s   Offset_0x014C72    
Offset_0x014C6A:
                move.w  Obj_Y(A0), D0                                    ; $000C
                subi.w  #$0009, D0
Offset_0x014C72:
                tst.b   Obj_Timer(A1)                                    ; $002A
                bmi.s   Offset_0x014C9A
                cmpi.b  #$06, Obj_Routine(A1)                            ; $0024
                bcc.s   Offset_0x014C9A
                tst.w   (Debug_Mode_Flag_Index).w                    ; $FFFFFE08
                bne.s   Offset_0x014C9A
                moveq   #$00, D1
                move.b  Obj_Height_2(A1), D1                             ; $0016
                sub.w   D1, D0
                move.w  D0, Obj_Y(A1)                                    ; $000C
                sub.w   Obj_X(A0), D2                                    ; $0008
                sub.w   D2, Obj_X(A1)                                    ; $0008
Offset_0x014C9A:
                rts
;-------------------------------------------------------------------------------
Offset_0x014C9C:
                btst    #$03, Obj_Status(A1)                             ; $0022
                beq.s   Offset_0x014CDC
                move.w  Obj_X(A1), D0                                    ; $0008
                sub.w   Obj_X(A0), D0                                    ; $0008
                add.w   D1, D0
                lsr.w   #$01, D0
                btst    #$00, Obj_Flags(A0)                              ; $0001
                beq.s   Offset_0x014CBC
                not.w   D0
                add.w   D1, D0
Offset_0x014CBC:
                move.b  $00(A2, D0), D1
                ext.w   D1
                move.w  Obj_Y(A0), D0                                    ; $000C
                sub.w   D1, D0
                moveq   #$00, D1
                move.b  Obj_Height_2(A1), D1                             ; $0016
                sub.w   D1, D0
                move.w  D0, Obj_Y(A1)                                    ; $000C
                sub.w   Obj_X(A0), D2                                    ; $0008
                sub.w   D2, Obj_X(A1)                                    ; $0008
Offset_0x014CDC:
                rts
;-------------------------------------------------------------------------------  
Offset_0x014CDE:
                btst    #$03, Obj_Status(A1)                             ; $0022
                beq.s   Offset_0x014CDC
                move.w  Obj_X(A1), D0                                    ; $0008
                sub.w   Obj_X(A0), D0                                    ; $0008
                add.w   D1, D0
                btst    #$00, Obj_Flags(A0)                              ; $0001
                beq.s   Offset_0x014CFC
                not.w   D0
                add.w   D1, D0
Offset_0x014CFC:
                andi.w  #$FFFE, D0
                bra.s   Offset_0x014CBC
;-------------------------------------------------------------------------------
Platform_Object:                                               ; Offset_0x014D02
                lea     (Obj_Memory_Address).w, A1                   ; $FFFFB000
                moveq   #$03, D6
                movem.l D1-D4, -(A7)
                bsr.s   Platform_Object_A1                     ; Offset_0x014D18
                movem.l (A7)+, D1-D4
                lea     (Obj_Memory_Address+$0040).w, A1             ; $FFFFB040
                addq.b  #$01, D6
Platform_Object_A1:                                            ; Offset_0x014D18
                btst    D6, Obj_Status(A0)                               ; $0022
                beq     Offset_0x014E8A
                move.w  D1, D2
                add.w   D2, D2
                btst    #$01, Obj_Status(A1)                             ; $0022
                bne.s   Offset_0x014D3C
                move.w  Obj_X(A1), D0                                    ; $0008
                sub.w   Obj_X(A0), D0                                    ; $0008
                add.w   D1, D0
                bmi.s   Offset_0x014D3C
                cmp.w   D2, D0
                bcs.s   Offset_0x014D50
Offset_0x014D3C:
                bclr    #$03, Obj_Status(A1)                             ; $0022
                bset    #$01, Obj_Status(A1)                             ; $0022
                bclr    D6, Obj_Status(A0)                               ; $0022
                moveq   #$00, D4
                rts
Offset_0x014D50:
                move.w  D4, D2
                bsr     Player_On_Platform                     ; Offset_0x014C62
                moveq   #$00, D4
                rts
;-------------------------------------------------------------------------------
Platform_Object_2:                                             ; Offset_0x014D5A
                lea     (Obj_Memory_Address).w, A1                   ; $FFFFB000
                moveq   #$03, D6
                movem.l D1-D4, -(A7)
                bsr.s   Platform_Object_2_A1                   ; Offset_0x014D70
                movem.l (A7)+, D1-D4
                lea     (Obj_Memory_Address+$0040).w, A1             ; $FFFFB040
                addq.b  #$01, D6
Platform_Object_2_A1:                                          ; Offset_0x014D70
                btst    D6, Obj_Status(A0)                               ; $0022
                beq     Offset_0x014F58
                move.w  D1, D2
                add.w   D2, D2
                btst    #$01, Obj_Status(A1)                             ; $0022
                bne.s   Offset_0x014D94
                move.w  Obj_X(A1), D0                                    ; $0008
                sub.w   Obj_X(A0), D0                                    ; $0008
                add.w   D1, D0
                bmi.s   Offset_0x014D94
                cmp.w   D2, D0
                bcs.s   Offset_0x014DA8
Offset_0x014D94:
                bclr    #$03, Obj_Status(A1)                             ; $0022
                bset    #$01, Obj_Status(A1)                             ; $0022
                bclr    D6, Obj_Status(A0)                               ; $0022
                moveq   #$00, D4
                rts
Offset_0x014DA8:
                move.w  D4, D2
                bsr     Offset_0x014C9C
                moveq   #$00, D4
                rts
;-------------------------------------------------------------------------------
Platform_Object_3:                                             ; Offset_0x014DB2
                lea     (Obj_Memory_Address).w, A1                   ; $FFFFB000
                moveq   #$03, D6
                movem.l D1-D4, -(A7)
                bsr.s   Platform_Object_3_A1                   ; Offset_0x014DC8
                movem.l (A7)+, D1-D4
                lea     (Obj_Memory_Address+$0040).w, A1             ; $FFFFB040
                addq.b  #$01, D6
Platform_Object_3_A1:                                          ; Offset_0x014DC8
                btst    D6, Obj_Status(A0)                               ; $0022
                beq     Offset_0x014F90
                move.w  D1, D2
                add.w   D2, D2
                btst    #$01, Obj_Status(A1)                             ; $0022
                bne.s   Offset_0x014DEC
                move.w  Obj_X(A1), D0                                    ; $0008
                sub.w   Obj_X(A0), D0                                    ; $0008
                add.w   D1, D0
                bmi.s   Offset_0x014DEC
                cmp.w   D2, D0
                bcs.s   Offset_0x014E00
Offset_0x014DEC:
                bclr    #$03, Obj_Status(A1)                             ; $0022
                bset    #$01, Obj_Status(A1)                             ; $0022
                bclr    D6, Obj_Status(A0)                               ; $0022
                moveq   #$00, D4
                rts
Offset_0x014E00:
                move.w  D4, D2
                bsr     Player_On_Platform                     ; Offset_0x014C62
                moveq   #$00, D4
                rts 
;-------------------------------------------------------------------------------
Platform_Elevator:                                             ; Offset_0x014E0A
                lea     (Obj_Memory_Address).w, A1                   ; $FFFFB000
                moveq   #$03, D6
                movem.l D1-D4, -(A7)
                bsr.s   Platform_Elevator_A1                   ; Offset_0x014E20
                movem.l (A7)+, D1-D4
                lea     (Obj_Memory_Address+$0040).w, A1             ; $FFFFB040
                addq.b  #$01, D6
Platform_Elevator_A1:                                          ; Offset_0x014E20
                btst    D6, Obj_Status(A0)                               ; $0022
                bne.s   Offset_0x014E32
                btst    #$03, Obj_Status(A1)                             ; $0022
                bne.s   Offset_0x014E5E
                bra     Offset_0x014E8A
Offset_0x014E32:
                move.w  D1, D2
                add.w   D2, D2
                btst    #$01, Obj_Status(A1)                             ; $0022
                bne.s   Offset_0x014E4E
                move.w  Obj_X(A1), D0                                    ; $0008
                sub.w   Obj_X(A0), D0                                    ; $0008
                add.w   D1, D0
                bmi.s   Offset_0x014E4E
                cmp.w   D2, D0
                bcs.s   Offset_0x014E62
Offset_0x014E4E:
                bclr    #$03, Obj_Status(A1)                             ; $0022
                bset    #$01, Obj_Status(A1)                             ; $0022
                bclr    D6, Obj_Status(A0)                               ; $0022
Offset_0x014E5E:
                moveq   #$00, D4
                rts
Offset_0x014E62:
                move.w  D4, D2
                bsr     Player_On_Platform                     ; Offset_0x014C62
                moveq   #$00, D4
                rts 
;-------------------------------------------------------------------------------  
Offset_0x014E6C:
                tst.w   Obj_Speed_Y(A1)                                  ; $0012
                bmi     Offset_0x014F56
                move.w  Obj_X(A1), D0                                    ; $0008
                sub.w   Obj_X(A0), D0                                    ; $0008
                add.w   D1, D0
                bmi     Offset_0x014F56
                cmp.w   D2, D0
                bcc     Offset_0x014F56
                bra.s   Offset_0x014EA8
;-------------------------------------------------------------------------------                
Offset_0x014E8A:
                tst.w   Obj_Speed_Y(A1)                                  ; $0012
                bmi     Offset_0x014F56
                move.w  Obj_X(A1), D0                                    ; $0008
                sub.w   Obj_X(A0), D0                                    ; $0008
                add.w   D1, D0
                bmi     Offset_0x014F56
                add.w   D1, D1
                cmp.w   D1, D0
                bcc     Offset_0x014F56
Offset_0x014EA8:
                move.w  Obj_Y(A0), D0                                    ; $000C
                sub.w   D3, D0
Offset_0x014EAE:
                move.w  Obj_Y(A1), D2                                    ; $000C
                move.b  Obj_Height_2(A1), D1                             ; $0016
                ext.w   D1
                add.w   D2, D1
                addq.w  #$04, D1
                sub.w   D1, D0
                bhi     Offset_0x014F56
                cmpi.w  #$FFF0, D0
                bcs     Offset_0x014F56
                tst.b   Obj_Timer(A1)                                    ; $002A
                bmi     Offset_0x014F56
                cmpi.b  #$06, Obj_Routine(A1)                            ; $0024
                bcc     Offset_0x014F56
                add.w   D0, D2
                addq.w  #$03, D2
                move.w  D2, Obj_Y(A1)                                    ; $000C
;-------------------------------------------------------------------------------
Player_On_Spiral:                                              ; Offset_0x014EE4                
                btst    #$03, Obj_Status(A1)                             ; $0022
                beq.s   Offset_0x014F00
                moveq   #$00, D0
                move.b  Obj_Player_Last(A1), D0                          ; $003D
                lsl.w   #$06, D0
                addi.l  #Obj_Memory_Address, D0                      ; $FFFFB000
                move.l  D0, A3
                bclr    D6, Obj_Status(A3)                               ; $0022
Offset_0x014F00:
                move.w  A0, D0
                subi.w  #Obj_Memory_Address, D0                          ; $B000
                lsr.w   #$06, D0
                andi.w  #$007F, D0
                move.b  D0, Obj_Player_Last(A1)                          ; $003D
                move.b  #$00, Obj_Angle(A1)                              ; $0026
                move.w  #$0000, Obj_Speed_Y(A1)                          ; $0012
                move.w  Obj_Speed(A1), Obj_Inertia(A1)            ; $0010, $0014
                btst    #$01, Obj_Status(A1)                             ; $0022
                beq.s   Offset_0x014F46
                move.l  A0, -(A7)
                move.l  A1, A0
                move.w  A0, D1
                subi.w  #Obj_Memory_Address, D1                          ; $B000
                bne.s   Offset_0x014F3E
                jsr     (Sonic_ResetOnFloor)                   ; Offset_0x015FDA
                bra.s   Offset_0x014F44
Offset_0x014F3E:
                jsr     (Miles_ResetOnFloor)                   ; Offset_0x0177F2
Offset_0x014F44:
                move.l  (A7)+, A0
Offset_0x014F46:
                bset    #$03, Obj_Status(A1)                             ; $0022
                bclr    #$01, Obj_Status(A1)                             ; $0022
                bset    D6, Obj_Status(A0)                               ; $0022
Offset_0x014F56:
                rts
;-------------------------------------------------------------------------------                
Offset_0x014F58:
                tst.w   Obj_Speed_Y(A1)                                  ; $0012
                bmi     Offset_0x014F56
                move.w  Obj_X(A1), D0                                    ; $0008
                sub.w   Obj_X(A0), D0                                    ; $0008
                add.w   D1, D0
                bmi.s   Offset_0x014F56
                add.w   D1, D1
                cmp.w   D1, D0
                bcc.s   Offset_0x014F56
                btst    #$00, Obj_Flags(A0)                              ; $0001
                beq.s   Offset_0x014F7E
                not.w   D0
                add.w   D1, D0
Offset_0x014F7E:
                lsr.w   #$01, D0
                move.b  $00(A2, D0), D3
                ext.w   D3
                move.w  Obj_Y(A0), D0                                    ; $000C
                sub.w   D3, D0
                bra     Offset_0x014EAE
;-------------------------------------------------------------------------------                
Offset_0x014F90:
                tst.w   Obj_Speed_Y(A1)                                  ; $0012
                bmi     Offset_0x014F56
                move.w  Obj_X(A1), D0                                    ; $0008
                sub.w   Obj_X(A0), D0                                    ; $0008
                add.w   D1, D0
                bmi     Offset_0x014F56
                add.w   D1, D1
                cmp.w   D1, D0
                bcc     Offset_0x014F56
                move.w  Obj_Y(A0), D0                                    ; $000C
                sub.w   D3, D0
                bra     Offset_0x014EAE
;-------------------------------------------------------------------------------
Exit_Plaform:                                                  ; Offset_0x014FB8
                move.w  D1, D2
                add.w   D2, D2
                lea     (Obj_Memory_Address).w, A1                   ; $FFFFB000
                btst    #$01, Obj_Status(A1)                             ; $0022
                bne.s   Offset_0x014FD8
                move.w  Obj_X(A1), D0                                    ; $0008
                sub.w   Obj_X(A0), D0                                    ; $0008
                add.w   D1, D0
                bmi.s   Offset_0x014FD8
                cmp.w   D2, D0
                bcs.s   Offset_0x014FF0
Offset_0x014FD8:
                bclr    #$03, Obj_Status(A1)                             ; $0022
                bset    #$01, Obj_Status(A1)                             ; $0022
                move.b  #$02, Obj_Routine(A0)                            ; $0024
                bclr    #$03, Obj_Status(A0)                             ; $0022
Offset_0x014FF0:
                rts
;------------------------------------------------------------------------------- 
Offset_0x014FF2:  ; Usado pelo objeto desconhecido 0x30
                lea     (Obj_Memory_Address).w, A1                   ; $FFFFB000
                btst    #$03, Obj_Status(A0)                             ; $0022
                beq.s   Offset_0x015020
                jsr     (Player_HitFloor_A1)                   ; Offset_0x019B22
                tst.w   D1
                beq.s   Offset_0x01500A
                bpl.s   Offset_0x015020
Offset_0x01500A:
                lea     (Obj_Memory_Address).w, A1                   ; $FFFFB000
                bclr    #$03, Obj_Status(A1)                             ; $0022
                bset    #$01, Obj_Status(A1)                             ; $0022
                bclr    #$03, Obj_Status(A0)                             ; $0022
Offset_0x015020:
                lea     (Obj_Memory_Address+$0040).w, A1             ; $FFFFB040
                btst    #$04, Obj_Status(A0)                             ; $0022
                beq.s   Offset_0x01504E
                jsr     (Player_HitFloor_A1)                   ; Offset_0x019B22
                tst.w   D1
                beq.s   Offset_0x015038
                bpl.s   Offset_0x01504E
Offset_0x015038:
                lea     (Obj_Memory_Address+$0040).w, A1             ; $FFFFB040
                bclr    #$03, Obj_Status(A1)                             ; $0022
                bset    #$01, Obj_Status(A1)                             ; $0022
                bclr    #$04, Obj_Status(A0)                             ; $0022
Offset_0x01504E:
                moveq   #$00, D4
                rts                                                                                                                                                                                          
;===============================================================================
; Rotina para carregar o posicionamento dos objetos nas fases
; <<<-
;===============================================================================
                nop  
Obj_0x01_Sonic:                                                ; Offset_0x015054
                include 'data\objects\obj_0x01.asm'  
;-------------------------------------------------------------------------------
                nop               
Kill_Sonic:                                                    ; Offset_0x016708                                                              
                jmp     (Kill_Player)                          ; Offset_0x038420 
;-------------------------------------------------------------------------------                                 
                dc.w    $0000               
Obj_0x02_Miles:                                                ; Offset_0x016710
                include 'data\objects\obj_0x02.asm'
Obj_0x05_Miles_Tail:                                           ; Offset_0x017D5E   
                include 'data\objects\obj_0x05.asm'
;-------------------------------------------------------------------------------
                nop                 
Kill_Miles:                                                    ; Offset_0x017E78                                                            
                jmp     (Kill_Player)   
;-------------------------------------------------------------------------------                
                dc.w    $0000
Obj_0x0A_Sonic_Miles_Underwater:                               ; Offset_0x017E80
                include 'data\objects\obj_0x0A.asm'
;===============================================================================
; Rotina para restaurar a música da fase
; ->>>                    
;===============================================================================                
Resume_Music:                                                  ; Offset_0x01836A  
                cmpi.b  #$0C, Obj_Subtype(A1)                            ; $0028
                bhi.s   Reset_Water_Counter                    ; Offset_0x018392
                move.w  (Current_Sound_Buffer).w, D0                 ; $FFFFFF90
                btst    #$01, Obj_Player_Status(A1)                      ; $002B
                beq.s   Try_Resume_Boss                        ; Offset_0x018382
                move.w  #$0097, D0
Try_Resume_Boss:                                               ; Offset_0x018382
                tst.b   (Boss_Flag).w                                ; $FFFFF7AA
                beq.s   Resume_Play_Music                      ; Offset_0x01838C
                move.w  #$0093, D0
Resume_Play_Music:                                             ; Offset_0x01838C
                jsr     (Play_Music)                           ; Offset_0x00190C
Reset_Water_Counter:                                           ; Offset_0x018392
                move.b  #$1E, Obj_Subtype(A1)                            ; $0028
                rts              
;===============================================================================
; Rotina para restaurar a música da fase
; <<<-                    
;===============================================================================                 
Bubbles_Animate_Data:                                          ; Offset_0x01839A
                dc.w    Offset_0x0183B8-Bubbles_Animate_Data
                dc.w    Offset_0x0183C1-Bubbles_Animate_Data
                dc.w    Offset_0x0183CA-Bubbles_Animate_Data
                dc.w    Offset_0x0183D3-Bubbles_Animate_Data
                dc.w    Offset_0x0183DC-Bubbles_Animate_Data
                dc.w    Offset_0x0183E5-Bubbles_Animate_Data
                dc.w    Offset_0x0183EE-Bubbles_Animate_Data
                dc.w    Offset_0x0183F3-Bubbles_Animate_Data
                dc.w    Offset_0x0183FB-Bubbles_Animate_Data
                dc.w    Offset_0x018403-Bubbles_Animate_Data
                dc.w    Offset_0x01840B-Bubbles_Animate_Data
                dc.w    Offset_0x018413-Bubbles_Animate_Data
                dc.w    Offset_0x01841B-Bubbles_Animate_Data
                dc.w    Offset_0x018423-Bubbles_Animate_Data
                dc.w    Offset_0x018425-Bubbles_Animate_Data
Offset_0x0183B8:
                dc.b    $05, $00, $01, $02, $03, $04, $08, $08
                dc.b    $FC
Offset_0x0183C1:
                dc.b    $05, $00, $01, $02, $03, $04, $09, $09
                dc.b    $FC
Offset_0x0183CA:
                dc.b    $05, $00, $01, $02, $03, $04, $0A, $0A
                dc.b    $FC
Offset_0x0183D3:
                dc.b    $05, $00, $01, $02, $03, $04, $0B, $0B
                dc.b    $FC
Offset_0x0183DC:
                dc.b    $05, $00, $01, $02, $03, $04, $0C, $0C
                dc.b    $FC
Offset_0x0183E5:
                dc.b    $05, $00, $01, $02, $03, $04, $0D, $0D
                dc.b    $FC
Offset_0x0183EE:
                dc.b    $0E, $00, $01, $02, $FC
Offset_0x0183F3:
                dc.b    $07, $10, $08, $10, $08, $10, $08, $FC
Offset_0x0183FB:
                dc.b    $07, $10, $09, $10, $09, $10, $09, $FC
Offset_0x018403:
                dc.b    $07, $10, $0A, $10, $0A, $10, $0A, $FC
Offset_0x01840B:
                dc.b    $07, $10, $0B, $10, $0B, $10, $0B, $FC
Offset_0x018413:
                dc.b    $07, $10, $0C, $10, $0C, $10, $0C, $FC
Offset_0x01841B:
                dc.b    $07, $10, $0D, $10, $0D, $10, $0D, $FC
Offset_0x018423:
                dc.b    $0E, $FC
Offset_0x018425:
                dc.b    $0E, $01, $02, $03, $04, $FC, $00
;-------------------------------------------------------------------------------
Obj_0x38_Shield:                                               ; Offset_0x01842C
                include 'data\objects\obj_0x38.asm'
Obj_0x35_Invincibility:                                        ; Offset_0x0184BC
                include 'data\objects\obj_0x35.asm'                   
;-------------------------------------------------------------------------------
Shield_AnimateData:                                            ; Offset_0x0189BC
                dc.w    Offset_0x0189BE-Shield_AnimateData
Offset_0x0189BE:
                dc.b    $00, $05, $00, $05
                dc.b    $01, $05, $02, $05
                dc.b    $03, $05, $04, $FF
;-------------------------------------------------------------------------------
Shield_Mappings:                                               ; Offset_0x0189CA
                dc.w    Offset_0x0189D6-Shield_Mappings
                dc.w    Offset_0x0189F8-Shield_Mappings
                dc.w    Offset_0x018A1A-Shield_Mappings
                dc.w    Offset_0x018A3C-Shield_Mappings
                dc.w    Offset_0x018A5E-Shield_Mappings
                dc.w    Offset_0x018A80-Shield_Mappings
Offset_0x0189D6:
                dc.w    $0004
                dc.l    $F0050000, $0000FFF0
                dc.l    $F0050800, $08000000
                dc.l    $00051000, $1000FFF0
                dc.l    $00051800, $18000000
Offset_0x0189F8:
                dc.w    $0004
                dc.l    $F0050004, $0002FFF0
                dc.l    $F0050804, $08020000
                dc.l    $00051004, $1002FFF0
                dc.l    $00051804, $18020000
Offset_0x018A1A:
                dc.w    $0004
                dc.l    $F0050008, $0004FFF0
                dc.l    $F0050808, $08040000
                dc.l    $00051008, $1004FFF0
                dc.l    $00051808, $18040000
Offset_0x018A3C:
                dc.w    $0004
                dc.l    $F005000C, $0006FFF0
                dc.l    $F005080C, $08060000
                dc.l    $0005100C, $1006FFF0
                dc.l    $0005180C, $18060000
Offset_0x018A5E:
                dc.w    $0004
                dc.l    $F0050010, $0008FFF0
                dc.l    $F0050810, $08080000
                dc.l    $00051010, $1008FFF0
                dc.l    $00051810, $18080000
Offset_0x018A80:
                dc.w    $0004
                dc.l    $E00B0014, $000AFFE8
                dc.l    $E00B0814, $080A0000
                dc.l    $000B1014, $100AFFE8
                dc.l    $000B1814, $180A0000
;-------------------------------------------------------------------------------
Invicibility_Stars_Mappings:                                   ; Offset_0x018AA2
                dc.w    Offset_0x018AB4-Invicibility_Stars_Mappings
                dc.w    Offset_0x018AB6-Invicibility_Stars_Mappings
                dc.w    Offset_0x018AC0-Invicibility_Stars_Mappings
                dc.w    Offset_0x018ACA-Invicibility_Stars_Mappings
                dc.w    Offset_0x018AD4-Invicibility_Stars_Mappings
                dc.w    Offset_0x018ADE-Invicibility_Stars_Mappings
                dc.w    Offset_0x018AE8-Invicibility_Stars_Mappings
                dc.w    Offset_0x018AF2-Invicibility_Stars_Mappings
                dc.w    Offset_0x018AFC-Invicibility_Stars_Mappings
Offset_0x018AB4:
                dc.w    $0000
Offset_0x018AB6:
                dc.w    $0001
                dc.l    $F8010000, $0000FFFC
Offset_0x018AC0:
                dc.w    $0001
                dc.l    $F8010002, $0001FFFC
Offset_0x018ACA:
                dc.w    $0001
                dc.l    $F8010004, $0002FFFC
Offset_0x018AD4:
                dc.w    $0001
                dc.l    $F8010006, $0003FFFC
Offset_0x018ADE:
                dc.w    $0001
                dc.l    $F8010008, $0004FFFC
Offset_0x018AE8:
                dc.w    $0001
                dc.l    $F805000A, $0005FFF8
Offset_0x018AF2:
                dc.w    $0001
                dc.l    $F805000E, $0007FFF8
Offset_0x018AFC:
                dc.w    $0001
                dc.l    $F00F0012, $0009FFF0
;-------------------------------------------------------------------------------
Obj_0x08_Dust_Water_Splash:                                    ; Offset_0x018B06    
                include 'data\objects\obj_0x08.asm'
Obj_0x7E_Super_Sonic_Stars:                                    ; Offset_0x018EC2
                include 'data\objects\obj_0x7E.asm'
;===============================================================================
; Rotina para calcular o ângulo do jogador
; ->>>                    
;===============================================================================
Player_AnglePos:                                               ; Offset_0x019004
                move.l  #Primary_Colision_Data_Buffer, (Current_Colision_Pointer).w ; $FFFFD000, $FFFFF796
                cmpi.b  #$0C, Obj_Player_Top_Solid(A0)                   ; $003E
                beq.s   Offset_0x01901C
                move.l  #Secundary_Colision_Data_Buffer, (Current_Colision_Pointer).w ; $FFFFD600, $FFFFF796
Offset_0x01901C:
                move.b  Obj_Player_Top_Solid(A0), D5                     ; $003E
                btst    #$03, Obj_Status(A0)                             ; $0022
                beq.s   Offset_0x019034
                moveq   #$00, D0
                move.b  D0, ($FFFFF768).w
                move.b  D0, ($FFFFF76A).w
                rts
Offset_0x019034:
                moveq   #$03, D0
                move.b  D0, ($FFFFF768).w
                move.b  D0, ($FFFFF76A).w
                move.b  Obj_Angle(A0), D0                                ; $0026
                addi.b  #$20, D0
                bpl.s   Offset_0x019056
                move.b  Obj_Angle(A0), D0                                ; $0026
                bpl.s   Offset_0x019050
                subq.b  #$01, D0
Offset_0x019050:
                addi.b  #$20, D0
                bra.s   Offset_0x019062
Offset_0x019056:
                move.b  Obj_Angle(A0), D0                                ; $0026
                bpl.s   Offset_0x01905E
                addq.b  #$01, D0
Offset_0x01905E:
                addi.b  #$1F, D0
Offset_0x019062:
                andi.b  #$C0, D0
                cmpi.b  #$40, D0
                beq     Player_WalkVertL                       ; Offset_0x0192B8
                cmpi.b  #$80, D0
                beq     Player_WalkCeiling                     ; Offset_0x01920A
                cmpi.b  #$C0, D0
                beq     Player_WalkVertR                       ; Offset_0x019162
                move.w  Obj_Y(A0), D2                                    ; $000C
                move.w  Obj_X(A0), D3                                    ; $0008
                moveq   #$00, D0
                move.b  Obj_Height_2(A0), D0                             ; $0016
                ext.w   D0
                add.w   D0, D2
                move.b  Obj_Width_2(A0), D0                              ; $0017
                ext.w   D0
                add.w   D0, D3
                lea     ($FFFFF768).w, A4
                move.w  #$0010, A3
                move.w  #$0000, D6
                bsr     FindFloor                              ; Offset_0x0195A0
                move.w  D1, -(A7)
                move.w  Obj_Y(A0), D2                                    ; $000C
                move.w  Obj_X(A0), D3                                    ; $0008
                moveq   #$00, D0
                move.b  Obj_Height_2(A0), D0                             ; $0016
                ext.w   D0
                add.w   D0, D2
                move.b  Obj_Width_2(A0), D0                              ; $0017
                ext.w   D0
                neg.w   D0
                add.w   D0, D3
                lea     ($FFFFF76A).w, A4
                move.w  #$0010, A3
                move.w  #$0000, D6
                bsr     FindFloor                              ; Offset_0x0195A0
                move.w  (A7)+, D0
                bsr     Player_Angle                           ; Offset_0x019126
                tst.w   D1
                beq.s   Offset_0x0190EC
                bpl.s   Offset_0x0190EE
                cmpi.w  #$FFF2, D1
                blt.s   Offset_0x0190EC
                add.w   D1, Obj_Y(A0)                                    ; $000C
Offset_0x0190EC:
                rts
Offset_0x0190EE:
                move.b  Obj_Speed(A0), D0                                ; $0010
                bpl.s   Offset_0x0190F6
                neg.b   D0
Offset_0x0190F6:
                addq.b  #$04, D0
                cmpi.b  #$0E, D0
                bcs.s   Offset_0x019102
                move.b  #$0E, D0
Offset_0x019102:
                cmp.b   D0, D1
                bgt.s   Offset_0x01910C
Offset_0x019106:
                add.w   D1, Obj_Y(A0)                                    ; $000C
                rts
Offset_0x01910C:
                tst.b   Obj_Player_St_Convex(A0)                         ; $0038
                bne.s   Offset_0x019106
                bset    #$01, Obj_Status(A0)                             ; $0022
                bclr    #$05, Obj_Status(A0)                             ; $0022
                move.b  #$01, Obj_Ani_Flag(A0)                           ; $001D
                rts
;-------------------------------------------------------------------------------                
Player_Angle:                                                  ; Offset_0x019126
                move.b  ($FFFFF76A).w, D2
                cmp.w   D0, D1
                ble.s   Offset_0x019134
                move.b  ($FFFFF768).w, D2
                move.w  D0, D1
Offset_0x019134:
                btst    #$00, D2
                bne.s   Offset_0x019150
                move.b  D2, D0
                sub.b   Obj_Angle(A0), D0                                ; $0026
                bpl.s   Offset_0x019144
                neg.b   D0
Offset_0x019144:
                cmpi.b  #$20, D0
                bcc.s   Offset_0x019150
                move.b  D2, Obj_Angle(A0)                                ; $0026
                rts
Offset_0x019150:
                move.b  Obj_Angle(A0), D2                                ; $0026
                addi.b  #$20, D2
                andi.b  #$C0, D2
                move.b  D2, Obj_Angle(A0)                                ; $0026
                rts                
;===============================================================================
; Rotina para calcular o ângulo do jogador
; <<<-                    
;===============================================================================                 

;===============================================================================
; Rotina para calcular a posição do jogador em rampas
; ->>>                    
;===============================================================================
Player_WalkVertR:                                              ; Offset_0x019162
                move.w  Obj_Y(A0), D2                                    ; $000C
                move.w  Obj_X(A0), D3                                    ; $0008
                moveq   #$00, D0
                move.b  Obj_Width_2(A0), D0                              ; $0017
                ext.w   D0
                neg.w   D0
                add.w   D0, D2
                move.b  Obj_Height_2(A0), D0                             ; $0016
                ext.w   D0
                add.w   D0, D3
                lea     ($FFFFF768).w, A4
                move.w  #$0010, A3
                move.w  #$0000, D6
                bsr     FindWall                               ; Offset_0x01977A
                move.w  D1, -(A7)
                move.w  Obj_Y(A0), D2                                    ; $000C
                move.w  Obj_X(A0), D3                                    ; $0008
                moveq   #$00, D0
                move.b  Obj_Width_2(A0), D0                              ; $0017
                ext.w   D0
                add.w   D0, D2
                move.b  Obj_Height_2(A0), D0                             ; $0016
                ext.w   D0
                add.w   D0, D3
                lea     ($FFFFF76A).w, A4
                move.w  #$0010, A3
                move.w  #$0000, D6
                bsr     FindWall                               ; Offset_0x01977A
                move.w  (A7)+, D0
                bsr     Player_Angle                           ; Offset_0x019126
                tst.w   D1
                beq.s   Offset_0x0191D0
                bpl.s   Offset_0x0191D2
                cmpi.w  #$FFF2, D1
                blt.s   Offset_0x0191D0
                add.w   D1, Obj_X(A0)                                    ; $0008
Offset_0x0191D0:
                rts
Offset_0x0191D2:
                move.b  Obj_Speed_Y(A0), D0                              ; $0012
                bpl.s   Offset_0x0191DA
                neg.b   D0
Offset_0x0191DA:
                addq.b  #$04, D0
                cmpi.b  #$0E, D0
                bcs.s   Offset_0x0191E6
                move.b  #$0E, D0
Offset_0x0191E6:
                cmp.b   D0, D1
                bgt.s   Offset_0x0191F0
Offset_0x0191EA:
                add.w   D1, Obj_X(A0)                                    ; $0008
                rts
Offset_0x0191F0:
                tst.b   Obj_Player_St_Convex(A0)                         ; $0038
                bne.s   Offset_0x0191EA
                bset    #$01, Obj_Status(A0)                             ; $0022
                bclr    #$05, Obj_Status(A0)                             ; $0022
                move.b  #$01, Obj_Ani_Flag(A0)                           ; $001D
                rts
;===============================================================================
; Rotina para calcular a posição do jogador em rampas
; <<<-                    
;===============================================================================  

;===============================================================================
; Rotina para calcular a posição do jogador ao andar no teto
; ->>>                    
;===============================================================================                
Player_WalkCeiling: ; Offset_0x01920A:
                move.w  Obj_Y(A0), D2                                    ; $000C
                move.w  Obj_X(A0), D3                                    ; $0008
                moveq   #$00, D0
                move.b  Obj_Height_2(A0), D0                             ; $0016
                ext.w   D0
                sub.w   D0, D2
                eori.w  #$000F, D2
                move.b  Obj_Width_2(A0), D0                              ; $0017
                ext.w   D0
                add.w   D0, D3
                lea     ($FFFFF768).w, A4
                move.w  #$FFF0, A3
                move.w  #$0800, D6
                bsr     FindFloor                              ; Offset_0x0195A0
                move.w  D1, -(A7)
                move.w  Obj_Y(A0), D2                                    ; $000C
                move.w  Obj_X(A0), D3                                    ; $0008
                moveq   #$00, D0
                move.b  Obj_Height_2(A0), D0                             ; $0016
                ext.w   D0
                sub.w   D0, D2
                eori.w  #$000F, D2
                move.b  Obj_Width_2(A0), D0                              ; $0017
                ext.w   D0
                sub.w   D0, D3
                lea     ($FFFFF76A).w, A4
                move.w  #$FFF0, A3
                move.w  #$0800, D6
                bsr     FindFloor                              ; Offset_0x0195A0
                move.w  (A7)+, D0
                bsr     Player_Angle                           ; Offset_0x019126
                tst.w   D1
                beq.s   Offset_0x01927E
                bpl.s   Offset_0x019280
                cmpi.w  #$FFF2, D1
                blt.s   Offset_0x01927E
                sub.w   D1, Obj_Y(A0)                                    ; $000C
Offset_0x01927E:
                rts
Offset_0x019280:
                move.b  Obj_Speed(A0), D0                                ; $0010
                bpl.s   Offset_0x019288
                neg.b   D0
Offset_0x019288:
                addq.b  #$04, D0
                cmpi.b  #$0E, D0
                bcs.s   Offset_0x019294
                move.b  #$0E, D0
Offset_0x019294:
                cmp.b   D0, D1
                bgt.s   Offset_0x01929E
Offset_0x019298:
                sub.w   D1, Obj_Y(A0)                                    ; $000C
                rts
Offset_0x01929E:
                tst.b   Obj_Player_St_Convex(A0)                         ; $0038
                bne.s   Offset_0x019298
                bset    #$01, Obj_Status(A0)                             ; $0022
                bclr    #$05, Obj_Status(A0)                             ; $0022
                move.b  #$01, Obj_Ani_Flag(A0)                           ; $001D
                rts
;===============================================================================
; Rotina para calcular a posição do jogador ao andar no teto
; <<<-                    
;===============================================================================
    
;===============================================================================
; Rotina para calcular a posição do jogador em rampas
; ->>>                    
;===============================================================================             
Player_WalkVertL:                                              ; Offset_0x0192B8
                move.w  Obj_Y(A0), D2                                    ; $000C
                move.w  Obj_X(A0), D3                                    ; $0008
                moveq   #$00, D0
                move.b  Obj_Width_2(A0), D0                              ; $0017
                ext.w   D0
                sub.w   D0, D2
                move.b  Obj_Height_2(A0), D0                             ; $0016
                ext.w   D0
                sub.w   D0, D3
                eori.w  #$000F, D3
                lea     ($FFFFF768).w, A4
                move.w  #$FFF0, A3
                move.w  #$0400, D6
                bsr     FindWall                               ; Offset_0x01977A
                move.w  D1, -(A7)
                move.w  Obj_Y(A0), D2                                    ; $000C
                move.w  Obj_X(A0), D3                                    ; $0008
                moveq   #$00, D0
                move.b  Obj_Width_2(A0), D0                              ; $0017
                ext.w   D0
                add.w   D0, D2
                move.b  Obj_Height_2(A0), D0                             ; $0016
                ext.w   D0
                sub.w   D0, D3
                eori.w  #$000F, D3
                lea     ($FFFFF76A).w, A4
                move.w  #$FFF0, A3
                move.w  #$0400, D6
                bsr     FindWall                               ; Offset_0x01977A
                move.w  (A7)+, D0
                bsr     Player_Angle                           ; Offset_0x019126
                tst.w   D1
                beq.s   Offset_0x01932C
                bpl.s   Offset_0x01932E
                cmpi.w  #$FFF2, D1
                blt.s   Offset_0x01932C
                sub.w   D1, Obj_X(A0)                                    ; $0008
Offset_0x01932C:
                rts
Offset_0x01932E:
                move.b  Obj_Speed_Y(A0), D0                              ; $0012
                bpl.s   Offset_0x019336
                neg.b   D0
Offset_0x019336:
                addq.b  #$04, D0
                cmpi.b  #$0E, D0
                bcs.s   Offset_0x019342
                move.b  #$0E, D0
Offset_0x019342:
                cmp.b   D0, D1
                bgt.s   Offset_0x01934C
Offset_0x019346:
                sub.w   D1, Obj_X(A0)                                    ; $0008
                rts
Offset_0x01934C:
                tst.b   Obj_Player_St_Convex(A0)                         ; $0038
                bne.s   Offset_0x019346
                bset    #$01, Obj_Status(A0)                             ; $0022
                bclr    #$05, Obj_Status(A0)                             ; $0022
                move.b  #$01, Obj_Ani_Flag(A0)                           ; $001D
                rts   
;===============================================================================
; Rotina para calcular a posição do jogador em rampas
; <<<-                    
;===============================================================================

;===============================================================================
; Rotina para testar em qual tile o objeto esta
; ->>>
;===============================================================================
Floor_Check_Tile:                                              ; Offset_0x019366
                move.w  D2, D0                                                  
                add.w   D0, D0                                                  
                andi.w  #$0F00, D0                                              
                move.w  D3, D1                                                  
                lsr.w   #$03, D1                                                
                move.w  D1, D4                                                  
                lsr.w   #$04, D1                                                
                andi.w  #$007F, D1                                              
                add.w   D1, D0                                                  
                moveq   #-$01, D1                                               
                clr.w   D1                                                      
                lea     (Level_Map_Buffer).w, A1                     ; $FFFF8000
                move.b  $00(A1, D0), D1                                         
                add.w   D1, D1                                                  
                move.w  Chunk_Mem_Address(PC, D1), D1          ; Offset_0x0193A0                         
                move.w  D2, D0                                                  
                andi.w  #$0070, D0                                              
                add.w   D0, D1                                                  
                andi.w  #$000E, D4                                              
                add.w   D4, D1                                                  
                move.l  D1, A1                                                  
                rts  
;-------------------------------------------------------------------------------
; Tabela contendo os endereços dos tiles 128x128 -> Ex: Tile 1 = $0080
; ->>>
;-------------------------------------------------------------------------------                     
Chunk_Mem_Address:                                             ; Offset_0x0193A0 
                dc.w    $0000, $0080, $0100, $0180, $0200, $0280, $0300, $0380
                dc.w    $0400, $0480, $0500, $0580, $0600, $0680, $0700, $0780
                dc.w    $0800, $0880, $0900, $0980, $0A00, $0A80, $0B00, $0B80
                dc.w    $0C00, $0C80, $0D00, $0D80, $0E00, $0E80, $0F00, $0F80
                dc.w    $1000, $1080, $1100, $1180, $1200, $1280, $1300, $1380
                dc.w    $1400, $1480, $1500, $1580, $1600, $1680, $1700, $1780
                dc.w    $1800, $1880, $1900, $1980, $1A00, $1A80, $1B00, $1B80
                dc.w    $1C00, $1C80, $1D00, $1D80, $1E00, $1E80, $1F00, $1F80
                dc.w    $2000, $2080, $2100, $2180, $2200, $2280, $2300, $2380
                dc.w    $2400, $2480, $2500, $2580, $2600, $2680, $2700, $2780
                dc.w    $2800, $2880, $2900, $2980, $2A00, $2A80, $2B00, $2B80
                dc.w    $2C00, $2C80, $2D00, $2D80, $2E00, $2E80, $2F00, $2F80
                dc.w    $3000, $3080, $3100, $3180, $3200, $3280, $3300, $3380
                dc.w    $3400, $3480, $3500, $3580, $3600, $3680, $3700, $3780
                dc.w    $3800, $3880, $3900, $3980, $3A00, $3A80, $3B00, $3B80
                dc.w    $3C00, $3C80, $3D00, $3D80, $3E00, $3E80, $3F00, $3F80
                dc.w    $4000, $4080, $4100, $4180, $4200, $4280, $4300, $4380
                dc.w    $4400, $4480, $4500, $4580, $4600, $4680, $4700, $4780
                dc.w    $4800, $4880, $4900, $4980, $4A00, $4A80, $4B00, $4B80
                dc.w    $4C00, $4C80, $4D00, $4D80, $4E00, $4E80, $4F00, $4F80
                dc.w    $5000, $5080, $5100, $5180, $5200, $5280, $5300, $5380
                dc.w    $5400, $5480, $5500, $5580, $5600, $5680, $5700, $5780
                dc.w    $5800, $5880, $5900, $5980, $5A00, $5A80, $5B00, $5B80
                dc.w    $5C00, $5C80, $5D00, $5D80, $5E00, $5E80, $5F00, $5F80
                dc.w    $6000, $6080, $6100, $6180, $6200, $6280, $6300, $6380
                dc.w    $6400, $6480, $6500, $6580, $6600, $6680, $6700, $6780
                dc.w    $6800, $6880, $6900, $6980, $6A00, $6A80, $6B00, $6B80
                dc.w    $6C00, $6C80, $6D00, $6D80, $6E00, $6E80, $6F00, $6F80
                dc.w    $7000, $7080, $7100, $7180, $7200, $7280, $7300, $7380
                dc.w    $7400, $7480, $7500, $7580, $7600, $7680, $7700, $7780
                dc.w    $7800, $7880, $7900, $7980, $7A00, $7A80, $7B00, $7B80
                dc.w    $7C00, $7C80, $7D00, $7D80, $7E00, $7E80, $7F00, $7F80
;-------------------------------------------------------------------------------
; Tabela contendo os endereços dos tiles 128x128 -> Ex: Tile 1 = $0080
; <<<-
;-------------------------------------------------------------------------------                     
                                                                                      
;===============================================================================
; Rotina para testar em qual tile o objeto esta
; <<<-
;===============================================================================

;===============================================================================
; Rotina para localizar o chão
; ->>>
;===============================================================================
FindFloor:                                                     ; Offset_0x0195A0
                bsr     Floor_Check_Tile                       ; Offset_0x019366                                         
                move.w  (A1), D0                                                
                move.w  D0, D4                                                  
                andi.w  #$03FF, D0                                              
                beq.s   Offset_0x0195B2                                         
                btst    D5, D4                                                  
                bne.s   Offset_0x0195C0                                         
Offset_0x0195B2:
                add.w   A3, D2                                                  
                bsr     FindFloor_2                            ; Offset_0x019646                                         
                sub.w   A3, D2                                                  
                addi.w  #$0010, D1                                              
                rts                                                             
Offset_0x0195C0:
                move.l  (Current_Colision_Pointer).w, A2             ; $FFFFF796
                add.w   D0, D0                                                  
                move.w  $00(A2, D0), D0                                         
                beq.s   Offset_0x0195B2                                         
                lea     (AngleMap), A2                         ; Offset_0x046FEA
                move.b  $00(A2, D0), (A4)                                       
                lsl.w   #$04, D0                                                
                move.w  D3, D1                                                  
                btst    #$0A, D4                                                
                beq.s   Offset_0x0195E4                                         
                not.w   D1                                                      
                neg.b   (A4)                                                    
Offset_0x0195E4:
                btst    #$0B, D4                                                
                beq.s   Offset_0x0195F4                                         
                addi.b  #$40, (A4)                                              
                neg.b   (A4)                                                    
                subi.b  #$40, (A4)                                              
Offset_0x0195F4:
                andi.w  #$000F, D1                                              
                add.w   D0, D1                                                  
                lea     (Colision_Array_1), A2                 ; Offset_0x0470EA
                move.b  $00(A2, D1), D0                                         
                ext.w   D0                                                      
                eor.w   D6, D4                                                  
                btst    #$0B, D4                                                
                beq.s   Offset_0x019610                                         
                neg.w   D0                                                      
Offset_0x019610:
                tst.w   D0                                                      
                beq.s   Offset_0x0195B2                                         
                bmi.s   Offset_0x01962C                                         
                cmpi.b  #$10, D0                                                
                beq.s   Offset_0x019638                                         
                move.w  D2, D1                                                  
                andi.w  #$000F, D1                                              
                add.w   D1, D0                                                  
                move.w  #$000F, D1                                              
                sub.w   D0, D1                                                  
                rts                                                             
Offset_0x01962C:
                move.w  D2, D1                                                  
                andi.w  #$000F, D1                                              
                add.w   D1, D0                                                  
                bpl     Offset_0x0195B2                                         
Offset_0x019638:
                sub.w   A3, D2                                                  
                bsr     FindFloor_2                            ; Offset_0x019646                                         
                add.w   A3, D2                                                  
                subi.w  #$0010, D1                                              
                rts         
;-------------------------------------------------------------------------------                                                                    
FindFloor_2:                                                   ; Offset_0x019646
                bsr     Floor_Check_Tile                       ; Offset_0x019366                                         
                move.w  (A1), D0                                                
                move.w  D0, D4                                                  
                andi.w  #$03FF, D0                                              
                beq.s   Offset_0x019658                                         
                btst    D5, D4                                                  
                bne.s   Offset_0x019666                                         
Offset_0x019658:
                move.w  #$000F, D1                                              
                move.w  D2, D0                                                  
                andi.w  #$000F, D0                                              
                sub.w   D0, D1                                                  
                rts                                                             
Offset_0x019666:
                move.l  (Current_Colision_Pointer).w, A2             ; $FFFFF796
                add.w   D0, D0                                                  
                move.w  $00(A2, D0), D0                                         
                beq.s   Offset_0x019658                                         
                lea     (AngleMap), A2                         ; Offset_0x046FEA
                move.b  $00(A2, D0), (A4)                                       
                lsl.w   #$04, D0                                                
                move.w  D3, D1                                                  
                btst    #$0A, D4                                                
                beq.s   Offset_0x01968A                                         
                not.w   D1                                                      
                neg.b   (A4)                                                    
Offset_0x01968A:
                btst    #$0B, D4                                                
                beq.s   Offset_0x01969A                                         
                addi.b  #$40, (A4)                                              
                neg.b   (A4)                                                    
                subi.b  #$40, (A4)                                              
Offset_0x01969A:
                andi.w  #$000F, D1                                              
                add.w   D0, D1                                                  
                lea     (Colision_Array_1), A2                 ; Offset_0x0470EA
                move.b  $00(A2, D1), D0                                         
                ext.w   D0                                                      
                eor.w   D6, D4                                                  
                btst    #$0B, D4                                                
                beq.s   Offset_0x0196B6                                         
                neg.w   D0                                                      
Offset_0x0196B6:
                tst.w   D0                                                      
                beq.s   Offset_0x019658                                         
                bmi.s   Offset_0x0196CC                                         
                move.w  D2, D1                                                  
                andi.w  #$000F, D1                                              
                add.w   D1, D0                                                  
                move.w  #$000F, D1                                              
                sub.w   D0, D1                                                  
                rts                                                             
Offset_0x0196CC:
                move.w  D2, D1                                                  
                andi.w  #$000F, D1                                              
                add.w   D1, D0                                                  
                bpl     Offset_0x019658                                         
                not.w   D1                                                      
                rts                                                             
;===============================================================================
; Rotina para localizar o chão
; <<<-
;===============================================================================

;===============================================================================
; Rotina para o objeto localizar o chão
; ->>>
;===============================================================================
Object_FindFloor:                                              ; Offset_0x0196DC
                bsr     Floor_Check_Tile                       ; Offset_0x019366
                move.w  (A1), D0                                                
                move.w  D0, D4                                                  
                andi.w  #$03FF, D0                                              
                beq.s   Offset_0x0196EE                                         
                btst    D5, D4                                                  
                bne.s   Offset_0x0196F4                                         
Offset_0x0196EE:
                move.w  #$0010, D1                                              
                rts                                                             
Offset_0x0196F4:
                move.l  (Current_Colision_Pointer).w, A2             ; $FFFFF796
                add.w   D0, D0                                                  
                move.w  $00(A2, D0), D0                                         
                beq.s   Offset_0x0196EE                                         
                lea     (AngleMap), A2                         ; Offset_0x046FEA
                move.b  $00(A2, D0), (A4)                                       
                lsl.w   #$04, D0                                                
                move.w  D3, D1                                                  
                btst    #$0A, D4                                                
                beq.s   Offset_0x019718                                         
                not.w   D1                                                      
                neg.b   (A4)                                                    
Offset_0x019718:
                btst    #$0B, D4                                                
                beq.s   Offset_0x019728                                         
                addi.b  #$40, (A4)                                              
                neg.b   (A4)                                                    
                subi.b  #$40, (A4)                                              
Offset_0x019728:
                andi.w  #$000F, D1                                              
                add.w   D0, D1                                                  
                lea     (Colision_Array_1), A2                 ; Offset_0x0470EA
                move.b  $00(A2, D1), D0                                         
                ext.w   D0                                                      
                eor.w   D6, D4                                                  
                btst    #$0B, D4                                                
                beq.s   Offset_0x019744                                         
                neg.w   D0                                                      
Offset_0x019744:
                tst.w   D0                                                      
                beq.s   Offset_0x0196EE                                         
                bmi.s   Offset_0x019760                                         
                cmpi.b  #$10, D0                                                
                beq.s   Offset_0x01976C                                         
                move.w  D2, D1                                                  
                andi.w  #$000F, D1                                              
                add.w   D1, D0                                                  
                move.w  #$000F, D1                                              
                sub.w   D0, D1                                                  
                rts                                                             
Offset_0x019760:
                move.w  D2, D1                                                  
                andi.w  #$000F, D1                                              
                add.w   D1, D0                                                  
                bpl     Offset_0x0196EE                                         
Offset_0x01976C:
                sub.w   A3, D2                                                  
                bsr     FindFloor_2                            ; Offset_0x019646                                         
                add.w   A3, D2                                                  
                subi.w  #$0010, D1                                              
                rts                                                             
;===============================================================================
; Rotina para o objeto localizar o chão
; <<<-
;===============================================================================

;===============================================================================
; Rotina para localizar a parede
; ->>>
;===============================================================================
FindWall:                                                      ; Offset_0x01977A
                bsr     Floor_Check_Tile                       ; Offset_0x019366
                move.w  (A1), D0                                                
                move.w  D0, D4                                                  
                andi.w  #$03FF, D0                                              
                beq.s   Offset_0x01978C                                         
                btst    D5, D4                                                  
                bne.s   Offset_0x01979A                                         
Offset_0x01978C:
                add.w   A3, D3                                                  
                bsr     FindWall_2                             ; Offset_0x019820                                         
                sub.w   A3, D3                                                  
                addi.w  #$0010, D1                                              
                rts                                                             
Offset_0x01979A:
                move.l  (Current_Colision_Pointer).w, A2             ; $FFFFF796
                add.w   D0, D0                                                  
                move.w  $00(A2, D0), D0                                         
                beq.s   Offset_0x01978C                                         
                lea     (AngleMap), A2                         ; Offset_0x046FEA
                move.b  $00(A2, D0), (A4)                                       
                lsl.w   #$04, D0                                                
                move.w  D2, D1                                                  
                btst    #$0B, D4                                                
                beq.s   Offset_0x0197C6                                         
                not.w   D1                                                      
                addi.b  #$40, (A4)                                              
                neg.b   (A4)                                                    
                subi.b  #$40, (A4)                                              
Offset_0x0197C6:
                btst    #$0A, D4                                                
                beq.s   Offset_0x0197CE                                         
                neg.b   (A4)                                                    
Offset_0x0197CE:
                andi.w  #$000F, D1                                              
                add.w   D0, D1                                                  
                lea     (Colision_Array_2), A2                 ; Offset_0x0480EA
                move.b  $00(A2, D1), D0                                         
                ext.w   D0                                                      
                eor.w   D6, D4                                                  
                btst    #$0A, D4                                                
                beq.s   Offset_0x0197EA                                         
                neg.w   D0                                                      
Offset_0x0197EA:
                tst.w   D0                                                      
                beq.s   Offset_0x01978C                                         
                bmi.s   Offset_0x019806                                         
                cmpi.b  #$10, D0                                                
                beq.s   Offset_0x019812                                         
                move.w  D3, D1                                                  
                andi.w  #$000F, D1                                              
                add.w   D1, D0                                                  
                move.w  #$000F, D1                                              
                sub.w   D0, D1                                                  
                rts                                                             
Offset_0x019806:
                move.w  D3, D1                                                  
                andi.w  #$000F, D1                                              
                add.w   D1, D0                                                  
                bpl     Offset_0x01978C                                         
Offset_0x019812:
                sub.w   A3, D3                                                  
                bsr     FindWall_2                             ; Offset_0x019820                                         
                add.w   A3, D3                                                  
                subi.w  #$0010, D1                                              
                rts      
;-------------------------------------------------------------------------------                                                                       
FindWall_2:                                                    ; Offset_0x019820
                bsr     Floor_Check_Tile                       ; Offset_0x019366
                move.w  (A1), D0                                                
                move.w  D0, D4                                                  
                andi.w  #$03FF, D0                                              
                beq.s   Offset_0x019832                                         
                btst    D5, D4                                                  
                bne.s   Offset_0x019840                                         
Offset_0x019832:
                move.w  #$000F, D1                                              
                move.w  D3, D0                                                  
                andi.w  #$000F, D0                                              
                sub.w   D0, D1                                                  
                rts                                                             
Offset_0x019840:
                move.l  (Current_Colision_Pointer).w, A2             ; $FFFFF796
                add.w   D0, D0                                                  
                move.w  $00(A2, D0), D0                                         
                beq.s   Offset_0x019832                                         
                lea     (AngleMap), A2                         ; Offset_0x046FEA
                move.b  $00(A2, D0), (A4)                                       
                lsl.w   #$04, D0                                                
                move.w  D2, D1                                                  
                btst    #$0B, D4                                                
                beq.s   Offset_0x01986C                                         
                not.w   D1                                                      
                addi.b  #$40, (A4)                                              
                neg.b   (A4)                                                    
                subi.b  #$40, (A4)                                              
Offset_0x01986C:
                btst    #$0A, D4                                                
                beq.s   Offset_0x019874                                         
                neg.b   (A4)                                                    
Offset_0x019874:
                andi.w  #$000F, D1                                              
                add.w   D0, D1                                                  
                lea     (Colision_Array_2), A2                 ; Offset_0x0480EA
                move.b  $00(A2, D1), D0                                         
                ext.w   D0                                                      
                eor.w   D6, D4                                                  
                btst    #$0A, D4                                                
                beq.s   Offset_0x019890                                         
                neg.w   D0                                                      
Offset_0x019890:
                tst.w   D0                                                      
                beq.s   Offset_0x019832                                         
                bmi.s   Offset_0x0198A6                                         
                move.w  D3, D1                                                  
                andi.w  #$000F, D1                                              
                add.w   D1, D0                                                  
                move.w  #$000F, D1                                              
                sub.w   D0, D1                                                  
                rts                                                             
Offset_0x0198A6:
                move.w  D3, D1                                                  
                andi.w  #$000F, D1                                              
                add.w   D1, D0                                                  
                bpl     Offset_0x019832                                         
                not.w   D1                                                      
                rts                                                             
;===============================================================================
; Rotina para localizar a parede
; <<<-
;===============================================================================

;=============================================================================== 
; Rotina não usada, algo como executar um log das colisões
; ->>>             (Talvez usada durante o desenvolvimento)          
;===============================================================================    
FloorLog_Unk:                                                  ; Offset_0x0198B6
                rts              ; Com este rts a rotina abaixo ficou desativada   
; Offset_0x0198B8:
                lea     (Colision_Array_1), A1                 ; Offset_0x0470EA
                lea     (Colision_Array_1), A2                 ; Offset_0x0470EA
                move.w  #$00FF, D3                                              
Offset_0x0198C8:
                moveq   #$10, D5                                                
                move.w  #$000F, D2                                              
Offset_0x0198CE:
                moveq   #$00, D4                                                
                move.w  #$000F, D1                                              
Offset_0x0198D4:
                move.w  (A1)+, D0                                               
                lsr.l   D5, D0                                                  
                addx.w  D4, D4                                                  
                dbra    D1, Offset_0x0198D4                                     
                move.w  D4, (A2)+                                               
                suba.w  #$0020, A1                                              
                subq.w  #$01, D5                                                
                dbra    D2, Offset_0x0198CE                                     
                adda.w  #$0020, A1                                              
                dbra    D3, Offset_0x0198C8                                     
                lea     (Colision_Array_1), A1                 ; Offset_0x0470EA
                lea     (Colision_Array_2), A2                 ; Offset_0x0480EA
                bsr.s   Offset_0x01990C                                         
                lea     (Colision_Array_1), A1                 ; Offset_0x0470EA
                lea     (Colision_Array_1), A2                 ; Offset_0x0470EA
Offset_0x01990C:
                move.w  #$0FFF, D3                                              
Offset_0x019910:
                moveq   #$00, D2                                                
                move.w  #$000F, D1                                              
                move.w  (A1)+, D0                                               
                beq.s   Offset_0x01993E                                         
                bmi.s   Offset_0x019928                                         
Offset_0x01991C:
                lsr.w   #$01, D0                                                
                bcc.s   Offset_0x019922                                         
                addq.b  #$01, D2                                                
Offset_0x019922:
                dbra    D1, Offset_0x01991C                                     
                bra.s   Offset_0x019940                                         
Offset_0x019928:
                cmpi.w  #$FFFF, D0                                              
                beq.s   Offset_0x01993A                                         
Offset_0x01992E:
                lsl.w   #$01, D0                                                
                bcc.s   Offset_0x019934                                         
                subq.b  #$01, D2                                                
Offset_0x019934:
                dbra    D1, Offset_0x01992E                                     
                bra.s   Offset_0x019940                                         
Offset_0x01993A:
                move.w  #$0010, D0                                              
Offset_0x01993E:
                move.w  D0, D2                                                  
Offset_0x019940:
                move.b  D2, (A2)+                                               
                dbra    D3, Offset_0x019910                                     
                rts                                                             
;=============================================================================== 
; Rotina não usada, algo como executar um log das  colisões
; <<<-             (Talvez usada durante o desenvolvimento)          
;===============================================================================  
     
;===============================================================================
; Rotina para calcular o quanto de espaço há na frente do jogador
; ->>>                    
;===============================================================================
Player_WalkSpeed:                                              ; Offset_0x019948
                move.l  #Primary_Colision_Data_Buffer, (Current_Colision_Pointer).w ; $FFFFD000, $FFFFF796
                cmpi.b  #$0C, Obj_Player_Top_Solid(A0)                   ; $003E                                     
                beq.s   Offset_0x019960                                         
                move.l  #Secundary_Colision_Data_Buffer, (Current_Colision_Pointer).w ; $FFFFD600, $FFFFF796
Offset_0x019960:
                move.b  Obj_Player_LRB_Solid(A0), D5                     ; $003F
                move.l  Obj_X(A0), D3                                    ; $0008
                move.l  Obj_Y(A0), D2                                    ; $000C
                move.w  Obj_Speed(A0), D1                                ; $0010                                          
                ext.l   D1                                                      
                asl.l   #$08, D1                                                
                add.l   D1, D3                                                  
                move.w  $0012(A0), D1                                           
                ext.l   D1                                                      
                asl.l   #$08, D1                                                
                add.l   D1, D2                                                  
                swap.w  D2                                                      
                swap.w  D3                                                      
                move.b  D0, ($FFFFF768).w                                       
                move.b  D0, ($FFFFF76A).w                                       
                move.b  D0, D1                                                  
                addi.b  #$20, D0                                                
                bpl.s   Offset_0x0199A0                                         
                move.b  D1, D0                                                  
                bpl.s   Offset_0x01999A                                         
                subq.b  #$01, D0                                                
Offset_0x01999A:
                addi.b  #$20, D0                                                
                bra.s   Offset_0x0199AA                                         
Offset_0x0199A0:
                move.b  D1, D0                                                  
                bpl.s   Offset_0x0199A6                                         
                addq.b  #$01, D0                                                
Offset_0x0199A6:
                addi.b  #$1F, D0                                                
Offset_0x0199AA:
                andi.b  #$C0, D0                                                
                beq     Offset_0x019AAA                                         
                cmpi.b  #$80, D0                                                
                beq     Offset_0x019D18                                         
                andi.b  #$38, D1                                                
                bne.s   Offset_0x0199C2                                         
                addq.w  #$08, D2                                                
Offset_0x0199C2:
                cmpi.b  #$40, D0                                                
                beq     Player_HitWall_D3                      ; Offset_0x019DE0                                         
                bra     Offset_0x019C5E                                         
;===============================================================================
; Rotina para calcular o quanto de espaço há na frente do jogador
; <<<-                    
;===============================================================================

;===============================================================================
; Rotina para calcular o quanto de espaço há acima do jogador
; ->>>                    
;===============================================================================
CalcRoomOverHead:                                              ; Offset_0x0199CE
                move.l  #Primary_Colision_Data_Buffer, (Current_Colision_Pointer).w ; $FFFFD000, $FFFFF796
                cmpi.b  #$0C, Obj_Player_Top_Solid(A0)                   ; $003E
                beq.s   Offset_0x0199E6
                move.l  #Secundary_Colision_Data_Buffer, (Current_Colision_Pointer).w ; $FFFFD600, $FFFFF796
Offset_0x0199E6:
                move.b  Obj_Player_LRB_Solid(A0), D5                     ; $003F
                move.b  D0, ($FFFFF768).w
                move.b  D0, ($FFFFF76A).w
                addi.b  #$20, D0
                andi.b  #$C0, D0
                cmpi.b  #$40, D0
                beq     Player_DontRunOnWallsL                 ; Offset_0x019D70
                cmpi.b  #$80, D0
                beq     Player_DontRunOnWalls                  ; Offset_0x019CA8
                cmpi.b  #$C0, D0
                beq     Player_DontRunOnWallsR                 ; Offset_0x019BF6
Offset_0x019A12: ; Referenciado pelos jogadores                
                move.l  #Primary_Colision_Data_Buffer, (Current_Colision_Pointer).w ; $FFFFD000, $FFFFF796
                cmpi.b  #$0C, Obj_Player_Top_Solid(A0)                   ; $003E
                beq.s   Offset_0x019A2A
                move.l  #Secundary_Colision_Data_Buffer, (Current_Colision_Pointer).w ; $FFFFD600, $FFFFF796
Offset_0x019A2A:
                move.b  Obj_Player_Top_Solid(A0), D5                     ; $003E
                move.w  Obj_Y(A0), D2                                    ; $000C
                move.w  Obj_X(A0), D3                                    ; $0008
                moveq   #$00, D0
                move.b  Obj_Height_2(A0), D0                             ; $0016
                ext.w   D0
                add.w   D0, D2
                move.b  Obj_Width_2(A0), D0                              ; $0017
                ext.w   D0
                add.w   D0, D3
                lea     ($FFFFF768).w, A4
                move.w  #$0010, A3
                move.w  #$0000, D6
                bsr     FindFloor                              ; Offset_0x0195A0
                move.w  D1, -(A7)
                move.w  Obj_Y(A0), D2                                    ; $000C
                move.w  Obj_X(A0), D3                                    ; $0008
                moveq   #$00, D0
                move.b  Obj_Height_2(A0), D0                             ; $0016
                ext.w   D0
                add.w   D0, D2
                move.b  Obj_Width_2(A0), D0                              ; $0017
                ext.w   D0
                sub.w   D0, D3
                lea     ($FFFFF76A).w, A4
                move.w  #$0010, A3
                move.w  #$0000, D6
                bsr     FindFloor                              ; Offset_0x0195A0
                move.w  (A7)+, D0
                move.b  #$00, D2
Offset_0x019A8A:                
                move.b  ($FFFFF76A).w, D3
                cmp.w   D0, D1
                ble.s   Offset_0x019A98
                move.b  ($FFFFF768).w, D3
                exg.l   D0, D1
Offset_0x019A98:
                btst    #$00, D3
                beq.s   Offset_0x019AA0
                move.b  D2, D3
Offset_0x019AA0:
                rts
;===============================================================================
; Rotina para calcular o quanto de espaço há acima do jogador
; <<<-                    
;===============================================================================
; Offset_0x019AA2:
                move.w  Obj_Y(A0), D2                                    ; $000C
                move.w  Obj_X(A0), D3                                    ; $0008
Offset_0x019AAA:                
                addi.w  #$000A, D2
                lea     ($FFFFF768).w, A4
                move.w  #$0010, A3
                move.w  #$0000, D6
                bsr     FindFloor                              ; Offset_0x0195A0
                move.b  #$00, D2
Offset_0x019AC2:                
                move.b  ($FFFFF768).w, D3
                btst    #$00, D3
                beq.s   Offset_0x019ACE
                move.b  D2, D3
Offset_0x019ACE:
                rts                                                           
;===============================================================================
; Rotina para detectar se o jogador tocou o chão
; ->>> 
;===============================================================================
Player_HitFloor:                                               ; Offset_0x019AD0
                move.w  Obj_X(A0), D3                                    ; $0008
Player_HitFloor_D3:                                            ; Offset_0x019AD4                
                move.w  Obj_Y(A0), D2                                    ; $000C
                moveq   #$00, D0
                move.b  Obj_Height_2(A0), D0                             ; $0016
                ext.w   D0
                add.w   D0, D2
                move.l  #Primary_Colision_Data_Buffer, (Current_Colision_Pointer).w ; $FFFFD000, $FFFFF796
                cmpi.b  #$0C, Obj_Player_Top_Solid(A0)                   ; $003E
                beq.s   Offset_0x019AFA
                move.l  #Secundary_Colision_Data_Buffer, (Current_Colision_Pointer).w ; $FFFFD600, $FFFFF796
Offset_0x019AFA:
                lea     ($FFFFF768).w, A4
                move.b  #$00, (A4)
                move.w  #$0010, A3
                move.w  #$0000, D6
                move.b  Obj_Player_Top_Solid(A0), D5                     ; $003E
                bsr     FindFloor                              ; Offset_0x0195A0
                move.b  ($FFFFF768).w, D3
                btst    #$00, D3
                beq.s   Offset_0x019B20
                move.b  #$00, D3
Offset_0x019B20:
                rts
;-------------------------------------------------------------------------------               
Player_HitFloor_A1:                                            ; Offset_0x019B22
                move.w  Obj_X(A1), D3                                    ; $0008              
                move.w  Obj_Y(A1), D2                                    ; $000C
                moveq   #$00, D0
                move.b  Obj_Height_2(A1), D0                             ; $0016
                ext.w   D0
                add.w   D0, D2  
                move.l  #Primary_Colision_Data_Buffer, (Current_Colision_Pointer).w ; $FFFFD000, $FFFFF796
                cmpi.b  #$0C, Obj_Player_Top_Solid(A1)                   ; $003E
                beq.s   Offset_0x019B4C
                move.l  #Secundary_Colision_Data_Buffer, (Current_Colision_Pointer).w ; $FFFFD600, $FFFFF796
Offset_0x019B4C:
                lea     ($FFFFF768).w, A4
                move.b  #$00, (A4)
                move.w  #$0010, A3
                move.w  #$0000, D6
                move.b  Obj_Player_Top_Solid(A1), D5                     ; $003E
                bsr     FindFloor                              ; Offset_0x0195A0
                move.b  ($FFFFF768).w, D3
                btst    #$00, D3
                beq.s   Offset_0x019B72
                move.b  #$00, D3
Offset_0x019B72:
                rts      
;===============================================================================
; Rotina para detectar se o jogador tocou o chão
; <<<- 
;===============================================================================

;===============================================================================
; Rotina para detectar se o objeto tocou o chão
; ->>> 
;===============================================================================
ObjHitFloor:                                                   ; Offset_0x019B74
                move.w  Obj_X(A0), D3                                    ; $0008
                move.w  Obj_Y(A0), D2                                    ; $000C
                move.b  Obj_Height_2(A0), D0                             ; $0016
                ext.w   D0
                add.w   D0, D2
                lea     ($FFFFF768).w, A4
                move.b  #$00, (A4)
                move.w  #$0010, A3
                move.w  #$0000, D6
                moveq   #$0C, D5
                bsr     FindFloor                              ; Offset_0x0195A0
                move.b  ($FFFFF768).w, D3
                btst    #$00, D3
                beq.s   Offset_0x019BA8
                move.b  #$00, D3
Offset_0x019BA8:
                rts    
;===============================================================================
; Rotina para detectar se o objeto tocou o chão
; <<<- 
;===============================================================================

;===============================================================================
; Rotina para detectar se o objeto bola de fogo tocou o chão
; ->>> 
;===============================================================================
Fire_FindFloor:                                                ; Offset_0x019BAA
                move.w  Obj_X(A1), D3                                    ; $0008
                move.w  Obj_Y(A1), D2                                    ; $000C
                move.b  Obj_Height_2(A1), D0                             ; $0016
                ext.w   D0
                add.w   D0, D2
                lea     ($FFFFF768).w, A4
                move.b  #$00, (A4)
                move.w  #$0010, A3
                move.w  #$0000, D6
                moveq   #$0C, D5
                bra     FindFloor                              ; Offset_0x0195A0
;===============================================================================
; Rotina para detectar se o objeto bola de fogo tocou o chão
; <<<- 
;===============================================================================

;===============================================================================
; Rotina para detectar se o objeto anel tocou o chão
; ->>> 
;===============================================================================
Ring_FindFloor:                                                ; Offset_0x019BD0
                move.w  Obj_X(A0), D3                                    ; $0008
                move.w  Obj_Y(A0), D2                                    ; $000C
                move.b  Obj_Height_2(A0), D0                             ; $0016
                ext.w   D0
                add.w   D0, D2
                lea     ($FFFFF768).w, A4
                move.b  #$00, (A4)
                move.w  #$0010, A3
                move.w  #$0000, D6
                moveq   #$0C, D5
                bra     Object_FindFloor                       ; Offset_0x0196DC
;===============================================================================
; Rotina para detectar se o objeto anel tocou o chão
; <<<- 
;===============================================================================     
Player_DontRunOnWallsR:                                        ; Offset_0x019BF6
                move.w  Obj_Y(A0), D2                                    ; $000C
                move.w  Obj_X(A0), D3                                    ; $0008
                moveq   #$00, D0
                move.b  Obj_Width_2(A0), D0                              ; $0017
                ext.w   D0
                sub.w   D0, D2
                move.b  Obj_Height_2(A0), D0                             ; $0016
                ext.w   D0
                add.w   D0, D3
                lea     ($FFFFF768).w, A4
                move.w  #$0010, A3
                move.w  #$0000, D6
                bsr     FindWall                               ; Offset_0x01977A
                move.w  D1, -(A7)
                move.w  Obj_Y(A0), D2                                    ; $000C
                move.w  Obj_X(A0), D3                                    ; $0008
                moveq   #$00, D0
                move.b  Obj_Width_2(A0), D0                              ; $0017
                ext.w   D0
                add.w   D0, D2
                move.b  Obj_Height_2(A0), D0                             ; $0016
                ext.w   D0
                add.w   D0, D3
                lea     ($FFFFF76A).w, A4
                move.w  #$0010, A3
                move.w  #$0000, D6
                bsr     FindWall                               ; Offset_0x01977A
                move.w  (A7)+, D0
                move.b  #$C0, D2
                bra     Offset_0x019A8A                                     
;-------------------------------------------------------------------------------  
Offset_0x019C56:
                move.w  Obj_Y(A0), D2                                    ; $000C
                move.w  Obj_X(A0), D3                                    ; $0008
Offset_0x019C5E:                
                addi.w  #$000A, D3
                lea     ($FFFFF768).w, A4
                move.w  #$0010, A3
                move.w  #$0000, D6
                bsr     FindWall                               ; Offset_0x01977A
                move.b  #$C0, D2
                bra     Offset_0x019AC2    
;===============================================================================
; Rotina para detectar se o objeto tocou a parede a direita
; ->>> 
;===============================================================================                   
Object_HitWall_Right:                                          ; Offset_0x019C7A
                add.w   Obj_X(A0), D3                                    ; $0008
                move.w  Obj_Y(A0), D2                                    ; $000C
                lea     ($FFFFF768).w, A4
                move.b  #$00, (A4)
                move.w  #$0010, A3
                move.w  #$0000, D6
                moveq   #$0D, D5
                bsr     FindWall                               ; Offset_0x01977A
                move.b  ($FFFFF768).w, D3
                btst    #$00, D3
                beq.s   Exit_Object_HitWall_Right              ; Offset_0x019CA6
                move.b  #$C0, D3
Exit_Object_HitWall_Right:                                     ; Offset_0x019CA6
                rts
;===============================================================================
; Rotina para detectar se o objeto tocou a parede a direita
; <<<- 
;===============================================================================                 
Player_DontRunOnWalls:                                         ; Offset_0x019CA8
                move.w  Obj_Y(A0), D2                                    ; $000C
                move.w  Obj_X(A0), D3                                    ; $0008
                moveq   #$00, D0
                move.b  Obj_Height_2(A0), D0                             ; $0016
                ext.w   D0
                sub.w   D0, D2
                eori.w  #$000F, D2
                move.b  Obj_Width_2(A0), D0                              ; $0017
                ext.w   D0
                add.w   D0, D3
                lea     ($FFFFF768).w, A4
                move.w  #$FFF0, A3
                move.w  #$0800, D6
                bsr     FindFloor                              ; Offset_0x0195A0
                move.w  D1, -(A7)
                move.w  Obj_Y(A0), D2                                    ; $000C
                move.w  Obj_X(A0), D3                                    ; $0008
                moveq   #$00, D0
                move.b  Obj_Height_2(A0), D0                             ; $0016
                ext.w   D0
                sub.w   D0, D2
                eori.w  #$000F, D2
                move.b  Obj_Width_2(A0), D0                              ; $0017
                ext.w   D0
                sub.w   D0, D3
                lea     ($FFFFF76A).w, A4
                move.w  #$FFF0, A3
                move.w  #$0800, D6
                bsr     FindFloor                              ; Offset_0x0195A0
                move.w  (A7)+, D0
                move.b  #$80, D2
                bra     Offset_0x019A8A                                                      
;-------------------------------------------------------------------------------
; Offset_0x019D10:
                move.w  Obj_Y(A0), D2                                    ; $000C
                move.w  Obj_X(A0), D3  
Offset_0x019D18:                                                  ; $0008
                subi.w  #$000A, D2
                eori.w  #$000F, D2
                lea     ($FFFFF768).w, A4
                move.w  #$FFF0, A3
                move.w  #$0800, D6
                bsr     FindFloor                              ; Offset_0x0195A0
                move.b  #$80, D2
                bra     Offset_0x019AC2    
;===============================================================================
; Rotina para detectar se o objeto tocou o teto
; ->>> 
;===============================================================================  
Object_HitCeiling:                                             ; Offset_0x019D38
                move.w  Obj_Y(A0), D2                                    ; $000C
                move.w  Obj_X(A0), D3                                    ; $0008
                moveq   #$00, D0
                move.b  Obj_Height_2(A0), D0                             ; $0016
                ext.w   D0
                sub.w   D0, D2
                eori.w  #$000F, D2
                lea     ($FFFFF768).w, A4
                move.w  #$FFF0, A3
                move.w  #$0800, D6
                moveq   #$0D, D5
                bsr     FindFloor                              ; Offset_0x0195A0
                move.b  ($FFFFF768).w, D3
                btst    #$00, D3
                beq.s   Offset_0x019D6E
                move.b  #$80, D3
Offset_0x019D6E:
                rts
;===============================================================================
; Rotina para detectar se o objeto tocou o teto
; <<<- 
;===============================================================================                  
Player_DontRunOnWallsL:                                        ; Offset_0x019D70
                move.w  Obj_Y(A0), D2                                    ; $000C
                move.w  Obj_X(A0), D3                                    ; $0008
                moveq   #$00, D0
                move.b  Obj_Width_2(A0), D0                              ; $0017
                ext.w   D0
                sub.w   D0, D2
                move.b  Obj_Height_2(A0), D0                             ; $0016
                ext.w   D0
                sub.w   D0, D3
                eori.w  #$000F, D3
                lea     ($FFFFF768).w, A4
                move.w  #$FFF0, A3
                move.w  #$0400, D6
                bsr     FindWall                               ; Offset_0x01977A
                move.w  D1, -(A7)
                move.w  Obj_Y(A0), D2                                    ; $000C
                move.w  Obj_X(A0), D3                                    ; $0008
                moveq   #$00, D0
                move.b  Obj_Width_2(A0), D0                              ; $0017
                ext.w   D0
                add.w   D0, D2
                move.b  Obj_Height_2(A0), D0                             ; $0016
                ext.w   D0
                sub.w   D0, D3
                eori.w  #$000F, D3
                lea     ($FFFFF76A).w, A4
                move.w  #$FFF0, A3
                move.w  #$0400, D6
                bsr     FindWall                               ; Offset_0x01977A
                move.w  (A7)+, D0
                move.b  #$40, D2
                bra     Offset_0x019A8A
;===============================================================================
; Rotina para detectar se o jogador tocou a parede
; ->>> 
;=============================================================================== 
Player_HitWall:                                                ; Offset_0x019DD8
                move.w  Obj_Y(A0), D2                                    ; $000C
                move.w  Obj_X(A0), D3                                    ; $0008
Player_HitWall_D3:                                             ; Offset_0x019DE0
                subi.w  #$000A, D3
                eori.w  #$000F, D3
                lea     ($FFFFF768).w, A4
                move.w  #$FFF0, A3
                move.w  #$0400, D6
                bsr     FindWall                               ; Offset_0x01977A
                move.b  #$40, D2
                bra     Offset_0x019AC2   
;===============================================================================
; Rotina para detectar se o jogador tocou a parede
; <<<- 
;===============================================================================  

;===============================================================================
; Rotina para detectar se o objeto tocou a parede a esquerda
; ->>> 
;===============================================================================
Object_HitWall_Left:                                           ; Offset_0x019E00
                add.w   Obj_X(A0), D3                                    ; $0008
                move.w  Obj_Y(A0), D2                                    ; $000C
                lea     ($FFFFF768).w, A4
                move.b  #$00, (A4)
                move.w  #$FFF0, A3
                move.w  #$0400, D6
                moveq   #$0D, D5
                bsr     FindWall                               ; Offset_0x01977A
                move.b  ($FFFFF768).w, D3
                btst    #$00, D3
                beq.s   Exit_Object_HitWall_Left               ; Offset_0x019E2C
                move.b  #$40, D3
Exit_Object_HitWall_Left:                                      ; Offset_0x019E2C
                rts                                                  
;===============================================================================
; Rotina para detectar se o objeto tocou a parede a esquerda
; <<<- 
;===============================================================================
                nop
;------------------------------------------------------------------------------- 
Obj_0x79_Lamp_Post:                                            ; Offset_0x019E30
                include 'data\objects\obj_0x79.asm' 
                nop
Obj_0x7D_Hidden_Bonus:                                         ; Offset_0x01A0D8
                include 'data\objects\obj_0x7D.asm' 
                nop
Obj_0x44_Red_Ball_Bumper:                                      ; Offset_0x01A1DC
                include 'data\objects\obj_0x44.asm' 
;-------------------------------------------------------------------------------
Jmp_00_To_MarkObjGone:                                         ; Offset_0x01A33C
                jmp     (MarkObjGone)
Jmp_00_To_AnimateSprite:                                       ; Offset_0x01A342
                jmp     (AnimateSprite)                        ; Offset_0x01212E  
;-------------------------------------------------------------------------------
Obj_0x24_Oxygen_Bubbles:                                       ; Offset_0x01A348 
                include 'data\objects\obj_0x24.asm'                
;-------------------------------------------------------------------------------  
Sonic_Underwater_Mappings:                                     ; Offset_0x01A678
                dc.w    Offset_0x01A6BC-Sonic_Underwater_Mappings
                dc.w    Offset_0x01A6C6-Sonic_Underwater_Mappings
                dc.w    Offset_0x01A6C6-Sonic_Underwater_Mappings
                dc.w    Offset_0x01A6D0-Sonic_Underwater_Mappings
                dc.w    Offset_0x01A6DA-Sonic_Underwater_Mappings
                dc.w    Offset_0x01A6E4-Sonic_Underwater_Mappings
                dc.w    Offset_0x01A6EE-Sonic_Underwater_Mappings
                dc.w    Offset_0x01A6F8-Sonic_Underwater_Mappings
                dc.w    Offset_0x01A71A-Sonic_Underwater_Mappings
                dc.w    Offset_0x01A71A-Sonic_Underwater_Mappings
                dc.w    Offset_0x01A71A-Sonic_Underwater_Mappings
                dc.w    Offset_0x01A71A-Sonic_Underwater_Mappings
                dc.w    Offset_0x01A71A-Sonic_Underwater_Mappings
                dc.w    Offset_0x01A71A-Sonic_Underwater_Mappings
                dc.w    Offset_0x01A724-Sonic_Underwater_Mappings
                dc.w    Offset_0x01A72E-Sonic_Underwater_Mappings
                dc.w    Offset_0x01A738-Sonic_Underwater_Mappings
;-------------------------------------------------------------------------------
Miles_Underwater_Mappings:                                     ; Offset_0x01A69A
                dc.w    Offset_0x01A6BC-Miles_Underwater_Mappings
                dc.w    Offset_0x01A6C6-Miles_Underwater_Mappings
                dc.w    Offset_0x01A6C6-Miles_Underwater_Mappings
                dc.w    Offset_0x01A6D0-Miles_Underwater_Mappings
                dc.w    Offset_0x01A6DA-Miles_Underwater_Mappings
                dc.w    Offset_0x01A6E4-Miles_Underwater_Mappings
                dc.w    Offset_0x01A6EE-Miles_Underwater_Mappings
                dc.w    Offset_0x01A6F8-Miles_Underwater_Mappings
                dc.w    Offset_0x01A73A-Miles_Underwater_Mappings
                dc.w    Offset_0x01A73A-Miles_Underwater_Mappings
                dc.w    Offset_0x01A73A-Miles_Underwater_Mappings
                dc.w    Offset_0x01A73A-Miles_Underwater_Mappings
                dc.w    Offset_0x01A73A-Miles_Underwater_Mappings
                dc.w    Offset_0x01A73A-Miles_Underwater_Mappings
                dc.w    Offset_0x01A724-Miles_Underwater_Mappings
                dc.w    Offset_0x01A72E-Miles_Underwater_Mappings
                dc.w    Offset_0x01A738-Miles_Underwater_Mappings
Offset_0x01A6BC:
                dc.w    $0001
                dc.l    $FC00008D, $0046FFFC
Offset_0x01A6C6:
                dc.w    $0001
                dc.l    $FC00008E, $0048FFFC
Offset_0x01A6D0:
                dc.w    $0001
                dc.l    $F805008F, $0049FFF8
Offset_0x01A6DA:
                dc.w    $0001
                dc.l    $F8050093, $004FFFF8
Offset_0x01A6E4:
                dc.w    $0001
                dc.l    $F40A001C, $000EFFF4
Offset_0x01A6EE:
                dc.w    $0001
                dc.l    $F00F0008, $0004FFF0
Offset_0x01A6F8:
                dc.w    $0004
                dc.l    $F0050018, $000CFFF0
                dc.l    $F0050818, $080C0000
                dc.l    $00051018, $100CFFF0
                dc.l    $00051818, $180C0000
Offset_0x01A71A:
                dc.w    $0001
                dc.l    $F4061F41, $1BA0FFF8
Offset_0x01A724:
                dc.w    $0001
                dc.l    $F8050000, $0000FFF8
Offset_0x01A72E:
                dc.w    $0001
                dc.l    $F8050004, $0002FFF8       
Offset_0x01A738:
                dc.w    $0000
Offset_0x01A73A:
                dc.w    $0001
                dc.l    $F4061F31, $1B98FFF8                
;------------------------------------------------------------------------------- 
Jmp_01_To_DisplaySprite:                                       ; Offset_0x01A744
                jmp     (DisplaySprite)                        ; Offset_0x0120DE
Jmp_01_To_DeleteObject:                                        ; Offset_0x01A74A
                jmp     (DeleteObject)                         ; Offset_0x0120D0
Jmp_01_To_SpeedToPos:                                          ; Offset_0x01A750
                jmp     (SpeedToPos)                           ; Offset_0x011F96
                dc.w    $0000
;-------------------------------------------------------------------------------                 
Obj_0x03_Layer_Switch:                                         ; Offset_0x01A758  
                include 'data\objects\obj_0x03.asm'   
;-------------------------------------------------------------------------------                    
Jmp_00_To_MarkObjGone_3:                                       ; Offset_0x01AB38
                jmp     (MarkObjGone_3)                        ; Offset_0x012028
                dc.w    $0000
;-------------------------------------------------------------------------------                 
Obj_0x0B_Open_Close_Platform:                                  ; Offset_0x01AB40
                include 'data\objects\obj_0x0B.asm'  
;-------------------------------------------------------------------------------
                nop
Jmp_01_To_MarkObjGone:                                         ; Offset_0x01AC90
                jmp     (MarkObjGone)                          ; Offset_0x011FBC
Jmp_00_To_ModifySpriteAttr_2P:                                 ; Offset_0x01AC96
                jmp     (ModifySpriteAttr_2P)                  ; Offset_0x01298E                 
;------------------------------------------------------------------------------- 
Obj_0x0C_Unk_Platform:                                         ; Offset_0x01AC9C
                include 'data\objects\obj_0x0C.asm'  
;-------------------------------------------------------------------------------   
                nop
Jmp_02_To_MarkObjGone:                                         ; Offset_0x01AD94
                jmp     (MarkObjGone)                          ; Offset_0x011FBC
Jmp_01_To_ModifySpriteAttr_2P:                                 ; Offset_0x01AD9A
                jmp     (ModifySpriteAttr_2P)                  ; Offset_0x01298E
Jmp_04_To_CalcSine:                                            ; Offset_0x01ADA0
                jmp     (CalcSine)                             ; Offset_0x00396A  
                dc.w    $0000
;-------------------------------------------------------------------------------
Obj_0x12_HPz_Master_Emerald:                                   ; Offset_0x01ADA8 
                include 'data\objects\obj_0x12.asm' 
;-------------------------------------------------------------------------------    
                nop
Jmp_02_To_DisplaySprite:                                       ; Offset_0x01AE24
                jmp     (DisplaySprite)                        ; Offset_0x0120DE
Jmp_02_To_DeleteObject:                                        ; Offset_0x01AE2A
                jmp     (DeleteObject)                         ; Offset_0x0120D0
Jmp_02_To_ModifySpriteAttr_2P:                                 ; Offset_0x01AE30
                jmp     (ModifySpriteAttr_2P)                  ; Offset_0x01298E
                dc.w    $0000
;-------------------------------------------------------------------------------  
Obj_0x13_HPz_Waterfalls:                                       ; Offset_0x01AE38
                include 'data\objects\obj_0x13.asm' 
;-------------------------------------------------------------------------------   
Jmp_03_To_DisplaySprite:                                       ; Offset_0x01B350
                jmp     (DisplaySprite)                        ; Offset_0x0120DE
Jmp_03_To_DeleteObject:                                        ; Offset_0x01B356
                jmp     (DeleteObject)                         ; Offset_0x0120D0
Jmp_00_To_ModifySpriteAttr_2P_A1:                              ; Offset_0x01B35C
                jmp     (ModifySpriteAttr_2P_A1)               ; Offset_0x0129AA
Jmp_03_To_ModifySpriteAttr_2P:                                 ; Offset_0x01B362
                jmp     (ModifySpriteAttr_2P)                  ; Offset_0x01298E
;-------------------------------------------------------------------------------  
Obj_0x04_Water_Surface:                                        ; Offset_0x01B368  
                include 'data\objects\obj_0x04.asm'    
Obj_0x49_Waterfall:                                            ; Offset_0x01B62A
                include 'data\objects\obj_0x49.asm' 
Obj_0x31_Lava_Attributes:                                      ; Offset_0x01B878
                include 'data\objects\obj_0x31.asm'  
Obj_0x74_Invisible_Block:                                      ; Offset_0x01B96C 
                include 'data\objects\obj_0x74.asm'
Obj_0x7C_Metal_Structure:                                      ; Offset_0x01BA70
                include 'data\objects\obj_0x7C.asm' 
Obj_0x27_Object_Hit:                                           ; Offset_0x01BB26
                include 'data\objects\obj_0x27.asm'  
Obj_0x84_Auto_Spin:                                            ; Offset_0x01BBFA
                include 'data\objects\obj_0x84.asm' 
Obj_0x8B_Palette_Cycling_Switch:                               ; Offset_0x01BE30
                include 'data\objects\obj_0x8B.asm' 
;-------------------------------------------------------------------------------
Jmp_04_To_DisplaySprite:                                       ; Offset_0x01BF50 
                jmp     (DisplaySprite)                        ; Offset_0x0120DE
Jmp_04_To_DeleteObject:                                        ; Offset_0x01BF56
                jmp     (DeleteObject)                         ; Offset_0x0120D0
Jmp_01_To_MarkObjGone_3:                                       ; Offset_0x01BF5C
                jmp     (MarkObjGone_3)                        ; Offset_0x012028
Jmp_04_To_ModifySpriteAttr_2P:                                 ; Offset_0x01BF62
                jmp     (ModifySpriteAttr_2P)                  ; Offset_0x01298E
Jmp_00_To_Check_Object_On_Screen:                              ; Offset_0x01BF68
                jmp     (Check_Object_On_Screen)               ; Offset_0x012B36
                dc.w    $0000                                                   
;-------------------------------------------------------------------------------                
Obj_0x06_Spiral_Attributes:                                    ; Offset_0x01BF70
                include 'data\objects\obj_0x06.asm'             
;-------------------------------------------------------------------------------                
Jmp_05_To_CalcSine:                                            ; Offset_0x01C3CC
                jmp     (CalcSine)                             ; Offset_0x00396A  
                dc.w    $0000                    
;-------------------------------------------------------------------------------
Obj_0x14_Seesaw:                                               ; Offset_0x01C3D4
                include 'data\objects\obj_0x14.asm' 
;------------------------------------------------------------------------------- 
Jmp_00_To_SingleObjectLoad_2:                                  ; Offset_0x01C840
                jmp     (SingleObjectLoad_2)                   ; Offset_0x013BC0
Jmp_05_To_ModifySpriteAttr_2P:                                 ; Offset_0x01C846
                jmp     (ModifySpriteAttr_2P)                  ; Offset_0x01298E
Jmp_00_To_ObjectFall:                                          ; Offset_0x01C84C
                jmp     (ObjectFall)                           ; Offset_0x011F6A
Jmp_00_To_MarkObjGone_2:                                       ; Offset_0x01C852
                jmp     (MarkObjGone_2)                        ; Offset_0x011FF4 
;-------------------------------------------------------------------------------               
Obj_0x16_Teleferics:                                           ; Offset_0x01C858
                include 'data\objects\obj_0x16.asm' 
;-------------------------------------------------------------------------------                  
                nop                                                             
Jmp_05_To_DeleteObject:                                        ; Offset_0x01CA70
                jmp     (DeleteObject)                         ; Offset_0x0120D0
Jmp_03_To_MarkObjGone:                                         ; Offset_0x01CA76
                jmp     (MarkObjGone)                          ; Offset_0x011FBC
Jmp_01_To_SingleObjectLoad_2:                                  ; Offset_0x01CA7C
                jmp     (SingleObjectLoad_2)                   ; Offset_0x013BC0
Jmp_06_To_ModifySpriteAttr_2P:                                 ; Offset_0x01CA82
                jmp     (ModifySpriteAttr_2P)                  ; Offset_0x01298E
Jmp_02_To_SpeedToPos:                                          ; Offset_0x01CA88
                jmp     (SpeedToPos)                           ; Offset_0x011F96  
                dc.w    $0000              
;-------------------------------------------------------------------------------  
Obj_0x19_Rotating_Platforms:                                   ; Offset_0x01CA90
                include 'data\objects\obj_0x19.asm'
;-------------------------------------------------------------------------------
                nop
Jmp_05_To_DisplaySprite:                                       ; Offset_0x01CD04
                jmp     (DisplaySprite)                        ; Offset_0x0120DE
Jmp_06_To_DeleteObject:                                        ; Offset_0x01CD0A
                jmp     (DeleteObject)                         ; Offset_0x0120D0
Jmp_07_To_ModifySpriteAttr_2P:                                 ; Offset_0x01CD10
                jmp     (ModifySpriteAttr_2P)                  ; Offset_0x01298E
Jmp_03_To_SpeedToPos:                                          ; Offset_0x01CD16
                jmp     (SpeedToPos)                           ; Offset_0x011F96                   
;-------------------------------------------------------------------------------  
Obj_0x1B_Speed_Booster:                                        ; Offset_0x01CD1C
                include 'data\objects\obj_0x1B.asm'
;-------------------------------------------------------------------------------
Jmp_04_To_MarkObjGone:                                         ; Offset_0x01CE6C
                jmp     (MarkObjGone)                          ; Offset_0x011FBC
Jmp_08_To_ModifySpriteAttr_2P:                                 ; Offset_0x01CE72
                jmp     (ModifySpriteAttr_2P)                  ; Offset_0x01298E
;-------------------------------------------------------------------------------
Obj_0x1D_Worms:                                                ; Offset_0x01CE78
                include 'data\objects\obj_0x1D.asm'
;-------------------------------------------------------------------------------
                nop
Jmp_05_To_MarkObjGone:                                         ; Offset_0x01CFF4
                jmp     (MarkObjGone)                          ; Offset_0x011FBC
Jmp_02_To_SingleObjectLoad_2:                                  ; Offset_0x01CFFA
                jmp     (SingleObjectLoad_2)                   ; Offset_0x013BC0
Jmp_01_To_ModifySpriteAttr_2P_A1:                              ; Offset_0x01D000
                jmp     (ModifySpriteAttr_2P_A1)               ; Offset_0x0129AA
Jmp_04_To_SpeedToPos:                                          ; Offset_0x01D006
                jmp     (SpeedToPos)                           ; Offset_0x011F96
;-------------------------------------------------------------------------------
Obj_0x1E_Tube_Attributes:                                      ; Offset_0x01D00C
                include 'data\objects\obj_0x1E.asm'
;-------------------------------------------------------------------------------
                nop
Jmp_02_To_MarkObjGone_3:                                       ; Offset_0x01DA60
                jmp     (MarkObjGone_3)                        ; Offset_0x012028
                dc.w    $0000
;-------------------------------------------------------------------------------
Obj_0x20_HTz_Boss_FireBall:                                    ; Offset_0x01DA68
                include 'data\objects\obj_0x20.asm'
;-------------------------------------------------------------------------------
Jmp_07_To_DeleteObject:                                        ; Offset_0x01DD4C
                jmp     (DeleteObject)                         ; Offset_0x0120D0
Jmp_06_To_MarkObjGone:                                         ; Offset_0x01DD52
                jmp     (MarkObjGone)                          ; Offset_0x011FBC
Jmp_03_To_SingleObjectLoad_2:                                  ; Offset_0x01DD58
                jmp     (SingleObjectLoad_2)                   ; Offset_0x013BC0
Jmp_01_To_AnimateSprite:                                       ; Offset_0x01DD5E
                jmp     (AnimateSprite)                        ; Offset_0x01212E
Jmp_09_To_ModifySpriteAttr_2P:                                 ; Offset_0x01DD64
                jmp     (ModifySpriteAttr_2P)                  ; Offset_0x01298E
Jmp_05_To_SpeedToPos:                                          ; Offset_0x01DD6A
                jmp     (SpeedToPos)                           ; Offset_0x011F96                 
;-------------------------------------------------------------------------------  
Obj_0x2F_Breakable_Floor:                                      ; Offset_0x01DD70
                include 'data\objects\obj_0x2F.asm' 
Obj_0x32_Breakable_Obstacle:                                   ; Offset_0x01DF8A
                include 'data\objects\obj_0x32.asm' 
;-------------------------------------------------------------------------------                
Breakable_Floor_Mappings:                                      ; Offset_0x01E16A
                dc.w    Offset_0x01E17E-Breakable_Floor_Mappings
                dc.w    Offset_0x01E1C8-Breakable_Floor_Mappings
                dc.w    Offset_0x01E21A-Breakable_Floor_Mappings
                dc.w    Offset_0x01E21A-Breakable_Floor_Mappings
                dc.w    Offset_0x01E25C-Breakable_Floor_Mappings
                dc.w    Offset_0x01E25C-Breakable_Floor_Mappings
                dc.w    Offset_0x01E28E-Breakable_Floor_Mappings
                dc.w    Offset_0x01E28E-Breakable_Floor_Mappings
                dc.w    Offset_0x01E2B0-Breakable_Floor_Mappings
                dc.w    Offset_0x01E2B0-Breakable_Floor_Mappings
Offset_0x01E17E:
                dc.w    $0009
                dc.l    $D80D0012, $0009FFF0
                dc.l    $E805004A, $0025FFF0
                dc.l    $E805004A, $00250000
                dc.l    $F805004E, $0027FFF0
                dc.l    $F805004E, $00270000
                dc.l    $08050052, $0029FFF0
                dc.l    $08050052, $00290000
                dc.l    $18050052, $0029FFF0
                dc.l    $18050052, $00290000
Offset_0x01E1C8:
                dc.w    $000A
                dc.l    $D8050012, $0009FFF0
                dc.l    $D8050016, $000B0000
                dc.l    $E805004A, $0025FFF0
                dc.l    $E805004A, $00250000
                dc.l    $F805004E, $0027FFF0
                dc.l    $F805004E, $00270000
                dc.l    $08050052, $0029FFF0
                dc.l    $08050052, $00290000
                dc.l    $18050052, $0029FFF0
                dc.l    $18050052, $00290000
Offset_0x01E21A:
                dc.w    $0008
                dc.l    $E005004A, $0025FFF0
                dc.l    $E005004A, $00250000
                dc.l    $F005004E, $0027FFF0
                dc.l    $F005004E, $00270000
                dc.l    $00050052, $0029FFF0
                dc.l    $00050052, $00290000
                dc.l    $10050052, $0029FFF0
                dc.l    $10050052, $00290000
Offset_0x01E25C:
                dc.w    $0006
                dc.l    $E805004E, $0027FFF0
                dc.l    $E805004E, $00270000
                dc.l    $F8050052, $0029FFF0
                dc.l    $F8050052, $00290000
                dc.l    $08050052, $0029FFF0
                dc.l    $08050052, $00290000
Offset_0x01E28E:
                dc.w    $0004
                dc.l    $F0050052, $0029FFF0
                dc.l    $F0050052, $00290000
                dc.l    $00050052, $0029FFF0
                dc.l    $00050052, $00290000
Offset_0x01E2B0:
                dc.w    $0002
                dc.l    $F8050052, $0029FFF0
                dc.l    $F8050052, $00290000
;-------------------------------------------------------------------------------
HTz_Rock_Mappings:                                             ; Offset_0x01E2C2
                dc.w    Offset_0x01E2C4-HTz_Rock_Mappings
Offset_0x01E2C4:
                dc.w    $0006
                dc.l    $F0050000, $0000FFE8
                dc.l    $F0050004, $0002FFF8
                dc.l    $F0050008, $00040008
                dc.l    $0005000C, $0006FFE8
                dc.l    $00050010, $0008FFF8
                dc.l    $00050010, $00080008      
;-------------------------------------------------------------------------------
CPz_Tunel_Obstacle_Mappings:                                   ; Offset_0x01E2F6
                dc.w    Offset_0x01E2F8-CPz_Tunel_Obstacle_Mappings
Offset_0x01E2F8:
                dc.w    $0004
                dc.l    $F0050000, $0000FFF0
                dc.l    $F0050800, $08000000
                dc.l    $00050000, $0000FFF0
                dc.l    $00050800, $08000000       
;-------------------------------------------------------------------------------
                nop
Jmp_06_To_DisplaySprite:                                       ; Offset_0x01E31C
                jmp     (DisplaySprite)                        ; Offset_0x0120DE
Jmp_08_To_DeleteObject:                                        ; Offset_0x01E322
                jmp     (DeleteObject)                         ; Offset_0x0120D0
Jmp_00_To_SingleObjectLoad:                                    ; Offset_0x01E328
                jmp     (SingleObjectLoad)                     ; Offset_0x013BAA
Jmp_07_To_MarkObjGone:                                         ; Offset_0x01E32E
                jmp     (MarkObjGone)                          ; Offset_0x011FBC
Jmp_0A_To_ModifySpriteAttr_2P:                                 ; Offset_0x01E334
                jmp     (ModifySpriteAttr_2P)                  ; Offset_0x01298E
Jmp_00_To_Smash_Object:                                        ; Offset_0x01E33A
                jmp     (Smash_Object)                         ; Offset_0x011A34
Jmp_00_To_SolidObject:                                         ; Offset_0x01E340
                jmp     (SolidObject)                          ; Offset_0x0147F4
Jmp_06_To_SpeedToPos:                                          ; Offset_0x01E346
                jmp     (SpeedToPos)                           ; Offset_0x011F96
;-------------------------------------------------------------------------------  
Obj_0x30_Earthquake_Tiles_Attributes:                          ; Offset_0x01E34C  
                include 'data\objects\obj_0x30.asm'   
;-------------------------------------------------------------------------------
Jmp_09_To_DeleteObject:                                        ; Offset_0x01E540
                jmp     (DeleteObject)                         ; Offset_0x0120D0
Offset_0x01E546:
                jmp     (Offset_0x03835E)
Jmp_03_To_MarkObjGone_3:                                       ; Offset_0x01E54C
                jmp     (MarkObjGone_3)                        ; Offset_0x012028
Offset_0x01E552:
                jmp     (Offset_0x014FF2)
Jmp_00_To_SolidObject_2:                                       ; Offset_0x01E558
                jmp     (SolidObject_2)                        ; Offset_0x014854
Jmp_00_To_SolidObject_3:                                       ; Offset_0x01E55E
                jmp     (SolidObject_3)                        ; Offset_0x0148AC                                               
;-------------------------------------------------------------------------------
Obj_0x33_Touch_Booster:                                        ; Offset_0x01E564
                include 'data\objects\obj_0x33.asm' 
;-------------------------------------------------------------------------------                
Jmp_08_To_MarkObjGone:                                         ; Offset_0x01E89C
                jmp     (MarkObjGone)                          ; Offset_0x011FBC
Jmp_04_To_SingleObjectLoad_2:                                  ; Offset_0x01E8A2
                jmp     (SingleObjectLoad_2)                   ; Offset_0x013BC0
Jmp_01_To_SolidObject:                                         ; Offset_0x01E8A8
                jmp     (SolidObject)                          ; Offset_0x0147F4
                dc.w    $0000
;------------------------------------------------------------------------------- 
Obj_0x43_Giant_Spikeball:                                      ; Offset_0x01E8B0
                include 'data\objects\obj_0x43.asm' 
;-------------------------------------------------------------------------------
Jmp_05_To_SingleObjectLoad_2:                                  ; Offset_0x01EA84
                jmp     (SingleObjectLoad_2)                   ; Offset_0x013BC0
Jmp_0B_To_ModifySpriteAttr_2P:                                 ; Offset_0x01EA8A
                jmp     (ModifySpriteAttr_2P)                  ; Offset_0x01298E                
;-------------------------------------------------------------------------------
Obj_0x07_0il_Attributes:                                       ; Offset_0x01EA90
                include 'data\objects\obj_0x07.asm' 
;-------------------------------------------------------------------------------
                nop
Oil_Kill_Player:                                               ; Offset_0x01EB54
                jmp     (Kill_Player)                          ; Offset_0x038420
Jmp_00_To_Platform_Object_A1:                                  ; Offset_0x01EB5A
                jmp     (Platform_Object_A1)                   ; Offset_0x014D18                
;------------------------------------------------------------------------------- 
Obj_0x45_Spring_Push_Boost:                                    ; Offset_0x01EB60  
                include 'data\objects\obj_0x45.asm' 
Obj_0x46_Spring_Ball:                                          ; Offset_0x01F47E   
                include 'data\objects\obj_0x46.asm' 
;-------------------------------------------------------------------------------  
                nop
Jmp_0A_To_DeleteObject:                                        ; Offset_0x01F72C
                jmp     (DeleteObject)                         ; Offset_0x0120D0
Jmp_01_To_SingleObjectLoad:                                    ; Offset_0x01F732
                jmp     (SingleObjectLoad)                     ; Offset_0x013BAA
Jmp_09_To_MarkObjGone:                                         ; Offset_0x01F738
                jmp     (MarkObjGone)                          ; Offset_0x011FBC
Jmp_0C_To_ModifySpriteAttr_2P:                                 ; Offset_0x01F73E
                jmp     (ModifySpriteAttr_2P)                  ; Offset_0x01298E
Jmp_02_To_SolidObject:                                         ; Offset_0x01F744
                jmp     (SolidObject)                          ; Offset_0x0147F4
Jmp_00_To_SolidObject_2_A1:                                    ; Offset_0x01F74A
                jmp     (SolidObject_2_A1)                     ; Offset_0x01486A
Offset_0x01F750:
                jmp     (Offset_0x01495C)      
Jmp_07_To_SpeedToPos:                                          ; Offset_0x01F756
                jmp     (SpeedToPos)                           ; Offset_0x011F96
;-------------------------------------------------------------------------------               
Obj_0x47_Switch:                                               ; Offset_0x01F75C
                include 'data\objects\obj_0x47.asm' 
;-------------------------------------------------------------------------------
                nop
Jmp_0A_To_MarkObjGone:                                         ; Offset_0x01F824
                jmp     (MarkObjGone)                          ; Offset_0x011FBC
Jmp_0D_To_ModifySpriteAttr_2P:                                 ; Offset_0x01F82A
                jmp     (ModifySpriteAttr_2P)                  ; Offset_0x01298E
Jmp_03_To_SolidObject:                                         ; Offset_0x01F830
                jmp     (SolidObject)                          ; Offset_0x0147F4  
                dc.w    $0000               
;------------------------------------------------------------------------------- 
Obj_0x3D_Break_Boost:                                          ; Offset_0x01F838
                include 'data\objects\obj_0x3D.asm'     
;-------------------------------------------------------------------------------
Jmp_07_To_DisplaySprite:                                       ; Offset_0x01FC44
                jmp     (DisplaySprite)                        ; Offset_0x0120DE
Jmp_0B_To_DeleteObject:                                        ; Offset_0x01FC4A
                jmp     (DeleteObject)                         ; Offset_0x0120D0
Jmp_0B_To_MarkObjGone:                                         ; Offset_0x01FC50
                jmp     (MarkObjGone)                          ; Offset_0x011FBC
Jmp_06_To_SingleObjectLoad_2:                                  ; Offset_0x01FC56
                jmp     (SingleObjectLoad_2)                   ; Offset_0x013BC0
Jmp_04_To_MarkObjGone_3:                                       ; Offset_0x01FC5C
                jmp     (MarkObjGone_3)                        ; Offset_0x012028
Jmp_0E_To_ModifySpriteAttr_2P:                                 ; Offset_0x01FC62
                jmp     (ModifySpriteAttr_2P)                  ; Offset_0x01298E
Jmp_01_To_Smash_Object:                                        ; Offset_0x01FC68
                jmp     (Smash_Object)                         ; Offset_0x011A34
Jmp_04_To_SolidObject:                                         ; Offset_0x01FC6E
                jmp     (SolidObject)                          ; Offset_0x0147F4
Jmp_08_To_SpeedToPos:                                          ; Offset_0x01FC74
                jmp     (SpeedToPos)                           ; Offset_0x011F96    
                dc.w    $0000                          
;------------------------------------------------------------------------------- 
Obj_0x48_Cannon:                                               ; Offset_0x01FC7C
                include 'data\objects\obj_0x48.asm'                                                     
;-------------------------------------------------------------------------------                   
Jmp_08_To_DisplaySprite:                                       ; Offset_0x020088
                jmp     (DisplaySprite)                        ; Offset_0x0120DE
Jmp_0C_To_MarkObjGone:                                         ; Offset_0x02008E
                jmp     (MarkObjGone)                          ; Offset_0x011FBC
Jmp_0F_To_ModifySpriteAttr_2P:                                 ; Offset_0x020094
                jmp     (ModifySpriteAttr_2P)                  ; Offset_0x01298E  
                dc.w    $0000                              
;------------------------------------------------------------------------------- 
Obj_0x22_Arrow_Shooter:                                        ; Offset_0x02009C
                include 'data\objects\obj_0x22.asm'                
;-------------------------------------------------------------------------------    
Jmp_0C_To_DeleteObject:                                        ; Offset_0x020270
                jmp     (DeleteObject)                         ; Offset_0x0120D0
Jmp_02_To_SingleObjectLoad:                                    ; Offset_0x020276
                jmp     (SingleObjectLoad)                     ; Offset_0x013BAA
Jmp_0D_To_MarkObjGone:                                         ; Offset_0x02027C
                jmp     (MarkObjGone)                          ; Offset_0x011FBC
Jmp_02_To_AnimateSprite:                                       ; Offset_0x020282
                jmp     (AnimateSprite)                        ; Offset_0x01212E
Jmp_10_To_ModifySpriteAttr_2P:                                 ; Offset_0x020288
                jmp     (ModifySpriteAttr_2P)                  ; Offset_0x01298E
Jmp_09_To_SpeedToPos:                                          ; Offset_0x02028E
                jmp     (SpeedToPos)                           ; Offset_0x011F96
;-------------------------------------------------------------------------------
Obj_0x23_Pillar:                                               ; Offset_0x020294
                include 'data\objects\obj_0x23.asm' 
Obj_0x2B_Raising_Pillar:                                       ; Offset_0x020462
                include 'data\objects\obj_0x2B.asm'       
;-------------------------------------------------------------------------------    
Jmp_09_To_DisplaySprite:                                       ; Offset_0x020ADC
                jmp     (DisplaySprite)                        ; Offset_0x0120DE
Jmp_0D_To_DeleteObject:                                        ; Offset_0x020AE2
                jmp     (DeleteObject)                         ; Offset_0x0120D0
Jmp_0E_To_MarkObjGone:                                         ; Offset_0x020AE8
                jmp     (MarkObjGone)                          ; Offset_0x011FBC
Jmp_07_To_SingleObjectLoad_2:                                  ; Offset_0x020AEE
                jmp     (SingleObjectLoad_2)                   ; Offset_0x013BC0
Jmp_11_To_ModifySpriteAttr_2P:                                 ; Offset_0x020AF4
                jmp     (ModifySpriteAttr_2P)                  ; Offset_0x01298E
Jmp_05_To_SolidObject:                                         ; Offset_0x020AFA
                jmp     (SolidObject)                          ; Offset_0x0147F4
Jmp_0A_To_SpeedToPos:                                          ; Offset_0x020B00
                jmp     (SpeedToPos)                           ; Offset_0x011F96
                dc.w    $0000 
;-------------------------------------------------------------------------------
Obj_0x2C_Leaves:                                               ; Offset_0x020B08   
                include 'data\objects\obj_0x2C.asm'     
;-------------------------------------------------------------------------------
Jmp_0A_To_DisplaySprite:                                       ; Offset_0x020D5C
                jmp     (DisplaySprite)                        ; Offset_0x0120DE
Jmp_0E_To_DeleteObject:                                        ; Offset_0x020D62
                jmp     (DeleteObject)                         ; Offset_0x0120D0
Jmp_03_To_SingleObjectLoad:                                    ; Offset_0x020D68
                jmp     (SingleObjectLoad)                     ; Offset_0x013BAA
Jmp_01_To_PseudoRandomNumber:                                  ; Offset_0x020D6E
                jmp     (PseudoRandomNumber)                   ; Offset_0x003944
Jmp_06_To_CalcSine:                                            ; Offset_0x020D74
                jmp     (CalcSine)                             ; Offset_0x00396A
                dc.w    $0000 
;-------------------------------------------------------------------------------  
Obj_0x40_Diagonal_Springs:                                     ; Offset_0x020D7C
                include 'data\objects\obj_0x40.asm'    
;-------------------------------------------------------------------------------    
Jmp_0F_To_MarkObjGone:                                         ; Offset_0x021028
                jmp     (MarkObjGone)                          ; Offset_0x011FBC
Jmp_03_To_AnimateSprite:                                       ; Offset_0x02102E
                jmp     (AnimateSprite)                        ; Offset_0x01212E
Jmp_12_To_ModifySpriteAttr_2P:                                 ; Offset_0x021034
                jmp     (ModifySpriteAttr_2P)                  ; Offset_0x01298E
Jmp_00_To_SolidObject_3_A1:                                    ; Offset_0x02103A
                jmp     (SolidObject_3_A1)                     ; Offset_0x0148C2 
;-------------------------------------------------------------------------------  
Obj_0x42_Steam_Vent:                                           ; Offset_0x021040
                include 'data\objects\obj_0x42.asm' 
;-------------------------------------------------------------------------------                  
Jmp_0B_To_DisplaySprite:                                       ; Offset_0x021308
                jmp     (DisplaySprite)                        ; Offset_0x0120DE
Jmp_0F_To_DeleteObject:                                        ; Offset_0x02130E
                jmp     (DeleteObject)                         ; Offset_0x0120D0
Jmp_04_To_SingleObjectLoad:                                    ; Offset_0x021314
                jmp     (SingleObjectLoad)                     ; Offset_0x013BAA
Jmp_10_To_MarkObjGone:                                         ; Offset_0x02131A
                jmp     (MarkObjGone)                          ; Offset_0x011FBC
Jmp_13_To_ModifySpriteAttr_2P:                                 ; Offset_0x021320
                jmp     (ModifySpriteAttr_2P)                  ; Offset_0x01298E
Jmp_01_To_SolidObject_2_A1:                                    ; Offset_0x021326
                jmp     (SolidObject_2_A1)                     ; Offset_0x01486A
;-------------------------------------------------------------------------------
Obj_0x64_Pistons:                                              ; Offset_0x02132C
                include 'data\objects\obj_0x64.asm' 
;-------------------------------------------------------------------------------
Jmp_14_To_ModifySpriteAttr_2P:                                 ; Offset_0x0214E0
                jmp     (ModifySpriteAttr_2P)                  ; Offset_0x01298E
Jmp_06_To_SolidObject:                                         ; Offset_0x0214E6
                jmp     (SolidObject)                          ; Offset_0x0147F4
;-------------------------------------------------------------------------------                                
Obj_0x65_Platform_Over_Gear:                                   ; Offset_0x0214EC
                include 'data\objects\obj_0x65.asm' 
;-------------------------------------------------------------------------------
Jmp_11_To_MarkObjGone:                                         ; Offset_0x02193C
                jmp     (MarkObjGone)                          ; Offset_0x011FBC
Jmp_08_To_SingleObjectLoad_2:                                  ; Offset_0x021942
                jmp     (SingleObjectLoad_2)                   ; Offset_0x013BC0
Jmp_15_To_ModifySpriteAttr_2P:                                 ; Offset_0x021948
                jmp     (ModifySpriteAttr_2P)                  ; Offset_0x01298E
Jmp_07_To_SolidObject:                                         ; Offset_0x02194E
                jmp     (SolidObject)                          ; Offset_0x0147F4   
;-------------------------------------------------------------------------------
Obj_0x66_Springs_Wall:                                         ; Offset_0x021954
                include 'data\objects\obj_0x66.asm'  
;-------------------------------------------------------------------------------                 
Jmp_0C_To_DisplaySprite:                                       ; Offset_0x021B44
                jmp     (DisplaySprite)                        ; Offset_0x0120DE
Jmp_10_To_DeleteObject:                                        ; Offset_0x021B4A
                jmp     (DeleteObject)                         ; Offset_0x0120D0
Jmp_16_To_ModifySpriteAttr_2P:                                 ; Offset_0x021B50
                jmp     (ModifySpriteAttr_2P)                  ; Offset_0x01298E
Jmp_02_To_SolidObject_2_A1:                                    ; Offset_0x021B56
                jmp     (SolidObject_2_A1)                     ; Offset_0x01486A
;------------------------------------------------------------------------------- 
Obj_0x67_Teleport_Attributes:                                  ; Offset_0x021B5C  
                include 'data\objects\obj_0x67.asm'  
;-------------------------------------------------------------------------------
Jmp_0D_To_DisplaySprite:                                       ; Offset_0x021F80
                jmp     (DisplaySprite)                        ; Offset_0x0120DE
Jmp_04_To_AnimateSprite:                                       ; Offset_0x021F86
                jmp     (AnimateSprite)                        ; Offset_0x01212E
Jmp_05_To_MarkObjGone_3:                                       ; Offset_0x021F8C
                jmp     (MarkObjGone_3)                        ; Offset_0x012028
                dc.w    $0000
;-------------------------------------------------------------------------------
Obj_0x68_Block_Harpon:                                         ; Offset_0x021F94
                include 'data\objects\obj_0x68.asm'
Obj_0x6D_Harpoon:                                              ; Offset_0x022194 
                include 'data\objects\obj_0x6D.asm'
;-------------------------------------------------------------------------------
Jmp_12_To_MarkObjGone:                                         ; Offset_0x022264
                jmp     (MarkObjGone)                          ; Offset_0x011FBC
Jmp_09_To_SingleObjectLoad_2:                                  ; Offset_0x02226A
                jmp     (SingleObjectLoad_2)                   ; Offset_0x013BC0
Jmp_17_To_ModifySpriteAttr_2P:                                 ; Offset_0x022270
                jmp     (ModifySpriteAttr_2P)                  ; Offset_0x01298E
Jmp_08_To_SolidObject:                                         ; Offset_0x022276
                jmp     (SolidObject)                          ; Offset_0x0147F4
Jmp_01_To_MarkObjGone_2:                                       ; Offset_0x02227C
                jmp     (MarkObjGone_2)                        ; Offset_0x011FF4   
                dc.w    $0000
;-------------------------------------------------------------------------------                
Obj_0x69_Screw_Nut:                                            ; Offset_0x022284
                include 'data\objects\obj_0x69.asm'   
;-------------------------------------------------------------------------------
                nop
Jmp_13_To_MarkObjGone:                                         ; Offset_0x022490
                jmp     (MarkObjGone)                          ; Offset_0x011FBC
Jmp_00_To_ObjHitFloor:                                         ; Offset_0x022496
                jmp     (ObjHitFloor)                          ; Offset_0x019B74
Jmp_18_To_ModifySpriteAttr_2P:                                 ; Offset_0x02249C
                jmp     (ModifySpriteAttr_2P)                  ; Offset_0x01298E
Jmp_09_To_SolidObject:                                         ; Offset_0x0224A2
                jmp     (SolidObject)                          ; Offset_0x0147F4
Jmp_0B_To_SpeedToPos:                                          ; Offset_0x0224A8
                jmp     (SpeedToPos)                           ; Offset_0x011F96     
                dc.w    $0000
;-------------------------------------------------------------------------------                  
Obj_0x6A_MCz_Three_Boxes_Mz_Ptfrm:                             ; Offset_0x0224B0
                include 'data\objects\obj_0x6A.asm'    
;-------------------------------------------------------------------------------
Jmp_0A_To_SingleObjectLoad_2:                                  ; Offset_0x022754
                jmp     (SingleObjectLoad_2)                   ; Offset_0x013BC0
Jmp_19_To_ModifySpriteAttr_2P:                                 ; Offset_0x02275A
                jmp     (ModifySpriteAttr_2P)                  ; Offset_0x01298E
Jmp_0A_To_SolidObject:                                         ; Offset_0x022760
                jmp     (SolidObject)                          ; Offset_0x0147F4
Jmp_02_To_MarkObjGone_2:                                       ; Offset_0x022766
                jmp     (MarkObjGone_2)                        ; Offset_0x011FF4
;-------------------------------------------------------------------------------                  
Obj_0x6B_Mz_Platform:                                          ; Offset_0x02276C
                include 'data\objects\obj_0x6B.asm'     
;-------------------------------------------------------------------------------  
                nop
Jmp_1A_To_ModifySpriteAttr_2P:                                 ; Offset_0x022A10
                jmp     (ModifySpriteAttr_2P)                  ; Offset_0x01298E
Jmp_0B_To_SolidObject:                                         ; Offset_0x022A16
                jmp     (SolidObject)                          ; Offset_0x0147F4
Jmp_03_To_MarkObjGone_2:                                       ; Offset_0x022A1C
                jmp     (MarkObjGone_2)                        ; Offset_0x011FF4
Jmp_0C_To_SpeedToPos:                                          ; Offset_0x022A22
                jmp     (SpeedToPos)                           ; Offset_0x011F96
;------------------------------------------------------------------------------- 
Obj_0x6C_Mz_Moving_Platforms:                                  ; Offset_0x022A28
                include 'data\objects\obj_0x6C.asm'  
;-------------------------------------------------------------------------------
                nop
Jmp_0E_To_DisplaySprite:                                       ; Offset_0x022D7C
                jmp     (DisplaySprite)                        ; Offset_0x0120DE
Jmp_11_To_DeleteObject:                                        ; Offset_0x022D82
                jmp     (DeleteObject)                         ; Offset_0x0120D0
Jmp_05_To_SingleObjectLoad:                                    ; Offset_0x022D88
                jmp     (SingleObjectLoad)                     ; Offset_0x013BAA
Jmp_1B_To_ModifySpriteAttr_2P:                                 ; Offset_0x022D8E
                jmp     (ModifySpriteAttr_2P)                  ; Offset_0x01298E
Jmp_00_To_Platform_Object:                                     ; Offset_0x022D94
                jmp     (Platform_Object)                      ; Offset_0x014D02
Jmp_0D_To_SpeedToPos:                                          ; Offset_0x022D9A
                jmp     (SpeedToPos)                           ; Offset_0x011F96
;-------------------------------------------------------------------------------
Obj_0x6E_Machine:                                              ; Offset_0x022DA0
                include 'data\objects\obj_0x6E.asm'   
;-------------------------------------------------------------------------------  
Jmp_1C_To_ModifySpriteAttr_2P:                                 ; Offset_0x022FA8
                jmp     (ModifySpriteAttr_2P)                  ; Offset_0x01298E
Jmp_0C_To_SolidObject:                                         ; Offset_0x022FAE
                jmp     (SolidObject)   
;-------------------------------------------------------------------------------   
Obj_Ox6F_Parallelogram_Elevator:                               ; Offset_0x022FB4
                include 'data\objects\obj_0x6F.asm'
;-------------------------------------------------------------------------------
                nop
Jmp_1D_To_ModifySpriteAttr_2P:                                 ; Offset_0x023300
                jmp     (ModifySpriteAttr_2P)                  ; Offset_0x01298E
Offset_0x023306:
                jmp     (Offset_0x014904)                   
;-------------------------------------------------------------------------------  
Obj_0x70_Rotating_Gears:                                       ; Offset_0x02330C
                include 'data\objects\obj_0x70.asm'    
;------------------------------------------------------------------------------- 
                nop
Jmp_0B_To_SingleObjectLoad_2:                                  ; Offset_0x023674
                jmp     (SingleObjectLoad_2)                   ; Offset_0x013BC0
Jmp_02_To_ModifySpriteAttr_2P_A1:                              ; Offset_0x02367A
                jmp     (ModifySpriteAttr_2P_A1)               ; Offset_0x0129AA
Jmp_0D_To_SolidObject:                                         ; Offset_0x023680
                jmp     (SolidObject)                          ; Offset_0x0147F4
                dc.w    $0000
;------------------------------------------------------------------------------- 
Obj_0x72_Conveyor_Belt_Attributes:                             ; Offset_0x023688
                include 'data\objects\obj_0x72.asm' 
;-------------------------------------------------------------------------------  
                nop
Jmp_06_To_MarkObjGone_3:                                       ; Offset_0x023708
                jmp     (MarkObjGone_3)                        ; Offset_0x012028  
                dc.w    $0000                 
;------------------------------------------------------------------------------- 
Obj_0x73_Rotating_Rings:                                       ; Offset_0x023710 
                include 'data\objects\obj_0x73.asm' 
;-------------------------------------------------------------------------------  
Jmp_0F_To_DisplaySprite:                                       ; Offset_0x0238E4
                jmp     (DisplaySprite)                        ; Offset_0x0120DE
Jmp_06_To_SingleObjectLoad:                                    ; Offset_0x0238EA
                jmp     (SingleObjectLoad)                     ; Offset_0x013BAA
Jmp_00_To_DeleteObject_A1:                                     ; Offset_0x0238F0
                jmp     (DeleteObject_A1)                      ; Offset_0x0120D2
Jmp_1E_To_ModifySpriteAttr_2P:                                 ; Offset_0x0238F6
                jmp     (ModifySpriteAttr_2P)                  ; Offset_0x01298E
Jmp_0E_To_SolidObject:                                         ; Offset_0x0238FC
                jmp     (SolidObject)                          ; Offset_0x0147F4 
                dc.w    $0000                 
;------------------------------------------------------------------------------- 
Obj_0x75_Spikeball_Chain:                                      ; Offset_0x023904
                include 'data\objects\obj_0x75.asm'                               
;------------------------------------------------------------------------------- 
                nop
Jmp_00_To_DisplaySprite_Param:                                 ; Offset_0x023AFC
                jmp     (DisplaySprite_Param)                  ; Offset_0x01211A
Jmp_10_To_DisplaySprite:                                       ; Offset_0x023B02
                jmp     (DisplaySprite)                        ; Offset_0x0120DE
Jmp_12_To_DeleteObject:                                        ; Offset_0x023B08
                jmp     (DeleteObject)                         ; Offset_0x0120D0
Jmp_14_To_MarkObjGone:                                         ; Offset_0x023B0E
                jmp     (MarkObjGone)                          ; Offset_0x011FBC
Jmp_01_To_DeleteObject_A1:                                     ; Offset_0x023B14
                jmp     (DeleteObject_A1)                      ; Offset_0x0120D2
Jmp_0C_To_SingleObjectLoad_2:                                  ; Offset_0x023B1A
                jmp     (SingleObjectLoad_2)                   ; Offset_0x013BC0
Jmp_1F_To_ModifySpriteAttr_2P:                                 ; Offset_0x023B20
                jmp     (ModifySpriteAttr_2P)                  ; Offset_0x01298E
Jmp_07_To_CalcSine:                                            ; Offset_0x023B26
                jmp     (CalcSine)                             ; Offset_0x00396A
Jmp_0F_To_SolidObject:                                         ; Offset_0x023B2C
                jmp     (SolidObject)                          ; Offset_0x0147F4
                dc.w    $0000                 
;------------------------------------------------------------------------------- 
Obj_0x76_Platform_Spikes:                                      ; Offset_0x023B34
                include 'data\objects\obj_0x76.asm'                    
;-------------------------------------------------------------------------------
                nop
Jmp_00_To_Hurt_Player_A1:                                      ; Offset_0x023CAC
                jmp     (Hurt_Player_A1)                       ; Offset_0x0116B0
Jmp_20_To_ModifySpriteAttr_2P:                                 ; Offset_0x023CB2
                jmp     (ModifySpriteAttr_2P)                  ; Offset_0x01298E
Jmp_10_To_SolidObject:                                         ; Offset_0x023CB8
                jmp     (SolidObject)                          ; Offset_0x0147F4
Jmp_04_To_MarkObjGone_2:                                       ; Offset_0x023CBE
                jmp     (MarkObjGone_2)                        ; Offset_0x011FF4 
;------------------------------------------------------------------------------- 
Obj_0x77_Bridge:                                               ; Offset_0x023CC4 
                include 'data\objects\obj_0x77.asm'                             
;-------------------------------------------------------------------------------  
Jmp_15_To_MarkObjGone:                                         ; Offset_0x023EF4
                jmp     (MarkObjGone)                          ; Offset_0x011FBC
Jmp_21_To_ModifySpriteAttr_2P:                                 ; Offset_0x023EFA
                jmp     (ModifySpriteAttr_2P)                  ; Offset_0x01298E
Jmp_11_To_SolidObject:                                         ; Offset_0x023F00
                jmp     (SolidObject)                          ; Offset_0x0147F4   
                dc.w    $0000                 
;------------------------------------------------------------------------------- 
Obj_0x78_Stair_Case_Platforms:                                 ; Offset_0x023F08  
                include 'data\objects\obj_0x78.asm'                 
;-------------------------------------------------------------------------------   
Jmp_0D_To_SingleObjectLoad_2:                                  ; Offset_0x0240C4
                jmp     (SingleObjectLoad_2)                   ; Offset_0x013BC0
Jmp_03_To_ModifySpriteAttr_2P_A1:                              ; Offset_0x0240CA
                jmp     (ModifySpriteAttr_2P_A1)               ; Offset_0x0129AA
Jmp_12_To_SolidObject:                                         ; Offset_0x0240D0
                jmp     (SolidObject)                          ; Offset_0x0147F4
Jmp_05_To_MarkObjGone_2:                                       ; Offset_0x0240D6
                jmp     (MarkObjGone_2)                        ; Offset_0x011FF4  
;-------------------------------------------------------------------------------    
Obj_0x7A_Platform_Horizontal:                                  ; Offset_0x0240DC
                include 'data\objects\obj_0x7A.asm'              
;-------------------------------------------------------------------------------   
Jmp_11_To_DisplaySprite:                                       ; Offset_0x0242B4
                jmp     (DisplaySprite)                        ; Offset_0x0120DE
Jmp_0E_To_SingleObjectLoad_2:                                  ; Offset_0x0242BA
                jmp     (SingleObjectLoad_2)                   ; Offset_0x013BC0
Jmp_22_To_ModifySpriteAttr_2P:                                 ; Offset_0x0242C0
                jmp     (ModifySpriteAttr_2P)                  ; Offset_0x01298E
Jmp_01_To_Platform_Object:                                     ; Offset_0x0242C6
                jmp     (Platform_Object)                      ; Offset_0x014D02 
;------------------------------------------------------------------------------- 
Obj_0x7B_Spring_Tubes:                                         ; Offset_0x0242CC  
                include 'data\objects\obj_0x7B.asm'                            
;------------------------------------------------------------------------------- 
Jmp_12_To_DisplaySprite:                                       ; Offset_0x0244F4
                jmp     (DisplaySprite)                        ; Offset_0x0120DE
Jmp_13_To_DeleteObject:                                        ; Offset_0x0244FA
                jmp     (DeleteObject)                         ; Offset_0x0120D0
Jmp_05_To_AnimateSprite:                                       ; Offset_0x024500
                jmp     (AnimateSprite)                        ; Offset_0x01212E
Jmp_23_To_ModifySpriteAttr_2P:                                 ; Offset_0x024506
                jmp     (ModifySpriteAttr_2P)                  ; Offset_0x01298E
Jmp_03_To_SolidObject_2_A1:                                    ; Offset_0x02450C
                jmp     (SolidObject_2_A1)                     ; Offset_0x01486A
                dc.w    $0000   
;------------------------------------------------------------------------------- 
Obj_0x7F_Vines_Switch:                                         ; Offset_0x024514
                include 'data\objects\obj_0x7F.asm'                               
;-------------------------------------------------------------------------------  
Jmp_16_To_MarkObjGone:                                         ; Offset_0x0246A0
                jmp     (MarkObjGone)                          ; Offset_0x011FBC
Jmp_24_To_ModifySpriteAttr_2P:                                 ; Offset_0x0246A6
                jmp     (ModifySpriteAttr_2P)                  ; Offset_0x01298E
;------------------------------------------------------------------------------- 
Obj_0x80_Vines_Chain_Hook:                                     ; Offset_0x0246AC 
                include 'data\objects\obj_0x80.asm' 
;-------------------------------------------------------------------------------
                nop
Jmp_17_To_MarkObjGone:                                         ; Offset_0x024B60
                jmp     (MarkObjGone)                          ; Offset_0x011FBC
Jmp_25_To_ModifySpriteAttr_2P:                                 ; Offset_0x024B66
                jmp     (ModifySpriteAttr_2P)                  ; Offset_0x01298E                 
;------------------------------------------------------------------------------- 
Obj_0x81_Vertical_Bridge:                                      ; Offset_0x024B6C
                include 'data\objects\obj_0x81.asm'                           
;-------------------------------------------------------------------------------  
                nop
Jmp_01_To_DisplaySprite_Param:                                 ; Offset_0x024DCC
                jmp     (DisplaySprite_Param)                  ; Offset_0x01211A
Jmp_13_To_DisplaySprite:                                       ; Offset_0x024DD2
                jmp     (DisplaySprite)                        ; Offset_0x0120DE
Jmp_14_To_DeleteObject:                                        ; Offset_0x024DD8
                jmp     (DeleteObject)                         ; Offset_0x0120D0
Jmp_02_To_DeleteObject_A1:                                     ; Offset_0x024DDE
                jmp     (DeleteObject_A1)                      ; Offset_0x0120D2
Jmp_0F_To_SingleObjectLoad_2:                                  ; Offset_0x024DE4
                jmp     (SingleObjectLoad_2)                   ; Offset_0x013BC0
Jmp_26_To_ModifySpriteAttr_2P:                                 ; Offset_0x024DEA
                jmp     (ModifySpriteAttr_2P)                  ; Offset_0x01298E
Jmp_08_To_CalcSine:                                            ; Offset_0x024DF0
                jmp     (CalcSine)                             ; Offset_0x00396A
Jmp_13_To_SolidObject:                                         ; Offset_0x024DF6
                jmp     (SolidObject)                          ; Offset_0x0147F4
;-------------------------------------------------------------------------------
Obj_0x82_Falling_Pillar:                                       ; Offset_0x024DFC
                include 'data\objects\obj_0x82.asm'
;------------------------------------------------------------------------------- 
                nop
Jmp_01_To_ObjHitFloor:                                         ; Offset_0x025044
                jmp     (ObjHitFloor)                          ; Offset_0x019B74
Jmp_27_To_ModifySpriteAttr_2P:                                 ; Offset_0x02504A
                jmp     (ModifySpriteAttr_2P)                  ; Offset_0x01298E
Jmp_00_To_Object_HitCeiling:                                   ; Offset_0x025050
                jmp     (Object_HitCeiling)                    ; Offset_0x019D38
Jmp_14_To_SolidObject:                                         ; Offset_0x025056
                jmp     (SolidObject)                          ; Offset_0x0147F4
Jmp_06_To_MarkObjGone_2:                                       ; Offset_0x02505C
                jmp     (MarkObjGone_2)                        ; Offset_0x011FF4
Jmp_0E_To_SpeedToPos:                                          ; Offset_0x025062
                jmp     (SpeedToPos)                           ; Offset_0x011F96                                                                               
;-------------------------------------------------------------------------------
Obj_0x83_Three_Rotating_Platforms:                             ; Offset_0x025068
                include 'data\objects\obj_0x83.asm'             
;-------------------------------------------------------------------------------
                nop
Jmp_02_To_DisplaySprite_Param:                                 ; Offset_0x0252E4
                jmp     (DisplaySprite_Param)                  ; Offset_0x01211A
Jmp_14_To_DisplaySprite:                                       ; Offset_0x0252EA
                jmp     (DisplaySprite)                        ; Offset_0x0120DE
Jmp_15_To_DeleteObject:                                        ; Offset_0x0252F0
                jmp     (DeleteObject)                         ; Offset_0x0120D0
Jmp_03_To_DeleteObject_A1:                                     ; Offset_0x0252F6
                jmp     (DeleteObject_A1)                      ; Offset_0x0120D2
Jmp_10_To_SingleObjectLoad_2:                                  ; Offset_0x0252FC
                jmp     (SingleObjectLoad_2)                   ; Offset_0x013BC0
Jmp_28_To_ModifySpriteAttr_2P:                                 ; Offset_0x025302
                jmp     (ModifySpriteAttr_2P)                  ; Offset_0x01298E
Jmp_09_To_CalcSine:                                            ; Offset_0x025308
                jmp     (CalcSine)                             ; Offset_0x00396A
Jmp_02_To_Platform_Object:                                     ; Offset_0x02530E
                jmp     (Platform_Object)                      ; Offset_0x014D02
Jmp_07_To_MarkObjGone_2:                                       ; Offset_0x025314
                jmp     (MarkObjGone_2)                        ; Offset_0x011FF4
                dc.w    $0000                     
;-------------------------------------------------------------------------------
Obj_0x3F_Fans:                                                 ; Offset_0x02531C
                include 'data\objects\obj_0x3F.asm'    
;-------------------------------------------------------------------------------
                nop
Jmp_18_To_MarkObjGone:                                         ; Offset_0x0256C8
                jmp     (MarkObjGone)                          ; Offset_0x011FBC
Jmp_29_To_ModifySpriteAttr_2P:                                 ; Offset_0x0256CE
                jmp     (ModifySpriteAttr_2P)                  ; Offset_0x01298E
;-------------------------------------------------------------------------------
Obj_0x85_CNz_Pinball_Spring:                                   ; Offset_0x0256D4
                include 'data\objects\obj_0x85.asm'                
;-------------------------------------------------------------------------------  
                nop
Jmp_03_To_DisplaySprite_Param:                                 ; Offset_0x025C1C
                jmp     (DisplaySprite_Param)                  ; Offset_0x01211A
Jmp_16_To_DeleteObject:                                        ; Offset_0x025C22
                jmp     (DeleteObject)                         ; Offset_0x0120D0
Jmp_2A_To_ModifySpriteAttr_2P:                                 ; Offset_0x025C28
                jmp     (ModifySpriteAttr_2P)                  ; Offset_0x01298E
Jmp_04_To_SolidObject_2_A1:                                    ; Offset_0x025C2E
                jmp     (SolidObject_2_A1)                     ; Offset_0x01486A
;-------------------------------------------------------------------------------
Obj_0x86_CNz_Flippers:                                         ; Offset_0x025C34
                include 'data\objects\obj_0x86.asm'   
;-------------------------------------------------------------------------------
                nop
Jmp_19_To_MarkObjGone:                                         ; Offset_0x025FF0
                jmp     (MarkObjGone)                          ; Offset_0x011FBC
Jmp_06_To_AnimateSprite:                                       ; Offset_0x025FF6
                jmp     (AnimateSprite)                        ; Offset_0x01212E
Jmp_2B_To_ModifySpriteAttr_2P:                                 ; Offset_0x025FFC
                jmp     (ModifySpriteAttr_2P)                  ; Offset_0x01298E
Jmp_0A_To_CalcSine:                                            ; Offset_0x026002
                jmp     (CalcSine)                             ; Offset_0x00396A
Jmp_05_To_SolidObject_2_A1:                                    ; Offset_0x026008
                jmp     (SolidObject_2_A1)                     ; Offset_0x01486A
Jmp_01_To_SolidObject_3:                                       ; Offset_0x02600E
                jmp     (SolidObject_3)                        ; Offset_0x0148AC
;-------------------------------------------------------------------------------
Obj_0xD2_Green_Platform:                                       ; Offset_0x026014
                include 'data\objects\obj_0xD2.asm'                     
;-------------------------------------------------------------------------------
                nop
Jmp_07_To_MarkObjGone_3:                                       ; Offset_0x026320
                jmp     (MarkObjGone_3)                        ; Offset_0x012028
Jmp_2C_To_ModifySpriteAttr_2P:                                 ; Offset_0x026326
                jmp     (ModifySpriteAttr_2P)                  ; Offset_0x01298E
Jmp_15_To_SolidObject:                                         ; Offset_0x02632C
                jmp     (SolidObject)                          ; Offset_0x0147F4
Jmp_08_To_MarkObjGone_2:                                       ; Offset_0x026332
                jmp     (MarkObjGone_2)                        ; Offset_0x011FF4
;-------------------------------------------------------------------------------
Obj_0xD3_CNz_Spikeball:                                        ; Offset_0x026338
                include 'data\objects\obj_0xD3.asm' 
;-------------------------------------------------------------------------------
                nop
Jmp_15_To_DisplaySprite:                                       ; Offset_0x0263AC
                jmp     (DisplaySprite)                        ; Offset_0x0120DE
Jmp_17_To_DeleteObject:                                        ; Offset_0x0263B2
                jmp     (DeleteObject)                         ; Offset_0x0120D0
Jmp_2D_To_ModifySpriteAttr_2P:                                 ; Offset_0x0263B8
                jmp     (ModifySpriteAttr_2P)                  ; Offset_0x01298E
Jmp_16_To_SolidObject:                                         ; Offset_0x0263BE
                jmp     (SolidObject)                          ; Offset_0x0147F4
;-------------------------------------------------------------------------------
Obj_0xD4_CNz_Box:                                              ; Offset_0x0263C4   
                include 'data\objects\obj_0xD4.asm'                                                                     
;-------------------------------------------------------------------------------
                nop
Jmp_2E_To_ModifySpriteAttr_2P:                                 ; Offset_0x0264C8
                jmp     (ModifySpriteAttr_2P)                  ; Offset_0x01298E
Jmp_17_To_SolidObject:                                         ; Offset_0x0264CE
                jmp     (SolidObject)                          ; Offset_0x0147F4
Jmp_09_To_MarkObjGone_2:                                       ; Offset_0x0264D4
                jmp     (MarkObjGone_2)                        ; Offset_0x011FF4
Jmp_0F_To_SpeedToPos:                                          ; Offset_0x0264DA
                jmp     (SpeedToPos)                           ; Offset_0x011F96
;-------------------------------------------------------------------------------
Obj_0xD5_CNz_Elevator:                                         ; Offset_0x0264E0
                include 'data\objects\obj_0xD5.asm'         
;-------------------------------------------------------------------------------  
Jmp_1A_To_MarkObjGone:                                         ; Offset_0x02662C
                jmp     (MarkObjGone)                          ; Offset_0x011FBC
Jmp_2F_To_ModifySpriteAttr_2P:                                 ; Offset_0x026632
                jmp     (ModifySpriteAttr_2P)                  ; Offset_0x01298E
Jmp_00_To_Platform_Elevator:                                   ; Offset_0x026638
                jmp     (Platform_Elevator)                    ; Offset_0x014E0A
Jmp_10_To_SpeedToPos:                                          ; Offset_0x02663E
                jmp     (SpeedToPos)                           ; Offset_0x011F96
;-------------------------------------------------------------------------------  
Obj_0xD6_CNz_Slot_Machine_Bonus:                               ; Offset_0x026644
                include 'data\objects\obj_0xD6.asm'       
;===============================================================================
; Rotina para processar os caça niqueís na Casino Night
; ->>>
;===============================================================================                  
Process_Slot_Machine:                                          ; Offset_0x026810
                lea     ($FFFFFF4E).w, A4
                moveq   #$00, D0
                move.b  $0000(A4), D0
                jmp     Offset_0x02681E(PC, D0)
;-------------------------------------------------------------------------------  
Offset_0x02681E:
                bra     Offset_0x026858
                bra     Offset_0x02687A
                bra     Offset_0x02689A
                bra     Offset_0x026900
                bra     Offset_0x026938
                bra     Offset_0x026984
                bra     Offset_0x026A32
                bra     Offset_0x026A46
                bra     Offset_0x026A92
                bra     Offset_0x026B54
                bra     Offset_0x026B68
                bra     Offset_0x026BB2
                bra     Offset_0x026C48
                bra     Offset_0x026C5E
;------------------------------------------------------------------------------- 
Offset_0x026856:
                rts
Offset_0x026858:
                move.l  A4, A1
                moveq   #$02, D0
Offset_0x02685C:
                clr.w   (A1)+
                dbra    D0, Offset_0x02685C
                move.w  #$0080, D1
                moveq   #$05, D0
Offset_0x026868:
                move.w  D1, (A1)+
                dbra    D0, Offset_0x026868
                move.b  #$01, $0001(A4)
                addq.b  #$04, $0000(A4)
                rts                                                              
;-------------------------------------------------------------------------------                 
Offset_0x02687A:
                bsr     Offset_0x026C76
                tst.b   $0001(A4)
                beq.s   Offset_0x026886
                rts
Offset_0x026886:
                move.b  #$38, $0000(A4)
                clr.w   $0008(A4)
                clr.w   $000C(A4)
                clr.w   $0010(A4)
                rts  
;------------------------------------------------------------------------------- 
Offset_0x02689A:
                move.b  ($FFFFFE0F).w, D0
                andi.w  #$0007, D0
                subq.w  #$04, D0
                addi.w  #$0020, D0
                move.w  D0, $0008(A4)
                move.b  ($FFFFFE0F).w, D0
                rol.b   #$04, D0
                andi.w  #$0007, D0
                subq.w  #$04, D0
                addi.w  #$0020, D0
                move.w  D0, $000C(A4)
                move.b  ($FFFFFE0E).w, D0
                andi.w  #$0007, D0
                subq.w  #$04, D0
                addi.w  #$0020, D0
                move.w  D1, $0010(A4)
                move.b  #$02, $0001(A4)
                clr.b   $0003(A4)
                move.b  ($FFFFFE0F).w, D0
                lea     (Offset_0x026EEA), A2
Offset_0x0268E6:
                sub.b   (A2), D0
                bcs.s   Offset_0x0268EE
                addq.w  #$03, A2
                bra.s   Offset_0x0268E6
Offset_0x0268EE:
                move.b  $0001(A2), $0004(A4)
                move.b  $0002(A2), $0005(A4)
                addq.b  #$04, $0000(A4)
                rts 
;------------------------------------------------------------------------------- 
Offset_0x026900:
                bsr     Offset_0x026C76
                tst.b   $0001(A4)
                beq.s   Offset_0x02690C
                rts
Offset_0x02690C:
                addi.w  #$0020, $0008(A4)
                addi.w  #$0020, $000C(A4)
                addi.w  #$0020, $0010(A4)
                move.b  ($FFFFFE0F).w, D0
                andi.b  #$0F, D0
                addi.b  #$20, D0
                move.b  D0, $0001(A4)
                clr.b   $0002(A4)
                addq.b  #$04, $0000(A4)
                rts     
;------------------------------------------------------------------------------- 
Offset_0x026938:
                bsr     Offset_0x026C76
                cmpi.b  #$0F, $0004(A4)
                beq.s   Offset_0x026970
                addq.b  #$01, $0002(A4)
                cmpi.b  #$60, $0002(A4)
                bhi.s   Offset_0x026952
                rts
Offset_0x026952:
                move.w  $0006(A4), D0
                lsr.w   #$08, D0
                subq.b  #$03, D0
                andi.w  #$0007, D0
                lea     (Offset_0x026EFF), A2
                move.b  $00(A2, D0), D0
                cmp.b   $0004(A4), D0
                beq.s   Offset_0x026978
                rts
Offset_0x026970:
                tst.b   $0001(A4)
                beq.s   Offset_0x026978
                rts
Offset_0x026978:
                addq.b  #$04, $0000(A4)
                move.w  #$0040, $0008(A4)
                rts    
;------------------------------------------------------------------------------- 
Offset_0x026984:
                bsr     Offset_0x026C76
                tst.b   $0003(A4)
                beq.s   Offset_0x026990
                rts
Offset_0x026990:
                cmpi.w  #$0010, $0008(A4)
                bgt.s   Offset_0x0269B8
                move.w  $0006(A4), D0
                addi.w  #$0010, D0
                andi.w  #$00F0, D0
                beq.s   Offset_0x0269D6
                cmpi.w  #$00D0, D0
                bhi.s   Offset_0x0269AE
                rts
Offset_0x0269AE:
                cmpi.w  #$0018, $0008(A4)
                bgt.s   Offset_0x0269B8
                rts
Offset_0x0269B8:
                subq.w  #$02, $0008(A4)
                cmpi.w  #$000E, $0008(A4)
                bgt.s   Offset_0x0269C6
                rts
Offset_0x0269C6:
                cmpi.b  #$60, $0007(A4)
                bls.s   Offset_0x0269D0
                rts
Offset_0x0269D0:
                subq.w  #$01, $0008(A4)
                rts
Offset_0x0269D6:
                move.w  $0006(A4), D0
                addi.w  #$0080, D0
                move.w  D0, D1
                andi.w  #$0700, D1
                subi.w  #$0010, D1
                move.w  D1, $0006(A4)
                lsr.w   #$08, D0
                andi.w  #$0007, D0
                lea     (Offset_0x026EFF), A2
                move.b  $00(A2, D0), $0004(A4)
                move.w  #$FFF8, $0008(A4)
                move.b  #$02, $0001(A4)
                move.w  #$0040, $000C(A4)
                tst.b   $0005(A4)
                bmi.s   Offset_0x026A1C
                addq.b  #$08, $0000(A4)
                rts
Offset_0x026A1C:
                move.b  ($FFFFFE0F).w, D0
                andi.b  #$0F, D0
                addi.b  #$12, D0
                move.b  D0, $0002(A4)
                addq.b  #$04, $0000(A4)
                rts   
;------------------------------------------------------------------------------- 
Offset_0x026A32:
                bsr.s   Offset_0x026A80
                subq.b  #$01, $0002(A4)
                beq.s   Offset_0x026A3C
                rts
Offset_0x026A3C:
                addq.b  #$04, $0000(A4)
Offset_0x026A40:
                addq.b  #$04, $0000(A4)
                rts      
;------------------------------------------------------------------------------- 
Offset_0x026A46:
                bsr.s   Offset_0x026A80
                cmpi.b  #$04, $0003(A4)
                beq.s   Offset_0x026A52
                rts
Offset_0x026A52:
                tst.w   $0008(A4)
                beq.s   Offset_0x026A5A
                rts
Offset_0x026A5A:
                move.b  $0005(A4), D1
                andi.b  #$F0, D1
                lsr.b   #$04, D1
                move.w  $000A(A4), D0
                lsr.w   #$08, D0
                subq.b  #$03, D0
                andi.w  #$0007, D0
                lea     (Offset_0x026F07), A2
                move.b  $00(A2, D0), D0
                cmp.b   D0, D1
                beq.s   Offset_0x026A40
                rts
Offset_0x026A80:
                bsr     Offset_0x026C76
                tst.b   $0001(A4)
                beq.s   Offset_0x026A8C
                rts
Offset_0x026A8C:
                clr.w   $0008(A4)
                rts     
;------------------------------------------------------------------------------- 
Offset_0x026A92:
                bsr     Offset_0x026C76
                cmpi.b  #$04, $0003(A4)
                beq.s   Offset_0x026AA0
                rts
Offset_0x026AA0:
                cmpi.w  #$0010, $000C(A4)
                bgt.s   Offset_0x026AC8
                move.w  $000A(A4), D0
                addi.w  #$0010, D0
                andi.w  #$00F0, D0
                beq.s   Offset_0x026AE6
                cmpi.w  #$00D0, D0
                bhi.s   Offset_0x026ABE
                rts
Offset_0x026ABE:
                cmpi.w  #$0018, $000C(A4)
                bgt.s   Offset_0x026AC8
                rts
Offset_0x026AC8:
                subq.w  #$02, $000C(A4)
                cmpi.w  #$000E, $000C(A4)
                bgt.s   Offset_0x026AD6
                rts
Offset_0x026AD6:
                cmpi.b  #$70, $000B(A4)
                bls.s   Offset_0x026AE0
                rts
Offset_0x026AE0:
                subq.w  #$01, $000C(A4)
                rts
Offset_0x026AE6:
                move.w  $000A(A4), D0
                addi.w  #$0080, D0
                move.w  D0, D1
                andi.w  #$0700, D1
                subi.w  #$0010, D1
                move.w  D1, $000A(A4)
                lsr.w   #$08, D0
                andi.w  #$0007, D0
                lea     (Offset_0x026F07), A2
                move.b  $00(A2, D0), D0
                lsl.b   #$04, D0
                andi.b  #$0F, $0005(A4)
                or.b    D0, $0005(A4)
                move.w  #$FFF8, $000C(A4)
                move.b  #$02, $0001(A4)
                move.w  #$0040, $0010(A4)
                move.b  $0005(A4), D0
                andi.w  #$000F, D0
                cmpi.b  #$0F, D0
                beq.s   Offset_0x026B3E
                addq.b  #$08, $0000(A4)
                rts
Offset_0x026B3E:
                move.b  ($FFFFFE0F).w, D0
                andi.b  #$0F, D0
                addi.b  #$12, D0
                move.b  D0, $0002(A4)
                addq.b  #$04, $0000(A4)
                rts  
;------------------------------------------------------------------------------- 
Offset_0x026B54:
                bsr.s   Offset_0x026BA0
                subq.b  #$01, $0002(A4)
                beq.s   Offset_0x026B5E
                rts
Offset_0x026B5E:
                addq.b  #$04, $0000(A4)
Offset_0x026B62:
                addq.b  #$04, $0000(A4)
                rts  
;------------------------------------------------------------------------------- 
Offset_0x026B68:
                bsr.s   Offset_0x026BA0
                cmpi.b  #$08, $0003(A4)
                beq.s   Offset_0x026B74
                rts
Offset_0x026B74:
                tst.w   $000C(A4)
                beq.s   Offset_0x026B7C
                rts
Offset_0x026B7C:
                move.b  $0005(A4), D1
                andi.b  #$0F, D1
                move.w  $000E(A4), D0
                lsr.w   #$08, D0
                subq.b  #$03, D0
                andi.w  #$0007, D0
                lea     (Offset_0x026F0F), A2
                move.b  $00(A2, D0), D0
                cmp.b   D0, D1
                beq.s   Offset_0x026B62
                rts
Offset_0x026BA0:
                bsr     Offset_0x026C76
                tst.b   $0001(A4)
                beq.s   Offset_0x026BAC
                rts
Offset_0x026BAC:
                clr.w   $000C(A4)
                rts  
;------------------------------------------------------------------------------- 
Offset_0x026BB2:
                bsr     Offset_0x026C76
                cmpi.b  #$08, $0003(A4)
                beq.s   Offset_0x026BC0
                rts
Offset_0x026BC0:
                cmpi.w  #$0010, $0010(A4)
                bgt.s   Offset_0x026BE8
                move.w  $000E(A4), D0
                addi.w  #$0010, D0
                andi.w  #$00F0, D0
                beq.s   Offset_0x026C06
                cmpi.w  #$00D0, D0
                bhi.s   Offset_0x026BDE
                rts
Offset_0x026BDE:
                cmpi.w  #$0018, $0010(A4)
                bgt.s   Offset_0x026BE8
                rts
Offset_0x026BE8:
                subq.w  #$02, $0010(A4)
                cmpi.w  #$000E, $0010(A4)
                bgt.s   Offset_0x026BF6
                rts
Offset_0x026BF6:
                cmpi.b  #$70, $000F(A4)
                bls.s   Offset_0x026C00
                rts
Offset_0x026C00:
                subq.w  #$01, $0010(A4)
                rts
Offset_0x026C06:
                move.w  $000E(A4), D0
                addi.w  #$0080, D0
                lsr.w   #$08, D0
                move.w  D0, D1
                andi.w  #$0700, D1
                subi.w  #$0010, D1
                move.w  D1, $000E(A4)
                andi.w  #$0007, D0
                lea     (Offset_0x026F0F), A2
                move.b  $00(A2, D0), D0
                andi.b  #$F0, $0005(A4)
                or.b    D0, $0005(A4)
                move.w  #$FFF8, $0010(A4)
                move.b  #$06, $0001(A4)
                addq.b  #$04, $0000(A4)
                rts      
;------------------------------------------------------------------------------- 
Offset_0x026C48:
                bsr     Offset_0x026C76
                subq.b  #$01, $0001(A4)
                beq.s   Offset_0x026C54
                rts
Offset_0x026C54:
                clr.w   $0010(A4)
                addq.b  #$04, $0000(A4)
                rts   
;------------------------------------------------------------------------------- 
Offset_0x026C5E:
                bsr     Offset_0x026C76
                tst.b   $0001(A4)
                beq.s   Offset_0x026C6A
                rts
Offset_0x026C6A:
                bsr     Offset_0x026D94
                move.b  #$38, $0000(A4)
                rts
Offset_0x026C76:
                moveq   #$00, D0
                move.b  $0003(A4), D0
                jmp     Offset_0x026C80(PC, D0)     
;-------------------------------------------------------------------------------
Offset_0x026C80:
                bra     Offset_0x026CBC    
                bra     Offset_0x026CEC   
;-------------------------------------------------------------------------------
Offset_0x026C88:
                clr.b   $0003(A4)
                subq.b  #$01, $0001(A4)
                move.w  $000E(A4), D0
                move.w  $0010(A4), D1
                sub.w   D1, $000E(A4)
                move.w  $000E(A4), D3
                andi.w  #$07F8, D0
                andi.w  #$07F8, D3
                cmp.w   D0, D3
                bne.s   Offset_0x026CAE
                rts
Offset_0x026CAE:
                lea     (Offset_0x026F0F), A3
                move.w  #$AE00, D2
                bra     Offset_0x026D18          
;------------------------------------------------------------------------------- 
Offset_0x026CBC:
                addq.b  #$04, $0003(A4)
                move.w  $0006(A4), D0
                move.w  $0008(A4), D1
                sub.w   D1, $0006(A4)
                move.w  $0006(A4), D3
                andi.w  #$07F8, D0
                andi.w  #$07F8, D3
                cmp.w   D0, D3
                bne.s   Offset_0x026CDE
                rts
Offset_0x026CDE:
                lea     (Offset_0x026EFF), A3
                move.w  #$AA00, D2
                bra     Offset_0x026D18   
;------------------------------------------------------------------------------- 
Offset_0x026CEC:
                addq.b  #$04, $0003(A4)
                move.w  $000A(A4), D0
                move.w  $000C(A4), D1
                sub.w   D1, $000A(A4)
                move.w  $000A(A4), D3
                andi.w  #$07F8, D0
                andi.w  #$07F8, D3
                cmp.w   D0, D3
                bne.s   Offset_0x026D0E
                rts
Offset_0x026D0E:
                lea     (Offset_0x026F07), A3
                move.w  #$AC00, D2
Offset_0x026D18:
                bsr     Offset_0x026D68
                lea     ($FFFFA000).w, A1
                move.w  #$001F, D1
Offset_0x026D24:
                move.l  $0080(A2), $0080(A1)
                move.l  $0100(A2), $0100(A1)
                move.l  $0180(A2), $0180(A1)
                move.l  (A2)+, (A1)+
                addq.b  #$08, D3
                bne.s   Offset_0x026D48
                addi.w  #$0100, D3
                andi.w  #$0700, D3
                bsr     Offset_0x026D68
Offset_0x026D48:
                dbra    D1, Offset_0x026D24
                move.l  #$00FFA000, D1
                tst.w   (Two_Player_Flag).w                          ; $FFFFFFD8
                beq.s   Offset_0x026D5C
                addi.w  #$4000, D2
Offset_0x026D5C:
                move.w  #$0100, D3
                jsr     (DMA_68KtoVRAM)                        ; Offset_0x0019E4
                rts
Offset_0x026D68:
                bsr     Offset_0x026D86
                andi.w  #$0007, D0
                ror.w   #$07, D0
                lea     (Art_CNz_Slot_Machine_Checks), A2      ; Offset_0x045EEA
                adda.w  D0, A2
                move.w  D3, D0
                andi.w  #$00F8, D0
                lsr.w   #$01, D0
                adda.w  D0, A2
                rts
Offset_0x026D86:
                move.w  D3, D0
                lsr.w   #$08, D0
                andi.w  #$0007, D0
                move.b  $00(A3, D0), D0
                rts
Offset_0x026D94:
                move.b  $0005(A4), D2
                move.b  D2, D3
                andi.w  #$00F0, D2
                lsr.w   #$04, D2
                andi.w  #$000F, D3
                moveq   #$00, D0
                cmp.b   $0004(A4), D2
                bne.s   Offset_0x026DAE
                addq.w  #$04, D0
Offset_0x026DAE:
                cmp.b   $0004(A4), D3
                bne.s   Offset_0x026DB6
                addq.w  #$08, D0
Offset_0x026DB6:
                jmp     Offset_0x026DBA(PC, D0) 
;-------------------------------------------------------------------------------
Offset_0x026DBA:
                bra     Offset_0x026E2A
                bra     Offset_0x026E00
                bra     Offset_0x026DD2           
;-------------------------------------------------------------------------------
Offset_0x026DC6:
                move.w  D2, D0
                bsr     Offset_0x026E80
                move.w  D0, $0004(A4)
                rts 
;------------------------------------------------------------------------------- 
Offset_0x026DD2:
                cmpi.b  #$03, D3
                bne.s   Offset_0x026DE8
                move.w  D2, D0
                bsr     Offset_0x026E80
                bsr     Offset_0x026E8E
                move.w  D0, $0004(A4)
                rts
Offset_0x026DE8:
                cmpi.b  #$03, D2
                bne     Offset_0x026E2A
                move.w  D3, D0
                bsr     Offset_0x026E80
                bsr     Offset_0x026EB2
                move.w  D0, $0004(A4)
                rts   
;------------------------------------------------------------------------------- 
Offset_0x026E00:
                cmpi.b  #$03, D2
                bne.s   Offset_0x026E14
                move.w  D3, D0
                bsr.s   Offset_0x026E80
                bsr     Offset_0x026E8E
                move.w  D0, $0004(A4)
                rts
Offset_0x026E14:
                cmpi.b  #$03, D3
                bne     Offset_0x026E2A
                move.w  D2, D0
                bsr.s   Offset_0x026E80
                bsr     Offset_0x026EB2
                move.w  D0, $0004(A4)
                rts    
;------------------------------------------------------------------------------- 
Offset_0x026E2A:
                cmp.b   D2, D3
                bne.s   Offset_0x026E5E
                cmpi.b  #$03, $0004(A4)
                bne.s   Offset_0x026E44
                move.w  D2, D0
                bsr.s   Offset_0x026E80
                bsr     Offset_0x026EB2
                move.w  D0, $0004(A4)
                rts
Offset_0x026E44:
                cmpi.b  #$03, D2
                bne.s   Offset_0x026E5E
                move.b  $0004(A4), D0
                andi.w  #$000F, D0
                bsr.s   Offset_0x026E80
                bsr     Offset_0x026E8E
                move.w  D0, $0004(A4)
                rts
Offset_0x026E5E:
                moveq   #$02, D1
                moveq   #$00, D0
                cmpi.b  #$05, $0004(A4)
                bne.s   Offset_0x026E6C
                add.w   D1, D0
Offset_0x026E6C:
                cmpi.b  #$05, D2
                bne.s   Offset_0x026E74
                add.w   D1, D0
Offset_0x026E74:
                cmpi.b  #$05, D3
                bne.s   Offset_0x026E7C
                add.w   D1, D0
Offset_0x026E7C:
                move.w  D0, $0004(A4)
Offset_0x026E80:
                add.w   D0, D0
                lea     (Offset_0x026EDE), A2
                move.w  $00(A2, D0), D0
                rts
Offset_0x026E8E:
                tst.w   D0
                bmi.s   Offset_0x026EAE
                bsr.s   Offset_0x026ECC
                abcd    D2, D2
                abcd    D1, D1
                abcd    D3, D3
                abcd    D1, D3
                moveq   #$00, D1
                abcd    D2, D2
                abcd    D1, D1
                abcd    D3, D3
                abcd    D1, D3
                lsl.w   #$08, D3
                move.w  D2, D0
                add.w   D3, D0
                rts
Offset_0x026EAE:
                asl.w   #$02, D0
                rts
Offset_0x026EB2:
                tst.w   D0
                bmi.s   Offset_0x026EC8
                bsr.s   Offset_0x026ECC
                abcd    D2, D2
                abcd    D1, D1
                abcd    D3, D3
                abcd    D1, D3
                lsl.w   #$08, D3
                move.w  D2, D0
                add.w   D3, D0
                rts
Offset_0x026EC8:
                add.w   D0, D0
                rts
Offset_0x026ECC:
                move.w  D0, D2
                andi.w  #$00FF, D2
                move.w  D0, D3
                andi.w  #$0F00, D3
                lsr.w   #$08, D3
                moveq   #$00, D1
                rts            
;-------------------------------------------------------------------------------
Offset_0x026EDE:
                dc.b    $00, $30, $00, $25, $FF, $FF, $01, $50
                dc.b    $00, $10, $00, $20      
;-------------------------------------------------------------------------------
Offset_0x026EEA:
                dc.b    $08, $03, $33, $12, $00, $00, $12, $01
                dc.b    $11, $20, $02, $22, $20, $04, $44, $28
                dc.b    $05, $55, $FF, $0F, $FF          
;-------------------------------------------------------------------------------
Offset_0x026EFF:
                dc.b    $03, $00, $01, $04, $02, $05, $04, $01      
;-------------------------------------------------------------------------------
Offset_0x026F07:
                dc.b    $03, $00, $01, $04, $02, $05, $00, $02  
;-------------------------------------------------------------------------------
Offset_0x026F0F:
                dc.b    $03, $00, $01, $04, $02, $05, $04, $01
                dc.b    $00                                           
;===============================================================================
; Rotina para processar os caça niqueís na Casino Night
; <<<-
;===============================================================================
Jmp_07_To_SingleObjectLoad:                                    ; Offset_0x026F18
                jmp     (SingleObjectLoad)                     ; Offset_0x013BAA
Jmp_1B_To_MarkObjGone:                                         ; Offset_0x026F1E
                jmp     (MarkObjGone)                          ; Offset_0x011FBC
Jmp_07_To_AnimateSprite:                                       ; Offset_0x026F24
                jmp     (AnimateSprite)                        ; Offset_0x01212E
Jmp_30_To_ModifySpriteAttr_2P:                                 ; Offset_0x026F2A
                jmp     (ModifySpriteAttr_2P)                  ; Offset_0x01298E
Jmp_06_To_SolidObject_2_A1:                                    ; Offset_0x026F30
                jmp     (SolidObject_2_A1)                     ; Offset_0x01486A
                dc.w    $0000
;-------------------------------------------------------------------------------   
Obj_0xD7_CNz_Blue_Bumper:                                      ; Offset_0x026F38
                include 'data\objects\obj_0xD7.asm'
;-------------------------------------------------------------------------------   
                nop
Jmp_16_To_DisplaySprite:                                       ; Offset_0x027184
                jmp     (DisplaySprite)                        ; Offset_0x0120DE
Jmp_1C_To_MarkObjGone:                                         ; Offset_0x02718A
                jmp     (MarkObjGone)                          ; Offset_0x011FBC
Jmp_08_To_AnimateSprite:                                       ; Offset_0x027190
                jmp     (AnimateSprite)                        ; Offset_0x01212E
Jmp_31_To_ModifySpriteAttr_2P:                                 ; Offset_0x027196
                jmp     (ModifySpriteAttr_2P)                  ; Offset_0x01298E
;-------------------------------------------------------------------------------
Obj_0xD8_CNz_Green_Bumper:                                     ; Offset_0x02719C
                include 'data\objects\obj_0xD8.asm'       
;-------------------------------------------------------------------------------
                nop
Jmp_18_To_DeleteObject:                                        ; Offset_0x0273FC
                jmp     (DeleteObject)                         ; Offset_0x0120D0
Jmp_08_To_SingleObjectLoad:                                    ; Offset_0x027402
                jmp     (SingleObjectLoad)                     ; Offset_0x013BAA
Jmp_1D_To_MarkObjGone:                                         ; Offset_0x027408
                jmp     (MarkObjGone)                          ; Offset_0x011FBC
Jmp_09_To_AnimateSprite:                                       ; Offset_0x02740E
                jmp     (AnimateSprite)                        ; Offset_0x01212E
Jmp_32_To_ModifySpriteAttr_2P:                                 ; Offset_0x027414:
                jmp     (ModifySpriteAttr_2P)                  ; Offset_0x01298E
                dc.w    $0000
;-------------------------------------------------------------------------------
Obj_0xD9_SFz_Hang_Attributes:                                  ; Offset_0x02741C
                include 'data\objects\obj_0xD9.asm'
;-------------------------------------------------------------------------------
                nop
Jmp_08_To_MarkObjGone_3:                                       ; Offset_0x0274FC
                jmp     (MarkObjGone_3)                        ; Offset_0x012028
                dc.w    $0000    
;------------------------------------------------------------------------------- 
Obj_0x4C_Batbot:                                               ; Offset_0x027504  
                include 'data\objects\obj_0x4C.asm'     
;-------------------------------------------------------------------------------
                dc.w    $0000         
Jmp_1E_To_MarkObjGone:                                         ; Offset_0x027978
                jmp     (MarkObjGone)                          ; Offset_0x011FBC
Jmp_0A_To_AnimateSprite:                                       ; Offset_0x02797E
                jmp     (AnimateSprite)                        ; Offset_0x01212E
Jmp_11_To_SpeedToPos:                                          ; Offset_0x027984
                jmp     (SpeedToPos)                           ; Offset_0x011F96 
                dc.w    $0000         
;-------------------------------------------------------------------------------
Obj_0x4E_Crocobot:                                             ; Offset_0x02798C
                include 'data\objects\obj_0x4E.asm'                 
;-------------------------------------------------------------------------------  
Jmp_1F_To_MarkObjGone:                                         ; Offset_0x027C6C
                jmp     (MarkObjGone)                          ; Offset_0x011FBC
Jmp_0B_To_AnimateSprite:                                       ; Offset_0x027C72
                jmp     (AnimateSprite)                        ; Offset_0x01212E
Jmp_01_To_ObjectFall:                                          ; Offset_0x027C78
                jmp     (ObjectFall)                           ; Offset_0x011F6A
Jmp_12_To_SpeedToPos:                                          ; Offset_0x027C7E
                jmp     (SpeedToPos)                           ; Offset_0x011F96
;-------------------------------------------------------------------------------
Obj_0x4A_Octus:                                                ; Offset_0x027C84 
                include 'data\objects\obj_0x4A.asm' 
;-------------------------------------------------------------------------------
Jmp_17_To_DisplaySprite:                                       ; Offset_0x027F14
                jmp     (DisplaySprite)                        ; Offset_0x0120DE
Jmp_19_To_DeleteObject:                                        ; Offset_0x027F1A
                jmp     (DeleteObject)                         ; Offset_0x0120D0
Jmp_20_To_MarkObjGone:                                         ; Offset_0x027F20
                jmp     (MarkObjGone)                          ; Offset_0x011FBC
Jmp_0C_To_AnimateSprite:                                       ; Offset_0x027F26
                jmp     (AnimateSprite)                        ; Offset_0x01212E
Jmp_02_To_ObjectFall:                                          ; Offset_0x027F2C
                jmp     (ObjectFall)                           ; Offset_0x011F6A
                dc.w    $0000     
;-------------------------------------------------------------------------------
Obj_0x4F_Dinobot:                                              ; Offset_0x027F34
                include 'data\objects\obj_0x4F.asm'                         
;-------------------------------------------------------------------------------
                dc.w    $0000                                                     
Jmp_18_To_DisplaySprite:                                       ; Offset_0x028078
                jmp     (DisplaySprite)                        ; Offset_0x0120DE
Jmp_1A_To_DeleteObject:                                        ; Offset_0x02807E
                jmp     (DeleteObject)                         ; Offset_0x0120D0
Jmp_0D_To_AnimateSprite:                                       ; Offset_0x028084
                jmp     (AnimateSprite)                        ; Offset_0x01212E
Jmp_03_To_ObjectFall:                                          ; Offset_0x02808A
                jmp     (ObjectFall)                           ; Offset_0x011F6A
Jmp_13_To_SpeedToPos:                                          ; Offset_0x028090
                jmp     (SpeedToPos)                           ; Offset_0x011F96  
                dc.w    $0000                                                    
;-------------------------------------------------------------------------------
Obj_0x50_Aquis:                                                ; Offset_0x028098
                include 'data\objects\obj_0x50.asm'                                                                                                 
;-------------------------------------------------------------------------------
Jmp_19_To_DisplaySprite:                                       ; Offset_0x028610
                jmp     (DisplaySprite)                        ; Offset_0x0120DE
Jmp_1B_To_DeleteObject:                                        ; Offset_0x028616
                jmp     (DeleteObject)                         ; Offset_0x0120D0
Jmp_09_To_SingleObjectLoad:                                    ; Offset_0x02861C
                jmp     (SingleObjectLoad)                     ; Offset_0x013BAA
Jmp_21_To_MarkObjGone:                                         ; Offset_0x028622
                jmp     (MarkObjGone)                          ; Offset_0x011FBC
Jmp_0E_To_AnimateSprite:                                       ; Offset_0x028628
                jmp     (AnimateSprite)                        ; Offset_0x01212E
Jmp_04_To_ObjectFall:                                          ; Offset_0x02862E
                jmp     (ObjectFall)                           ; Offset_0x011F6A
Jmp_14_To_SpeedToPos:                                          ; Offset_0x028634
                jmp     (SpeedToPos)                           ; Offset_0x011F96
                dc.w    $0000
;-------------------------------------------------------------------------------
Obj_0x4D_Rhinobot:                                             ; Offset_0x02863C
                include 'data\objects\obj_0x4D.asm'                                
;-------------------------------------------------------------------------------
                dc.w    $0000                                         
Jmp_22_To_MarkObjGone:                                         ; Offset_0x0288F8
                jmp     (MarkObjGone)                          ; Offset_0x011FBC
Jmp_0F_To_AnimateSprite:                                       ; Offset_0x0288FE
                jmp     (AnimateSprite)                        ; Offset_0x01212E
Jmp_05_To_ObjectFall:                                          ; Offset_0x028904
                jmp     (ObjectFall)                           ; Offset_0x011F6A  
                dc.w    $0000                                                 
;-------------------------------------------------------------------------------
Obj_0x4B_Buzzer:                                               ; Offset_0x02890C
                include 'data\objects\obj_0x4B.asm' 
;-------------------------------------------------------------------------------
                dc.w    $0000   
Jmp_1C_To_DeleteObject:                                        ; Offset_0x028BFC
                jmp     (DeleteObject)                         ; Offset_0x0120D0
Jmp_11_To_SingleObjectLoad_2:                                  ; Offset_0x028C02
                jmp     (SingleObjectLoad_2)                   ; Offset_0x013BC0
Jmp_10_To_AnimateSprite:                                       ; Offset_0x028C08
                jmp     (AnimateSprite)                        ; Offset_0x01212E
Jmp_04_To_ModifySpriteAttr_2P_A1:                              ; Offset_0x028C0E
                jmp     (ModifySpriteAttr_2P_A1)               ; Offset_0x0129AA
Jmp_00_MarkObjGone_4:                                          ; Offset_0x028C14
                jmp     (MarkObjGone_4)                        ; Offset_0x01205C
Jmp_33_To_ModifySpriteAttr_2P:                                 ; Offset_0x028C1A
                jmp     (ModifySpriteAttr_2P)                  ; Offset_0x01298E
Jmp_15_To_SpeedToPos:                                          ; Offset_0x028C20
                jmp     (SpeedToPos)                           ; Offset_0x011F96
                dc.w    $0000 
;-------------------------------------------------------------------------------                                 
Obj_0x5C_Masher:                                               ; Offset_0x028C28
                include 'data\objects\obj_0x5C.asm' 
;------------------------------------------------------------------------------- 
                dc.w    $0000 
Jmp_23_To_MarkObjGone:                                         ; Offset_0x028D10
                jmp     (MarkObjGone)                          ; Offset_0x011FBC
Jmp_11_To_AnimateSprite:                                       ; Offset_0x028D16
                jmp     (AnimateSprite)                        ; Offset_0x01212E
Jmp_34_To_ModifySpriteAttr_2P:                                 ; Offset_0x028D1C
                jmp     (ModifySpriteAttr_2P)                  ; Offset_0x01298E
Jmp_16_To_SpeedToPos:                                          ; Offset_0x028D22
                jmp     (SpeedToPos)                           ; Offset_0x011F96
;-------------------------------------------------------------------------------
Obj_0x58_Boss_Explosions:                                      ; Offset_0x028D28
                include 'data\objects\obj_0x58.asm'                              
;------------------------------------------------------------------------------- 
CNz_Boss_Hit: ; Usado pelo chefe da Casino Night               ; Offset_0x028DF2
                move.b  Obj_Map_Id(A0), D0                               ; $001A
                jsr     (CalcSine)                             ; Offset_0x00396A
                asr.w   #$06, D0
                add.w   (Boss_Move_Buffer+$04).w, D0                 ; $FFFFF754
                move.w  D0, Obj_Y(A0)                                    ; $000C
                move.w  (Boss_Move_Buffer).w, Obj_X(A0)       ; $FFFFF750, $0008
                addq.b  #$02, Obj_Map_Id(A0)                             ; $001A
Boss_Hit:                                                      ; Offset_0x028E10                
                cmpi.b  #$07, (Boss_Flag).w                          ; $FFFFF7AA
                bne.s   Sub_Boss_Hit                           ; Offset_0x028E22
                cmpi.b  #$0E, Obj_Ani_Boss_Routine(A0)                   ; $0026
                bcc.s   Offset_0x028E68
                bra.s   Boss_Hit_2                             ; Offset_0x028E2A
;-------------------------------------------------------------------------------                
Sub_Boss_Hit:                                                  ; Offset_0x028E22
                cmpi.b  #$08, Obj_Ani_Boss_Routine(A0)                   ; $0026
                bcc.s   Offset_0x028E68
Boss_Hit_2:                                                    ; Offset_0x028E2A
                tst.b   Obj_Boss_Hit_2(A0)                               ; $0032
                beq.s   Offset_0x028E6A
                tst.b   Obj_Col_Flags(A0)                                ; $0020
                bne.s   Offset_0x028E68
                tst.b   Obj_Inertia(A0)                                  ; $0014
                bne.s   Offset_0x028E4C
                move.b  #$20, Obj_Inertia(A0)                            ; $0014
                move.w  #$00AC, D0
                jsr     (Play_Sfx)                             ; Offset_0x001912
Offset_0x028E4C:
                lea     ($FFFFFB22).w, A1
                moveq   #$00, D0
                tst.w   (A1)
                bne.s   Offset_0x028E5A
                move.w  #$0EEE, D0
Offset_0x028E5A:
                move.w  D0, (A1)
                subq.b  #$01, Obj_Inertia(A0)                            ; $0014
                bne.s   Offset_0x028E68
                move.b  #$0F, Obj_Col_Flags(A0)                          ; $0020
Offset_0x028E68:
                rts
Offset_0x028E6A:
                moveq   #$64, D0
                bsr     Jmp_00_To_AddPoints                    ; Offset_0x028FD0
                move.w  #$00B3, (Boss_Move_Buffer+$0C).w             ; $FFFFF75C
                move.b  #$08, Obj_Ani_Boss_Routine(A0)                   ; $0026
                cmpi.b  #$07, (Boss_Flag).w                          ; $FFFFF7AA
                bne.s   Offset_0x028E8A
                move.b  #$0E, Obj_Ani_Boss_Routine(A0)                   ; $0026
Offset_0x028E8A:
                rts
;-------------------------------------------------------------------------------    
Boss_Move:                                                     ; Offset_0x028E8C
                move.l  (Boss_Move_Buffer).w, D2                     ; $FFFFF750
                move.l  (Boss_Move_Buffer+$04).w, D3                 ; $FFFFF754
                move.w  (Boss_Move_Buffer+$08).w, D0                 ; $FFFFF758
                ext.l   D0
                asl.l   #$08, D0
                add.l   D0, D2
                move.w  (Boss_Move_Buffer+$0A).w, D0                 ; $FFFFF75A
                ext.l   D0
                asl.l   #$08, D0
                add.l   D0, D3
                move.l  D2, (Boss_Move_Buffer).w                     ; $FFFFF750
                move.l  D3, (Boss_Move_Buffer+$04).w                 ; $FFFFF754
                rts
;-------------------------------------------------------------------------------  
Boss_AnimateSprite:                                            ; Offset_0x028EB2
                moveq   #$00, D6
                move.l  A1, A4
                lea     (Boss_Animate_Buffer).w, A2                  ; $FFFFF740
                lea     Obj_Boss_Ani_Map(A0), A3                         ; $000B
                tst.b   (A3)
                bne.s   Offset_0x028EC6
                addq.w  #$02, A2
                bra.s   Offset_0x028ECA
Offset_0x028EC6:
                bsr     Offset_0x028ED8
Offset_0x028ECA:
                moveq   #$00, D6
                move.b  Obj_Ani_Boss_Cnt(A0), D6                         ; $000F
                subq.w  #$01, D6
                bmi.s   Offset_0x028F3E
                lea     Obj_Ani_Boss_Frame(A0), A3                       ; $0015
Offset_0x028ED8:
                move.l  A4, A1
                moveq   #$00, D0
                moveq   #$00, D1
                moveq   #$00, D2
                moveq   #$00, D4
                move.b  (A2)+, D0
                move.b  D0, D1
                lsr.b   #$04, D1
                andi.b  #$0F, D0
                move.b  D0, D2
                cmp.b   D0, D1
                beq.s   Offset_0x028EF4
                st      D4
Offset_0x028EF4:
                move.b  D0, D5
                lsl.b   #$04, D5
                or.b    D0, D5
                move.b  (A2)+, D0
                move.b  D0, D1
                lsr.b   #$04, D1
                tst.b   D4
                beq.s   Offset_0x028F08
                moveq   #$00, D0
                moveq   #$00, D1
Offset_0x028F08:
                andi.b  #$0F, D0
                subi.b  #$01, D0
                bpl.s   Offset_0x028F2A
                add.w   D2, D2
                adda.w  $00(A1, D2), A1
                move.b  (A1), D0
                move.b  $01(A1, D1), D2
                bmi.s   Offset_0x028F40
Offset_0x028F20:
                andi.b  #$7F, D2
                move.b  D2, (A3)
                addi.b  #$01, D1
Offset_0x028F2A:
                lsl.b   #$04, D1
                or.b    D1, D0
                move.b  D0, $FFFFFFFF(A2)
                move.b  D5, $FFFFFFFE(A2)
                adda.w  #$0006, A3
                dbra    D6, Offset_0x028ED8
Offset_0x028F3E:
                rts
Offset_0x028F40:
                addq.b  #$01, D2
                bne.s   Offset_0x028F4E
                move.b  #$00, D1
                move.b  $0001(A1), D2  
                bra.s   Offset_0x028F20
Offset_0x028F4E:
                addq.b  #$01, D2
                bne.s   Offset_0x028F5A
                addi.b  #$02, Obj_Ani_Boss_Routine(A0)                   ; $0026
                rts
Offset_0x028F5A:
                addq.b  #$01, D2
                bne.s   Offset_0x028F68
                andi.b  #$F0, D5
                or.b    $02(A1, D1), D5
                bra.s   Offset_0x028F2A
Offset_0x028F68:
                addq.b  #$01, D2
                bne.s   Offset_0x028F78
                moveq   #$00, D3
                move.b  $02(A1, D1), D1
                move.b  $01(A1, D1), D2
                bra.s   Offset_0x028F20
Offset_0x028F78:
                rts 
;===============================================================================
; Rotina utilizada após os chefes de fase serem derrotados
; ->>>
;===============================================================================    
Boss_Defeated:                                                 ; Offset_0x028F7A
                move.b  ($FFFFFE0F).w, D0
                andi.b  #$07, D0
                bne.s   Exit_Boss_Defeated                     ; Offset_0x028FC0
                jsr     (SingleObjectLoad)                     ; Offset_0x013BAA
                bne.s   Exit_Boss_Defeated                     ; Offset_0x028FC0
                move.b  #$58, Obj_Id(A1)                                 ; $0000
                move.w  Obj_X(A0), Obj_X(A1)                      ; $0008, $0008
                move.w  Obj_Y(A0), Obj_Y(A1)                      ; $000C, $000C
                jsr     (PseudoRandomNumber)                   ; Offset_0x003944
                move.w  D0, D1
                moveq   #$00, D1
                move.b  D0, D1
                lsr.b   #$02, D1
                subi.w  #$0020, D1
                add.w   D1, Obj_X(A1)                                    ; $0008
                lsr.w   #$08, D0
                lsr.b   #$02, D0
                subi.w  #$0020, D0
                add.w   D0, Obj_Y(A1)                                    ; $000C
Exit_Boss_Defeated:                                            ; Offset_0x028FC0
                rts
;===============================================================================
; Rotina utilizada após os chefes de fase serem derrotados
; <<<-
;===============================================================================
                dc.w    $0000    
Jmp_1A_To_DisplaySprite:                                       ; Offset_0x028FC4
                jmp     (DisplaySprite)                        ; Offset_0x0120DE
Jmp_1D_To_DeleteObject:                                        ; Offset_0x028FCA
                jmp     (DeleteObject)                         ; Offset_0x0120D0
Jmp_00_To_AddPoints:                                           ; Offset_0x028FD0
                jmp     (AddPoints)                            ; Offset_0x0394D0
Jmp_35_To_ModifySpriteAttr_2P:                                 ; Offset_0x028FD6
                jmp     (ModifySpriteAttr_2P)                     
;-------------------------------------------------------------------------------
Obj_0x5D_CPz_Boss:                                             ; Offset_0x028FDC
                include 'data\objects\obj_0x5D.asm'   
;-------------------------------------------------------------------------------
Jmp_1B_To_DisplaySprite:                                       ; Offset_0x02A678
                jmp     (DisplaySprite)                        ; Offset_0x0120DE
Jmp_1E_To_DeleteObject:                                        ; Offset_0x02A67E
                jmp     (DeleteObject)                         ; Offset_0x0120D0
Jmp_24_To_MarkObjGone:                                         ; Offset_0x02A684
                jmp     (MarkObjGone)                          ; Offset_0x011FBC
Jmp_05_To_ModifySpriteAttr_2P_A1:                              ; Offset_0x02A68A
                jmp     (ModifySpriteAttr_2P_A1)               ; Offset_0x0129AA
Jmp_01_To_AddPoints:                                           ; Offset_0x02A690
                jmp     (AddPoints)                            ; Offset_0x0394D0
Jmp_36_To_ModifySpriteAttr_2P:                                 ; Offset_0x02A696
                jmp     (ModifySpriteAttr_2P)                  ; Offset_0x01298E
Jmp_06_To_ObjectFall:                                          ; Offset_0x02A69C
                jmp     (ObjectFall)                           ; Offset_0x011F6A
Jmp_17_To_SpeedToPos:                                          ; Offset_0x02A6A2
                jmp     (SpeedToPos)                           ; Offset_0x011F96                
;-------------------------------------------------------------------------------  
Obj_0x56_GHz_Boss:                                             ; Offset_0x02A6A8
                include 'data\objects\obj_0x56.asm'       
;-------------------------------------------------------------------------------
                dc.w    $0000
Jmp_1C_To_DisplaySprite:                                       ; Offset_0x02B244
                jmp     (DisplaySprite)                        ; Offset_0x0120DE
Jmp_1F_To_DeleteObject:                                        ; Offset_0x02B24A
                jmp     (DeleteObject)                         ; Offset_0x0120D0
Jmp_25_To_MarkObjGone:                                         ; Offset_0x02B250
                jmp     (MarkObjGone)                          ; Offset_0x011FBC
Jmp_12_To_SingleObjectLoad_2:                                  ; Offset_0x02B256
                jmp     (SingleObjectLoad_2)                   ; Offset_0x013BC0
Jmp_12_To_AnimateSprite:                                       ; Offset_0x02B25C
                jmp     (AnimateSprite)                        ; Offset_0x01212E
Jmp_06_To_ModifySpriteAttr_2P_A1:                              ; Offset_0x02B262
                jmp     (ModifySpriteAttr_2P_A1)               ; Offset_0x0129AA
Jmp_02_To_ObjHitFloor:                                         ; Offset_0x02B268
                jmp     (ObjHitFloor)                          ; Offset_0x019B74
Jmp_02_To_AddPoints:                                           ; Offset_0x02B26E
                jmp     (AddPoints)                            ; Offset_0x0394D0
Jmp_37_To_ModifySpriteAttr_2P:                                 ; Offset_0x02B274
                jmp     (ModifySpriteAttr_2P)                  ; Offset_0x01298E
Jmp_07_To_ObjectFall:                                          ; Offset_0x02B27A
                jmp     (ObjectFall)                           ; Offset_0x011F6A
;-------------------------------------------------------------------------------   
Obj_0x52_HTz_Boss:                                             ; Offset_0x02B280
                include 'data\objects\obj_0x52.asm'                         
;-------------------------------------------------------------------------------
Jmp_1D_To_DisplaySprite:                                       ; Offset_0x02B9D4
                jmp     (DisplaySprite)                        ; Offset_0x0120DE
Jmp_20_To_DeleteObject:                                        ; Offset_0x02B9DA
                jmp     (DeleteObject)                         ; Offset_0x0120D0
Jmp_0A_To_SingleObjectLoad:                                    ; Offset_0x02B9E0
                jmp     (SingleObjectLoad)                     ; Offset_0x013BAA
Jmp_26_To_MarkObjGone:                                         ; Offset_0x02B9E6
                jmp     (MarkObjGone)                          ; Offset_0x011FBC
Jmp_01_To_Play_Sfx:                                            ; Offset_0x02B9EC
                jmp     (Play_Sfx)                             ; Offset_0x001912
Jmp_13_To_AnimateSprite:                                       ; Offset_0x02B9F2
                jmp     (AnimateSprite)                        ; Offset_0x01212E
Jmp_03_To_ObjHitFloor:                                         ; Offset_0x02B9F8
                jmp     (ObjHitFloor)                          ; Offset_0x019B74
Offset_0x02B9FE:
                jmp     (Offset_0x01DA68)
Jmp_38_To_ModifySpriteAttr_2P:                                 ; Offset_0x02BA04
                jmp     (ModifySpriteAttr_2P)                  ; Offset_0x01298E  
                dc.w    $0000
;------------------------------------------------------------------------------- 
Obj_0x89_NGHz_Boss:                                            ; Offset_0x02BA0C  
                include 'data\objects\obj_0x89.asm'    
;-------------------------------------------------------------------------------   
Jmp_1E_To_DisplaySprite:                                       ; Offset_0x02C4A4
                jmp     (DisplaySprite)                        ; Offset_0x0120DE
Jmp_21_To_DeleteObject:                                        ; Offset_0x02C4AA
                jmp     (DeleteObject)                         ; Offset_0x0120D0
Jmp_0B_To_SingleObjectLoad:                                    ; Offset_0x02C4B0
                jmp     (SingleObjectLoad)                     ; Offset_0x013BAA
Jmp_02_To_Play_Sfx:                                            ; Offset_0x02C4B6
                jmp     (Play_Sfx)                             ; Offset_0x001912
Jmp_13_To_SingleObjectLoad_2:                                  ; Offset_0x02C4BC
                jmp     (SingleObjectLoad_2)                   ; Offset_0x013BC0
Jmp_14_To_AnimateSprite:                                       ; Offset_0x02C4C2
                jmp     (AnimateSprite)                        ; Offset_0x01212E
Jmp_02_To_PseudoRandomNumber:                                  ; Offset_0x02C4C8
                jmp     (PseudoRandomNumber)                   ; Offset_0x003944
Jmp_03_To_AddPoints:                                           ; Offset_0x02C4CE
                jmp     (AddPoints)                            ; Offset_0x0394D0
Jmp_03_To_Platform_Object:                                     ; Offset_0x02C4D4
                jmp     (Platform_Object)                      ; Offset_0x014D02
Jmp_18_To_SolidObject:                                         ; Offset_0x02C4DA
                jmp     (SolidObject)                          ; Offset_0x0147F4                   
;------------------------------------------------------------------------------- 
Obj_0x57_DHz_Boss:                                             ; Offset_0x02C4E0
                include 'data\objects\obj_0x57.asm'                     
;------------------------------------------------------------------------------- 
                dc.w    $0000
Jmp_1F_To_DisplaySprite:                                       ; Offset_0x02CDF4
                jmp     (DisplaySprite)                        ; Offset_0x0120DE
Jmp_22_To_DeleteObject:                                        ; Offset_0x02CDFA
                jmp     (DeleteObject)                         ; Offset_0x0120D0
Jmp_0C_To_SingleObjectLoad:                                    ; Offset_0x02CE00
                jmp     (SingleObjectLoad)                     ; Offset_0x013BAA
Jmp_03_To_PseudoRandomNumber:                                  ; Offset_0x02CE06
                jmp     (PseudoRandomNumber)                   ; Offset_0x003944
Jmp_04_To_AddPoints:                                           ; Offset_0x02CE0C
                jmp     (AddPoints)                            ; Offset_0x0394D0
Jmp_08_To_ObjectFall:                                          ; Offset_0x02CE12
                jmp     (ObjectFall)                           ; Offset_0x011F6A
;-------------------------------------------------------------------------------   
Obj_0x51_CNz_Boss:                                             ; Offset_0x02CE18
                include 'data\objects\obj_0x51.asm'                           
;------------------------------------------------------------------------------- 
                dc.w    $0000       
Jmp_20_To_DisplaySprite:                                       ; Offset_0x02D718
                jmp     (DisplaySprite)                        ; Offset_0x0120DE
Jmp_23_To_DeleteObject:                                        ; Offset_0x02D71E
                jmp     (DeleteObject)                         ; Offset_0x0120D0
Jmp_0D_To_SingleObjectLoad:                                    ; Offset_0x02D724
                jmp     (SingleObjectLoad)                     ; Offset_0x013BAA
Jmp_14_To_SingleObjectLoad_2:                                  ; Offset_0x02D72A
                jmp     (SingleObjectLoad_2)                   ; Offset_0x013BC0
Jmp_15_To_AnimateSprite:                                       ; Offset_0x02D730
                jmp     (AnimateSprite)                        ; Offset_0x01212E
Jmp_04_To_ObjHitFloor:                                         ; Offset_0x02D736
                jmp     (ObjHitFloor)                          ; Offset_0x019B74
;-------------------------------------------------------------------------------    
Obj_0x54_Mz_Boss:                                              ; Offset_0x02D73C
                include 'data\objects\obj_0x54.asm' 
Obj_0x53_Mz_Boss_Balls_Robotniks:                              ; Offset_0x02DDDE
                include 'data\objects\obj_0x53.asm' 
;-------------------------------------------------------------------------------     
Jmp_21_To_DisplaySprite:                                       ; Offset_0x02E3C0
                jmp     (DisplaySprite)                        ; Offset_0x0120DE
Jmp_24_To_DeleteObject:                                        ; Offset_0x02E3C6
                jmp     (DeleteObject)                         ; Offset_0x0120D0
Jmp_0E_To_SingleObjectLoad:                                    ; Offset_0x02E3CC
                jmp     (SingleObjectLoad)                     ; Offset_0x013BAA
Jmp_03_To_Play_Sfx:                                            ; Offset_0x02E3D2
                jmp     (Play_Sfx)                             ; Offset_0x001912
Jmp_16_To_AnimateSprite:                                       ; Offset_0x02E3D8
                jmp     (AnimateSprite)                        ; Offset_0x01212E
Jmp_05_To_AddPoints:                                           ; Offset_0x02E3DE
                jmp     (AddPoints)                            ; Offset_0x0394D0
Jmp_09_To_ObjectFall:                                          ; Offset_0x02E3E4
                jmp     (ObjectFall)                           ; Offset_0x011F6A
Jmp_18_To_SpeedToPos:                                          ; Offset_0x02E3EA
                jmp     (SpeedToPos)                           ; Offset_0x011F96
;-------------------------------------------------------------------------------  
Obj_0x55_OOz_Boss:                                             ; Offset_0x02E3F0 
                include 'data\objects\obj_0x55.asm' 
;-------------------------------------------------------------------------------  
                dc.w    $0000
Jmp_22_To_DisplaySprite:                                       ; Offset_0x02ECE8
                jmp     (DisplaySprite)                        ; Offset_0x0120DE
Jmp_25_To_DeleteObject:                                        ; Offset_0x02ECEE
                jmp     (DeleteObject)                         ; Offset_0x0120D0
Jmp_0F_To_SingleObjectLoad:                                    ; Offset_0x02ECF4
                jmp     (SingleObjectLoad)                     ; Offset_0x013BAA
Jmp_27_To_MarkObjGone:                                         ; Offset_0x02ECFA
                jmp     (MarkObjGone)                          ; Offset_0x011FBC
Jmp_04_To_Play_Sfx:                                            ; Offset_0x02ED00
                jmp     (Play_Sfx)                             ; Offset_0x001912
Jmp_15_To_SingleObjectLoad_2:                                  ; Offset_0x02ED06
                jmp     (SingleObjectLoad_2)                   ; Offset_0x013BC0
Jmp_17_To_AnimateSprite:                                       ; Offset_0x02ED0C
                jmp     (AnimateSprite)                        ; Offset_0x01212E                
Jmp_04_To_PseudoRandomNumber:                                  ; Offset_0x02ED12
                jmp     (PseudoRandomNumber)                   ; Offset_0x003944
Jmp_39_To_ModifySpriteAttr_2P:                                 ; Offset_0x02ED18
                jmp     (ModifySpriteAttr_2P)                  ; Offset_0x01298E
Jmp_0B_To_CalcSine:                                            ; Offset_0x02ED1E
                jmp     (CalcSine)                             ; Offset_0x00396A
Jmp_19_To_SpeedToPos:                                          ; Offset_0x02ED24
                jmp     (SpeedToPos)                           ; Offset_0x011F96
                dc.w    $0000
;------------------------------------------------------------------------------- 
Obj_0x09_Sonic_In_Special_Stage:                               ; Offset_0x02ED2C
                include 'data\objects\obj_0x09.asm'     
Obj_0x63_SS_Objects_Shadow:                                    ; Offset_0x02F436    
                include 'data\objects\obj_0x63.asm'
;-------------------------------------------------------------------------------
Sonic_In_SS_AnimateData:                                       ; Offset_0x02F538
                dc.w    Offset_0x02F542-Sonic_In_SS_AnimateData
                dc.w    Offset_0x02F548-Sonic_In_SS_AnimateData
                dc.w    Offset_0x02F552-Sonic_In_SS_AnimateData
                dc.w    Offset_0x02F558-Sonic_In_SS_AnimateData
                dc.w    Offset_0x02F55C-Sonic_In_SS_AnimateData
Offset_0x02F542:
                dc.b    $03, $00, $01, $02, $03, $FF
Offset_0x02F548:
                dc.b    $03, $04, $05, $06, $07, $08, $09, $0A
                dc.b    $0B, $FF
Offset_0x02F552:
                dc.b    $03, $0C, $0D, $0E, $0F, $FF
Offset_0x02F558:
                dc.b    $01, $10, $11, $FF
Offset_0x02F55C:
                dc.b    $03, $00, $04, $0C, $04, $00, $04, $0C
                dc.b    $04, $FF
;-------------------------------------------------------------------------------
Sonic_In_SS_Mappings:                                          ; Offset_0x02F566
                dc.w    Offset_0x02F58A-Sonic_In_SS_Mappings
                dc.w    Offset_0x02F5A4-Sonic_In_SS_Mappings
                dc.w    Offset_0x02F5BE-Sonic_In_SS_Mappings
                dc.w    Offset_0x02F5D8-Sonic_In_SS_Mappings
                dc.w    Offset_0x02F5F2-Sonic_In_SS_Mappings
                dc.w    Offset_0x02F614-Sonic_In_SS_Mappings
                dc.w    Offset_0x02F63E-Sonic_In_SS_Mappings
                dc.w    Offset_0x02F668-Sonic_In_SS_Mappings
                dc.w    Offset_0x02F692-Sonic_In_SS_Mappings
                dc.w    Offset_0x02F6B4-Sonic_In_SS_Mappings
                dc.w    Offset_0x02F6DE-Sonic_In_SS_Mappings
                dc.w    Offset_0x02F708-Sonic_In_SS_Mappings
                dc.w    Offset_0x02F73A-Sonic_In_SS_Mappings
                dc.w    Offset_0x02F754-Sonic_In_SS_Mappings
                dc.w    Offset_0x02F76E-Sonic_In_SS_Mappings
                dc.w    Offset_0x02F788-Sonic_In_SS_Mappings
                dc.w    Offset_0x02F7A2-Sonic_In_SS_Mappings
                dc.w    Offset_0x02F7C4-Sonic_In_SS_Mappings
Offset_0x02F58A:
                dc.w    $0003
                dc.l    $E40F8000, $8000FFF0
                dc.l    $040A8010, $8008FFF0
                dc.l    $04018019, $800C0008
Offset_0x02F5A4:
                dc.w    $0003
                dc.l    $E40A8000, $8000FFF2
                dc.l    $FC0D8009, $8004FFF0
                dc.l    $0C058011, $8008FFF7
Offset_0x02F5BE:
                dc.w    $0003
                dc.l    $E40E8000, $8000FFF0
                dc.l    $FC0D800C, $8006FFF0
                dc.l    $0C098014, $800AFFF0
Offset_0x02F5D8:
                dc.w    $0003
                dc.l    $E40A8800, $8800FFF6
                dc.l    $FC0D8009, $8004FFF0
                dc.l    $0C098011, $8008FFF8
Offset_0x02F5F2:
                dc.w    $0004
                dc.l    $E40A8000, $8000FFEC
                dc.l    $E4038009, $80040004
                dc.l    $EC01800D, $8006000C
                dc.l    $FC0E800F, $8007FFE4
Offset_0x02F614:
                dc.w    $0005
                dc.l    $E4098000, $8000FFF4
                dc.l    $EC018006, $8003000C
                dc.l    $F40D8008, $8004FFEC
                dc.l    $040D8010, $8008FFE6
                dc.l    $14008018, $800CFFEE
Offset_0x02F63E:
                dc.w    $0005
                dc.l    $E4048000, $8000FFFB
                dc.l    $EC0E8002, $8001FFEC
                dc.l    $EC02800E, $8007000C
                dc.l    $04068011, $8008FFE7
                dc.l    $04058017, $800BFFF7
Offset_0x02F668:
                dc.w    $0005
                dc.l    $E4048000, $8000FFFC
                dc.l    $EC0F8002, $8001FFEC
                dc.l    $EC028012, $8009000C
                dc.l    $04008015, $800AFFE4
                dc.l    $0C058016, $800BFFEA
Offset_0x02F692:
                dc.w    $0004
                dc.l    $E4058000, $8000FFFC
                dc.l    $EC038004, $8002000C
                dc.l    $F40E8008, $8004FFEC
                dc.l    $0C058014, $800AFFEC
Offset_0x02F6B4:
                dc.w    $0005
                dc.l    $E4058000, $8000FFFC
                dc.l    $EC028004, $8002000C
                dc.l    $F40D8007, $8003FFEC
                dc.l    $040D800F, $8007FFE8
                dc.l    $EC008017, $800BFFF4
Offset_0x02F6DE:
                dc.w    $0005
                dc.l    $E4098000, $8000FFFB
                dc.l    $F4018006, $8003000E
                dc.l    $F40D8008, $8004FFEE
                dc.l    $040D8010, $8008FFE7
                dc.l    $14008018, $800CFFEF
Offset_0x02F708:
                dc.w    $0006
                dc.l    $E4008000, $80000002
                dc.l    $EC0D8001, $8000FFF4
                dc.l    $FC008009, $8004000C
                dc.l    $0401800A, $8005FFE4
                dc.l    $FC07800C, $8006FFEC
                dc.l    $FC068014, $800AFFFC
Offset_0x02F73A:
                dc.w    $0003
                dc.l    $F0068000, $8000FFE8
                dc.l    $08008006, $8003FFF0
                dc.l    $F00F8007, $8003FFF8
Offset_0x02F754:
                dc.w    $0003
                dc.l    $F0068000, $8000FFE8
                dc.l    $F1038006, $8003FFF8
                dc.l    $F00B800A, $80050000
Offset_0x02F76E:
                dc.w    $0003
                dc.l    $F1028000, $8000FFE8
                dc.l    $F0028003, $8001FFF0
                dc.l    $F00F8006, $8003FFF8
Offset_0x02F788:
                dc.w    $0003
                dc.l    $F8068000, $8000FFE8
                dc.l    $EF038006, $8003FFF8
                dc.l    $F00B800A, $80050000
Offset_0x02F7A2:
                dc.w    $0004
                dc.l    $EC0B8000, $8000FFE8
                dc.l    $0C04800C, $8006FFF0
                dc.l    $EC0B8800, $88000000
                dc.l    $0C04880C, $88060000
Offset_0x02F7C4:
                dc.w    $0004
                dc.l    $EC0B8000, $8000FFE8
                dc.l    $0C04800C, $8006FFF0
                dc.l    $EC0B8800, $88000000
                dc.l    $0C04880C, $88060000   
;-------------------------------------------------------------------------------
SS_Objects_Shadow_Mappings:                                    ; Offset_0x02F7E6
                dc.w    Offset_0x02F87C-SS_Objects_Shadow_Mappings
                dc.w    Offset_0x02F8E0-SS_Objects_Shadow_Mappings
                dc.w    Offset_0x02F944-SS_Objects_Shadow_Mappings
                dc.w    Offset_0x02F872-SS_Objects_Shadow_Mappings
                dc.w    Offset_0x02F8D6-SS_Objects_Shadow_Mappings
                dc.w    Offset_0x02F93A-SS_Objects_Shadow_Mappings
                dc.w    Offset_0x02F868-SS_Objects_Shadow_Mappings
                dc.w    Offset_0x02F8CC-SS_Objects_Shadow_Mappings
                dc.w    Offset_0x02F930-SS_Objects_Shadow_Mappings
                dc.w    Offset_0x02F85E-SS_Objects_Shadow_Mappings
                dc.w    Offset_0x02F8C2-SS_Objects_Shadow_Mappings
                dc.w    Offset_0x02F926-SS_Objects_Shadow_Mappings
                dc.w    Offset_0x02F854-SS_Objects_Shadow_Mappings
                dc.w    Offset_0x02F8B8-SS_Objects_Shadow_Mappings
                dc.w    Offset_0x02F91C-SS_Objects_Shadow_Mappings
                dc.w    Offset_0x02F84A-SS_Objects_Shadow_Mappings
                dc.w    Offset_0x02F8AE-SS_Objects_Shadow_Mappings
                dc.w    Offset_0x02F912-SS_Objects_Shadow_Mappings
                dc.w    Offset_0x02F840-SS_Objects_Shadow_Mappings
                dc.w    Offset_0x02F8A4-SS_Objects_Shadow_Mappings
                dc.w    Offset_0x02F908-SS_Objects_Shadow_Mappings
                dc.w    Offset_0x02F836-SS_Objects_Shadow_Mappings
                dc.w    Offset_0x02F89A-SS_Objects_Shadow_Mappings
                dc.w    Offset_0x02F8FE-SS_Objects_Shadow_Mappings
                dc.w    Offset_0x02F82C-SS_Objects_Shadow_Mappings
                dc.w    Offset_0x02F890-SS_Objects_Shadow_Mappings
                dc.w    Offset_0x02F8F4-SS_Objects_Shadow_Mappings
                dc.w    Offset_0x02F822-SS_Objects_Shadow_Mappings
                dc.w    Offset_0x02F886-SS_Objects_Shadow_Mappings
                dc.w    Offset_0x02F8EA-SS_Objects_Shadow_Mappings
Offset_0x02F822:
                dc.w    $0001
                dc.l    $FC008000, $8000FFFC
Offset_0x02F82C:
                dc.w    $0001
                dc.l    $FC008001, $8000FFFC
Offset_0x02F836:
                dc.w    $0001
                dc.l    $FC048002, $8001FFF8
Offset_0x02F840:
                dc.w    $0001
                dc.l    $FC048004, $8002FFF8
Offset_0x02F84A:
                dc.w    $0001
                dc.l    $FC048006, $8003FFF8
Offset_0x02F854:
                dc.w    $0001
                dc.l    $FC088008, $8004FFF4
Offset_0x02F85E:
                dc.w    $0001
                dc.l    $FC08800B, $8005FFF4
Offset_0x02F868:
                dc.w    $0001
                dc.l    $F80D800E, $8007FFF0
Offset_0x02F872:
                dc.w    $0001
                dc.l    $F80D8016, $800BFFF0
Offset_0x02F87C:
                dc.w    $0001
                dc.l    $F80D801E, $800FFFF0
Offset_0x02F886:
                dc.w    $0001
                dc.l    $FC008000, $8000FFFC
Offset_0x02F890:
                dc.w    $0001
                dc.l    $FC008001, $8000FFFC
Offset_0x02F89A:
                dc.w    $0001
                dc.l    $FC008002, $8001FFFC
Offset_0x02F8A4:
                dc.w    $0001
                dc.l    $F8058003, $8001FFF8
Offset_0x02F8AE:
                dc.w    $0001
                dc.l    $F8058007, $8003FFF8
Offset_0x02F8B8:
                dc.w    $0001
                dc.l    $F405800B, $8005FFFC
Offset_0x02F8C2:
                dc.w    $0001
                dc.l    $F40A800F, $8007FFF4
Offset_0x02F8CC:
                dc.w    $0001
                dc.l    $F40A8018, $800CFFF4
Offset_0x02F8D6:
                dc.w    $0001
                dc.l    $F00A8021, $8010FFF8
Offset_0x02F8E0:
                dc.w    $0001
                dc.l    $F00F802A, $8015FFF0
Offset_0x02F8EA:
                dc.w    $0001
                dc.l    $FC008000, $8000FFFC
Offset_0x02F8F4:
                dc.w    $0001
                dc.l    $FC008001, $8000FFFC
Offset_0x02F8FE:
                dc.w    $0001
                dc.l    $F8018002, $8001FFFC
Offset_0x02F908:
                dc.w    $0001
                dc.l    $F8018004, $8002FFFC
Offset_0x02F912:
                dc.w    $0001
                dc.l    $F8018006, $8003FFFC
Offset_0x02F91C:
                dc.w    $0001
                dc.l    $F4028008, $8004FFFC
Offset_0x02F926:
                dc.w    $0001
                dc.l    $F402800B, $8005FFFC
Offset_0x02F930:
                dc.w    $0001
                dc.l    $F402800E, $8007FFFC
Offset_0x02F93A:
                dc.w    $0001
                dc.l    $F0038011, $8008FFFC
Offset_0x02F944:
                dc.w    $0001
                dc.l    $F0038015, $800AFFFC
;-------------------------------------------------------------------------------
Sonic_In_SS_Dyn_Script:                                        ; Offset_0x02F94E
Miles_In_SS_Dyn_Script:
Miles_Tail_In_SS_Dyn_Script:
                dc.w    Offset_0x02FA00-Sonic_In_SS_Dyn_Script
                dc.w    Offset_0x02FA08-Sonic_In_SS_Dyn_Script
                dc.w    Offset_0x02FA10-Sonic_In_SS_Dyn_Script
                dc.w    Offset_0x02FA18-Sonic_In_SS_Dyn_Script
                dc.w    Offset_0x02FA20-Sonic_In_SS_Dyn_Script
                dc.w    Offset_0x02FA2A-Sonic_In_SS_Dyn_Script
                dc.w    Offset_0x02FA36-Sonic_In_SS_Dyn_Script
                dc.w    Offset_0x02FA42-Sonic_In_SS_Dyn_Script
                dc.w    Offset_0x02FA4E-Sonic_In_SS_Dyn_Script ; $08
                dc.w    Offset_0x02FA58-Sonic_In_SS_Dyn_Script
                dc.w    Offset_0x02FA64-Sonic_In_SS_Dyn_Script
                dc.w    Offset_0x02FA70-Sonic_In_SS_Dyn_Script
                dc.w    Offset_0x02FA7E-Sonic_In_SS_Dyn_Script
                dc.w    Offset_0x02FA86-Sonic_In_SS_Dyn_Script
                dc.w    Offset_0x02FA8E-Sonic_In_SS_Dyn_Script
                dc.w    Offset_0x02FA96-Sonic_In_SS_Dyn_Script
                dc.w    Offset_0x02FA9E-Sonic_In_SS_Dyn_Script ; $10
                dc.w    Offset_0x02FAA4-Sonic_In_SS_Dyn_Script
                dc.w    Offset_0x02FAAA-Sonic_In_SS_Dyn_Script
                dc.w    Offset_0x02FAAC-Sonic_In_SS_Dyn_Script
                dc.w    Offset_0x02FAAE-Sonic_In_SS_Dyn_Script
                dc.w    Offset_0x02FAB0-Sonic_In_SS_Dyn_Script
                dc.w    Offset_0x02FAB2-Sonic_In_SS_Dyn_Script
                dc.w    Offset_0x02FAB4-Sonic_In_SS_Dyn_Script
                dc.w    Offset_0x02FAB6-Sonic_In_SS_Dyn_Script ; $18
                dc.w    Offset_0x02FAB8-Sonic_In_SS_Dyn_Script
                dc.w    Offset_0x02FABA-Sonic_In_SS_Dyn_Script
                dc.w    Offset_0x02FABC-Sonic_In_SS_Dyn_Script
                dc.w    Offset_0x02FABE-Sonic_In_SS_Dyn_Script
                dc.w    Offset_0x02FAC2-Sonic_In_SS_Dyn_Script
                dc.w    Offset_0x02FAC6-Sonic_In_SS_Dyn_Script
                dc.w    Offset_0x02FACA-Sonic_In_SS_Dyn_Script
                dc.w    Offset_0x02FACE-Sonic_In_SS_Dyn_Script ; $20
                dc.w    Offset_0x02FAD4-Sonic_In_SS_Dyn_Script
                dc.w    Offset_0x02FADA-Sonic_In_SS_Dyn_Script
                dc.w    Offset_0x02FAE0-Sonic_In_SS_Dyn_Script
                dc.w    Offset_0x02FAE6-Sonic_In_SS_Dyn_Script
                dc.w    Offset_0x02FAEC-Sonic_In_SS_Dyn_Script
                dc.w    Offset_0x02FAF2-Sonic_In_SS_Dyn_Script
                dc.w    Offset_0x02FAF8-Sonic_In_SS_Dyn_Script
                dc.w    Offset_0x02FAFE-Sonic_In_SS_Dyn_Script ; $28
                dc.w    Offset_0x02FB06-Sonic_In_SS_Dyn_Script
                dc.w    Offset_0x02FB0C-Sonic_In_SS_Dyn_Script
                dc.w    Offset_0x02FB12-Sonic_In_SS_Dyn_Script
                dc.w    Offset_0x02FB1A-Sonic_In_SS_Dyn_Script
                dc.w    Offset_0x02FB20-Sonic_In_SS_Dyn_Script
                dc.w    Offset_0x02FB26-Sonic_In_SS_Dyn_Script
                dc.w    Offset_0x02FB2E-Sonic_In_SS_Dyn_Script
                dc.w    Offset_0x02FB36-Sonic_In_SS_Dyn_Script ; $30
                dc.w    Offset_0x02FB40-Sonic_In_SS_Dyn_Script
;---------------                
                dc.w    Offset_0x02FB4A-Miles_In_SS_Dyn_Script ; $32
                dc.w    Offset_0x02FB52-Miles_In_SS_Dyn_Script
                dc.w    Offset_0x02FB5C-Miles_In_SS_Dyn_Script
                dc.w    Offset_0x02FB66-Miles_In_SS_Dyn_Script
                dc.w    Offset_0x02FB72-Miles_In_SS_Dyn_Script
                dc.w    Offset_0x02FB7A-Miles_In_SS_Dyn_Script
                dc.w    Offset_0x02FB84-Miles_In_SS_Dyn_Script
                dc.w    Offset_0x02FB90-Miles_In_SS_Dyn_Script
                dc.w    Offset_0x02FB9A-Miles_In_SS_Dyn_Script 
                dc.w    Offset_0x02FBA4-Miles_In_SS_Dyn_Script
                dc.w    Offset_0x02FBB0-Miles_In_SS_Dyn_Script
                dc.w    Offset_0x02FBBC-Miles_In_SS_Dyn_Script
                dc.w    Offset_0x02FBC6-Miles_In_SS_Dyn_Script 
                dc.w    Offset_0x02FBCC-Miles_In_SS_Dyn_Script
                dc.w    Offset_0x02FBD4-Miles_In_SS_Dyn_Script ; $40
                dc.w    Offset_0x02FBDA-Miles_In_SS_Dyn_Script
                dc.w    Offset_0x02FBE2-Miles_In_SS_Dyn_Script
                dc.w    Offset_0x02FBE6-Miles_In_SS_Dyn_Script
                dc.w    Offset_0x02FBEA-Miles_In_SS_Dyn_Script ; $44
                dc.w    Offset_0x02FBEC-Miles_In_SS_Dyn_Script
                dc.w    Offset_0x02FBEE-Miles_In_SS_Dyn_Script
                dc.w    Offset_0x02FBF0-Miles_In_SS_Dyn_Script
                dc.w    Offset_0x02FBF2-Miles_In_SS_Dyn_Script
                dc.w    Offset_0x02FBF4-Miles_In_SS_Dyn_Script
                dc.w    Offset_0x02FBF6-Miles_In_SS_Dyn_Script
                dc.w    Offset_0x02FBF8-Miles_In_SS_Dyn_Script
                dc.w    Offset_0x02FBFA-Miles_In_SS_Dyn_Script
                dc.w    Offset_0x02FBFC-Miles_In_SS_Dyn_Script
                dc.w    Offset_0x02FBFE-Miles_In_SS_Dyn_Script
                dc.w    Offset_0x02FC00-Miles_In_SS_Dyn_Script
                dc.w    Offset_0x02FC02-Miles_In_SS_Dyn_Script
                dc.w    Offset_0x02FC04-Miles_In_SS_Dyn_Script
                dc.w    Offset_0x02FC06-Miles_In_SS_Dyn_Script
                dc.w    Offset_0x02FC08-Miles_In_SS_Dyn_Script
                dc.w    Offset_0x02FC0A-Miles_In_SS_Dyn_Script
                dc.w    Offset_0x02FC0C-Miles_In_SS_Dyn_Script
                dc.w    Offset_0x02FC0E-Miles_In_SS_Dyn_Script
                dc.w    Offset_0x02FC10-Miles_In_SS_Dyn_Script
                dc.w    Offset_0x02FC12-Miles_In_SS_Dyn_Script
Offset_0x02FA00:
                dc.w    $0003
                dc.w    $F000, $8100, $1190
Offset_0x02FA08:
                dc.w    $0003
                dc.w    $81B0, $7240, $32C0
Offset_0x02FA10:
                dc.w    $0003
                dc.w    $B300, $73C0, $5440
Offset_0x02FA18:
                dc.w    $0003
                dc.w    $81B0, $74A0, $5520
Offset_0x02FA20:
                dc.w    $0004
                dc.w    $8000, $3090, $10D0, $B0F0
Offset_0x02FA2A:
                dc.w    $0005
                dc.w    $51B0, $1210, $7230, $72B0, $0330
Offset_0x02FA36:
                dc.w    $0005
                dc.w    $1340, $B360, $2420, $5450, $34B0
Offset_0x02FA42:
                dc.w    $0005
                dc.w    $14F0, $F510, $2610, $0640, $3650
Offset_0x02FA4E:
                dc.w    $0004
                dc.w    $3690, $36D0, $B710, $37D0
Offset_0x02FA58:
                dc.w    $0005
                dc.w    $3810, $2850, $7880, $7900, $0980
Offset_0x02FA64:
                dc.w    $0005
                dc.w    $5990, $19F0, $7A10, $7A90, $0B10
Offset_0x02FA70:
                dc.w    $0006
                dc.w    $0B20, $7B30, $0BB0, $1BC0, $7BE0, $5C60
Offset_0x02FA7E:
                dc.w    $0003
                dc.w    $5000, $0060, $F070
Offset_0x02FA86:
                dc.w    $0003
                dc.w    $5170, $31D0, $B210
Offset_0x02FA8E:
                dc.w    $0003
                dc.w    $22D0, $2300, $F330
Offset_0x02FA96:
                dc.w    $0003
                dc.w    $5430, $3490, $B210
Offset_0x02FA9E:
                dc.w    $0002
                dc.w    $B000, $10C0
Offset_0x02FAA4:
                dc.w    $0002
                dc.w    $B0E0, $11A0
Offset_0x02FAAA:
                dc.w    $0000
Offset_0x02FAAC:
                dc.w    $0010
Offset_0x02FAAE:
                dc.w    $3020
Offset_0x02FAB0:
                dc.w    $3060
Offset_0x02FAB2:
                dc.w    $30A0
Offset_0x02FAB4:
                dc.w    $80E0
Offset_0x02FAB6:
                dc.w    $8170
Offset_0x02FAB8:
                dc.w    $F200
Offset_0x02FABA:
                dc.w    $F300
Offset_0x02FABC:
                dc.w    $F400
Offset_0x02FABE:
                dc.w    $0001
                dc.w    $0000
Offset_0x02FAC2:
                dc.w    $0001
                dc.w    $0010
Offset_0x02FAC6:
                dc.w    $0001
                dc.w    $1020
Offset_0x02FACA:
                dc.w    $0001
                dc.w    $3040
Offset_0x02FACE:
                dc.w    $0002
                dc.w    $0080, $3090
Offset_0x02FAD4:
                dc.w    $0002
                dc.w    $10D0, $50F0
Offset_0x02FADA:
                dc.w    $0002
                dc.w    $5150, $81B0
Offset_0x02FAE0:
                dc.w    $0002
                dc.w    $3240, $81B0
Offset_0x02FAE6:
                dc.w    $0002
                dc.w    $3280, $81B0
Offset_0x02FAEC:
                dc.w    $0002
                dc.w    $52C0, $B320
Offset_0x02FAF2:
                dc.w    $0002
                dc.w    $33E0, $B320
Offset_0x02FAF8:
                dc.w    $0002
                dc.w    $5420, $B320
Offset_0x02FAFE:
                dc.w    $0003
                dc.w    $3480, $34C0, $F500
Offset_0x02FB06:
                dc.w    $0002
                dc.w    $5600, $F500
Offset_0x02FB0C:
                dc.w    $0002
                dc.w    $5660, $F500
Offset_0x02FB12:
                dc.w    $0003
                dc.w    $36C0, $3700, $F740
Offset_0x02FB1A:
                dc.w    $0002
                dc.w    $5840, $F740
Offset_0x02FB20:
                dc.w    $0002
                dc.w    $58A0, $F740
Offset_0x02FB26:
                dc.w    $0003
                dc.w    $2360, $F390, $2490
Offset_0x02FB2E:
                dc.w    $0003
                dc.w    $74C0, $F540, $7640
Offset_0x02FB36:
                dc.w    $0004
                dc.w    $B6C0, $0780, $F790, $B890
Offset_0x02FB40:
                dc.w    $0004
                dc.w    $B950, $0A10, $FA20, $BB20
Offset_0x02FB4A:
                dc.w    $0003
                dc.w    $8000, $5090, $00F0
Offset_0x02FB52:
                dc.w    $0004
                dc.w    $3100, $5140, $31A0, $31E0
Offset_0x02FB5C:
                dc.w    $0004
                dc.w    $3220, $5260, $32C0, $3300
Offset_0x02FB66:
                dc.w    $0005
                dc.w    $3100, $5140, $3340, $3380, $03C0
Offset_0x02FB72:
                dc.w    $0003
                dc.w    $3000, $7040, $70C0
Offset_0x02FB7A:
                dc.w    $0004
                dc.w    $1140, $7160, $81E0, $1270
Offset_0x02FB84:
                dc.w    $0005
                dc.w    $0290, $22A0, $72D0, $0350, $5360
Offset_0x02FB90:
                dc.w    $0004
                dc.w    $03C0, $F3D0, $04D0, $14E0
Offset_0x02FB9A:
                dc.w    $0004
                dc.w    $3500, $3540, $7580, $5600
Offset_0x02FBA4:
                dc.w    $0005
                dc.w    $0660, $7670, $06F0, $7700, $1780
Offset_0x02FBB0:
                dc.w    $0005
                dc.w    $07A0, $B7B0, $0870, $3880, $18C0
Offset_0x02FBBC:
                dc.w    $0004
                dc.w    $08E0, $B8F0, $09B0, $79C0
Offset_0x02FBC6:
                dc.w    $0002
                dc.w    $8000, $7090
Offset_0x02FBCC:
                dc.w    $0003
                dc.w    $3110, $0150, $B160
Offset_0x02FBD4:
                dc.w    $0002
                dc.w    $1220, $F240
Offset_0x02FBDA:
                dc.w    $0003
                dc.w    $2340, $2370, $B160
Offset_0x02FBE2:
                dc.w    $0001
                dc.w    $7000
Offset_0x02FBE6:
                dc.w    $0001
                dc.w    $7080
Offset_0x02FBEA:
                dc.w    $5000
Offset_0x02FBEC:
                dc.w    $8060
Offset_0x02FBEE:
                dc.w    $50F0
Offset_0x02FBF0:
                dc.w    $5150
Offset_0x02FBF2:
                dc.w    $71B0
Offset_0x02FBF4:
                dc.w    $8230
Offset_0x02FBF6:
                dc.w    $82C0
Offset_0x02FBF8:
                dc.w    $8000
Offset_0x02FBFA:
                dc.w    $5090
Offset_0x02FBFC:
                dc.w    $50F0
Offset_0x02FBFE:
                dc.w    $7150
Offset_0x02FC00:
                dc.w    $B1D0
Offset_0x02FC02:
                dc.w    $8290
Offset_0x02FC04:
                dc.w    $8320
Offset_0x02FC06:
                dc.w    $5000
Offset_0x02FC08:
                dc.w    $8060
Offset_0x02FC0A:
                dc.w    $50F0
Offset_0x02FC0C:
                dc.w    $5150
Offset_0x02FC0E:
                dc.w    $71B0
Offset_0x02FC10:
                dc.w    $8230
Offset_0x02FC12:
                dc.w    $82C0                               
;-------------------------------------------------------------------------------
Jmp_23_To_DisplaySprite:                                       ; Offset_0x02FC14
                jmp     (DisplaySprite)                        ; Offset_0x0120DE   
                dc.w    $0000
;-------------------------------------------------------------------------------                                     
Obj_0x10_Miles_In_Special_Stage:                               ; Offset_0x02FC1C
                include 'data\objects\obj_0x10.asm'  
Obj_0x88_Miles_Tail_In_SS:                                     ; Offset_0x02FDDE   
                include 'data\objects\obj_0x88.asm'                 
;-------------------------------------------------------------------------------  
Miles_In_SS_AnimateData:                                       ; Offset_0x02FE82
                dc.w    Offset_0x02FE8A-Miles_In_SS_AnimateData
                dc.w    Offset_0x02FE90-Miles_In_SS_AnimateData
                dc.w    Offset_0x02FE9A-Miles_In_SS_AnimateData
                dc.w    Offset_0x02FEA0-Miles_In_SS_AnimateData
Offset_0x02FE8A:
                dc.b    $03, $00, $01, $02, $03, $FF
Offset_0x02FE90:
                dc.b    $03, $04, $05, $06, $07, $08, $09, $0A
                dc.b    $0B, $FF
Offset_0x02FE9A:
                dc.b    $03, $0C, $0D, $0E, $0F, $FF
Offset_0x02FEA0:
                dc.b    $01, $10, $11, $FF
;-------------------------------------------------------------------------------  
Miles_In_SS_Mappings:                                          ; Offset_0x02FEA4
                dc.w    Offset_0x02FEC8-Miles_In_SS_Mappings
                dc.w    Offset_0x02FEE2-Miles_In_SS_Mappings
                dc.w    Offset_0x02FF04-Miles_In_SS_Mappings
                dc.w    Offset_0x02FF26-Miles_In_SS_Mappings
                dc.w    Offset_0x02FF50-Miles_In_SS_Mappings
                dc.w    Offset_0x02FF6A-Miles_In_SS_Mappings
                dc.w    Offset_0x02FF8C-Miles_In_SS_Mappings
                dc.w    Offset_0x02FFB6-Miles_In_SS_Mappings
                dc.w    Offset_0x02FFD8-Miles_In_SS_Mappings
                dc.w    Offset_0x02FFFA-Miles_In_SS_Mappings
                dc.w    Offset_0x030024-Miles_In_SS_Mappings
                dc.w    Offset_0x03004E-Miles_In_SS_Mappings
                dc.w    Offset_0x030070-Miles_In_SS_Mappings
                dc.w    Offset_0x030082-Miles_In_SS_Mappings
                dc.w    Offset_0x03009C-Miles_In_SS_Mappings
                dc.w    Offset_0x0300AE-Miles_In_SS_Mappings
                dc.w    Offset_0x0300C8-Miles_In_SS_Mappings
                dc.w    Offset_0x0300DA-Miles_In_SS_Mappings
Offset_0x02FEC8:
                dc.w    $0003
                dc.l    $E80A8000, $8000FFF4
                dc.l    $00098009, $8004FFF4
                dc.l    $1000800F, $8007FFF4
Offset_0x02FEE2:
                dc.w    $0004
                dc.l    $E80C8000, $8000FFF0
                dc.l    $F0098004, $8002FFF3
                dc.l    $000C800A, $8005FFF0
                dc.l    $0805800E, $8007FFF8
Offset_0x02FF04:
                dc.w    $0004
                dc.l    $E80C8000, $8000FFF0
                dc.l    $F0098004, $8002FFF3
                dc.l    $000C800A, $8005FFF0
                dc.l    $0805800E, $8007FFF8
Offset_0x02FF26:
                dc.w    $0005
                dc.l    $E80C8800, $8800FFF0
                dc.l    $F0098804, $8802FFF5
                dc.l    $000C800A, $8005FFF0
                dc.l    $0805800E, $8007FFF8
                dc.l    $10008012, $80090008
Offset_0x02FF50:
                dc.w    $0003
                dc.l    $E1058000, $80000000
                dc.l    $F10D8004, $8002FFF8
                dc.l    $010D800C, $8006FFEC
Offset_0x02FF6A:
                dc.w    $0004
                dc.l    $E1018000, $80000000
                dc.l    $F10D8002, $8001FFF7
                dc.l    $010A800A, $8005FFEF
                dc.l    $01018013, $80090007
Offset_0x02FF8C:
                dc.w    $0005
                dc.l    $E8008000, $80000000
                dc.l    $EC088001, $8000FFF8
                dc.l    $F40D8004, $8002FFF0
                dc.l    $F400800C, $80060010
                dc.l    $0409800D, $8006FFF0
Offset_0x02FFB6:
                dc.w    $0004
                dc.l    $E9008000, $80000001
                dc.l    $F10F8001, $8000FFF0
                dc.l    $F9008011, $80080010
                dc.l    $11048012, $8009FFF0
Offset_0x02FFD8:
                dc.w    $0004
                dc.l    $E2058000, $80000000
                dc.l    $F20C8004, $8002FFF8
                dc.l    $FA078008, $8004FFF0
                dc.l    $FA098010, $80080000
Offset_0x02FFFA:
                dc.w    $0005
                dc.l    $E8008000, $80000000
                dc.l    $F00D8001, $8000FFF0
                dc.l    $F8008009, $80040010
                dc.l    $000D800A, $8005FFF0
                dc.l    $10048012, $8009FFF0
Offset_0x030024:
                dc.w    $0005
                dc.l    $E8008000, $80000000
                dc.l    $F00E8001, $8000FFF0
                dc.l    $F800800D, $80060010
                dc.l    $080C800E, $8007FFE8
                dc.l    $10048012, $8009FFF0
Offset_0x03004E:
                dc.w    $0004
                dc.l    $E8008000, $80000000
                dc.l    $F00E8001, $8000FFF0
                dc.l    $F800800D, $80060010
                dc.l    $080D800E, $8007FFE8
Offset_0x030070:
                dc.w    $0002
                dc.l    $F80A8000, $8000FFEC
                dc.l    $F0078009, $80040004
Offset_0x030082:
                dc.w    $0003
                dc.l    $F8058000, $8000FFEC
                dc.l    $08008004, $8002FFF4
                dc.l    $F00B8005, $8002FFFC
Offset_0x03009C:
                dc.w    $0002
                dc.l    $F7018000, $8000FFEC
                dc.l    $F00F8002, $8001FFF4
Offset_0x0300AE:
                dc.w    $0003
                dc.l    $F8028000, $8000FFEC
                dc.l    $F0028003, $8001FFF4
                dc.l    $F00B8006, $8003FFFC
Offset_0x0300C8:
                dc.w    $0002
                dc.l    $F0078000, $8000FFF0
                dc.l    $F0078800, $88000000
Offset_0x0300DA:
                dc.w    $0002
                dc.l    $F0078000, $8000FFF0
                dc.l    $F0078800, $88000000
;-------------------------------------------------------------------------------     
Miles_Tail_In_SS_AnimateData:                                  ; Offset_0x0300EC
                dc.w    Offset_0x0300F2-Miles_Tail_In_SS_AnimateData
                dc.w    Offset_0x0300FB-Miles_Tail_In_SS_AnimateData
                dc.w    Offset_0x030104-Miles_Tail_In_SS_AnimateData
Offset_0x0300F2:
                dc.b    $03, $00, $01, $02, $03, $04, $05, $06
                dc.b    $FF
Offset_0x0300FB:
                dc.b    $03, $07, $08, $09, $0A, $0B, $0C, $0D
                dc.b    $FF
Offset_0x030104:
                dc.b    $03, $0E, $0F, $10, $11, $12, $13, $14
                dc.b    $FF, $00              
;-------------------------------------------------------------------------------  
Miles_Tail_In_SS_Mappings:                                     ; Offset_0x03010E
                dc.w    Offset_0x030138-Miles_Tail_In_SS_Mappings
                dc.w    Offset_0x030142-Miles_Tail_In_SS_Mappings
                dc.w    Offset_0x03014C-Miles_Tail_In_SS_Mappings
                dc.w    Offset_0x030156-Miles_Tail_In_SS_Mappings
                dc.w    Offset_0x030160-Miles_Tail_In_SS_Mappings
                dc.w    Offset_0x03016A-Miles_Tail_In_SS_Mappings
                dc.w    Offset_0x030174-Miles_Tail_In_SS_Mappings
                dc.w    Offset_0x03017E-Miles_Tail_In_SS_Mappings
                dc.w    Offset_0x030188-Miles_Tail_In_SS_Mappings
                dc.w    Offset_0x030192-Miles_Tail_In_SS_Mappings
                dc.w    Offset_0x03019C-Miles_Tail_In_SS_Mappings
                dc.w    Offset_0x0301A6-Miles_Tail_In_SS_Mappings
                dc.w    Offset_0x0301B0-Miles_Tail_In_SS_Mappings
                dc.w    Offset_0x0301BA-Miles_Tail_In_SS_Mappings
                dc.w    Offset_0x0301C4-Miles_Tail_In_SS_Mappings
                dc.w    Offset_0x0301CE-Miles_Tail_In_SS_Mappings
                dc.w    Offset_0x0301D8-Miles_Tail_In_SS_Mappings
                dc.w    Offset_0x0301E2-Miles_Tail_In_SS_Mappings
                dc.w    Offset_0x0301EC-Miles_Tail_In_SS_Mappings
                dc.w    Offset_0x0301F6-Miles_Tail_In_SS_Mappings
                dc.w    Offset_0x030200-Miles_Tail_In_SS_Mappings
Offset_0x030138:
                dc.w    $0001
                dc.l    $FA068000, $8000FFFA
Offset_0x030142:
                dc.w    $0001
                dc.l    $000A8000, $8000FFF8
Offset_0x03014C:
                dc.w    $0001
                dc.l    $08098000, $8000FFF8
Offset_0x030156:
                dc.w    $0001
                dc.l    $FF068000, $8000FFF7
Offset_0x030160:
                dc.w    $0001
                dc.l    $F7078000, $8000FFF5
Offset_0x03016A:
                dc.w    $0001
                dc.l    $F70A8000, $8000FFF0
Offset_0x030174:
                dc.w    $0001
                dc.l    $F70A8000, $8000FFF0
Offset_0x03017E:
                dc.w    $0001
                dc.l    $000A8000, $8000FFF4
Offset_0x030188:
                dc.w    $0001
                dc.l    $08098000, $8000FFF3
Offset_0x030192:
                dc.w    $0001
                dc.l    $00068000, $8000FFF1
Offset_0x03019C:
                dc.w    $0001
                dc.l    $F8078000, $8000FFF4
Offset_0x0301A6:
                dc.w    $0001
                dc.l    $F80B8000, $8000FFF2
Offset_0x0301B0:
                dc.w    $0001
                dc.l    $F80A8000, $8000FFF3
Offset_0x0301BA:
                dc.w    $0001
                dc.l    $F80A8000, $8000FFF4
Offset_0x0301C4:
                dc.w    $0001
                dc.l    $FC098000, $8000FFEA
Offset_0x0301CE:
                dc.w    $0001
                dc.l    $F80A8000, $8000FFED
Offset_0x0301D8:
                dc.w    $0001
                dc.l    $F8068000, $8000FFED
Offset_0x0301E2:
                dc.w    $0001
                dc.l    $F7098000, $8000FFED
Offset_0x0301EC:
                dc.w    $0001
                dc.l    $F50D8000, $8000FFE5
Offset_0x0301F6:
                dc.w    $0001
                dc.l    $F00A8000, $8000FFED
Offset_0x030200:
                dc.w    $0001
                dc.l    $F00A8000, $8000FFED
;------------------------------------------------------------------------------- 
                dc.w    $0000  
Jmp_24_To_DisplaySprite:                                       ; Offset_0x03020C
                jmp     (DisplaySprite)                        ; Offset_0x0120DE    
Jmp_18_To_AnimateSprite:                                       ; Offset_0x030212
                jmp     (AnimateSprite)  
;-------------------------------------------------------------------------------
Obj_0x61_SS_Bomb:                                              ; Offset_0x030218
                include 'data\objects\obj_0x61.asm'  
Obj_0x60_SS_Rings:                                             ; Offset_0x030316
                include 'data\objects\obj_0x60.asm'    
;-------------------------------------------------------------------------------
Offset_0x030632:
                dc.b    $38, $48, $2A, $56, $1C, $64, $0E, $72
                dc.b    $00, $80    
Offset_0x03063C:
                dc.b    $40, $30, $50, $20, $60, $10, $70, $00 
                dc.b    $80, $00                          
Obj_0x5B_SS_Ring_Out:                                          ; Offset_0x030646  
                include 'data\objects\obj_0x5B.asm'  
;-------------------------------------------------------------------------------     
SS_Rings_AnimateData:                                          ; Offset_0x03073A
                dc.w    Offset_0x03074E-SS_Rings_AnimateData
                dc.w    Offset_0x030754-SS_Rings_AnimateData
                dc.w    Offset_0x03075A-SS_Rings_AnimateData
                dc.w    Offset_0x030760-SS_Rings_AnimateData
                dc.w    Offset_0x030766-SS_Rings_AnimateData
                dc.w    Offset_0x03076C-SS_Rings_AnimateData
                dc.w    Offset_0x030772-SS_Rings_AnimateData
                dc.w    Offset_0x030778-SS_Rings_AnimateData
                dc.w    Offset_0x03077E-SS_Rings_AnimateData
                dc.w    Offset_0x030784-SS_Rings_AnimateData
Offset_0x03074E:
                dc.b    $05, $00, $0A, $14, $0A, $FF                             
Offset_0x030754:
                dc.b    $05, $01, $0B, $15, $0B, $FF
Offset_0x03075A:
                dc.b    $05, $02, $0C, $16, $0C, $FF
Offset_0x030760:
                dc.b    $05, $03, $0D, $17, $0D, $FF
Offset_0x030766:
                dc.b    $05, $04, $0E, $18, $0E, $FF
Offset_0x03076C:
                dc.b    $05, $05, $0F, $19, $0F, $FF
Offset_0x030772:
                dc.b    $05, $06, $10, $1A, $10, $FF
Offset_0x030778:
                dc.b    $05, $07, $11, $1B, $11, $FF
Offset_0x03077E:
                dc.b    $05, $08, $12, $1C, $12, $FF
Offset_0x030784:
                dc.b    $05, $09, $13, $1D, $13, $FF                                  
;-------------------------------------------------------------------------------  
SS_Rings_Mappings:                                             ; Offset_0x03078A
                dc.w    Offset_0x0307C6-SS_Rings_Mappings
                dc.w    Offset_0x0307D0-SS_Rings_Mappings
                dc.w    Offset_0x0307DA-SS_Rings_Mappings
                dc.w    Offset_0x0307E4-SS_Rings_Mappings
                dc.w    Offset_0x0307EE-SS_Rings_Mappings
                dc.w    Offset_0x0307F8-SS_Rings_Mappings
                dc.w    Offset_0x030802-SS_Rings_Mappings
                dc.w    Offset_0x03080C-SS_Rings_Mappings
                dc.w    Offset_0x030816-SS_Rings_Mappings
                dc.w    Offset_0x030820-SS_Rings_Mappings
                dc.w    Offset_0x03082A-SS_Rings_Mappings
                dc.w    Offset_0x030834-SS_Rings_Mappings
                dc.w    Offset_0x03083E-SS_Rings_Mappings
                dc.w    Offset_0x030848-SS_Rings_Mappings
                dc.w    Offset_0x030852-SS_Rings_Mappings
                dc.w    Offset_0x03085C-SS_Rings_Mappings
                dc.w    Offset_0x030866-SS_Rings_Mappings
                dc.w    Offset_0x030870-SS_Rings_Mappings
                dc.w    Offset_0x03087A-SS_Rings_Mappings
                dc.w    Offset_0x030884-SS_Rings_Mappings
                dc.w    Offset_0x03088E-SS_Rings_Mappings
                dc.w    Offset_0x030898-SS_Rings_Mappings
                dc.w    Offset_0x0308A2-SS_Rings_Mappings
                dc.w    Offset_0x0308AC-SS_Rings_Mappings
                dc.w    Offset_0x0308B6-SS_Rings_Mappings
                dc.w    Offset_0x0308C0-SS_Rings_Mappings
                dc.w    Offset_0x0308CA-SS_Rings_Mappings
                dc.w    Offset_0x0308D4-SS_Rings_Mappings
                dc.w    Offset_0x0308DE-SS_Rings_Mappings
                dc.w    Offset_0x0308E8-SS_Rings_Mappings
Offset_0x0307C6:
                dc.w    $0001
                dc.l    $FC008000, $8000FFFC
Offset_0x0307D0:
                dc.w    $0001
                dc.l    $FC008001, $8000FFFC
Offset_0x0307DA:
                dc.w    $0001
                dc.l    $FC008002, $8001FFFC
Offset_0x0307E4:
                dc.w    $0001
                dc.l    $F8058003, $8001FFF8
Offset_0x0307EE:
                dc.w    $0001
                dc.l    $F8058007, $8003FFF8
Offset_0x0307F8:
                dc.w    $0001
                dc.l    $F805800B, $8005FFF8
Offset_0x030802:
                dc.w    $0001
                dc.l    $F805800F, $8007FFF8
Offset_0x03080C:
                dc.w    $0001
                dc.l    $F40A8013, $8009FFF4
Offset_0x030816:
                dc.w    $0001
                dc.l    $F40A801C, $800EFFF4
Offset_0x030820:
                dc.w    $0001
                dc.l    $F40A8025, $8012FFF4
Offset_0x03082A:
                dc.w    $0001
                dc.l    $FC00802E, $8017FFFC
Offset_0x030834:
                dc.w    $0001
                dc.l    $FC00802F, $8017FFFC
Offset_0x03083E:
                dc.w    $0001
                dc.l    $FC008030, $8018FFFC
Offset_0x030848:
                dc.w    $0001
                dc.l    $F8018031, $8018FFFC
Offset_0x030852:
                dc.w    $0001
                dc.l    $F8058033, $8019FFF8
Offset_0x03085C:
                dc.w    $0001
                dc.l    $F8058037, $801BFFF8
Offset_0x030866:
                dc.w    $0001
                dc.l    $F805803B, $801DFFF8
Offset_0x030870:
                dc.w    $0001
                dc.l    $F406803F, $801FFFF8
Offset_0x03087A:
                dc.w    $0001
                dc.l    $F4068045, $8022FFF8
Offset_0x030884:
                dc.w    $0001
                dc.l    $F40A804B, $8025FFF4
Offset_0x03088E:
                dc.w    $0001
                dc.l    $FC008054, $802AFFFC
Offset_0x030898:
                dc.w    $0001
                dc.l    $FC008055, $802AFFFC
Offset_0x0308A2:
                dc.w    $0001
                dc.l    $FC008056, $802BFFFC
Offset_0x0308AC:
                dc.w    $0001
                dc.l    $F8018057, $802BFFFC
Offset_0x0308B6:
                dc.w    $0001
                dc.l    $F8018059, $802CFFFC
Offset_0x0308C0:
                dc.w    $0001
                dc.l    $F801805B, $802DFFFC
Offset_0x0308CA:
                dc.w    $0001
                dc.l    $F801805D, $802EFFFC
Offset_0x0308D4:
                dc.w    $0001
                dc.l    $F402805F, $802FFFFC
Offset_0x0308DE:
                dc.w    $0001
                dc.l    $F4028062, $8031FFFC
Offset_0x0308E8:
                dc.w    $0001
                dc.l    $F4028065, $8032FFFC
;-------------------------------------------------------------------------------  
SS_Bombs_Animate_Data:                                         ; Offset_0x0308F2
                dc.w    Offset_0x030908-SS_Bombs_Animate_Data
                dc.w    Offset_0x03090B-SS_Bombs_Animate_Data
                dc.w    Offset_0x03090E-SS_Bombs_Animate_Data
                dc.w    Offset_0x030911-SS_Bombs_Animate_Data
                dc.w    Offset_0x030914-SS_Bombs_Animate_Data
                dc.w    Offset_0x030917-SS_Bombs_Animate_Data
                dc.w    Offset_0x03091A-SS_Bombs_Animate_Data
                dc.w    Offset_0x03091D-SS_Bombs_Animate_Data
                dc.w    Offset_0x030920-SS_Bombs_Animate_Data
                dc.w    Offset_0x030923-SS_Bombs_Animate_Data
                dc.w    Offset_0x030926-SS_Bombs_Animate_Data
Offset_0x030908:
                dc.b    $0B, $00, $FF
Offset_0x03090B:
                dc.b    $0B, $01, $FF
Offset_0x03090E:
                dc.b    $0B, $02, $FF
Offset_0x030911:
                dc.b    $0B, $03, $FF
Offset_0x030914:
                dc.b    $0B, $04, $FF
Offset_0x030917:
                dc.b    $0B, $05, $FF
Offset_0x03091A:
                dc.b    $0B, $06, $FF
Offset_0x03091D:
                dc.b    $0B, $07, $FF
Offset_0x030920:
                dc.b    $0B, $08, $FF
Offset_0x030923:
                dc.b    $0B, $09, $FF
Offset_0x030926:
                dc.b    $02, $0A, $0B, $0C, $FF, $00
;-------------------------------------------------------------------------------  
SS_Bombs_Mappings:                                             ; Offset_0x03092C
                dc.w    Offset_0x030946-SS_Bombs_Mappings
                dc.w    Offset_0x030950-SS_Bombs_Mappings
                dc.w    Offset_0x03095A-SS_Bombs_Mappings
                dc.w    Offset_0x030964-SS_Bombs_Mappings
                dc.w    Offset_0x03096E-SS_Bombs_Mappings
                dc.w    Offset_0x030978-SS_Bombs_Mappings
                dc.w    Offset_0x030982-SS_Bombs_Mappings
                dc.w    Offset_0x03098C-SS_Bombs_Mappings
                dc.w    Offset_0x030996-SS_Bombs_Mappings
                dc.w    Offset_0x0309A0-SS_Bombs_Mappings
                dc.w    Offset_0x0309AA-SS_Bombs_Mappings
                dc.w    Offset_0x0309B4-SS_Bombs_Mappings
                dc.w    Offset_0x0309BE-SS_Bombs_Mappings
Offset_0x030946:
                dc.w    $0001
                dc.l    $FC008000, $8000FFFC
Offset_0x030950:
                dc.w    $0001
                dc.l    $FC008000, $8000FFFC
Offset_0x03095A:
                dc.w    $0001
                dc.l    $F8058000, $8000FFF8
Offset_0x030964:
                dc.w    $0001
                dc.l    $F8058000, $8000FFF8
Offset_0x03096E:
                dc.w    $0001
                dc.l    $F8058000, $8000FFF8
Offset_0x030978:
                dc.w    $0001
                dc.l    $F40A8000, $8000FFF4
Offset_0x030982:
                dc.w    $0001
                dc.l    $F40A8000, $8000FFF4
Offset_0x03098C:
                dc.w    $0001
                dc.l    $F00F8000, $8000FFF0
Offset_0x030996:
                dc.w    $0001
                dc.l    $F00F8000, $8000FFF0
Offset_0x0309A0:
                dc.w    $0001
                dc.l    $F00F8000, $8000FFF0
Offset_0x0309AA:
                dc.w    $0001
                dc.l    $F00F8000, $8000FFF0
Offset_0x0309B4:
                dc.w    $0001
                dc.l    $F00F8010, $8008FFF0
Offset_0x0309BE:
                dc.w    $0001
                dc.l    $F00F8020, $8010FFF0
;-------------------------------------------------------------------------------               
Offset_0x0309C8: ; Referência do Special Stage      
                dc.w    Offset_0x0309E2-Offset_0x0309C8
                dc.w    Offset_0x0309E2-Offset_0x0309C8
                dc.w    Offset_0x0309E2-Offset_0x0309C8
                dc.w    Offset_0x0309E2-Offset_0x0309C8
                dc.w    Offset_0x0309E2-Offset_0x0309C8
                dc.w    Offset_0x0309E4-Offset_0x0309C8
                dc.w    Offset_0x0309F6-Offset_0x0309C8
                dc.w    Offset_0x0309E2-Offset_0x0309C8
                dc.w    Offset_0x0309E2-Offset_0x0309C8
                dc.w    Offset_0x0309FC-Offset_0x0309C8
                dc.w    Offset_0x0309E2-Offset_0x0309C8
                dc.w    Offset_0x0309E2-Offset_0x0309C8
                dc.w    Offset_0x0309E2-Offset_0x0309C8
Offset_0x0309E2:
                dc.b    $FF, $00
Offset_0x0309E4:
                dc.b    $07, $46, $10, $46, $20, $46, $31, $46
                dc.b    $40, $46, $50, $46, $60, $46, $71, $CE
                dc.b    $40, $00
Offset_0x0309F6:
                dc.b    $01, $46, $31, $C6, $50, $00
Offset_0x0309FC:
                dc.b    $08, $46, $01, $44, $10, $42, $20, $40
                dc.b    $31, $3E, $40, $3C, $50, $3A, $60, $38
                dc.b    $71, $36, $7F, $00
;-------------------------------------------------------------------------------
Jmp_25_To_DisplaySprite:                                       ; Offset_0x030A10
                jmp     (DisplaySprite)                        ; Offset_0x0120DE
Jmp_26_To_DeleteObject:                                        ; Offset_0x030A16
                jmp     (DeleteObject)                         ; Offset_0x0120D0
Jmp_19_To_AnimateSprite:                                       ; Offset_0x030A1C
                jmp     (AnimateSprite)                        ; Offset_0x01212E
Jmp_0C_To_CalcSine:                                            ; Offset_0x030A22
                jmp     (CalcSine)                             ; Offset_0x00396A
Jmp_0A_To_ObjectFall:                                          ; Offset_0x030A28
                jmp     (ObjectFall)                           ; Offset_0x011F6A    
                dc.w    $0000     
;-------------------------------------------------------------------------------
; Rotina usada para inicializar o parâmetro de alguns objetos
; ->>>
;-------------------------------------------------------------------------------
Object_Settings:                                               ; Offset_0x030A30
                moveq   #$00, D0
                move.b  Obj_Subtype(A0), D0                              ; $0028
Object_Settings_D0:                                            ; Offset_0x030A36
                move.w  ObjSet_List(PC, D0), D0                ; Offset_0x030A62
                lea     ObjSet_List(PC, D0), A1                ; Offset_0x030A62
Object_Settings_A1:                                            ; Offset_0x030A3E                
                move.l  (A1)+, Obj_Map(A0)                               ; $0004
                move.w  (A1)+, Obj_Art_VRAM(A0)                          ; $0002
                bsr     Jmp_3A_To_ModifySpriteAttr_2P          ; Offset_0x037638
                move.b  (A1)+, D0
                or.b    D0, Obj_Flags(A0)                                ; $0001
                move.b  (A1)+, Obj_Priority(A0)                          ; $0018
                move.b  (A1)+, Obj_Width(A0)                             ; $0019
                move.b  (A1), Obj_Col_Flags(A0)                          ; $0020
                addq.b  #$02, Obj_Routine(A0)                            ; $0024
                rts
;-------------------------------------------------------------------------------                
ObjSet_List:                                                   ; Offset_0x030A62
                dc.w    Obj_0x8C_Ptr-ObjSet_List               ; Offset_0x030E90
                dc.w    Obj_0x8E_Ptr-ObjSet_List               ; Offset_0x031116
                dc.w    Obj_0x8F_Ptr-ObjSet_List               ; Offset_0x031120
                dc.w    Obj_0x90_Ptr-ObjSet_List               ; Offset_0x03112A
                dc.w    Obj_0x91_Ptr-ObjSet_List               ; Offset_0x031338
                dc.w    Obj_0x92_Ptr-ObjSet_List               ; Offset_0x0314CA
                dc.w    Obj_0x96_Rexon_Body-ObjSet_List        ; Offset_0x031770
                dc.w    Obj_0x96_Ptr-ObjSet_List               ; Offset_0x031ABC
                dc.w    Rexon_Fireball_Map_Ptr-ObjSet_List     ; Offset_0x031BB2
                dc.w    Obj_0x99_Ptr-ObjSet_List               ; Offset_0x031CD6
                dc.w    Nebula_Bomb_Map_Ptr-ObjSet_List        ; Offset_0x031BBC
                dc.w    Obj_0x9A_Ptr-ObjSet_List               ; Offset_0x031F80
                dc.w    Obj_0x9B_Ptr-ObjSet_List               ; Offset_0x031F8A
                dc.w    Obj_0x9C_Ptr-ObjSet_List               ; Offset_0x031F94
                dc.w    Turtloid_Bullet_Map_Ptr-ObjSet_List    ; Offset_0x031BC6
                dc.w    Obj_0x9D_Ptr-ObjSet_List               ; Offset_0x0321CC
                dc.w    Coconuts_Coconut_Map_Ptr-ObjSet_List   ; Offset_0x031BD0
                dc.w    Obj_0x9E_Ptr-ObjSet_List               ; Offset_0x032416
                dc.w    Obj_0x9F_Ptr-ObjSet_List               ; Offset_0x03271E
                dc.w    Obj_0xA0_Ptr-ObjSet_List               ; Offset_0x032728
                dc.w    Obj_0xA1_Ptr-ObjSet_List               ; Offset_0x0329A8
                dc.w    Obj_0xA2_Ptr-ObjSet_List               ; Offset_0x0329B2
                dc.w    Obj_0xA3_Ptr-ObjSet_List               ; Offset_0x032C94
                dc.w    Obj_0xA4_Ptr-ObjSet_List               ; Offset_0x032E6E
                dc.w    Asteron_Spikes_Map_Ptr-ObjSet_List     ; Offset_0x031BDA
                dc.w    Obj_0xA5_Ptr-ObjSet_List               ; Offset_0x033096
                dc.w    Spiny_Shot_Map_Ptr-ObjSet_List         ; Offset_0x031BE4
                dc.w    Obj_0xA7_Ptr-ObjSet_List               ; Offset_0x0335CA
                dc.w    Obj_0xA8_Ptr-ObjSet_List               ; Offset_0x0335D4
                dc.w    Obj_0xA9_Ptr-ObjSet_List               ; Offset_0x0335DE
                dc.w    Obj_0xAA_Ptr-ObjSet_List               ; Offset_0x0335E8
                dc.w    Grabber_Unk_Map_Ptr-ObjSet_List        ; Offset_0x031BEE
                dc.w    Obj_0xAC_Ptr-ObjSet_List               ; Offset_0x0337A0
                dc.w    Obj_0xAD_Ptr-ObjSet_List               ; Offset_0x033954
                dc.w    Obj_0xAE_Ptr-ObjSet_List               ; Offset_0x03395E
                dc.w    Clucker_Bullet_Map_Ptr-ObjSet_List     ; Offset_0x031BF8
                dc.w    Obj_0xAF_Ptr-ObjSet_List               ; Offset_0x03413C
                dc.w    Metal_Sonic_Spikes_Map_Ptr-ObjSet_List ; Offset_0x031C02
                dc.w    Obj_0xB0_Ptr-ObjSet_List               ; Offset_0x0348F8
                dc.w    Obj_0xB1_Ptr-ObjSet_List               ; Offset_0x034902
                dc.w    Obj_0xB2_Ptr-ObjSet_List               ; Offset_0x0350B8
                dc.w    Obj_0xB2_Ptr-ObjSet_List               ; Offset_0x0350B8
                dc.w    Obj_0xB2_Ptr-ObjSet_List               ; Offset_0x0350B8
                dc.w    Obj_0xB3_Ptr-ObjSet_List               ; Offset_0x03525E
                dc.w    Obj_0xB3_Ptr-ObjSet_List               ; Offset_0x03525E
                dc.w    Obj_0xB3_Ptr-ObjSet_List               ; Offset_0x03525E
                dc.w    Obj_0xB4_Ptr-ObjSet_List               ; Offset_0x0352C8
                dc.w    Obj_0xB5_Ptr-ObjSet_List               ; Offset_0x035436
                dc.w    Obj_0xB5_Ptr-ObjSet_List               ; Offset_0x035436
                dc.w    Obj_0xB6_Ptr-ObjSet_List               ; Offset_0x035760
                dc.w    Obj_0xB6_Ptr-ObjSet_List               ; Offset_0x035760
                dc.w    Obj_0xB6_Ptr-ObjSet_List               ; Offset_0x035760
                dc.w    Obj_0xB6_Ptr-ObjSet_List               ; Offset_0x035760
                dc.w    Obj_0xB7_Ptr-ObjSet_List               ; Offset_0x035822
                dc.w    Obj_0xB8_Ptr-ObjSet_List               ; Offset_0x03597E
                dc.w    Obj_0xB9_Ptr-ObjSet_List               ; Offset_0x035A52
                dc.w    Obj_0xBA_Ptr-ObjSet_List               ; Offset_0x035AAA
                dc.w    Obj_0xBB_Ptr-ObjSet_List               ; Offset_0x035ADA
                dc.w    Obj_0xBC_Ptr-ObjSet_List               ; Offset_0x035B24
                dc.w    Obj_0xBD_Ptr-ObjSet_List               ; Offset_0x035C2C
                dc.w    Obj_0xBD_Ptr-ObjSet_List               ; Offset_0x035C2C
                dc.w    Obj_0xBE_Ptr-ObjSet_List               ; Offset_0x035D00
                dc.w    Obj_0xBF_Ptr-ObjSet_List               ; Offset_0x035DAA
                dc.w    Obj_0xC0_Ptr-ObjSet_List               ; Offset_0x035F26
                dc.w    Obj_0xC1_Ptr-ObjSet_List               ; Offset_0x03610E
                dc.w    Obj_0xC2_Ptr-ObjSet_List               ; Offset_0x036244
                dc.w    Obj_0xC3_Ptr-ObjSet_List               ; Offset_0x03627C
                dc.w    Cannon_Bullet_Map_Ptr-ObjSet_List      ; Offset_0x031C0C
                dc.w    Obj_0xC4_Ptr-ObjSet_List               ; Offset_0x0362FC 
                dc.w    Obj_0xC5_Ptr-ObjSet_List               ; Offset_0x0366BC
                dc.w    Obj_0xC5_01_Ptr-ObjSet_List            ; Offset_0x0366C6
                dc.w    Obj_0xC5_02_Ptr-ObjSet_List            ; Offset_0x0366D0
                dc.w    Obj_0xC5_03_Ptr-ObjSet_List            ; Offset_0x0366DA
                dc.w    Obj_0xC5_04_Ptr-ObjSet_List            ; Offset_0x0366E4
                dc.w    Obj_0xAF_01_Ptr-ObjSet_List            ; Offset_0x034146
                dc.w    Obj_0xC6_Ptr-ObjSet_List               ; Offset_0x036A82
                dc.w    Obj_0xC6_01_Ptr-ObjSet_List            ; Offset_0x036A8C
                dc.w    Obj_0xC6_02_Ptr-ObjSet_List            ; Offset_0x036A96
                dc.w    Obj_0xC8_Ptr-ObjSet_List               ; Offset_0x0375BC
                dc.w    Obj_0xC7_Ptr-ObjSet_List               ; Offset_0x0372BC
                dc.w    Obj_0xC7_Ptr-ObjSet_List               ; Offset_0x0372BC
                dc.w    Obj_0xC7_Ptr-ObjSet_List               ; Offset_0x0372BC
                dc.w    Obj_0xC7_Ptr-ObjSet_List               ; Offset_0x0372BC
                dc.w    Obj_0xC7_Ptr-ObjSet_List               ; Offset_0x0372BC
                dc.w    Obj_0xC7_Ptr-ObjSet_List               ; Offset_0x0372BC
                dc.w    Obj_0xC7_Ptr-ObjSet_List               ; Offset_0x0372BC
                dc.w    Obj_0xC7_Ptr-ObjSet_List               ; Offset_0x0372BC
                dc.w    Obj_0xC7_Ptr-ObjSet_List               ; Offset_0x0372BC
                dc.w    Obj_0xC7_Ptr-ObjSet_List               ; Offset_0x0372BC
                dc.w    Obj_0xC7_Ptr-ObjSet_List               ; Offset_0x0372BC
                dc.w    Obj_0xC7_Ptr-ObjSet_List               ; Offset_0x0372BC
;-------------------------------------------------------------------------------
Offset_0x030B18:
                moveq   #$00, D0
                moveq   #$00, D1
                lea     (Obj_Memory_Address).w, A1                   ; $FFFFB000
                move.w  Obj_X(A0), D2                                    ; $0008
                sub.w   Obj_X(A1), D2                                    ; $0008
                bcc.s   Offset_0x030B2C
                addq.w  #$02, D0
Offset_0x030B2C:
                move.w  Obj_Y(A0), D3                                    ; $000C
                sub.w   Obj_Y(A1), D3                                    ; $000C
                bcc.s   Offset_0x030B38
                addq.w  #$02, D1
Offset_0x030B38:
                rts     
;-------------------------------------------------------------------------------    
Offset_0x030B3A: ; Usado pelo objeto 0xC8 ( Crawl )
                move.w  D4, D5
                add.w   D5, D5
                moveq   #$00, D0
                moveq   #$00, D1
                lea     (Obj_Memory_Address).w, A1                   ; $FFFFB000
                move.w  Obj_X(A0), D2                                    ; $0008
                sub.w   Obj_X(A1), D2                                    ; $0008
                bcc.s   Offset_0x030B52
                addq.w  #$02, D0
Offset_0x030B52:
                move.w  Obj_Y(A0), D3                                    ; $000C
                sub.w   Obj_Y(A1), D3                                    ; $000C
                bcc.s   Offset_0x030B5E
                addq.w  #$02, D1
Offset_0x030B5E:
                add.w   D4, D2
                cmp.w   D5, D2
                bcc.s   Offset_0x030B6A
                add.w   D4, D3
                cmp.w   D5, D3
                bcs.s   Offset_0x030B9A
Offset_0x030B6A:
                moveq   #$00, D0
                moveq   #$00, D1
                lea     (Obj_Memory_Address+$0040).w, A1             ; $FFFFB040
                move.w  Obj_X(A0), D2                                    ; $0008
                sub.w   Obj_X(A1), D2                                    ; $0008
                bcc.s   Offset_0x030B7E
                addq.w  #$02, D0
Offset_0x030B7E:
                move.w  Obj_Y(A0), D3                                    ; $000C
                sub.w   Obj_Y(A1), D3                                    ; $000C
                bcc.s   Offset_0x030B8A
                addq.w  #$02, D1
Offset_0x030B8A:
                add.w   D4, D2
                cmp.w   D5, D2
                bcc.s   Offset_0x030B96
                add.w   D4, D3
                cmp.w   D5, D3
                bcs.s   Offset_0x030B9A
Offset_0x030B96:
                moveq   #$00, D4
                rts
Offset_0x030B9A:
                moveq   #$01, D4
                rts
;-------------------------------------------------------------------------------  
Offset_0x030B9E:
                move.w  Obj_Speed(A0), D2                                ; $0010
                bpl.s   Offset_0x030BB0
                neg.w   D0
                cmp.w   D0, D2
                bcc.s   Offset_0x030BB6
                move.w  D0, D2
                bra     Offset_0x030BB6
Offset_0x030BB0:
                cmp.w   D0, D2
                bls.s   Offset_0x030BB6
                move.w  D0, D2
Offset_0x030BB6:
                move.w  Obj_Speed_Y(A0), D3                              ; $0012
                bpl.s   Offset_0x030BC8
                neg.w   D1
                cmp.w   D1, D3
                bcc.s   Offset_0x030BCE
                move.w  D1, D3
                bra     Offset_0x030BCE
Offset_0x030BC8:
                cmp.w   D1, D3
                bls.s   Offset_0x030BCE
                move.w  D1, D3
Offset_0x030BCE:
                move.w  D2, Obj_Speed(A0)                                ; $0010
                move.w  D3, Obj_Speed_Y(A0)                              ; $0012
                rts
;-------------------------------------------------------------------------------  
Offset_0x030BD8: ; Usado pelo objeto 0x97 ( Rexon )
                moveq   #$00, D0
                move.w  D0, Obj_Speed(A0)                                ; $0010
                move.w  D0, Obj_Speed_Y(A0)                              ; $0012
                rts                                                     
;-------------------------------------------------------------------------------  
Load_Sub_Obj:                                                  ; Offset_0x030BE4
                bsr     Jmp_16_To_SingleObjectLoad_2           ; Offset_0x03761A
                bne.s   Offset_0x030C08
                move.w  (A2)+, D0
                move.w  A1, $00(A0, D0)
                move.b  (A2)+, Obj_Id(A1)                                ; $0000
                move.b  (A2)+, Obj_Subtype(A1)                           ; $0028
                move.w  A0, Obj_Control_Var_00(A1)                       ; $002C
                move.w  Obj_X(A0), Obj_X(A1)                      ; $0008, $0008
                move.w  Obj_Y(A0), Obj_Y(A1)                      ; $000C, $000C
Offset_0x030C08:
                rts                                                            
;------------------------------------------------------------------------------- 
Offset_0x030C0A: ; Usado pelo objeto 0xA7 ( Grabber / Aranha na CPz )
                move.w  Obj_X(A0), D2                                    ; $0008
                add.w   D0, D2
                move.w  D2, Obj_X(A1)                                    ; $0008
                move.w  Obj_Y(A0), D3                                    ; $000C
                add.w   D1, D3
                move.w  D3, Obj_Y(A1)                                    ; $000C
                rts 
;-------------------------------------------------------------------------------
Offset_0x030C20: ; Usado pelo objeto 0xB2 ( Tornado )
                move.w  ($FFFFF736).w, D0
                add.w   D0, Obj_X(A0)                                    ; $0008
                move.w  ($FFFFF738).w, D0
                add.w   D0, Obj_Y(A0)                                    ; $000C
                rts       
;-------------------------------------------------------------------------------    
Offset_0x030C32: ; Usado pelas nuvens na Sky Chase
                tst.w   (Two_Player_Flag).w                          ; $FFFFFFD8
                beq.s   Offset_0x030C3C
                bra     Jmp_26_To_DisplaySprite                ; Offset_0x0375F6
Offset_0x030C3C:
                move.w  Obj_X(A0), D0                                    ; $0008
                andi.w  #$FF80, D0
                sub.w   ($FFFFF7DA).w, D0
                bmi     Jmp_27_To_DeleteObject                 ; Offset_0x0375FC
                bra     Jmp_26_To_DisplaySprite                ; Offset_0x0375F6                         
;-------------------------------------------------------------------------------  
Offset_0x030C50: ; Usado pelo objeto 0xA7 ( Grabber / Aranha na CPz )
                move.b  Obj_Flags(A0), D0                                ; $0001
                andi.b  #$FC, D0
                move.b  Obj_Status(A0), D2                               ; $0022
                andi.b  #$FC, D2
                move.b  Obj_Flags(A1), D1                                ; $0001
                andi.b  #$03, D1
                or.b    D1, D0
                or.b    D1, D2
                move.b  D0, Obj_Flags(A0)                                ; $0001
                move.b  D2, Obj_Status(A0)                               ; $0022
                rts
;-------------------------------------------------------------------------------
; Offset_0x030C76:
                bsr     Offset_0x030B18
                bclr    #$00, Obj_Flags(A0)                              ; $0001
                bclr    #$00, Obj_Status(A0)                             ; $0022
                tst.w   D0
                beq.s   Offset_0x030C96
                bset    #$00, Obj_Flags(A0)                              ; $0001
                bset    #$00, Obj_Status(A0)                             ; $0022
Offset_0x030C96:
                rts                         
;-------------------------------------------------------------------------------  
Enemy_Weapon:                                                  ; Offset_0x030C98
                moveq   #$00, D1
Loop_Load_Weapon:                                              ; Offset_0x030C9A
                bsr     Jmp_16_To_SingleObjectLoad_2           ; Offset_0x03761A
                bne.s   Exit_Enemy_Weapon                      ; Offset_0x030CEA
                move.b  #$98, Obj_Id(A1)                                 ; $0000
                move.b  D2, Obj_Subtype(A1)                              ; $0028
                move.w  Obj_X(A0), Obj_X(A1)                      ; $0008, $0008
                move.w  Obj_Y(A0), Obj_Y(A1)                      ; $000C, $000C
                lea     (SpeedToPos), A3                       ; Offset_0x011F96
                move.l  A3, Obj_Timer(A1)                                ; $002A
                lea     $00(A2, D1), A3
                move.b  (A3)+, D0
                ext.w   D0
                add.w   D0, Obj_X(A1)                                    ; $0008
                move.b  (A3)+, D0
                ext.w   D0
                add.w   D0, Obj_Y(A1)                                    ; $000C
                move.b  (A3)+, Obj_Speed(A1)                             ; $0010
                move.b  (A3)+, Obj_Speed_Y(A1)                           ; $0012
                move.b  (A3)+, Obj_Map_Id(A1)                            ; $001A
                move.b  (A3)+, Obj_Flags(A1)                             ; $0001
                addq.w  #$06, D1
                dbra    D6, Loop_Load_Weapon                   ; Offset_0x030C9A
Exit_Enemy_Weapon:                                             ; Offset_0x030CEA
                rts                                                           
;-------------------------------------------------------------------------------  
Animate_Sprite_2:                                            ; ; Offset_0x030CEC
                moveq   #$00, D0
                move.b  Obj_Ani_Number(A0), D0                           ; $001C
                cmp.b   Obj_Ani_Flag(A0), D0                             ; $001D
                beq.s   Offset_0x030D08
                move.b  D0, Obj_Ani_Flag(A0)                             ; $001D
                move.b  #$00, Obj_Ani_Frame(A0)                          ; $001B
                move.b  #$00, Obj_Ani_Time(A0)                           ; $001E
Offset_0x030D08:
                subq.b  #$01, Obj_Ani_Time(A0)                           ; $001E
                bpl.s   Offset_0x030D2C
                add.w   D0, D0
                adda.w  $00(A1, D0), A1
                move.b  (A1), Obj_Ani_Time(A0)                           ; $001E
                moveq   #$00, D1
                move.b  Obj_Ani_Frame(A0), D1                            ; $001B
                move.b  $01(A1, D1), D0
                bmi.s   Offset_0x030D30
Offset_0x030D24:
                move.b  D0, Obj_Map_Id(A0)                               ; $001A
                addq.b  #$01, Obj_Ani_Frame(A0)                          ; $001B
Offset_0x030D2C:
                moveq   #$00, D0
                rts
Offset_0x030D30:
                addq.b  #$01, D0
                bne.s   Offset_0x030D44
                move.b  #$00, Obj_Ani_Frame(A0)                          ; $001B
                move.b  Obj_Flags(A1), D0                                ; $0001
                bsr.s   Offset_0x030D24
                moveq   #$01, D0
                rts
Offset_0x030D44:
                addq.b  #$01, D0
                bne.s   Offset_0x030D5A
                addq.b  #$02, Obj_Routine(A0)                            ; $0024
                move.b  #$00, Obj_Ani_Time(A0)                           ; $001E
                addq.b  #$01, Obj_Ani_Frame(A0)                          ; $001B
                moveq   #$01, D0
                rts
Offset_0x030D5A:
                addq.b  #$01, D0
                bne.s   Offset_0x030D66
                addq.b  #$02, Obj_Routine_2(A0)                          ; $0025
                moveq   #$01, D0
                rts
Offset_0x030D66:
                addq.b  #$01, D0
                bne.s   Offset_0x030D72
                move.b  #$01, Obj_Ani_Time(A0)                           ; $001E
                moveq   #$01, D0
Offset_0x030D72:
                rts 
;------------------------------------------------------------------------------- 
Offset_0x030D74: ; Usado pelo objeto 0xB2 ( Tornado )
                tst.w   (Two_Player_Flag).w                          ; $FFFFFFD8
                beq.s   Offset_0x030D7E
                bra     Jmp_26_To_DisplaySprite                ; Offset_0x0375F6
Offset_0x030D7E:
                move.w  Obj_X(A0), D0                                    ; $0008
                andi.w  #$FF80, D0
                sub.w   ($FFFFF7DA).w, D0
                cmpi.w  #$0280, D0
                bhi     Offset_0x030D96
                bra     Jmp_26_To_DisplaySprite                ; Offset_0x0375F6
Offset_0x030D96:
                bra     Jmp_27_To_DeleteObject                 ; Offset_0x0375FC 
;-------------------------------------------------------------------------------
; Rotina usada para inicializar o parâmetro de alguns objetos
; <<<-
;-------------------------------------------------------------------------------             
Obj_0x8C_NGHz_Whisp:                                           ; Offset_0x030D9A
                include 'data\objects\obj_0x8C.asm'
Obj_0x8D_Hidden_Grounder:                                      ; Offset_0x030EC8
Obj_0x8E_Grounder:                                             ; Offset_0x030EC8 
                include 'data\objects\obj_0x8E.asm'
Obj_0x8F_Wall_Hidden_Grounder:                                 ; Offset_0x030FDA
                include 'data\objects\obj_0x8F.asm'
Obj_0x90_Rock_Hidden_Grounder:                                 ; Offset_0x031026   
                include 'data\objects\obj_0x90.asm'
Obj_0x91_Chop_Chop:                                            ; Offset_0x0311FE
                include 'data\objects\obj_0x91.asm'
Obj_0x92_Spiker:                                               ; Offset_0x031360
                include 'data\objects\obj_0x92.asm'
Obj_0x93_Spiker_Drill:                                         ; Offset_0x031434      
                include 'data\objects\obj_0x93.asm'
Obj_0x95_Sol:                                                  ; Offset_0x03154C
                include 'data\objects\obj_0x95.asm'
Obj_0x94_Rexon_Body:                                           ; Offset_0x031770
Obj_0x96_Rexon_Body:                                           ; Offset_0x031770  
                include 'data\objects\obj_0x96.asm'
Obj_0x97_Rexon_Head:                                           ; Offset_0x03181E  
                include 'data\objects\obj_0x97.asm'                                                                        
Obj_0x98_Enemies_Weapons:                                      ; Offset_0x031B36  
                include 'data\objects\obj_0x98.asm'  
Obj_0x99_Nebula:                                               ; Offset_0x031C16
                include 'data\objects\obj_0x99.asm' 
Obj_0x9A_Turtloid:                                             ; Offset_0x031D84
                include 'data\objects\obj_0x9A.asm' 
Obj_0x9B_Turtloid_Rider:                                       ; Offset_0x031E54
                include 'data\objects\obj_0x9B.asm' 
Obj_0x9C_Enemy_Boost:                                          ; Offset_0x031ED0 
                include 'data\objects\obj_0x9C.asm'    
Obj_0x9D_Coconuts:                                             ; Offset_0x032048
                include 'data\objects\obj_0x9D.asm' 
Obj_0x9E_Crawlton:                                             ; Offset_0x032264  
                include 'data\objects\obj_0x9E.asm'
Obj_0x9F_Shellcracker:                                         ; Offset_0x03243A
                include 'data\objects\obj_0x9F.asm'      
Obj_0xA0_Shellcracker_Craw:                                    ; Offset_0x03258A  
                include 'data\objects\obj_0xA0.asm' 
Obj_0xA1_Slicer:                                               ; Offset_0x0327E2 
                include 'data\objects\obj_0xA1.asm'
Obj_0xA2_Slicer_Pincers:                                       ; Offset_0x0328C0
                include 'data\objects\obj_0xA2.asm' 
Obj_0xA3_Flasher:                                              ; Offset_0x032B26  
                include 'data\objects\obj_0xA3.asm' 
Obj_0xA4_Asteron:                                              ; Offset_0x032D84
                include 'data\objects\obj_0xA4.asm'     
Obj_0xA5_Horizontal_Spiny:                                     ; Offset_0x032ED2
                include 'data\objects\obj_0xA5.asm' 
Obj_0xA6_Vertical_Spiny:                                       ; Offset_0x032F6E    
                include 'data\objects\obj_0xA6.asm'       
Obj_0xA7_Grabber:                                              ; Offset_0x0331A2
                include 'data\objects\obj_0xA7.asm' 
Obj_0xA8_Grabber_Sub:                                          ; Offset_0x03334E
                include 'data\objects\obj_0xA8.asm' 
Obj_0xA9_Grabber_Sub:                                          ; Offset_0x033410
                include 'data\objects\obj_0xA9.asm' 
Obj_0xAA_Grabber_Sub:                                          ; Offset_0x033444
                include 'data\objects\obj_0xAA.asm' 
Obj_0xAB_Grabber_Sub:                                          ; Offset_0x033480   
                include 'data\objects\obj_0xAB.asm' 
Obj_0xAC_Balkiry:                                              ; Offset_0x033758    
                include 'data\objects\obj_0xAC.asm' 
Obj_0xAD_Clucker_Platform:                                     ; Offset_0x0337FA  
                include 'data\objects\obj_0xAD.asm'   
Obj_0xAE_Clucker:                                              ; Offset_0x033830
                include 'data\objects\obj_0xAE.asm'             
Obj_0xAF_Metal_Sonic:                                          ; Offset_0x033B0A    
                include 'data\objects\obj_0xAF.asm'               
Obj_0xB0_Sonic_SEGA_Logo:                                      ; Offset_0x03454A
                include 'data\objects\obj_0xB0.asm'
Obj_0xB1_Sonic_SEGA_Logo:                                      ; Offset_0x034766    
                include 'data\objects\obj_0xB1.asm'
Obj_0xB2_Tornado:                                              ; Offset_0x034C9C
                include 'data\objects\obj_0xB2.asm'
Obj_0xB3_Clouds:                                               ; Offset_0x03521A 
                include 'data\objects\obj_0xB3.asm'
Obj_0xB4_Vertical_Helix:                                       ; Offset_0x0352A4
                include 'data\objects\obj_0xB4.asm'
Obj_0xB5_Horizontal_Helix:                                     ; Offset_0x035316   
                include 'data\objects\obj_0xB5.asm'
Obj_0xB6_Platform_Helix:                                       ; Offset_0x035528
                include 'data\objects\obj_0xB6.asm'
Obj_0xB7_Vertical_Large_Laser:                                 ; Offset_0x0357EE
                include 'data\objects\obj_0xB7.asm'
Obj_0xB8_Cannon:                                               ; Offset_0x0358B0
                include 'data\objects\obj_0xB8.asm'
Obj_0xB9_Laser:                                                ; Offset_0x035A02
                include 'data\objects\obj_0xB9.asm'
Obj_0xBA_Conveyor_Belt_Wheels:                                 ; Offset_0x035A90
                include 'data\objects\obj_0xBA.asm'
Obj_0xBB:                                                      ; Offset_0x035AC0
                include 'data\objects\obj_0xBB.asm'
Obj_0xBC_Rocket_Boost:                                         ; Offset_0x035B00
                include 'data\objects\obj_0xBC.asm'
Obj_0xBD_SFz_Elevators:                                        ; Offset_0x035B42
                include 'data\objects\obj_0xBD.asm'
Obj_0xBE_Hatchways:                                            ; Offset_0x035C82  
                include 'data\objects\obj_0xBE.asm'
Obj_0xBF_Engine_Part:                                          ; Offset_0x035D86
                include 'data\objects\obj_0xBF.asm'
Obj_0xC0_Speed_Booster:                                        ; Offset_0x035DE0
                include 'data\objects\obj_0xC0.asm'  
Obj_0xC1_SFz_Breakable_Wall:                                   ; Offset_0x035F44  
                include 'data\objects\obj_0xC1.asm'  
Obj_0xC2_SFz_Boss_Access_Switch:                               ; Offset_0x0361C0
                include 'data\objects\obj_0xC2.asm'    
Obj_0xC3_SFz_Rotating_Platforms:                               ; Offset_0x036262
                include 'data\objects\obj_0xC3.asm'    
Obj_0xC4_SFz_Tornado_Smoke:                                    ; Offset_0x03629A    
                include 'data\objects\obj_0xC4.asm'  
Obj_0xC5_SFz_Boss:                                             ; Offset_0x036306
                include 'data\objects\obj_0xC5.asm'  
Obj_0xC6_Robotnik_Running:                                     ; Offset_0x03689C 
                include 'data\objects\obj_0xC6.asm'
Obj_0xC7_DEz_Final_Boss:                                       ; Offset_0x036BD0   
                include 'data\objects\obj_0xC7.asm'
Obj_0xC8_Crawl:                                                ; Offset_0x0374C2   
                include 'data\objects\obj_0xC8.asm'
;-------------------------------------------------------------------------------
                dc.w    $0000
Jmp_04_To_DisplaySprite_Param:                                 ; Offset_0x0375F0
                jmp     (DisplaySprite_Param)                  ; Offset_0x01211A
Jmp_26_To_DisplaySprite:                                       ; Offset_0x0375F6
                jmp     (DisplaySprite)                        ; Offset_0x0120DE
Jmp_27_To_DeleteObject:                                        ; Offset_0x0375FC                
                jmp     (DeleteObject)                         ; Offset_0x0120D0
Jmp_10_To_SingleObjectLoad:                                    ; Offset_0x037602                  
                jmp     (SingleObjectLoad)                     ; Offset_0x013BAA
Jmp_28_To_MarkObjGone:                                         ; Offset_0x037608                  
                jmp     (MarkObjGone)                          ; Offset_0x011FBC
Jmp_04_To_DeleteObject_A1:                                     ; Offset_0x03760E                  
                jmp     (DeleteObject_A1)                      ; Offset_0x0120D2
Jmp_05_To_Play_Sfx:                                            ; Offset_0x037614                
                jmp     (Play_Sfx)                             ; Offset_0x001912
Jmp_16_To_SingleObjectLoad_2:                                  ; Offset_0x03761A                    
                jmp     (SingleObjectLoad_2)                   ; Offset_0x013BC0
Jmp_1A_To_AnimateSprite:                                       ; Offset_0x037620                  
                jmp     (AnimateSprite)                        ; Offset_0x01212E
Jmp_05_To_PseudoRandomNumber:                                  ; Offset_0x037626                
                jmp     (PseudoRandomNumber)                   ; Offset_0x003944
Jmp_01_MarkObjGone_4:                                          ; Offset_0x03762C                  
                jmp     (MarkObjGone_4)                        ; Offset_0x01205C
Jmp_00_Load_Miles_Dynamic_PLC_D0:                              ; Offset_0x037632                 
                jmp     (Load_Miles_Dynamic_PLC_D0)            ; Offset_0x017D10
Jmp_3A_To_ModifySpriteAttr_2P:                                 ; Offset_0x037638                                                        
                jmp     (ModifySpriteAttr_2P)                  ; Offset_0x01298E
Jmp_00_To_Boss_Defeated: ; Usado pelo Metal Sonic              ; Offset_0x03763E        
                jmp     (Boss_Defeated)                        ; Offset_0x028F7A
Jmp_04_To_Platform_Object:                                     ; Offset_0x037644                                                        
                jmp     (Platform_Object)                      ; Offset_0x014D02     
Jmp_19_To_SolidObject:                                         ; Offset_0x03764A                                              
                jmp     (SolidObject)                          ; Offset_0x0147F4
Jmp_0B_To_ObjectFall:                                          ; Offset_0x037650                  
                jmp     (ObjectFall)                           ; Offset_0x011F6A
Jmp_1A_To_SpeedToPos:                                          ; Offset_0x037656                 
                jmp     (SpeedToPos)                           ; Offset_0x011F96  
;-------------------------------------------------------------------------------                
Obj_0x8A_S1_Credits:                                           ; Offset_0x03765C  
                include 'data\objects\obj_0x8A.asm'      
;-------------------------------------------------------------------------------                   
                nop
Jmp_3B_To_ModifySpriteAttr_2P:                                 ; Offset_0x037D70
                jmp     (ModifySpriteAttr_2P)                  ; Offset_0x01298E 
                dc.w    $0000                    
;-------------------------------------------------------------------------------  
Obj_0x3E_Egg_Prison:                                           ; Offset_0x037D78
                include 'data\objects\obj_0x3E.asm'    
;-------------------------------------------------------------------------------  
Jmp_3C_To_ModifySpriteAttr_2P:                                 ; Offset_0x038074
                jmp     (ModifySpriteAttr_2P)                  ; Offset_0x01298E
                dc.w    $0000  
;===============================================================================
; Rotina usada para responder quando o jogador tocar em algum objeto
; ->>>
;===============================================================================  
TouchResponse:                                                 ; Offset_0x03807C  
                nop
                bsr     Jmp_00_To_TouchRings                   ; Offset_0x0387B4
                cmpi.b  #$0C, (Level_Id).w                           ; $FFFFFE10
                bne.s   Touch_Response_Skip_CNz_Triangles      ; Offset_0x03808E
                bsr     Jmp_00_To_Touch_Response_Cnz_Triangles ; Offset_0x0387AE
Touch_Response_Skip_CNz_Triangles:                             ; Offset_0x03808E
                tst.b   (Boss_Flag).w                                ; $FFFFF7AA
                bne     Touch_Boss                             ; Offset_0x038184
                move.w  Obj_X(A0), D2                                    ; $0008
                move.w  Obj_Y(A0), D3                                    ; $000C
                subi.w  #$0008, D2
                moveq   #$00, D5
                move.b  Obj_Height_2(A0), D5                             ; $0016
                subq.b  #$03, D5
                sub.w   D5, D3
                cmpi.b  #$4D, Obj_Map_Id(A0)                             ; $001A
                bne.s   Touch_NoDuck                           ; Offset_0x0380BA
                addi.w  #$000C, D3
                moveq   #$0A, D5
Touch_NoDuck:                                                  ; Offset_0x0380BA
                move.w  #$0010, D4
                add.w   D5, D5
                lea     ($FFFFB800).w, A1
                move.w  #$005F, D6
Touch_Loop:                                                    ; Offset_0x0380C8
                move.b  Obj_Col_Flags(A1), D0                            ; $0020
                bne     Touch_Height                           ; Offset_0x0380DC
Touch_NextObject:                                              ; Offset_0x0380D0
                lea     Obj_Size(A1), A1                                 ; $0040
                dbra    D6, Touch_Loop                         ; Offset_0x0380C8
                moveq   #$00, D0
                rts
;-------------------------------------------------------------------------------                
Touch_Height:                                                  ; Offset_0x0380DC
                andi.w  #$003F, D0
                add.w   D0, D0
                lea     Touch_Sizes(PC, D0), A2                ; Offset_0x038128
                moveq   #$00, D1
                move.b  (A2)+, D1
                move.w  Obj_X(A1), D0                                    ; $0008
                sub.w   D1, D0
                sub.w   D2, D0
                bcc.s   Offset_0x0380FE
                add.w   D1, D1
                add.w   D1, D0
                bcs.s   Offset_0x038104
                bra     Touch_NextObject                       ; Offset_0x0380D0
Offset_0x0380FE:
                cmp.w   D4, D0
                bhi     Touch_NextObject                       ; Offset_0x0380D0
Offset_0x038104:
                moveq   #$00, D1
                move.b  (A2)+, D1
                move.w  Obj_Y(A1), D0                                    ; $000C
                sub.w   D1, D0
                sub.w   D3, D0
                bcc.s   Offset_0x03811E
                add.w   D1, D1
                add.w   D1, D0
                bcs     Offset_0x038210
                bra     Touch_NextObject                       ; Offset_0x0380D0
Offset_0x03811E:
                cmp.w   D5, D0
                bhi     Touch_NextObject                       ; Offset_0x0380D0
                bra     Offset_0x038210
;-------------------------------------------------------------------------------
Touch_Sizes:                                                   ; Offset_0x038128
                dc.b    $04, $04, $14, $14, $0C, $14, $14, $0C
                dc.b    $04, $10, $0C, $12, $10, $10, $06, $06
                dc.b    $18, $0C, $0C, $10, $10, $08, $08, $08
                dc.b    $14, $10, $14, $08, $0E, $0E, $18, $18
                dc.b    $28, $10, $10, $18, $08, $10, $20, $70
                dc.b    $40, $20, $80, $20, $20, $20, $08, $08
                dc.b    $04, $04, $20, $08, $0C, $0C, $08, $04
                dc.b    $18, $04, $28, $04, $04, $08, $04, $18
                dc.b    $04, $28, $04, $10, $18, $18, $0C, $18
                dc.b    $48, $08, $18, $28, $10, $04, $20, $02
                dc.b    $04, $40, $18, $80, $20, $10, $10, $02
                dc.b    $10, $01, $02, $08
;-------------------------------------------------------------------------------  
Touch_Boss:                                                    ; Offset_0x038184
                lea     Touch_Sizes(PC), A3                    ; Offset_0x038128
                move.w  Obj_X(A0), D2                                    ; $0008
                move.w  Obj_Y(A0), D3                                    ; $000C
                subi.w  #$0008, D2
                moveq   #$00, D5
                move.b  Obj_Height_2(A0), D5                             ; $0016
                subq.b  #$03, D5
                sub.w   D5, D3
                cmpi.b  #$4D, Obj_Map_Id(A0)                             ; $001A
                bne.s   Touch_NoDuck_Boss                      ; Offset_0x0381AC
                addi.w  #$000C, D3
                moveq   #$0A, D5
Touch_NoDuck_Boss:                                             ; Offset_0x0381AC
                move.w  #$0010, D4
                add.w   D5, D5
                lea     ($FFFFB800).w, A1
                move.w  #$005F, D6
Offset_0x0381BA:
                move.b  Obj_Col_Flags(A1), D0                            ; $0020
                bne.s   Offset_0x0381CC
Offset_0x0381C0:
                lea     Obj_Size(A1), A1                                 ; $0040
                dbra    D6, Offset_0x0381BA
                moveq   #$00, D0
                rts
Offset_0x0381CC:
                bsr     Offset_0x038528
                andi.w  #$003F, D0
                beq.s   Offset_0x0381C0
                add.w   D0, D0
                lea     $00(A3, D0), A2
                moveq   #$00, D1
                move.b  (A2)+, D1
                move.w  Obj_X(A1), D0                                    ; $0008
                sub.w   D1, D0
                sub.w   D2, D0
                bcc.s   Offset_0x0381F2
                add.w   D1, D1
                add.w   D1, D0
                bcs.s   Offset_0x0381F6
                bra.s   Offset_0x0381C0
Offset_0x0381F2:
                cmp.w   D4, D0
                bhi.s   Offset_0x0381C0
Offset_0x0381F6:
                moveq   #$00, D1
                move.b  (A2)+, D1
                move.w  Obj_Y(A1), D0                                    ; $000C
                sub.w   D1, D0
                sub.w   D3, D0
                bcc.s   Offset_0x03820C
                add.w   D1, D1
                add.w   D1, D0
                bcs.s   Offset_0x038210
                bra.s   Offset_0x0381C0
Offset_0x03820C:
                cmp.w   D5, D0
                bhi.s   Offset_0x0381C0
Offset_0x038210:
                move.b  Obj_Col_Flags(A1), D1                            ; $0020
                andi.b  #$C0, D1
                beq     Offset_0x03828A
                cmpi.b  #$C0, D1
                beq     Touch_Special                          ; Offset_0x038478
                tst.b   D1
                bmi     Offset_0x03835E
                move.b  Obj_Col_Flags(A1), D0                            ; $0020
                andi.b  #$3F, D0
                cmpi.b  #$06, D0
                beq.s   Offset_0x03824A
                cmpi.w  #$005A, Obj_P_Invunerblt_Time(A0)                ; $0030
                bcc     Offset_0x038248
                move.b  #$04, Obj_Routine(A1)                            ; $0024
Offset_0x038248:
                rts
Offset_0x03824A:
                tst.w   Obj_Speed_Y(A0)                                  ; $0012
                bpl.s   Offset_0x038276
                move.w  Obj_Y(A0), D0                                    ; $000C
                subi.w  #$0010, D0
                cmp.w   Obj_Y(A1), D0                                    ; $000C
                bcs.s   Offset_0x038288
                neg.w   Obj_Speed_Y(A0)                                  ; $0012
                move.w  #$FE80, Obj_Speed_Y(A1)                          ; $0012
                tst.b   Obj_Routine_2(A1)                                ; $0025
                bne.s   Offset_0x038288
                move.b  #$04, Obj_Routine_2(A1)                          ; $0025
                rts
Offset_0x038276:
                cmpi.b  #$02, Obj_Ani_Number(A0)                         ; $001C
                bne.s   Offset_0x038288
                neg.w   Obj_Speed_Y(A0)                                  ; $0012
                move.b  #$04, Obj_Routine(A1)                            ; $0024
Offset_0x038288:
                rts
Offset_0x03828A:
                btst    #$01, Obj_Player_Status(A0)                      ; $002B
                bne.s   Offset_0x0382A4
                cmpi.b  #$09, Obj_Ani_Number(A0)                         ; $001C
                beq.s   Offset_0x0382A4
                cmpi.b  #$02, Obj_Ani_Number(A0)                         ; $001C
                bne     Offset_0x03835E
Offset_0x0382A4:
                btst    #$06, Obj_Flags(A1)                              ; $0001
                beq.s   Offset_0x0382C6
                tst.b   Obj_Boss_Hit_2(A1)                               ; $0032
                beq.s   Offset_0x0382C4
                neg.w   Obj_Speed(A0)                                    ; $0010
                neg.w   Obj_Speed_Y(A0)                                  ; $0012
                move.b  #$00, Obj_Col_Flags(A1)                          ; $0020
                subq.b  #$01, Obj_Boss_Hit_2(A1)                         ; $0032
Offset_0x0382C4:
                rts
Offset_0x0382C6:
                tst.b   Obj_Col_Prop(A1)                                 ; $0021
                beq.s   Touch_KillEnemy                        ; Offset_0x0382E8
                neg.w   Obj_Speed(A0)                                    ; $0010
                neg.w   Obj_Speed_Y(A0)                                  ; $0012
                move.b  #$00, Obj_Col_Flags(A1)                          ; $0020
                subq.b  #$01, Obj_Col_Prop(A1)                           ; $0021
                bne.s   Offset_0x0382E6
                bset    #$07, Obj_Status(A1)                             ; $0022
Offset_0x0382E6:
                rts
;-------------------------------------------------------------------------------                
Touch_KillEnemy:                                               ; Offset_0x0382E8
                bset    #$07, Obj_Status(A1)                             ; $0022
                moveq   #$00, D0
                move.w  ($FFFFF7D0).w, D0
                addq.w  #$02, ($FFFFF7D0).w
                cmpi.w  #$0006, D0
                bcs.s   Offset_0x038300
                moveq   #$06, D0
Offset_0x038300:
                move.w  D0, $003E(A1)
                move.w  Enemy_Points(PC, D0), D0               ; Offset_0x038350
                cmpi.w  #$0020, ($FFFFF7D0).w
                bcs.s   Offset_0x03831A
                move.w  #$03E8, D0
                move.w  #$000A, $003E(A1)
Offset_0x03831A:
                bsr     AddPoints                              ; Offset_0x0394D0
                move.b  #$27, Obj_Id(A1)                                 ; $0000
                move.b  #$00, Obj_Routine(A1)                            ; $0024
                tst.w   Obj_Speed_Y(A0)                                  ; $0012
                bmi.s   Offset_0x038340
                move.w  Obj_Y(A0), D0                                    ; $000C
                cmp.w   Obj_Y(A1), D0                                    ; $000C
                bcc.s   Offset_0x038348
                neg.w   Obj_Speed_Y(A0)                                  ; $0012
                rts
Offset_0x038340:
                addi.w  #$0100, Obj_Speed_Y(A0)                          ; $0012
                rts
Offset_0x038348:
                subi.w  #$0100, Obj_Speed_Y(A0)                          ; $0012
                rts   
;-------------------------------------------------------------------------------  
Enemy_Points:                                                  ; Offset_0x038350
                dc.w    $000A      ;  100
                dc.w    $0014      ;  200
                dc.w    $0032      ;  500
                dc.w    $0064      ; 1000   
;-------------------------------------------------------------------------------   
Offset_0x038358:
                bset    #$07, Obj_Status(A1)                             ; $0022
Offset_0x03835E:
                btst    #$01, Obj_Player_Status(A0)                      ; $002B
                beq.s   Touch_Hurt                             ; Offset_0x03836A
Offset_0x038366:
                moveq   #-$01, D0
                rts
;-------------------------------------------------------------------------------                 
Touch_Hurt:                                                    ; Offset_0x03836A
                nop
                tst.w   Obj_P_Invunerblt_Time(A0)                        ; $0030
                bne.s   Offset_0x038366
                move.l  A1, A2
;-------------------------------------------------------------------------------                
Hurt_Player:                                                   ; Offset_0x038374                
                cmpa.w  #Obj_Memory_Address, A0                          ; $B000
                beq.s   Hurt_Player_D0                         ; Offset_0x038380
                tst.w   (Two_Player_Flag).w                          ; $FFFFFFD8
                beq.s   Offset_0x0383B0
Hurt_Player_D0:                                                ; Offset_0x038380
                btst    #$00, Obj_Player_Status(A0)                      ; $002B
                bne.s   Hurt_Shield                            ; Offset_0x0383AA
                tst.w   (Ring_Count).w                               ; $FFFFFE20
                beq     Hurt_NoRings                           ; Offset_0x038418
                jsr     (SingleObjectLoad)                     ; Offset_0x013BAA
                bne.s   Hurt_Shield                            ; Offset_0x0383AA
                move.b  #$37, Obj_Id(A1)                                 ; $0000
                move.w  Obj_X(A0), Obj_X(A1)                             ; $0008
                move.w  Obj_Y(A0), Obj_Y(A1)                             ; $000C
Hurt_Shield:                                                   ; Offset_0x0383AA
                bclr    #$00, Obj_Player_Status(A0)                      ; $002B
Offset_0x0383B0:
                move.b  #$04, Obj_Routine(A0)                            ; $0024
                bsr     Jmp_00_To_Sonic_ResetOnFloor           ; Offset_0x0387A8
                bset    #$01, Obj_Status(A0)                             ; $0022
                move.w  #$FC00, Obj_Speed_Y(A0)                          ; $0012
                move.w  #$FE00, Obj_Speed(A0)                            ; $0010
                btst    #$06, Obj_Status(A0)                             ; $0022
                beq.s   Offset_0x0383E0
                move.w  #$FE00, Obj_Speed_Y(A0)                          ; $0012
                move.w  #$FF00, Obj_Speed(A0)                            ; $0010
Offset_0x0383E0:
                move.w  Obj_X(A0), D0                                    ; $0008
                cmp.w   Obj_X(A2), D0                                    ; $0008
                bcs.s   Offset_0x0383EE
                neg.w   Obj_Speed(A0)                                    ; $0010
Offset_0x0383EE:
                move.w  #$0000, Obj_Inertia(A0)                          ; $0014
                move.b  #$1A, Obj_Ani_Number(A0)                         ; $001C
                move.w  #$0078, Obj_P_Invunerblt_Time(A0)                ; $0030
                move.w  #$00A3, D0
                cmpi.b  #$36, (A2)
                bne.s   Offset_0x03840E
                move.w  #$00A6, D0
Offset_0x03840E:
                jsr     (Play_Sfx)                             ; Offset_0x001912
                moveq   #-$01, D0
                rts
;-------------------------------------------------------------------------------                
Hurt_NoRings:                                                  ; Offset_0x038418
                tst.w   (Debug_Mode_Active_Flag).w                   ; $FFFFFFFA
                bne     Hurt_Shield                            ; Offset_0x0383AA
Kill_Player:                                                   ; Offset_0x038420                
                tst.w   (Debug_Mode_Flag_Index).w                    ; $FFFFFE08
                bne.s   Kill_NoDeath                           ; Offset_0x038474
                bclr    #$01, Obj_Player_Status(A0)                      ; $002B
                move.b  #$06, Obj_Routine(A0)                            ; $0024
                bsr     Jmp_00_To_Sonic_ResetOnFloor           ; Offset_0x0387A8
                bset    #$01, Obj_Status(A0)                             ; $0022
                move.w  #$F900, Obj_Speed_Y(A0)                          ; $0012
                move.w  #$0000, Obj_Speed(A0)                            ; $0010
                move.w  #$0000, Obj_Inertia(A0)                          ; $0014
                move.w  Obj_Y(A0), Obj_Player_St_Convex(A0)       ; $000C, $0038
                move.b  #$18, Obj_Ani_Number(A0)                         ; $001C
                bset    #$07, Obj_Art_VRAM(A0)                           ; $0002
                move.w  #$00A3, D0
                cmpi.b  #$36, (A2)
                bne.s   Offset_0x03846E
                move.w  #$00A6, D0
Offset_0x03846E:
                jsr     (Play_Sfx)                             ; Offset_0x001912
Kill_NoDeath:                                                  ; Offset_0x038474
                moveq   #-$01, D0
                rts
;-------------------------------------------------------------------------------                
Touch_Special:                                                 ; Offset_0x038478
                move.b  Obj_Col_Flags(A1), D1                            ; $0020
                andi.b  #$3F, D1
                cmpi.b  #$06, D1
                beq.s   Offset_0x0384FC
                cmpi.b  #$07, D1
                beq     Offset_0x038514
                cmpi.b  #$0B, D1
                beq.s   Offset_0x0384C6
                cmpi.b  #$0A, D1
                beq.s   Offset_0x0384FC
                cmpi.b  #$0C, D1
                beq.s   Offset_0x0384CA
                cmpi.b  #$14, D1
                beq.s   Offset_0x0384FC
                cmpi.b  #$15, D1
                beq.s   Offset_0x0384FC
                cmpi.b  #$16, D1
                beq.s   Offset_0x0384FC
                cmpi.b  #$17, D1
                beq.s   Offset_0x0384FC
                cmpi.b  #$1A, D1
                beq.s   Offset_0x03851E
                cmpi.b  #$21, D1
                beq.s   Offset_0x03850E
                rts
Offset_0x0384C6:
                bra     Offset_0x038358
Offset_0x0384CA:
                sub.w   D0, D5
                cmpi.w  #$0008, D5
                bcc.s   Offset_0x0384F8
                move.w  Obj_X(A1), D0                                    ; $0008
                subq.w  #$04, D0
                btst    #$00, Obj_Status(A1)                             ; $0022
                beq.s   Offset_0x0384E4
                subi.w  #$0010, D0
Offset_0x0384E4:
                sub.w   D2, D0
                bcc.s   Offset_0x0384F0
                addi.w  #$0018, D0
                bcs.s   Offset_0x0384F4
                bra.s   Offset_0x0384F8
Offset_0x0384F0:
                cmp.w   D4, D0
                bhi.s   Offset_0x0384F8
Offset_0x0384F4:
                bra     Offset_0x03835E
Offset_0x0384F8:
                bra     Offset_0x03828A
Offset_0x0384FC:
                move.w  A0, D1
                subi.w  #$B000, D1
                beq.s   Offset_0x038508
                addq.b  #$01, Obj_Col_Prop(A1)                           ; $0021
Offset_0x038508:
                addq.b  #$01, Obj_Col_Prop(A1)                           ; $0021
                rts
Offset_0x03850E:
                addq.b  #$01, Obj_Col_Prop(A1)                           ; $0021
                rts
Offset_0x038514:
                move.b  #$02, Obj_Col_Prop(A1)                           ; $0021
                bra     Offset_0x03828A
Offset_0x03851E:
                move.b  #$FF, Obj_Col_Prop(A1)                           ; $0021
                bra     Offset_0x03828A
Offset_0x038528:
                cmpi.b  #$0F, D0
                bne.s   Offset_0x038542
                moveq   #$00, D0
                move.b  (Boss_Flag).w, D0                            ; $FFFFF7AA
                beq.s   Offset_0x038542
                subq.w  #$01, D0
                add.w   D0, D0
                move.w  Offset_0x038544(PC, D0), D0
                jmp     Offset_0x038544(PC, D0)
Offset_0x038542:
                rts
;-------------------------------------------------------------------------------
Offset_0x038544:
                dc.w    Offset_0x038554-Offset_0x038544
                dc.w    Offset_0x038554-Offset_0x038544
                dc.w    Offset_0x03855A-Offset_0x038544
                dc.w    Offset_0x0385C2-Offset_0x038544
                dc.w    Offset_0x0385F8-Offset_0x038544
                dc.w    Offset_0x038684-Offset_0x038544
                dc.w    Offset_0x0386BE-Offset_0x038544
                dc.w    Offset_0x0386C4-Offset_0x038544        
Offset_0x038554:
                move.b  Obj_Col_Flags(A1), D0                            ; $0020
                rts
Offset_0x03855A:
                tst.b   ($FFFFF73F).w
                bne.s   Offset_0x038562
                rts
Offset_0x038562:
                move.w  D7, -(A7)
                moveq   #$00, D1
                move.b  Obj_Ani_Boss_Frame(A1), D1                       ; $0015
                subq.b  #$02, D1
                cmpi.b  #$07, D1
                bgt.s   Offset_0x0385A2
                move.w  D1, D7
                add.w   D7, D7
                move.w  Obj_X(A1), D0                                    ; $0008
                btst    #$00, Obj_Flags(A1)                              ; $0001
                beq.s   Offset_0x038588
                add.w   Offset_0x0385AA(PC, D7), D0
                bra.s   Offset_0x03858C
Offset_0x038588:
                sub.w   Offset_0x0385AA(PC, D7), D0
Offset_0x03858C:
                move.b  Offset_0x0385BA(PC, D1), D1
                ori.l   #$00040000, D1
                move.w  Obj_Y(A1), D7                                    ; $000C
                subi.w  #$001C, D7
                bsr     Offset_0x038746
Offset_0x0385A2:
                move.w  (A7)+, D7
                move.b  Obj_Col_Flags(A1), D0                            ; $0020
                rts
;-------------------------------------------------------------------------------                
Offset_0x0385AA:        
                dc.w    $001C, $0020, $0028, $0034, $003C, $0044, $0060, $0070                                         
;-------------------------------------------------------------------------------
Offset_0x0385BA:    
                dc.b    $04, $04, $08, $0C, $14, $1C, $24, $08
;-------------------------------------------------------------------------------  
Offset_0x0385C2:
                move.w  D7, -(A7)
                move.w  Obj_X(A1), D0                                    ; $0008
                move.w  Obj_Y(A1), D7                                    ; $000C
                tst.b   ($FFFFF73F).w
                beq.s   Offset_0x0385F0
                addi.w  #$0004, D7
                subi.w  #$0050, D0
                btst    #$00, Obj_Flags(A1)                              ; $0001
                beq.s   Offset_0x0385E6
                addi.w  #$00A0, D0
Offset_0x0385E6:
                move.l  #$00140010, D1
                bsr     Offset_0x038746
Offset_0x0385F0:
                move.w  (A7)+, D7
                move.b  Obj_Col_Flags(A1), D0                            ; $0020
                rts
Offset_0x0385F8:
                sf      $0038(A1)
                cmpi.b  #$01, ($FFFFF73F).w
                blt.s   Offset_0x038640
                move.w  D7, -(A7)
                move.w  Obj_X(A1), D0                                    ; $0008
                move.w  Obj_Y(A1), D7                                    ; $000C
                addi.w  #$0004, D7
                subi.w  #$0030, D0
                btst    #$00, Obj_Flags(A1)                              ; $0001
                beq.s   Offset_0x038622
                addi.w  #$0060, D0
Offset_0x038622:
                move.l  #$00040004, D1
                bsr     Offset_0x038746
                move.w  (A7)+, D7
                move.b  Obj_Col_Flags(A1), D0                            ; $0020
                cmpi.w  #$0078, Obj_P_Invunerblt_Time(A0)                ; $0030
                bne.s   Offset_0x03863E
                st      $0038(A1)
Offset_0x03863E:
                rts
Offset_0x038640:
                move.w  D7, -(A7)
                move.w  #$0014, A5
                move.w  #$0000, A4
Offset_0x03864A:
                move.w  Obj_X(A1), D0                                    ; $0008
                move.w  Obj_Y(A1), D7                                    ; $000C
                subi.w  #$0020, D7
                add.w   A5, D0
                move.l  #$00100004, D1
                bsr     Offset_0x038746
                move.w  #$FFEC, A5
                adda.w  #$0001, A4
                cmpa.w  #$0001, A4
                beq.s   Offset_0x03864A
                move.w  (A7)+, D7
                move.b  Obj_Col_Flags(A1), D0                            ; $0020
                cmpi.w  #$0078, Obj_P_Invunerblt_Time(A0)                ; $0030
                bne.s   Offset_0x038682
                st      $0038(A1)
Offset_0x038682:
                rts
Offset_0x038684:
                tst.b   ($FFFFF73F).w
                beq.s   Offset_0x0386B8
                move.w  D7, -(A7)
                move.w  Obj_X(A1), D0                                    ; $0008
                move.w  Obj_Y(A1), D7                                    ; $000C
                addi.w  #$0028, D7
                move.l  #$00040010, D1
                cmpi.b  #$01, ($FFFFF73F).w
                beq.s   Offset_0x0386B2
                move.w  #$0020, D1
                subi.w  #$0008, D7
                addi.w  #$0004, D0
Offset_0x0386B2:
                bsr     Offset_0x038746
                move.w  (A7)+, D7
Offset_0x0386B8:
                move.b  Obj_Col_Flags(A1), D0                            ; $0020
                rts
Offset_0x0386BE:
                move.b  Obj_Col_Flags(A1), D0                            ; $0020
                rts
Offset_0x0386C4:
                cmpi.b  #$01, ($FFFFF73F).w
                blt.s   Offset_0x038740
                beq.s   Offset_0x038716
                move.w  D7, -(A7)
                move.w  Obj_X(A1), D0                                    ; $0008
                move.w  Obj_Y(A1), D7                                    ; $000C
                moveq   #$00, D1
                move.b  Obj_Boss_Ani_Map(A1), D1                         ; $000B
                subq.b  #$02, D1
                add.w   D1, D1
                btst    #$00, Obj_Flags(A1)                              ; $0001
                beq.s   Offset_0x0386F0
                add.w   Offset_0x03870A(PC, D1), D0
                bra.s   Offset_0x0386F4
Offset_0x0386F0:
                sub.w   Offset_0x03870A(PC, D1), D0
Offset_0x0386F4:
                sub.w   Offset_0x03870A+$02(PC, D1), D7
                move.l  #$00060008, D1
                bsr     Offset_0x038746
                move.w  (A7)+, D7
                move.w  #$0000, D0
                rts  
;-------------------------------------------------------------------------------
Offset_0x03870A:
                dc.w    $0014, $0000, $0010, $0010, $0010, $FFF0  
;-------------------------------------------------------------------------------      
Offset_0x038716:
                move.w  D7, -(A7)
                move.w  Obj_X(A1), D0                                    ; $0008
                move.w  Obj_Y(A1), D7                                    ; $000C
                moveq   #$10, D1
                btst    #$00, Obj_Flags(A1)                              ; $0001
                beq.s   Offset_0x03872C
                neg.w   D1
Offset_0x03872C:
                sub.w   D1, D0
                move.l  #$0008000C, D1
                bsr     Offset_0x038774
                move.w  (A7)+, D7
                move.b  #$00, D0
                rts
Offset_0x038740:
                move.b  Obj_Col_Flags(A1), D0                            ; $0020
                rts
Offset_0x038746:
                sub.w   D1, D0
                sub.w   D2, D0
                bcc.s   Offset_0x038754
                add.w   D1, D1
                add.w   D1, D0
                bcs.s   Offset_0x038758
Offset_0x038752:
                rts
Offset_0x038754:
                cmp.w   D4, D0
                bhi.s   Offset_0x038752
Offset_0x038758:
                swap.w  D1
                sub.w   D1, D7
                sub.w   D3, D7
                bcc.s   Offset_0x03876A
                add.w   D1, D1
                add.w   D1, D7
                bcs     Offset_0x03835E
                bra.s   Offset_0x038752
Offset_0x03876A:
                cmp.w   D5, D7
                bhi     Offset_0x038752
                bra     Offset_0x03835E
Offset_0x038774:
                sub.w   D1, D0
                sub.w   D2, D0
                bcc.s   Offset_0x038782
                add.w   D1, D1
                add.w   D1, D0
                bcs.s   Offset_0x038786
Offset_0x038780:
                rts
Offset_0x038782:
                cmp.w   D4, D0
                bhi.s   Offset_0x038780
Offset_0x038786:
                swap.w  D1
                sub.w   D1, D7
                sub.w   D3, D7
                bcc.s   Offset_0x038798
                add.w   D1, D1
                add.w   D1, D7
                bcs     Offset_0x03879E
                bra.s   Offset_0x038780
Offset_0x038798:
                cmp.w   D5, D7
                bhi     Offset_0x038780
Offset_0x03879E:
                neg.w   Obj_Speed(A0)                                    ; $0010
                neg.w   Obj_Speed_Y(A0)                                  ; $0012
                rts                                    
;===============================================================================
; Rotina usada para responder quando o jogador tocar em algum objeto
; <<<-
;===============================================================================  
Jmp_00_To_Sonic_ResetOnFloor:                                  ; Offset_0x0387A8
                jmp     (Sonic_ResetOnFloor)                   ; Offset_0x015FDA
Jmp_00_To_Touch_Response_Cnz_Triangles:                        ; Offset_0x0387AE
                jmp     (Touch_Response_Cnz_Triangles)         ; Offset_0x0130C4           
Jmp_00_To_TouchRings:                                          ; Offset_0x0387B4
                jmp     (TouchRings)                           ; Offset_0x012CCC                            
                dc.w    $0000

;===============================================================================
; Rotina para carregar os gráficos dinamicamente para a VRAM
; Ex: Flores na Emerald Hill, Óleo na Oil Ocean, etc ....
; ->>>
;===============================================================================                
Dynamic_Art_Cues:                                              ; Offset_0x0387BC    
                moveq   #$00, D0                                                
                move.b  (Level_Id).w, D0                             ; $FFFFFE10
                add.w   D0, D0                                                  
                add.w   D0, D0                                                  
                move.w  Dynamic_Art_Idx+$02(PC, D0), D1        ; Offset_0x0387DA                         
                lea     Dynamic_Art_Idx(PC, D1), A2            ; Offset_0x0387D8                  
                move.w  Dynamic_Art_Idx(PC, D0), D0            ; Offset_0x0387D8                          
                jmp     Dynamic_Art_Idx(PC, D0)                ; Offset_0x0387D8
                rts    
;-------------------------------------------------------------------------------                
Dynamic_Art_Idx:                                               ; Offset_0x0387D8                          
                dc.w    GHz_Animate_Routine-Dynamic_Art_Idx    ; Offset_0x038A24
                dc.w    GHz_Animate_Script-Dynamic_Art_Idx     ; Offset_0x038A8C
                dc.w    Lvl1_Animate_Routine-Dynamic_Art_Idx   ; Offset_0x03881C
                dc.w    Lvl1_Animate_Script-Dynamic_Art_Idx    ; Offset_0x038CF8
                dc.w    Wz_Animate_Routine-Dynamic_Art_Idx     ; Offset_0x03881C
                dc.w    Wz_Animate_Script-Dynamic_Art_Idx      ; Offset_0x038CF8
                dc.w    Lvl3_Animate_Routine-Dynamic_Art_Idx   ; Offset_0x03881C
                dc.w    Lvl3_Animate_Script-Dynamic_Art_Idx    ; Offset_0x038CF8
                dc.w    Mz_Animate_Routine-Dynamic_Art_Idx     ; Offset_0x038A24
                dc.w    Mz_Animate_Script-Dynamic_Art_Idx      ; Offset_0x038AF0
                dc.w    Mz_Animate_Routine-Dynamic_Art_Idx     ; Offset_0x038A24
                dc.w    Mz_Animate_Script-Dynamic_Art_Idx      ; Offset_0x038AF0
                dc.w    SFz_Animate_Routine-Dynamic_Art_Idx    ; Offset_0x03881C
                dc.w    SFz_Animate_Script-Dynamic_Art_Idx     ; Offset_0x038CF8
                dc.w    HTz_Animate_Routine-Dynamic_Art_Idx    ; Offset_0x03881E
                dc.w    HTz_Animate_Script-Dynamic_Art_Idx     ; Offset_0x038B30
                dc.w    HPz_Animate_Routine-Dynamic_Art_Idx    ; Offset_0x038A24
                dc.w    HPz_Animate_Script-Dynamic_Art_Idx     ; Offset_0x038B94
                dc.w    Lvl9_Animate_Routine-Dynamic_Art_Idx   ; Offset_0x03881C
                dc.w    Lvl9_Animate_Script-Dynamic_Art_Idx    ; Offset_0x038CF8
                dc.w    OOz_Animate_Routine-Dynamic_Art_Idx    ; Offset_0x038A24
                dc.w    OOz_Animate_Script-Dynamic_Art_Idx     ; Offset_0x038BC0 
                dc.w    DHz_Animate_Routine-Dynamic_Art_Idx    ; Offset_0x03881C
                dc.w    DHz_Animate_Script-Dynamic_Art_Idx     ; Offset_0x038CF8
                dc.w    CHz_Animate_Routine-Dynamic_Art_Idx    ; Offset_0x038A00
                dc.w    CNz_Animate_Script-Dynamic_Art_Idx     ; Offset_0x038C06
                dc.w    CPz_Animate_Routine-Dynamic_Art_Idx    ; Offset_0x038A24
                dc.w    CPz_Animate_Script-Dynamic_Art_Idx     ; Offset_0x038CAA
                dc.w    DEz_Animate_Routine-Dynamic_Art_Idx    ; Offset_0x038A24
                dc.w    DEz_Animate_Script-Dynamic_Art_Idx     ; Offset_0x038CBC
                dc.w    NGHz_Animate_Routine-Dynamic_Art_Idx   ; Offset_0x038A1C
                dc.w    NGHz_Animate_Script-Dynamic_Art_Idx    ; Offset_0x038CCE
                dc.w    SCz_Animate_Routine-Dynamic_Art_Idx    ; Offset_0x03881C
                dc.w    SCz_Animate_Script-Dynamic_Art_Idx     ; Offset_0x038CF8 
;-------------------------------------------------------------------------------   
Lvl1_Animate_Routine:                                          ; Offset_0x03881C
Wz_Animate_Routine:                                            ; Offset_0x03881C
Lvl3_Animate_Routine:                                          ; Offset_0x03881C
SFz_Animate_Routine:                                           ; Offset_0x03881C
Lvl9_Animate_Routine:                                          ; Offset_0x03881C
DHz_Animate_Routine:                                           ; Offset_0x03881C
SCz_Animate_Routine:                                           ; Offset_0x03881C
                rts
;-------------------------------------------------------------------------------    
HTz_Animate_Routine:                                           ; Offset_0x03881E   
                tst.w   (Two_Player_Flag).w                          ; $FFFFFFD8
                bne     HTz_Animate_Routine_2P                 ; Offset_0x038A24                                         
                lea     ($FFFFF7F0).w, A3                                       
                moveq   #$00, D0                                                
                move.w  (Camera_X).w, D1                             ; $FFFFEE00
                neg.w   D1                                                      
                asr.w   #$03, D1                                                
                move.w  (Camera_X).w, D0                             ; $FFFFEE00
                lsr.w   #$04, D0                                                
                add.w   D1, D0                                                  
                subi.w  #$0010, D0                                              
                divu.w  #$0030, D0                                              
                swap.w  D0                                                      
                cmp.b   $0001(A3), D0                                           
                beq.s   Offset_0x038890                                         
                move.b  D0, $0001(A3)                                           
                move.w  D0, D2                                                  
                andi.w  #$0007, D0                                              
                add.w   D0, D0                                                  
                add.w   D0, D0                                                  
                add.w   D0, D0                                                  
                move.w  D0, D1                                                  
                add.w   D0, D0                                                  
                add.w   D1, D0                                                  
                andi.w  #$0038, D2                                              
                lsr.w   #$02, D2                                                
                add.w   D2, D0                                                  
                lea     HTz_RAM_Dyn_Sprites(PC, D0), A4        ; Offset_0x038894                       
                moveq   #$05, D5                                                
                move.w  #$A000, D4                                              
Offset_0x038874:
                moveq   #-$01, D1                                               
                move.w  (A4)+, D1                                               
                andi.l  #$00FFFFFF, D1                                          
                move.w  D4, D2                                                  
                moveq   #$40, D3                                                
                jsr     (DMA_68KtoVRAM)                        ; Offset_0x0019E4
                addi.w  #$0080, D4                                              
                dbra    D5, Offset_0x038874                                     
Offset_0x038890:
                bra     Offset_0x038954                                         
;-------------------------------------------------------------------------------
; Array dos endereços da RAM para serem usados pelos sprites animados da 
; Hill Top, Os sprites são descomprimidos para RAM e carregados dinamicamente
; a partir da RAM. Note que nestes endereços estão os Chunks (128x128) da Hill
; Top, esses chunks não são usados para o layout. Deve se tomar cuidado ao 
; editar a Hill Top a partir de editores de fases, pois os editores não 
; reconhecem que os chunks não podem ser usado e se você usá-los ao carregar
; a fase durante o jogo notará que os chunks estão diferentes do que se viu
; no editor de fases.
;-------------------------------------------------------------------------------                
HTz_RAM_Dyn_Sprites:                                           ; Offset_0x038894
                dc.w    $0080, $0180, $0280, $0580, $0600, $0700, $0080, $0180
                dc.w    $0280, $0580, $0600, $0700, $0980, $0A80, $0B80, $0C80
                dc.w    $0D00, $0D80, $0980, $0A80, $0B80, $0C80, $0D00, $0D80
                dc.w    $0E80, $1180, $1200, $1280, $1300, $1380, $0E80, $1180
                dc.w    $1200, $1280, $1300, $1380, $1400, $1480, $1500, $1580
                dc.w    $1600, $1900, $1400, $1480, $1500, $1580, $1600, $1900
                dc.w    $1D00, $1D80, $1E00, $1F80, $2400, $2580, $1D00, $1D80
                dc.w    $1E00, $1F80, $2400, $2580, $2600, $2680, $2780, $2B00
                dc.w    $2F00, $3280, $2600, $2680, $2780, $2B00, $2F00, $3280
                dc.w    $3600, $3680, $3780, $3C80, $3D00, $3F00, $3600, $3680
                dc.w    $3780, $3C80, $3D00, $3F00, $3F80, $4080, $4480, $4580
                dc.w    $4880, $4900, $3F80, $4080, $4480, $4580, $4880, $4900 
;-------------------------------------------------------------------------------
Offset_0x038954:
                lea     ($FFFFA800).w, A1                                       
                move.w  (Camera_X).w, D2                             ; $FFFFEE00
                neg.w   D2                                                      
                asr.w   #$03, D2                                                
                move.l  A2, -(A7)                                               
                lea     (Art_Hill_Top_Background_Uncomp), A0   ; Offset_0x040C2A                                
                lea     ($FFFF7C00), A2                                         
                moveq   #$0F, D1                                                
Offset_0x038970:
                move.w  (A1)+, D0                                               
                neg.w   D0                                                      
                add.w   D2, D0                                                  
                andi.w  #$001F, D0                                              
                lsr.w   #$01, D0                                                
                bcc.s   Offset_0x038982                                         
                addi.w  #$0200, D0                                              
Offset_0x038982:
                lea     $00(A0, D0), A4                                         
                lsr.w   #$01, D0                                                
                bcs.s   Offset_0x0389AC                                         
                move.l  (A4)+, (A2)+                                            
                adda.w  #$003C, A2                                                             
                move.l  (A4)+, (A2)+                                            
                adda.w  #$003C, A2                                              
                move.l  (A4)+, (A2)+                                            
                adda.w  #$003C, A2                                              
                move.l  (A4)+, (A2)+                                            
                suba.w  #$00C0, A2                                              
                adda.w  #$0020, A0                                              
                dbra    D1, Offset_0x038970                                     
                bra.s   Offset_0x0389E4                                         
Offset_0x0389AC:
                move.b  (A4)+, (A2)+                                            
                move.b  (A4)+, (A2)+                                            
                move.b  (A4)+, (A2)+                                            
                move.b  (A4)+, (A2)+                                            
                adda.w  #$003C, A2                                              
                move.b  (A4)+, (A2)+                                            
                move.b  (A4)+, (A2)+                                            
                move.b  (A4)+, (A2)+                                            
                move.b  (A4)+, (A2)+                                            
                adda.w  #$003C, A2                                              
                move.b  (A4)+, (A2)+                                            
                move.b  (A4)+, (A2)+                                            
                move.b  (A4)+, (A2)+                                            
                move.b  (A4)+, (A2)+                                            
                adda.w  #$003C, A2                                              
                move.b  (A4)+, (A2)+                                            
                move.b  (A4)+, (A2)+                                            
                move.b  (A4)+, (A2)+                                            
                move.b  (A4)+, (A2)+                                            
                suba.w  #$00C0, A2                                              
                adda.w  #$0020, A0                                              
                dbra    D1, Offset_0x038970                                     
Offset_0x0389E4:
                move.l  #$00FF7C00, D1                                          
                move.w  #$A300, D2                                              
                move.w  #$0080, D3                                              
                jsr     (DMA_68KtoVRAM)                        ; Offset_0x0019E4
                move.l  (A7)+, A2                                               
                addq.w  #$02, A3                                                
                bra     Offset_0x038A28                                            
;-------------------------------------------------------------------------------  
CHz_Animate_Routine:                                           ; Offset_0x038A00  
                tst.b   (Boss_Flag).w                                ; $FFFFF7AA                                    
                beq.s   Offset_0x038A08                                         
                rts                                                             
Offset_0x038A08:
                lea     (CNz_Animate_Script), A2               ; Offset_0x038C06                             
                tst.w   (Two_Player_Flag).w                          ; $FFFFFFD8
                beq.s   CNz_Animate_Routine                    ; Offset_0x038A24                                         
                lea     (CNz_Animate_Script_2P), A2            ; Offset_0x038C58                                
                bra.s   CNz_Animate_Routine                    ; Offset_0x038A24                                         
;------------------------------------------------------------------------------- 
NGHz_Animate_Routine:                                          ; Offset_0x038A1C
                tst.b   (Boss_Flag).w                                ; $FFFFF7AA                                      
                beq.s   NGHz_Animate_Routine_2                 ; Offset_0x038A24                                         
                rts      
;-------------------------------------------------------------------------------           
GHz_Animate_Routine:                                           ; Offset_0x038A24
Mz_Animate_Routine:                                            ; Offset_0x038A24
HTz_Animate_Routine_2P:                                        ; Offset_0x038A24
HPz_Animate_Routine:                                           ; Offset_0x038A24     
OOz_Animate_Routine:                                           ; Offset_0x038A24
CNz_Animate_Routine:                                           ; Offset_0x038A24
CPz_Animate_Routine:                                           ; Offset_0x038A24
DEz_Animate_Routine:                                           ; Offset_0x038A24      
NGHz_Animate_Routine_2:                                        ; Offset_0x038A24                  
                lea     ($FFFFF7F0).w, A3      
Offset_0x038A28:                                                 
                move.w  (A2)+, D6                                               
Offset_0x038A2A:
                subq.b  #$01, (A3)                                              
                bcc.s   Offset_0x038A70                                         
                moveq   #$00, D0                                                
                move.b  $0001(A3), D0                                           
                cmp.b   $0006(A2), D0                                           
                bcs.s   Offset_0x038A40                                         
                moveq   #$00, D0                                                
                move.b  D0, $0001(A3)                                           
Offset_0x038A40:
                addq.b  #$01, $0001(A3)                                         
                move.b  (A2), (A3)                                              
                bpl.s   Offset_0x038A4E                                         
                add.w   D0, D0                                                  
                move.b  $09(A2, D0), (A3)                                       
Offset_0x038A4E:
                move.b  $08(A2, D0), D0                                         
                lsl.w   #$05, D0                                                
                move.w  $0004(A2), D2                                           
                move.l  (A2), D1                                                
                andi.l  #$00FFFFFF, D1                                          
                add.l   D0, D1                                                  
                moveq   #$00, D3                                                
                move.b  $0007(A2), D3                                           
                lsl.w   #$04, D3                                                
                jsr     (DMA_68KtoVRAM)                        ; Offset_0x0019E4
Offset_0x038A70:
                move.b  $0006(A2), D0                                           
                tst.b   (A2)                                                    
                bpl.s   Offset_0x038A7A                                         
                add.b   D0, D0                                                  
Offset_0x038A7A:
                addq.b  #$01, D0                                                
                andi.w  #$00FE, D0                                              
                lea     $08(A2, D0), A2                                         
                addq.w  #$02, A3                                                
                dbra    D6, Offset_0x038A2A                                     
                rts                                                             
;------------------------------------------------------------------------------- 
GHz_Animate_Script:                                            ; Offset_0x038A8C
                dc.w    $0004                   ; Total de Animações
                dc.l    ($FF<<$18)|Art_GHz_Flower_1 ; Offset_0x040000
                dc.w    $7280                   ; VRAM 
                dc.w    $0602                   ; Quadros / Tiles
                dc.w    $007F, $0213, $0007, $0207, $0007, $0207 ; Carregar quadro / Tempo do quadro
                dc.l    ($FF<<$18)|Art_GHz_Flower_2 ; Offset_0x040080                  
                dc.w    $72C0                   ; VRAM
                dc.w    $0802                   ; Quadros / Tiles
                dc.w    $027F, $000B, $020B, $000B, $0205, $0005, $0205, $0005 ; Carregar quadro / Tempo do quadro
                dc.l    ($07<<$18)|Art_GHz_Flower_3 ; Offset_0x040100 
                dc.w    $7300                   ; VRAM
                dc.w    $0202                   ; Quadros / Tiles
                dc.w    $0002                   ; Carregar quadro / Tempo do quadro
                dc.l    ($FF<<$18)|Art_GHz_Flower_4 ; Offset_0x040180   
                dc.w    $7340                   ; VRAM
                dc.w    $0802                   ; Quadros / Tiles
                dc.w    $007F, $0207, $0007, $0207, $0007, $020B, $000B, $020B ; Carregar quadro / Tempo do quadro
                dc.l    ($FF<<$18)|Art_GHz_Dyn_Wall ; Offset_0x040200 
                dc.w    $7380                   ; VRAM
                dc.w    $0602                   ; Quadros / Tiles
                dc.w    $0017, $0209, $040B, $0617, $040B, $0209 ; Carregar quadro / Tempo do quadro  
;------------------------------------------------------------------------------- 
Mz_Animate_Script:                                             ; Offset_0x038AF0 
                dc.w    $0003                   ; Total de Animações
                dc.l    Art_Mz_Spinnig_Cylinder ; Offset_0x04102A               
                dc.w    $6980                   ; VRAM 
                dc.w    $0810                   ; Quadros / Tiles
                dc.w    $0010, $2030, $4050, $6070 ; Carregar quadro / Tempo do quadro
                dc.l    ($0D<<$18)|Art_Mz_Lava  ; Offset_0x04202A
                dc.w    $6800                   ; VRAM 
                dc.w    $060C                   ; Quadros / Tiles
                dc.w    $000C, $1824, $180C     ; Carregar quadro / Tempo do quadro
                dc.l    ($FF<<$18)|Art_Mz_Pistons ; Offset_0x04262A
                dc.w    $6B80                   ; VRAM 
                dc.w    $0406                   ; Quadros / Tiles
                dc.w    $0013, $0607, $0C13, $0607 ; Carregar quadro / Tempo do quadro
                dc.l    ($FF<<$18)|Art_Mz_Pistons ; Offset_0x04262A
                dc.w    $6C40                   ; VRAM 
                dc.w    $0406                   ; Quadros / Tiles
                dc.w    $0C13, $0607, $0013, $0607 ; Carregar quadro / Tempo do quadro   
;-------------------------------------------------------------------------------
HTz_Animate_Script:                                            ; Offset_0x038B30
                dc.w    $0004                   ; Total de Animações
                dc.l    ($FF<<$18)|Art_HTz_Flower_1 ; Offset_0x040000
                dc.w    $7280                   ; VRAM 
                dc.w    $0602                   ; Quadros / Tiles
                dc.w    $007F, $0213, $0007, $0207, $0007, $0207 ; Carregar quadro / Tempo do quadro
                dc.l    ($FF<<$18)|Art_HTz_Flower_2 ; Offset_0x040080                  
                dc.w    $72C0                   ; VRAM
                dc.w    $0802                   ; Quadros / Tiles
                dc.w    $027F, $000B, $020B, $000B, $0205, $0005, $0205, $0005 ; Carregar quadro / Tempo do quadro
                dc.l    ($07<<$18)|Art_HTz_Flower_3 ; Offset_0x040100 
                dc.w    $7300                   ; VRAM
                dc.w    $0202                   ; Quadros / Tiles
                dc.w    $0002                   ; Carregar quadro / Tempo do quadro
                dc.l    ($FF<<$18)|Art_HTz_Flower_4 ; Offset_0x040180   
                dc.w    $7340                   ; VRAM
                dc.w    $0802                   ; Quadros / Tiles
                dc.w    $007F, $0207, $0007, $0207, $0007, $020B, $000B, $020B ; Carregar quadro / Tempo do quadro
                dc.l    ($FF<<$18)|Art_HTz_Dyn_Wall ; Offset_0x040200 
                dc.w    $7380                   ; VRAM
                dc.w    $0602                   ; Quadros / Tiles
                dc.w    $0017, $0209, $040B, $0617, $040B, $0209 ; Carregar quadro / Tempo do quadro
;-------------------------------------------------------------------------------    
HPz_Animate_Script:                                            ; Offset_0x038B94 
                dc.w    $0002                   ; Total de Animações
                dc.l    ($08<<$18)|Art_HPz_Orbs ; Offset_0x042C6A
                dc.w    $5D00                   ; VRAM
                dc.w    $0608                   ; Quadros / Tiles
                dc.w    $0000, $0810, $1008     ; Carregar quadro / Tempo do quadro                
                dc.l    ($08<<$18)|Art_HPz_Orbs ; Offset_0x042C6A
                dc.w    $5E00                   ; VRAM
                dc.w    $0608                   ; Quadros / Tiles
                dc.w    $0810, $1008, $0000     ; Carregar quadro / Tempo do quadro
                dc.l    ($08<<$18)|Art_HPz_Orbs ; Offset_0x042C6A
                dc.w    $5F00                   ; VRAM
                dc.w    $0608                   ; Quadros / Tiles
                dc.w    $1008, $0000, $0810     ; Carregar quadro / Tempo do quadro 
;------------------------------------------------------------------------------- 
OOz_Animate_Script:                                            ; Offset_0x038BC0  
                dc.w    $0004                   ; Total de Animações
                dc.l    ($FF<<$18)|Art_OOz_Red_Balls ; Offset_0x042F6A
                dc.w    $56C0                   ; VRAM
                dc.w    $0404                   ; Quadros / Tiles
                dc.w    $000B, $0405, $0809, $0403 ; Carregar quadro / Tempo do quadro                                                                                                       
                dc.l    ($06<<$18)|Art_OOz_Rotating_Square_1 ; Offset_0x0430EA
                dc.w    $5740                   ; VRAM
                dc.w    $0404                   ; Quadros / Tiles
                dc.w    $0004, $080C            ; Carregar quadro / Tempo do quadro                                                                              
                dc.l    ($06<<$18)|Art_OOz_Rotating_Square_2 ; Offset_0x0432EA
                dc.w    $57C0                   ; VRAM
                dc.w    $0404                   ; Quadros / Tiles
                dc.w    $0004, $080C            ; Carregar quadro / Tempo do quadro                                                            
                dc.l    ($11<<$18)|Art_OOz_Oil_1    ; Offset_0x0434EA
                dc.w    $5840                   ; VRAM
                dc.w    $0610                   ; Quadros / Tiles
                dc.w    $0010, $2030, $2010     ; Carregar quadro / Tempo do quadro                                                            
                dc.l    ($11<<$18)|Art_OOz_Oil_2    ; Offset_0x043CEA
                dc.w    $5A40                   ; VRAM
                dc.w    $0610                   ; Quadros / Tiles
                dc.w    $0010, $2030, $2010     ; Carregar quadro / Tempo do quadro 
;------------------------------------------------------------------------------- 
CNz_Animate_Script:                                            ; Offset_0x038C06
                dc.w    $0001                   ; Total de Animações
                dc.l    ($FF<<$18)|Art_CNz_Symbols ; Offset_0x0444EA
                dc.w    $A800                   ; VRAM
                dc.w    $1010                   ; Quadros / Tiles
                dc.w    $00C7, $1005, $2005, $3005, $40C7, $5005, $2005, $6005 ; Carregar quadro / Tempo do quadro  
                dc.w    $0005, $1005, $2005, $3005, $4005, $5005, $2005, $6005 ; Carregar quadro / Tempo do quadro                              
                dc.l    ($FF<<$18)|Art_CNz_Symbols ; Offset_0x0444EA
                dc.w    $6600                   ; VRAM
                dc.w    $1010                   ; Quadros / Tiles
                dc.w    $7005, $8005, $2005, $9005, $A005, $B005, $2005, $C005 ; Carregar quadro / Tempo do quadro 
                dc.w    $70C7, $8005, $2005, $9005, $A0C7, $B005, $2005, $C005 ; Carregar quadro / Tempo do quadro
;------------------------------------------------------------------------------- 
CNz_Animate_Script_2P:                                         ; Offset_0x038C58 
                dc.w    $0001                   ; Total de Animações
                dc.l    ($FF<<$18)|Art_CNz_Symbols ; Offset_0x0444EA
                dc.w    $E800                   ; VRAM
                dc.w    $1010                   ; Quadros / Tiles
                dc.w    $00C7, $1005, $2005, $3005, $40C7, $5005, $2005, $6005 ; Carregar quadro / Tempo do quadro  
                dc.w    $0005, $1005, $2005, $3005, $4005, $5005, $2005, $6005 ; Carregar quadro / Tempo do quadro 
                dc.l    ($FF<<$18)|Art_CNz_Symbols ; Offset_0x0444EA
                dc.w    $6600                   ; VRAM
                dc.w    $1010                   ; Quadros / Tiles
                dc.w    $7005, $8005, $2005, $9005, $A005, $B005, $2005, $C005 ; Carregar quadro / Tempo do quadro 
                dc.w    $70C7, $8005, $2005, $9005, $A0C7, $B005, $2005, $C005 ; Carregar quadro / Tempo do quadro
;------------------------------------------------------------------------------- 
CPz_Animate_Script:                                            ; Offset_0x038CAA  
                dc.w    $0000                   ; Total de Animações
                dc.l    ($04<<$18)|Art_CPz_Dyn_Background ; Offset_0x0464EA
                dc.w    $6E00                   ; VRAM
                dc.w    $0802                   ; Quadros / Tiles
                dc.w    $0002, $0406, $080A, $0C0E ; Carregar quadro / Tempo do quadro
;------------------------------------------------------------------------------- 
DEz_Animate_Script:                                            ; Offset_0x038CBC 
                dc.w    $0000                   ; Total de Animações
                dc.l    ($04<<$18)|Art_DEz_Dyn_Background ; Offset_0x0464EA
                dc.w    $BE00                   ; VRAM
                dc.w    $0802                   ; Quadros / Tiles
                dc.w    $0002, $0406, $080A, $0C0E ; Carregar quadro / Tempo do quadro 
;------------------------------------------------------------------------------- 
NGHz_Animate_Script:                                           ; Offset_0x038CCE
                dc.w    $0003                   ; Total de Animações
                dc.l    ($05<<$18)|Art_NGHz_Water_Falls_1 ; Offset_0x046CEA
                dc.w    $AAE0                   ; VRAM
                dc.w    $0204                   ; Quadros / Tiles  
                dc.w    $0004                   ; Carregar quadro / Tempo do quadro 
                dc.l    ($05<<$18)|Art_NGHz_Water_Falls_1 ; Offset_0x046CEA
                dc.w    $8600                   ; VRAM
                dc.w    $0204                   ; Quadros / Tiles   
                dc.w    $0400                   ; Carregar quadro / Tempo do quadro 
                dc.l    ($05<<$18)|Art_NGHz_Water_Falls_2 ; Offset_0x046DEA
                dc.w    $8580                   ; VRAM
                dc.w    $0204                   ; Quadros / Tiles
                dc.w    $0004                   ; Carregar quadro / Tempo do quadro 
                dc.l    ($05<<$18)|Art_NGHz_Water_Falls_3 ; Offset_0x046EEA
                dc.w    $8500                   ; VRAM
                dc.w    $0204                   ; Quadros / Tiles 
                dc.w    $0004                   ; Carregar quadro / Tempo do quadro   
;-------------------------------------------------------------------------------
Lvl1_Animate_Script:                                           ; Offset_0x038CF8   
Wz_Animate_Script:                                             ; Offset_0x038CF8   
Lvl3_Animate_Script:                                           ; Offset_0x038CF8
SFz_Animate_Script:                                            ; Offset_0x038CF8
Lvl9_Animate_Script:                                           ; Offset_0x038CF8
DHz_Animate_Script:                                            ; Offset_0x038CF8
SCz_Animate_Script:                                            ; Offset_0x038CF8  
                cmpi.b  #$0D, (Level_Id).w                           ; $FFFFFE10
                beq.s   Offset_0x038D02
Offset_0x038D00:
                rts                                               
;===============================================================================
; Rotina para carregar os gráficos dinamicamente para a VRAM
; Ex: Flores na Emerald Hill, Óleo na Oil Ocean, etc ....
; <<<-
;===============================================================================                

;===============================================================================
; Rotina não usada para executar algum efeito na Chemical Plant
; ->>>
;===============================================================================                  
Offset_0x038D02:
                move.w  (Camera_X).w, D0                             ; $FFFFEE00
                cmpi.w  #$1940, D0
                bcs.s   Offset_0x038D00
                cmpi.w  #$1F80, D0
                bcc.s   Offset_0x038D00
                subq.b  #$01, ($FFFFF72D).w
                bpl.s   Offset_0x038D00
                move.b  #$07, ($FFFFF72D).w
                move.b  #$01, (Refresh_Level_Layout).w               ; $FFFFF72C
                lea     ($FFFF7500), A1
                bsr.s   Offset_0x038D32
                lea     ($FFFF7D00), A1
Offset_0x038D32:
                move.w  #$0007, D1
Offset_0x038D36:
                move.w  (A1), D0
                move.w  $0002(A1), (A1)+
                move.w  $0002(A1), (A1)+
                move.w  $0002(A1), (A1)+
                move.w  $0002(A1), (A1)+
                move.w  $0002(A1), (A1)+
                move.w  $0002(A1), (A1)+
                move.w  $0002(A1), (A1)+
                move.w  $0072(A1), (A1)+
                adda.w  #$0070, A1
                move.w  $0002(A1), (A1)+
                move.w  $0002(A1), (A1)+
                move.w  $0002(A1), (A1)+
                move.w  $0002(A1), (A1)+
                move.w  $0002(A1), (A1)+
                move.w  $0002(A1), (A1)+
                move.w  $0002(A1), (A1)+
                move.w  $0072(A1), (A1)+
                adda.w  #$0070, A1
                move.w  $0002(A1), (A1)+
                move.w  $0002(A1), (A1)+
                move.w  $0002(A1), (A1)+
                move.w  $0002(A1), (A1)+
                move.w  $0002(A1), (A1)+
                move.w  $0002(A1), (A1)+
                move.w  $0002(A1), (A1)+
                move.w  $0072(A1), (A1)+
                adda.w  #$0070, A1
                move.w  $0002(A1), (A1)+
                move.w  $0002(A1), (A1)+
                move.w  $0002(A1), (A1)+
                move.w  $0002(A1), (A1)+
                move.w  $0002(A1), (A1)+
                move.w  $0002(A1), (A1)+
                move.w  $0002(A1), (A1)+
                move.w  D0, (A1)+
                suba.w  #$0180, A1
                dbra    D1, Offset_0x038D36
                rts
;===============================================================================
; Rotina não usada para executar algum efeito na Chemical Plant
; <<<-
;===============================================================================  
                
;===============================================================================
; Rotina para carregar os mapeamentos para os gráficos dinâmicos das fases
; ->>>
;===============================================================================  
Load_16x16_Mappings_For_Dyn_Sprites:                           ; Offset_0x038DCC 
                cmpi.b  #$07, (Level_Id).w                           ; $FFFFFE10
                bne.s   Load_16x16_Map_Dyn_Not_HTz             ; Offset_0x038DE4                                         
                bsr     Hill_Top_Init_Dyn_Sprites              ; Offset_0x0392B8                                         
                move.b  #$FF, ($FFFFF7F1).w                                     
                move.w  #$FFFF, ($FFFFA820).w                                   
Load_16x16_Map_Dyn_Not_HTz:                                    ; Offset_0x038DE4
                cmpi.b  #$0D, (Level_Id).w                           ; $FFFFFE10
                bne.s   Load_16x16_Map_Dyn_Not_CPz             ; Offset_0x038DF2                                         
                move.b  #$FF, ($FFFFF7F1).w                                     
Load_16x16_Map_Dyn_Not_CPz:                                    ; Offset_0x038DF2
                moveq   #$00, D0                                                
                move.b  (Level_Id).w, D0                             ; $FFFFFE10
                add.w   D0, D0                                                  
                move.w  Map16Delta_Index(PC, D0), D0           ; Offset_0x038E48                           
                lea     Map16Delta_Index(PC, D0), A0           ; Offset_0x038E48                       
                tst.w   (Two_Player_Flag).w                          ; $FFFFFFD8
                beq.s   Offset_0x038E16                                         
                cmpi.b  #$0C, (Level_Id).w                           ; $FFFFFE10
                bne.s   Offset_0x038E16                                         
                lea     (Map16Delta_CNz_2P), A0                ; Offset_0x0391B6                           
Offset_0x038E16:
                tst.w   (A0)                                                    
                beq.s   Offset_0x038E2E                                         
                lea     (Blocks_Mem_Address).w, A1                   ; $FFFF9000
                adda.w  (A0)+, A1                                               
                move.w  (A0)+, D1                                               
                tst.w   (Two_Player_Flag).w                          ; $FFFFFFD8
                bne.s   Offset_0x038E30                                         
Offset_0x038E28:
                move.w  (A0)+, (A1)+                                            
                dbra    D1, Offset_0x038E28                                     
Offset_0x038E2E:
                rts                                                             
Offset_0x038E30:
                move.w  (A0)+, D0                                               
                move.w  D0, D1                                                  
                andi.w  #$F800, D0                                              
                andi.w  #$07FF, D1                                              
                lsr.w   #$01, D1                                                
                or.w    D1, D0                                                  
                move.w  D0, (A1)+                                               
                dbra    D1, Offset_0x038E30                                     
                rts       
;------------------------------------------------------------------------------- 
Map16Delta_Index:                                              ; Offset_0x038E48
                dc.w    Map16Delta_GHz-Map16Delta_Index        ; Offset_0x038E6A
                dc.w    Map16Delta_Lvl1-Map16Delta_Index       ; Offset_0x0392B6
                dc.w    Map16Delta_Wz-Map16Delta_Index         ; Offset_0x0392B6
                dc.w    Map16Delta_Lvl3-Map16Delta_Index       ; Offset_0x0392B6
                dc.w    Map16Delta_Mz-Map16Delta_Index         ; Offset_0x038EE6
                dc.w    Map16Delta_Mz-Map16Delta_Index         ; Offset_0x038EE6
                dc.w    Map16Delta_SFz-Map16Delta_Index        ; Offset_0x0392B6
                dc.w    Map16Delta_HTz-Map16Delta_Index        ; Offset_0x038E6A
                dc.w    Map16Delta_HPz-Map16Delta_Index        ; Offset_0x038FBA
                dc.w    Map16Delta_Lvl9-Map16Delta_Index       ; Offset_0x0392B6
                dc.w    Map16Delta_OOz-Map16Delta_Index        ; Offset_0x0390AE
                dc.w    Map16Delta_DHz-Map16Delta_Index        ; Offset_0x0392B6
                dc.w    Map16Delta_CNz-Map16Delta_Index        ; Offset_0x039112
                dc.w    Map16Delta_CPz-Map16Delta_Index        ; Offset_0x03925A
                dc.w    Map16Delta_DEz-Map16Delta_Index        ; Offset_0x039266
                dc.w    Map16Delta_NGHz-Map16Delta_Index       ; Offset_0x039272
                dc.w    Map16Delta_SCz-Map16Delta_Index        ; Offset_0x0392B6  
;-------------------------------------------------------------------------------                
Map16Delta_GHz:                                                ; Offset_0x038E6A
Map16Delta_HTz:                                                ; Offset_0x038E6A  
                dc.w    $1788 ; Endereço da RAM para carregar os mapeamentos ($1788+$FFFF9000) -> adda.w  (A0)+, A1
                dc.w    $003B ; Quantidade de Words a serem movidas para RAM    ($0000..$003B) -> move.w  (A0)+, D1                
                dc.w    $4500, $4504, $4501, $4505, $4508, $450C, $4509, $450D
                dc.w    $4510, $4514, $4511, $4515, $4502, $4506, $4503, $4507
                dc.w    $450A, $450E, $450B, $450F, $4512, $4516, $4513, $4517
                dc.w    $6518, $651A, $6519, $651B, $651C, $651E, $651D, $651F
                dc.w    $439C, $4B9C, $439D, $4B9D, $4158, $439C, $4159, $439D
                dc.w    $4B9C, $4958, $4B9D, $4959, $6394, $6B94, $6395, $6B95
                dc.w    $E396, $EB96, $E397, $EB97, $6398, $6B98, $6399, $6B99
                dc.w    $E39A, $EB9A, $E39B, $EB9B
;------------------------------------------------------------------------------- 
Map16Delta_Mz:                                                 ; Offset_0x038EE6  
                dc.w    $1730 ; Endereço da RAM para carregar os mapeamentos ($1730+$FFFF9000) -> adda.w  (A0)+, A1
                dc.w    $0067 ; Quantidade de Words a serem movidas para RAM    ($0000..$0067) -> move.w  (A0)+, D1                
                dc.w    $235C, $2B5C, $235D, $2B5D, $235E, $2B5E, $235F, $2B5F
                dc.w    $635A, $635A, $635B, $635B, $6358, $6358, $6359, $6359
                dc.w    $6356, $6356, $6357, $6357, $6354, $6354, $6355, $6355
                dc.w    $6352, $6352, $6353, $6353, $6350, $6350, $6351, $6351
                dc.w    $634E, $634E, $634F, $634F, $634C, $634C, $634D, $634D
                dc.w    $2360, $2B60, $2361, $2B61, $2362, $2B62, $2363, $2B63
                dc.w    $2364, $2B64, $2365, $2B65, $2366, $2B66, $2367, $2B67
                dc.w    $C000, $C000, $C340, $C341, $C000, $C000, $C342, $C343
                dc.w    $C344, $C345, $C348, $C349, $C346, $C347, $C34A, $C34B
                dc.w    $E35A, $E35A, $E35B, $E35B, $E358, $E358, $E359, $E359
                dc.w    $E356, $E356, $E357, $E357, $E354, $E354, $E355, $E355
                dc.w    $E352, $E352, $E353, $E353, $E350, $E350, $E351, $E351
                dc.w    $E34E, $E34E, $E34F, $E34F, $E34C, $E34C, $E34D, $E34D
;-------------------------------------------------------------------------------  
Map16Delta_HPz:                                                ; Offset_0x038FBA
                dc.w    $1710 ; Endereco da RAM para carregar os mapeamentos ($1710+$FFFF9000) -> adda.w  (A0)+, A1
                dc.w    $0077 ; Quantidade de Words a serem movidas para RAM    ($0000..$0077) -> move.w  (A0)+, D1               
                dc.w    $62E8, $62E9, $62EA, $62EB, $62EC, $62ED, $62EE, $62EF
                dc.w    $62F0, $62F1, $62F2, $62F3, $62F4, $62F5, $62F6, $62F7
                dc.w    $62F8, $62F9, $62FA, $62FB, $62FC, $62FD, $62FE, $62FF
                dc.w    $42E8, $42E9, $42EA, $42EB, $42EC, $42ED, $42EE, $42EF
                dc.w    $42F0, $42F1, $42F2, $42F3, $42F4, $42F5, $42F6, $42F7
                dc.w    $42F8, $42F9, $42FA, $42FB, $42FC, $42FD, $42FE, $42FF
                dc.w    $0000, $62E8, $0000, $62EA, $62E9, $62EC, $62EB, $62EE
                dc.w    $62ED, $0000, $62EF, $0000, $0000, $62F0, $0000, $62F2
                dc.w    $62F1, $62F4, $62F3, $62F6, $62F5, $0000, $62F7, $0000
                dc.w    $0000, $62F8, $0000, $62FA, $62F9, $62FC, $62FB, $62FE
                dc.w    $62FD, $0000, $62FF, $0000, $0000, $42E8, $0000, $42EA
                dc.w    $42E9, $42EC, $42EB, $42EE, $42ED, $0000, $42EF, $0000
                dc.w    $0000, $42F0, $0000, $42F2, $42F1, $42F4, $42F3, $42F6
                dc.w    $42F5, $0000, $42F7, $0000, $0000, $42F8, $0000, $42FA
                dc.w    $42F9, $42FC, $42FB, $42FE, $42FD, $0000, $42FF, $0000
;------------------------------------------------------------------------------- 
Map16Delta_OOz:                                                ; Offset_0x0390AE
                dc.w    $17A0 ; Endereco da RAM para carregar os mapeamentos ($17A0+$FFFF9000) -> adda.w  (A0)+, A1
                dc.w    $002F ; Quantidade de Words a serem movidas para RAM    ($0000..$0027) -> move.w  (A0)+, D1               
                dc.w    $82B6, $82B8, $82B7, $82B9, $E2BA, $E2BB, $E2BC, $E2BD
                dc.w    $0000, $62BE, $0000, $62C0, $62BF, $0000, $62C1, $0000
                dc.w    $C2C2, $C2C3, $C2CA, $C2CB, $C2C4, $C2C5, $C2CC, $C2CD
                dc.w    $C2C6, $C2C7, $C2CE, $C2CF, $C2C8, $C2C9, $C2D0, $C2D1
                dc.w    $C2D2, $C2D3, $C2DA, $C2DB, $C2D4, $C2D5, $C2DC, $C2DD
                dc.w    $C2D6, $C2D7, $C2DE, $C2DF, $C2D8, $C2D9, $C2E0, $C2E1 
;------------------------------------------------------------------------------- 
Map16Delta_CNz:                                                ; Offset_0x039112
                dc.w    $1760 ; Endereco da RAM para carregar os mapeamentos ($1760+$FFFF9000) -> adda.w  (A0)+, A1
                dc.w    $004F ; Quantidade de Words a serem movidas para RAM    ($0000..$004F) -> move.w  (A0)+, D1                
                dc.w    $0550, $0554, $0551, $0555, $0558, $055C, $0559, $055D
                dc.w    $0552, $0556, $0553, $0557, $055A, $055E, $055B, $055F
                dc.w    $0560, $0564, $0561, $0565, $0568, $056C, $0569, $056D
                dc.w    $0562, $0566, $0563, $0567, $056A, $056E, $056B, $056F
                dc.w    $0570, $0574, $0571, $0575, $0578, $057C, $0579, $057D
                dc.w    $0572, $0576, $0573, $0577, $057A, $057E, $057B, $057F
                dc.w    $E540, $E544, $E541, $E545, $E548, $E54C, $E549, $E54D
                dc.w    $E542, $E546, $E543, $E547, $E54A, $E54E, $E54B, $E54F
                dc.w    $E330, $E334, $E331, $E335, $E338, $E33C, $E339, $E33D
                dc.w    $E332, $E336, $E333, $E337, $E33A, $E33E, $E33B, $E33F  
;-------------------------------------------------------------------------------
Map16Delta_CNz_2P:                                             ; Offset_0x0391B6        
                dc.w    $1760 ; Endereco da RAM para carregar os mapeamentos ($1760+$FFFF9000) -> adda.w  (A0)+, A1
                dc.w    $004F ; Quantidade de Words a serem movidas para RAM    ($0000..$004F) -> move.w  (A0)+, D1                
                dc.w    $0750, $0754, $0751, $0755, $0758, $075C, $0759, $075D
                dc.w    $0752, $0756, $0753, $0757, $075A, $075E, $075B, $075F
                dc.w    $0760, $0764, $0761, $0765, $0768, $076C, $0769, $076D
                dc.w    $0762, $0766, $0763, $0767, $076A, $076E, $076B, $076F
                dc.w    $0770, $0774, $0771, $0775, $0778, $077C, $0779, $077D
                dc.w    $0772, $0776, $0773, $0777, $077A, $077E, $077B, $077F
                dc.w    $E740, $E744, $E741, $E745, $E748, $E74C, $E749, $E74D
                dc.w    $E742, $E746, $E743, $E747, $E74A, $E74E, $E74B, $E74F
                dc.w    $E330, $E334, $E331, $E335, $E338, $E33C, $E339, $E33D
                dc.w    $E332, $E336, $E333, $E337, $E33A, $E33E, $E33B, $E33F                       
;------------------------------------------------------------------------------- 
Map16Delta_CPz:                                                ; Offset_0x03925A
                dc.w    $17F8 ; Endereco da RAM para carregar os mapeamentos ($17F8+$FFFF9000) -> adda.w  (A0)+, A1
                dc.w    $0003 ; Quantidade de Words a serem movidas para RAM    ($0000..$0003) -> move.w  (A0)+, D1                
                dc.w    $4370, $4371, $4370, $4371   
;------------------------------------------------------------------------------- 
Map16Delta_DEz:                                                ; Offset_0x039266
                dc.w    $17F8 ; Endereco da RAM para carregar os mapeamentos ($17F8+$FFFF9000) -> adda.w  (A0)+, A1
                dc.w    $0003 ; Quantidade de Words a serem movidas para RAM    ($0000..$0003) -> move.w  (A0)+, D1                
                dc.w    $45F0, $45F1, $45F0, $45F1  
;------------------------------------------------------------------------------- 
Map16Delta_NGHz:                                               ; Offset_0x039272
                dc.w    $17C0 ; Endereco da RAM para carregar os mapeamentos ($17C0+$FFFF9000) -> adda.w  (A0)+, A1
                dc.w    $001F ; Quantidade de Words a serem movidas para RAM    ($0000..$001F) -> move.w  (A0)+, D1
                dc.w    $C428, $C429, $C42A, $C42B, $C42C, $C42D, $C42E, $C42F
                dc.w    $C430, $C431, $C432, $C433, $C563, $C564, $C565, $C566
                dc.w    $4428, $4429, $442A, $442B, $442C, $442D, $442E, $442F
                dc.w    $4430, $4431, $4432, $4433, $4563, $4564, $4565, $4566
;------------------------------------------------------------------------------- 
Map16Delta_Lvl1:                                               ; Offset_0x0392B6
Map16Delta_Wz:                                                 ; Offset_0x0392B6
Map16Delta_Lvl3:                                               ; Offset_0x0392B6
Map16Delta_SFz:                                                ; Offset_0x0392B6 
Map16Delta_Lvl9:                                               ; Offset_0x0392B6
Map16Delta_DHz:                                                ; Offset_0x0392B6
Map16Delta_SCz:                                                ; Offset_0x0392B6  
                dc.w    $0000
;-------------------------------------------------------------------------------   
Hill_Top_Init_Dyn_Sprites:                                     ; Offset_0x0392B8
                lea     (Art_Hill_Top_Background), A0          ; Offset_0x040300                           
                lea     ($FFFFB800).w, A4                                       
                bsr     Jmp_01_To_NemesisDecToRAM              ; Offset_0x0392F4                                         
                lea     ($FFFFB800).w, A1                                       
                lea     HTz_RAM_Dyn_Sprites(PC), A4            ; Offset_0x038894                  
                moveq   #$00, D2                                                
                moveq   #$07, D4                                                
Offset_0x0392D2:
                moveq   #$05, D3                                                
Offset_0x0392D4:
                moveq   #-$01, D0                                               
                move.w  (A4)+, D0                                               
                move.l  D0, A2                                                  
                moveq   #$1F, D1                                                
Offset_0x0392DC:
                move.l  (A1), (A2)+                                             
                move.l  D2, (A1)+                                               
                dbra    D1, Offset_0x0392DC                                     
                dbra    D3, Offset_0x0392D4                                     
                adda.w  #$000C, A4                                              
                dbra    D4, Offset_0x0392D2                                     
                rts                                                                              
;===============================================================================
; Rotina para carregar os mapeamentos para os gráficos dinâmicos das fases
; <<<-
;===============================================================================  
                nop
Jmp_01_To_NemesisDecToRAM:                                     ; Offset_0x0392F4
                jmp     (NemesisDecToRAM)                      ; Offset_0x001A86
                dc.w    $0000
;-------------------------------------------------------------------------------                
Obj_0x21_Head_Up_Display:                                      ; Offset_0x0392FC
                include 'data\objects\obj_0x21.asm' 
;-------------------------------------------------------------------------------                  
AddPoints:                                                     ; Offset_0x0394D0
                move.b  #$01, (HUD_Score_Refresh_Flag).w             ; $FFFFFE1F
                lea     ($FFFFFE26).w, A3
                add.l   D0, (A3)
                move.l  #$000F423F, D1   ; 999.999
                cmp.l   (A3), D1
                bhi.s   Offset_0x0394E8
                move.l  D1, (A3)
Offset_0x0394E8:
                move.l  (A3), D0
                cmp.l   ($FFFFFFC0).w, D0
                bcs.s   Offset_0x03950A
                addi.l  #$00001388, ($FFFFFFC0).w   ; 50.000
                addq.b  #$01, (Life_Count).w                         ; $FFFFFE12
                addq.b  #$01, (HUD_Life_Refresh_Flag).w              ; $FFFFFE1C
                move.w  #$0098, D0
                jmp     (Play_Music)                           ; Offset_0x00190C
Offset_0x03950A:
                rts
;===============================================================================
; Rotina para atualizar os contadores na tela (Pontos, Tempo, Vidas...).
; ->>>
;===============================================================================                 
HudUpdate:                                                     ; Offset_0x03950C   
                nop                                                             
                lea     (VDP_Data_Port), A6                          ; $00C00000
                tst.w   (Debug_Mode_Active_Flag).w                   ; $FFFFFFFA                                      
                bne     Offset_0x0395FE                                         
                tst.b   (HUD_Score_Refresh_Flag).w                   ; $FFFFFE1F
                beq.s   Offset_0x039534                                         
                clr.b   (HUD_Score_Refresh_Flag).w                   ; $FFFFFE1F
                move.l  #$5C800003, D0                                          
                move.l  ($FFFFFE26).w, D1                                       
                bsr     Offset_0x039776                                         
Offset_0x039534:
                tst.b   (HUD_Rings_Refresh_Flag).w                   ; $FFFFFE1D
                beq.s   Offset_0x039554                                         
                bpl.s   Offset_0x039540                                         
                bsr     Offset_0x0396A0                                         
Offset_0x039540:
                clr.b   (HUD_Rings_Refresh_Flag).w                   ; $FFFFFE1D
                move.l  #$5F400003, D0                                          
                moveq   #$00, D1                                                
                move.w  (Ring_Count).w, D1                           ; $FFFFFE20                         
                bsr     Offset_0x03976C                                         
Offset_0x039554:
                tst.b   (HUD_Timer_Refresh_Flag).w                   ; $FFFFFE1E
                beq.s   Offset_0x0395B0                                         
                tst.w   (Pause_Status).w                             ; $FFFFF63A
                bne.s   Offset_0x0395B0                                         
                lea     ($FFFFFE22).w, A1                                       
                cmpi.l  #$00093B3B, (A1)+                                       
                beq.s   Time_Over                              ; Offset_0x0395E8
                addq.b  #$01, -(A1)                                             
                cmpi.b  #$3C, (A1)                                              
                bcs.s   Offset_0x0395B0                                         
                move.b  #$00, (A1)                                              
                addq.b  #$01, -(A1)                                             
                cmpi.b  #$3C, (A1)                                              
                bcs.s   Offset_0x039590                                         
                move.b  #$00, (A1)                                              
                addq.b  #$01, -(A1)                                             
                cmpi.b  #$09, (A1)                                              
                bcs.s   Offset_0x039590                                         
                move.b  #$09, (A1)                                              
Offset_0x039590:
                move.l  #$5E400003, D0                                          
                moveq   #$00, D1                                                
                move.b  ($FFFFFE23).w, D1                                       
                bsr     Offset_0x039844                                         
                move.l  #$5EC00003, D0                                          
                moveq   #$00, D1                                                
                move.b  ($FFFFFE24).w, D1                                       
                bsr     Offset_0x03984C                                         
Offset_0x0395B0:
                tst.b   (HUD_Life_Refresh_Flag).w                    ; $FFFFFE1C                                     
                beq.s   Offset_0x0395BE                                         
                clr.b   (HUD_Life_Refresh_Flag).w                    ; $FFFFFE1C                                     
                bsr     Offset_0x039904                                         
Offset_0x0395BE:
                tst.b   ($FFFFF7D6).w                                           
                beq.s   Offset_0x0395E6                                         
                clr.b   ($FFFFF7D6).w                                           
                move.l  #$6E000002, (VDP_Control_Port)               ; $00C00004
                moveq   #$00, D1                                                
                move.w  ($FFFFF7D2).w, D1                                       
                bsr     Offset_0x0398A4                                         
                moveq   #$00, D1                                                
                move.w  ($FFFFF7D4).w, D1                                       
                bsr     Offset_0x0398A4                                         
Offset_0x0395E6:
                rts                       
;-------------------------------------------------------------------------------                                                      
Time_Over:                                                     ; Offset_0x0395E8
                clr.b   (HUD_Timer_Refresh_Flag).w                   ; $FFFFFE1E
                lea     (Obj_Memory_Address).w, A0                   ; $FFFFB000
                move.l  A0, A2                                                  
                bsr     Kill_Player                            ; Offset_0x038420
                move.b  #$01, ($FFFFFE1A).w                                     
                rts  
;-------------------------------------------------------------------------------                                                                           
Offset_0x0395FE:
                bsr     Offset_0x03970C                                         
                tst.b   (HUD_Rings_Refresh_Flag).w                   ; $FFFFFE1D
                beq.s   Offset_0x039622                                         
                bpl.s   Offset_0x03960E                                         
                bsr     Offset_0x0396A0                                         
Offset_0x03960E:
                clr.b   (HUD_Rings_Refresh_Flag).w                   ; $FFFFFE1D
                move.l  #$5F400003, D0                                          
                moveq   #$00, D1                                                
                move.w  (Ring_Count).w, D1                           ; $FFFFFE20                       
                bsr     Offset_0x03976C                                         
Offset_0x039622:
                move.l  #$5EC00003, D0                                          
                moveq   #$00, D1                                                
                move.b  ($FFFFF62C).w, D1                                       
                bsr     Offset_0x03984C                                         
                tst.b   (HUD_Life_Refresh_Flag).w                    ; $FFFFFE1C                                
                beq.s   Offset_0x039640                                         
                clr.b   (HUD_Life_Refresh_Flag).w                    ; $FFFFFE1C                           
                bsr     Offset_0x039904                                         
Offset_0x039640:
                tst.b   ($FFFFF7D6).w                                           
                beq.s   Offset_0x039668                                         
                clr.b   ($FFFFF7D6).w                                           
                move.l  #$6E000002, (VDP_Control_Port)               ; $00C00004
                moveq   #$00, D1                                                
                move.w  ($FFFFF7D2).w, D1                                       
                bsr     Offset_0x0398A4                                         
                moveq   #$00, D1                                                
                move.w  ($FFFFF7D4).w, D1                                       
                bsr     Offset_0x0398A4                                         
Offset_0x039668:
                tst.w   (Pause_Status).w                             ; $FFFFF63A
                bne.s   Offset_0x03969E                                         
                lea     ($FFFFFE22).w, A1                                       
                cmpi.l  #$00093B3B, (A1)+                                       
                nop                                                             
                addq.b  #$01, -(A1)                                             
                cmpi.b  #$3C, (A1)                                              
                bcs.s   Offset_0x03969E                                         
                move.b  #$00, (A1)                                              
                addq.b  #$01, -(A1)                                             
                cmpi.b  #$3C, (A1)                                              
                bcs.s   Offset_0x03969E                                         
                move.b  #$00, (A1)                                              
                addq.b  #$01, -(A1)                                             
                cmpi.b  #$09, (A1)                                              
                bcs.s   Offset_0x03969E                                         
                move.b  #$09, (A1)                                              
Offset_0x03969E:
                rts                                                             
Offset_0x0396A0:
                move.l  #$5F400003, (VDP_Control_Port)               ; $00C00004
                lea     HUD_Rings_Mask(PC), A2                 ; Offset_0x039708                     
                move.w  #$0002, D2                                              
                bra.s   Offset_0x0396D0     
;-------------------------------------------------------------------------------  
Head_Up_Display_Base:                                          ; Offset_0x0396B4     
                lea     (VDP_Data_Port), A6                          ; $00C00000
                bsr     Offset_0x039904                                         
                move.l  #$5C400003, (VDP_Control_Port)               ; $00C00004
                lea     HUD_ScoreTime_Mask(PC), A2             ; Offset_0x0396FC                           
                move.w  #$000E, D2                                              
Offset_0x0396D0:
                lea     HUD_Art_Numbers(PC), A1                ; Offset_0x03996E                         
Offset_0x0396D4:
                move.w  #$000F, D1                                              
                move.b  (A2)+, D0                                               
                bmi.s   Offset_0x0396F0                                         
                ext.w   D0                                                      
                lsl.w   #$05, D0                                                
                lea     $00(A1, D0), A3                                         
Offset_0x0396E4:
                move.l  (A3)+, (A6)                                             
                dbra    D1, Offset_0x0396E4                                     
Offset_0x0396EA:
                dbra    D2, Offset_0x0396D4                                     
                rts                                                             
Offset_0x0396F0:
                move.l  #$00000000, (A6)                                        
                dbra    D1, Offset_0x0396F0                                     
                bra.s   Offset_0x0396EA                                         
;-------------------------------------------------------------------------------                
HUD_ScoreTime_Mask:                                            ; Offset_0x0396FC
                dc.l    $16FFFFFF, $FFFFFF00, $00140000  
HUD_Rings_Mask:                                                ; Offset_0x039708   
                dc.l    $FFFF0000   
;-------------------------------------------------------------------------------   
Offset_0x03970C:
                move.l  #$5C400003, (VDP_Control_Port)               ; $00C00004
                move.w  (Camera_X).w, D1                             ; $FFFFEE00
                move.w  ($FFFFFFDC).w, D1                                       
                swap.w  D1                                                      
                move.w  (Player_Position_X).w, D1                    ; $FFFFB008
                bsr.s   Offset_0x039734                                         
                move.w  (Camera_Y).w, D1                             ; $FFFFEE04
                move.w  ($FFFFFFDE).w, D1                                       
                swap.w  D1                                                      
                move.w  (Player_Position_Y).w, D1                    ; $FFFFB00C
Offset_0x039734:
                moveq   #$07, D6                                                
                lea     (HUD_Art_Debug_Numbers), A1            ; Offset_0x039DAE                           
Offset_0x03973C:
                rol.w   #$04, D1                                                
                move.w  D1, D2                                                  
                andi.w  #$000F, D2                                              
                cmpi.w  #$000A, D2                                              
                bcs.s   Offset_0x03974E                                         
                addi.w  #$0007, D2                                              
Offset_0x03974E:
                lsl.w   #$05, D2                                                
                lea     $00(A1, D2), A3                                         
                move.l  (A3)+, (A6)                                             
                move.l  (A3)+, (A6)                                             
                move.l  (A3)+, (A6)                                             
                move.l  (A3)+, (A6)                                             
                move.l  (A3)+, (A6)                                             
                move.l  (A3)+, (A6)                                             
                move.l  (A3)+, (A6)                                             
                move.l  (A3)+, (A6)                                             
                swap.w  D1                                                      
                dbra    D6, Offset_0x03973C                                     
                rts  
;-------------------------------------------------------------------------------                                                                           
Offset_0x03976C:
                lea     (HUD_Val_000100), A2                   ; Offset_0x039838                   
                moveq   #$02, D6                                                
                bra.s   Offset_0x03977E                                         
Offset_0x039776:
                lea     (HUD_Val_100000), A2                   ; Offset_0x03982C                    
                moveq   #$05, D6                                                
Offset_0x03977E:
                moveq   #$00, D4                                                
                lea     HUD_Art_Numbers(PC), A1                ; Offset_0x03996E                       
Offset_0x039784:
                moveq   #$00, D2                                                
                move.l  (A2)+, D3                                               
Offset_0x039788:
                sub.l   D3, D1                                                  
                bcs.s   Offset_0x039790                                         
                addq.w  #$01, D2                                                
                bra.s   Offset_0x039788                                         
Offset_0x039790:
                add.l   D3, D1                                                  
                tst.w   D2                                                      
                beq.s   Offset_0x03979A                                         
                move.w  #$0001, D4                                              
Offset_0x03979A:
                tst.w   D4                                                      
                beq.s   Offset_0x0397C8                                         
                lsl.w   #$06, D2                                                
                move.l  D0, $0004(A6)                                           
                lea     $00(A1, D2), A3                                         
                move.l  (A3)+, (A6)                                             
                move.l  (A3)+, (A6)                                             
                move.l  (A3)+, (A6)                                             
                move.l  (A3)+, (A6)                                             
                move.l  (A3)+, (A6)                                             
                move.l  (A3)+, (A6)                                             
                move.l  (A3)+, (A6)                                             
                move.l  (A3)+, (A6)                                             
                move.l  (A3)+, (A6)                                             
                move.l  (A3)+, (A6)                                             
                move.l  (A3)+, (A6)                                             
                move.l  (A3)+, (A6)                                             
                move.l  (A3)+, (A6)                                             
                move.l  (A3)+, (A6)                                             
                move.l  (A3)+, (A6)                                             
                move.l  (A3)+, (A6)                                             
Offset_0x0397C8:
                addi.l  #$00400000, D0                                          
                dbra    D6, Offset_0x039784                                     
                rts                                                             
;-------------------------------------------------------------------------------
Time_Count_Down:                                               ; Offset_0x0397D4
                move.l  #$5F800003, (VDP_Control_Port)               ; $00C00004
                lea     (VDP_Data_Port), A6                          ; $00C00000
                lea     (HUD_Val_000010), A2                   ; Offset_0x03983C                          
                moveq   #$01, D6                                                
                moveq   #$00, D4                                                
                lea     HUD_Art_Numbers(PC), A1                ; Offset_0x03996E                      
Offset_0x0397F2:
                moveq   #$00, D2                                                
                move.l  (A2)+, D3                                               
Offset_0x0397F6:
                sub.l   D3, D1                                                  
                bcs.s   Offset_0x0397FE                                         
                addq.w  #$01, D2                                                
                bra.s   Offset_0x0397F6                                         
Offset_0x0397FE:
                add.l   D3, D1                                                  
                lsl.w   #$06, D2                                                
                lea     $00(A1, D2), A3                                         
                move.l  (A3)+, (A6)                                             
                move.l  (A3)+, (A6)                                             
                move.l  (A3)+, (A6)                                             
                move.l  (A3)+, (A6)                                             
                move.l  (A3)+, (A6)                                             
                move.l  (A3)+, (A6)                                             
                move.l  (A3)+, (A6)                                             
                move.l  (A3)+, (A6)                                             
                move.l  (A3)+, (A6)                                             
                move.l  (A3)+, (A6)                                             
                move.l  (A3)+, (A6)                                             
                move.l  (A3)+, (A6)                                             
                move.l  (A3)+, (A6)                                             
                move.l  (A3)+, (A6)                                             
                move.l  (A3)+, (A6)                                             
                move.l  (A3)+, (A6)                                             
                dbra    D6, Offset_0x0397F2                                     
                rts   
;-------------------------------------------------------------------------------                
HUD_Val_100000:                                                ; Offset_0x03982C
                dc.l    $000186A0
;HUD_Val_010000:                                               ; Offset_0x039830
                dc.l    $00002710
HUD_Val_001000:                                                ; Offset_0x039834
                dc.l    $000003E8
HUD_Val_000100:                                                ; Offset_0x039838
                dc.l    $00000064
HUD_Val_000010:                                                ; Offset_0x03983C
                dc.l    $0000000A 
HUD_Val_000001:                                                ; Offset_0x039840  
                dc.l    $00000001                  
;-------------------------------------------------------------------------------  
Offset_0x039844:
                lea     HUD_Val_000001(PC), A2                 ; Offset_0x039840                      
                moveq   #$00, D6                                                
                bra.s   Offset_0x039852                                         
Offset_0x03984C:                                       
                lea     HUD_Val_000010(PC), A2                 ; Offset_0x03983C                         
                moveq   #$01, D6                                                
Offset_0x039852:
                moveq   #$00, D4                                                
                lea     HUD_Art_Numbers(PC), A1                ; Offset_0x03996E                       
Offset_0x039858:
                moveq   #$00, D2                                                
                move.l  (A2)+, D3                                               
Offset_0x03985C:
                sub.l   D3, D1                                                  
                bcs.s   Offset_0x039864                                         
                addq.w  #$01, D2                                                
                bra.s   Offset_0x03985C                                         
Offset_0x039864:
                add.l   D3, D1                                                  
                tst.w   D2                                                      
                beq.s   Offset_0x03986E                                         
                move.w  #$0001, D4                                              
Offset_0x03986E:
                lsl.w   #$06, D2                                                
                move.l  D0, $0004(A6)                                           
                lea     $00(A1, D2), A3                                         
                move.l  (A3)+, (A6)                                             
                move.l  (A3)+, (A6)                                             
                move.l  (A3)+, (A6)                                             
                move.l  (A3)+, (A6)                                             
                move.l  (A3)+, (A6)                                             
                move.l  (A3)+, (A6)                                             
                move.l  (A3)+, (A6)                                             
                move.l  (A3)+, (A6)                                             
                move.l  (A3)+, (A6)                                             
                move.l  (A3)+, (A6)                                             
                move.l  (A3)+, (A6)                                             
                move.l  (A3)+, (A6)                                             
                move.l  (A3)+, (A6)                                             
                move.l  (A3)+, (A6)                                             
                move.l  (A3)+, (A6)                                             
                move.l  (A3)+, (A6)                                             
                addi.l  #$00400000, D0                                          
                dbra    D6, Offset_0x039858                                     
                rts  
;-------------------------------------------------------------------------------                                                                           
Offset_0x0398A4:
                lea     HUD_Val_001000(PC), A2                 ; Offset_0x039834                        
                moveq   #$03, D6                                                
                moveq   #$00, D4                                                
                lea     HUD_Art_Numbers(PC), A1                ; Offset_0x03996E                       
Offset_0x0398B0:
                moveq   #$00, D2                                                
                move.l  (A2)+, D3                                               
Offset_0x0398B4:
                sub.l   D3, D1                                                  
                bcs.s   Offset_0x0398BC                                         
                addq.w  #$01, D2                                                
                bra.s   Offset_0x0398B4                                         
Offset_0x0398BC:
                add.l   D3, D1                                                  
                tst.w   D2                                                      
                beq.s   Offset_0x0398C6                                         
                move.w  #$0001, D4                                              
Offset_0x0398C6:
                tst.w   D4                                                      
                beq.s   Offset_0x0398F6                                         
                lsl.w   #$06, D2                                                
                lea     $00(A1, D2), A3                                         
                move.l  (A3)+, (A6)                                             
                move.l  (A3)+, (A6)                                             
                move.l  (A3)+, (A6)                                             
                move.l  (A3)+, (A6)                                             
                move.l  (A3)+, (A6)                                             
                move.l  (A3)+, (A6)                                             
                move.l  (A3)+, (A6)                                             
                move.l  (A3)+, (A6)                                             
                move.l  (A3)+, (A6)                                             
                move.l  (A3)+, (A6)                                             
                move.l  (A3)+, (A6)                                             
                move.l  (A3)+, (A6)                                             
                move.l  (A3)+, (A6)                                             
                move.l  (A3)+, (A6)                                             
                move.l  (A3)+, (A6)                                             
                move.l  (A3)+, (A6)                                             
Offset_0x0398F0:
                dbra    D6, Offset_0x0398B0                                     
                rts                                                             
Offset_0x0398F6:
                moveq   #$0F, D5                                                
Offset_0x0398F8:
                move.l  #$00000000, (A6)                                        
                dbra    D5, Offset_0x0398F8                                     
                bra.s   Offset_0x0398F0                                         
Offset_0x039904:
                move.l  #$7BA00003, D0                                          
                moveq   #$00, D1                                                
                move.b  (Life_Count).w, D1                           ; $FFFFFE12
                
                lea     HUD_Val_000010(PC), A2                 ; Offset_0x03983C                             
                moveq   #$01, D6                                                
                moveq   #$00, D4                                                
                lea     HUD_Art_Life_Numbers(PC), A1           ; Offset_0x039C6E                           
Offset_0x03991C:
                move.l  D0, $0004(A6)                                           
                moveq   #$00, D2                                                
                move.l  (A2)+, D3                                               
Offset_0x039924:
                sub.l   D3, D1                                                  
                bcs.s   Offset_0x03992C                                         
                addq.w  #$01, D2                                                
                bra.s   Offset_0x039924                                         
Offset_0x03992C:
                add.l   D3, D1                                                  
                tst.w   D2                                                      
                beq.s   Offset_0x039936                                         
                move.w  #$0001, D4                                              
Offset_0x039936:
                tst.w   D4                                                      
                beq.s   Offset_0x03995C                                         
Offset_0x03993A:
                lsl.w   #$05, D2                                                
                lea     $00(A1, D2), A3                                         
                move.l  (A3)+, (A6)                                             
                move.l  (A3)+, (A6)                                             
                move.l  (A3)+, (A6)                                             
                move.l  (A3)+, (A6)                                             
                move.l  (A3)+, (A6)                                             
                move.l  (A3)+, (A6)                                             
                move.l  (A3)+, (A6)                                             
                move.l  (A3)+, (A6)                                             
Offset_0x039950:
                addi.l  #$00400000, D0                                          
                dbra    D6, Offset_0x03991C                                     
                rts                                                             
Offset_0x03995C:
                tst.w   D6                                                      
                beq.s   Offset_0x03993A                                         
                moveq   #$07, D5                                                
Offset_0x039962:
                move.l  #$00000000, (A6)                                        
                dbra    D5, Offset_0x039962                                     
                bra.s   Offset_0x039950         
;-------------------------------------------------------------------------------                                                
HUD_Art_Numbers:                                               ; Offset_0x03996E
                incbin  'data\art\hud_numb.dat'   
HUD_Art_Life_Numbers:                                          ; Offset_0x039C6E
                incbin  'data\art\hud_num2.dat'   
HUD_Art_Debug_Numbers:                                         ; Offset_0x039DAE 
                incbin  'data\art\hud_debg.dat'       
;-------------------------------------------------------------------------------  
                nop
Jmp_3D_To_ModifySpriteAttr_2P:                                 ; Offset_0x03A090
                jmp     (ModifySpriteAttr_2P)                  ; Offset_0x01298E  
                dc.w    $0000                                                                                                                                 
;===============================================================================
; Rotina para atualizar os contadores na tela (Pontos, Tempo, Vidas...).
; <<<-
;===============================================================================   
Debug_Mode:                                                    ; Offset_0x03A098
                moveq   #$00, D0                                                
                move.b  (Debug_Mode_Flag_Index).w, D0                ; $FFFFFE08
                move.w  Debug_Mode_Routine_List(PC, D0), D1   ; Offset_0x03A0A6                        
                jmp     Debug_Mode_Routine_List(PC, D1)        ; Offset_0x03A0A6
;-------------------------------------------------------------------------------
Debug_Mode_Routine_List:                                       ; Offset_0x03A0A6
                dc.w    Offset_0x03A0AA-Debug_Mode_Routine_List
                dc.w    Offset_0x03A128-Debug_Mode_Routine_List                         
;-------------------------------------------------------------------------------  
Offset_0x03A0AA:
                addq.b  #$02, (Debug_Mode_Flag_Index).w              ; $FFFFFE08
                move.w  (Camera_Min_Y).w, ($FFFFFEF0).w              ; $FFFFEECC
                move.w  ($FFFFEEC6).w, ($FFFFFEF2).w
                cmpi.b  #$10, (Level_Id).w                           ; $FFFFFE10
                bne.s   Offset_0x03A0CE
                move.w  #$0000, (Sonic_Level_Limits_Min_X).w         ; $FFFFEEC8
                move.w  #$3FFF, (Sonic_Level_Limits_Max_X).w         ; $FFFFEECA
Offset_0x03A0CE:
                andi.w  #$07FF, (Player_Position_Y).w                ; $FFFFB00C
                andi.w  #$07FF, (Camera_Y).w                         ; $FFFFEE04
                andi.w  #$07FF, (Camera_Y_x4).w                      ; $FFFFEE0C
                move.b  #$00, Obj_Map_Id(A0)                             ; $001A
                move.b  #$00, Obj_Ani_Number(A0)                         ; $001C
                cmpi.b  #gm_SpecialStage, (Game_Mode).w        ; $10,  $FFFFF600
                bne.s   Offset_0x03A0F8
                moveq   #$06, D0
                bra.s   Offset_0x03A0FE
Offset_0x03A0F8:
                moveq   #$00, D0
                move.b  (Level_Id).w, D0                             ; $FFFFFE10
Offset_0x03A0FE:
                lea     (Debug_Mode_Object_List), A2           ; Offset_0x03A34C
                add.w   D0, D0
                adda.w  $00(A2, D0), A2
                move.w  (A2)+, D6
                cmp.b   ($FFFFFE06).w, D6
                bhi.s   Offset_0x03A118
                move.b  #$00, ($FFFFFE06).w
Offset_0x03A118:
                bsr     Offset_0x03A32C
                move.b  #$0C, ($FFFFFE0A).w
                move.b  #$01, ($FFFFFE0B).w
;-------------------------------------------------------------------------------                
Offset_0x03A128:
                moveq   #$06, D0
                cmpi.b  #gm_SpecialStage, (Game_Mode).w        ; $10,  $FFFFF600
                beq.s   Offset_0x03A138
                moveq   #$00, D0
                move.b  (Level_Id).w, D0                             ; $FFFFFE10
Offset_0x03A138:
                lea     (Debug_Mode_Object_List), A2           ; Offset_0x03A34C
                add.w   D0, D0
                adda.w  $00(A2, D0), A2
                move.w  (A2)+, D6
                bsr     Offset_0x03A150
                jmp     (DisplaySprite)                        ; Offset_0x0120DE
Offset_0x03A150:
                moveq   #$00, D4
                move.w  #$0001, D1
                move.b  (Control_Ports_Buffer_Data+$0001).w, D4      ; $FFFFF605
                andi.w  #$000F, D4
                bne.s   Offset_0x03A192
                move.b  (Control_Ports_Buffer_Data).w, D0            ; $FFFFF604
                andi.w  #$000F, D0
                bne.s   Offset_0x03A17A
                move.b  #$0C, ($FFFFFE0A).w
                move.b  #$0F, ($FFFFFE0B).w
                bra     Offset_0x03A1F6
Offset_0x03A17A:
                subq.b  #$01, ($FFFFFE0A).w
                bne.s   Offset_0x03A196
                move.b  #$01, ($FFFFFE0A).w
                addq.b  #$01, ($FFFFFE0B).w
                bne.s   Offset_0x03A192
                move.b  #$FF, ($FFFFFE0B).w
Offset_0x03A192:
                move.b  (Control_Ports_Buffer_Data).w, D4            ; $FFFFF604
Offset_0x03A196:
                moveq   #$00, D1
                move.b  ($FFFFFE0B).w, D1
                addq.w  #$01, D1
                swap.w  D1
                asr.l   #$04, D1
                move.l  Obj_Y(A0), D2                                    ; $000C
                move.l  Obj_X(A0), D3                                    ; $0008
                btst    #$00, D4
                beq.s   Offset_0x03A1C0
                sub.l   D1, D2
                moveq   #$00, D0
                move.w  (Camera_Min_Y).w, D0                         ; $FFFFEECC
                swap.w  D0
                cmp.l   D0, D2
                bge.s   Offset_0x03A1C0
                move.l  D0, D2
Offset_0x03A1C0:
                btst    #$01, D4
                beq.s   Offset_0x03A1DA
                add.l   D1, D2
                moveq   #$00, D0
                move.w  ($FFFFEEC6).w, D0
                addi.w  #$00DF, D0
                swap.w  D0
                cmp.l   D0, D2
                blt.s   Offset_0x03A1DA
                move.l  D0, D2
Offset_0x03A1DA:
                btst    #$02, D4
                beq.s   Offset_0x03A1E6
                sub.l   D1, D3
                bcc.s   Offset_0x03A1E6
                moveq   #$00, D3
Offset_0x03A1E6:
                btst    #$03, D4
                beq.s   Offset_0x03A1EE
                add.l   D1, D3
Offset_0x03A1EE:
                move.l  D2, Obj_Y(A0)                                    ; $000C
                move.l  D3, Obj_X(A0)                                    ; $0008
Offset_0x03A1F6:
                btst    #$06, (Control_Ports_Buffer_Data).w          ; $FFFFF604
                beq.s   Offset_0x03A22E
                btst    #$05, (Control_Ports_Buffer_Data+$0001).w    ; $FFFFF605
                beq.s   Offset_0x03A212
                subq.b  #$01, ($FFFFFE06).w
                bcc.s   Offset_0x03A22A
                add.b   D6, ($FFFFFE06).w
                bra.s   Offset_0x03A22A
Offset_0x03A212:
                btst    #$06, (Control_Ports_Buffer_Data+$0001).w    ; $FFFFF605
                beq.s   Offset_0x03A22E
                addq.b  #$01, ($FFFFFE06).w
                cmp.b   ($FFFFFE06).w, D6
                bhi.s   Offset_0x03A22A
                move.b  #$00, ($FFFFFE06).w
Offset_0x03A22A:
                bra     Offset_0x03A32C
Offset_0x03A22E:
                btst    #$05, (Control_Ports_Buffer_Data+$0001).w    ; $FFFFF605
                beq.s   Offset_0x03A272
                jsr     (SingleObjectLoad)                     ; Offset_0x013BAA
                bne.s   Offset_0x03A272
                move.w  Obj_X(A0), Obj_X(A1)                             ; $0008
                move.w  Obj_Y(A0), Obj_Y(A1)                             ; $000C
                move.b  Obj_Map(A0), Obj_Id(A1)                   ; $0000, $0004
                move.b  Obj_Flags(A0), Obj_Flags(A1)                     ; $0001
                move.b  Obj_Flags(A0), Obj_Status(A1)             ; $0001, $0022
                andi.b  #$7F, Obj_Status(A1)                             ; $0022
                moveq   #$00, D0
                move.b  ($FFFFFE06).w, D0
                lsl.w   #$03, D0
                move.b  $04(A2, D0), Obj_Subtype(A1)                     ; $0028
                rts
Offset_0x03A272:
                btst    #$04, (Control_Ports_Buffer_Data+$0001).w    ; $FFFFF605
                beq.s   Offset_0x03A2F6
                moveq   #$00, D0
                move.w  D0, (Debug_Mode_Flag_Index).w                ; $FFFFFE08
                lea     (Obj_Memory_Address).w, A1                   ; $FFFFB000
                move.l  #Sonic_Mappings, Obj_Map(A1)    ; Offset_0x06FBE0, $0004
                move.w  #$0780, Obj_Art_VRAM(A1)                         ; $0002
                tst.w   (Two_Player_Flag).w                          ; $FFFFFFD8
                beq.s   Offset_0x03A29E
                move.w  #$03C0, Obj_Art_VRAM(A1)                         ; $0002
Offset_0x03A29E:
                bsr.s   Offset_0x03A2F8
                move.b  #$13, Obj_Height_2(A1)                           ; $0016
                move.b  #$09, Obj_Width_2(A1)                            ; $0017
                lea     (Obj_Memory_Address+$0040).w, A1             ; $FFFFB040
                move.w  #$0006, ($FFFFF708).w
                bsr.s   Offset_0x03A2F8
                move.b  #$0F, Obj_Height_2(A1)                           ; $0016
                move.b  #$09, Obj_Width_2(A1)                            ; $0017
                move.w  Obj_X(A0), Obj_X(A1)                             ; $0008
                move.w  Obj_Y(A0), Obj_Y(A1)                             ; $000C
                move.w  ($FFFFFEF0).w, (Camera_Min_Y).w              ; $FFFFEECC
                move.w  ($FFFFFEF2).w, ($FFFFEEC6).w
                cmpi.b  #$10, (Game_Mode).w                          ; $FFFFF600
                bne.s   Offset_0x03A2F6
                move.b  #$02, ($FFFFB01C).w
                bset    #$02, ($FFFFB022).w
                bset    #$01, ($FFFFB022).w
Offset_0x03A2F6:
                rts
Offset_0x03A2F8:
                move.b  D0, Obj_Ani_Number(A1)                           ; $001C
                move.w  D0, Obj_Sub_Y(A1)                                ; $000A
                move.w  D0, $000E(A1)
                move.b  D0, Obj_Timer(A1)                                ; $002A
                move.b  D0, Obj_Player_Spdsh_Flag(A1)                    ; $0039
                move.w  D0, Obj_Speed(A1)                                ; $0010
                move.w  D0, Obj_Speed_Y(A1)                              ; $0012
                move.w  D0, Obj_Inertia(A1)                              ; $0014
                move.b  #$02, Obj_Status(A1)                             ; $0022
                move.b  #$02, Obj_Routine(A1)                            ; $0024
                move.b  #$00, Obj_Routine_2(A1)                          ; $0025
                rts
Offset_0x03A32C:
                moveq   #$00, D0
                move.b  ($FFFFFE06).w, D0
                lsl.w   #$03, D0
                move.l  $00(A2, D0), Obj_Map(A0)                         ; $0004
                move.w  $06(A2, D0), Obj_Art_VRAM(A0)                    ; $0002
                move.b  $05(A2, D0), Obj_Map_Id(A0)                      ; $001A
                bsr     Jmp_3E_To_ModifySpriteAttr_2P          ; Offset_0x03AB68
                rts
;-------------------------------------------------------------------------------                
Debug_Mode_Object_List:                                        ; Offset_0x03A34C                
                dc.w    GHz_Debug_Object_List-Debug_Mode_Object_List  ; Offset_0x03A380
                dc.w    Lvl1_Debug_Object_List-Debug_Mode_Object_List ; Offset_0x03A36E
                dc.w    Wz_Debug_Object_List-Debug_Mode_Object_List   ; Offset_0x03A36E
                dc.w    Lvl3_Debug_Object_List-Debug_Mode_Object_List ; Offset_0x03A36E
                dc.w    Mz_Debug_Object_List-Debug_Mode_Object_List   ; Offset_0x03A412
                dc.w    Mz_Debug_Object_List-Debug_Mode_Object_List   ; Offset_0x03A412
                dc.w    SFz_Debug_Object_List-Debug_Mode_Object_List  ; Offset_0x03A524
                dc.w    HTz_Debug_Object_List-Debug_Mode_Object_List  ; Offset_0x03A616
                dc.w    HPz_Debug_Object_List-Debug_Mode_Object_List  ; Offset_0x03A708
                dc.w    Lvl9_Debug_Object_List-Debug_Mode_Object_List ; Offset_0x03A36E
                dc.w    OOz_Debug_Object_List-Debug_Mode_Object_List  ; Offset_0x03A752
                dc.w    DHz_Debug_Object_List-Debug_Mode_Object_List  ; Offset_0x03A814
                dc.w    CNz_Debug_Object_List-Debug_Mode_Object_List  ; Offset_0x03A8C6
                dc.w    CPz_Debug_Object_List-Debug_Mode_Object_List  ; Offset_0x03A978
                dc.w    DEz_Debug_Object_List-Debug_Mode_Object_List  ; Offset_0x03A36E
                dc.w    NGHz_Debug_Object_List-Debug_Mode_Object_List ; Offset_0x03AA2A
                dc.w    SCz_Debug_Object_List-Debug_Mode_Object_List  ; Offset_0x03AB04
;-------------------------------------------------------------------------------
Lvl1_Debug_Object_List:                                        ; Offset_0x03A36E
Wz_Debug_Object_List:                                          ; Offset_0x03A36E
Lvl3_Debug_Object_List:                                        ; Offset_0x03A36E
Lvl9_Debug_Object_List:                                        ; Offset_0x03A36E
DEz_Debug_Object_List:                                         ; Offset_0x03A36E
DOL_00: ; DOL - Debug Object List
                dc.w    ((DOL_00_End-DOL_00-$02)/$08) ; Auto Detecção do número de itens na lista por Esrael Neto
                dc.l    ($25<<$18)|Rings_Mappings              ; Offset_0x00F444
                dc.b    $00, $00
                dc.w    $26BC
                dc.l    ($26<<$18)|Monitors_Mappings           ; Offset_0x00FB30
                dc.b    $08, $00
                dc.w    $0680
DOL_00_End:                
;-------------------------------------------------------------------------------
GHz_Debug_Object_List:                                         ; Offset_0x03A380
DOL_01: ; DOL - Debug Object List
                dc.w    ((DOL_01_End-DOL_01-$02)/$08) ; Auto Detecção do número de itens na lista por Esrael Neto
                dc.l    ($25<<$18)|Rings_Mappings              ; Offset_0x00F444
                dc.b    $00, $00
                dc.w    $26BC
                dc.l    ($26<<$18)|Monitors_Mappings           ; Offset_0x00FB30
                dc.b    $08, $00
                dc.w    $0680
                dc.l    ($79<<$18)|Lamp_Post_Mappings          ; Offset_0x01A06A
                dc.b    $01, $00
                dc.w    $047C
                dc.l    ($03<<$18)|Layer_Switch_Mappings       ; Offset_0x01AA5C
                dc.b    $09, $01
                dc.w    $26BC
                dc.l    ($49<<$18)|Waterfall_Mappings          ; Offset_0x01B6DC
                dc.b    $00, $00
                dc.w    $239E
                dc.l    ($49<<$18)|Waterfall_Mappings          ; Offset_0x01B6DC
                dc.b    $02, $03
                dc.w    $239E
                dc.l    ($49<<$18)|Waterfall_Mappings          ; Offset_0x01B6DC
                dc.b    $04, $05
                dc.w    $239E
                dc.l    ($18<<$18)|GHz_HTz_Platforms_Mappings  ; Offset_0x00DA86
                dc.b    $01, $00
                dc.w    $4000
                dc.l    ($18<<$18)|GHz_HTz_Platforms_Mappings  ; Offset_0x00DA86
                dc.b    $9A, $01
                dc.w    $4000
                dc.l    ($36<<$18)|Spikes_Mappings             ; Offset_0x011782
                dc.b    $00, $00
                dc.w    $2434
                dc.l    ($41<<$18)|Springs_Mappings            ; Offset_0x0143A8
                dc.b    $81, $00
                dc.w    $045C
                dc.l    ($41<<$18)|Springs_Mappings            ; Offset_0x0143A8
                dc.b    $90, $03
                dc.w    $0470
                dc.l    ($41<<$18)|Springs_Mappings            ; Offset_0x0143A8
                dc.b    $A0, $06
                dc.w    $045C
                dc.l    ($41<<$18)|Springs_Mappings            ; Offset_0x0143A8
                dc.b    $30, $07
                dc.w    $043C
                dc.l    ($41<<$18)|Springs_Mappings            ; Offset_0x0143A8
                dc.b    $40, $0A
                dc.w    $043C
                dc.l    ($4B<<$18)|Buzzer_Mappings             ; Offset_0x028B7E
                dc.b    $00, $00
                dc.w    $03D2
                dc.l    ($5C<<$18)|Masher_Mappings             ; Offset_0x028CD6
                dc.b    $00, $00
                dc.w    $0414
                dc.l    ($9D<<$18)|Coconuts_Mappings           ; Offset_0x0321E4
                dc.b    $1E, $00
                dc.w    $03EE
DOL_01_End:
;-------------------------------------------------------------------------------
Mz_Debug_Object_List:                                          ; Offset_0x03A412
DOL_02: ; DOL - Debug Object List
                dc.w    ((DOL_02_End-DOL_02-$02)/$08) ; Auto Detecção do número de itens na lista por Esrael Neto
                dc.l    ($25<<$18)|Rings_Mappings              ; Offset_0x00F444
                dc.b    $00, $00
                dc.w    $26BC
                dc.l    ($26<<$18)|Monitors_Mappings           ; Offset_0x00FB30
                dc.b    $08, $00
                dc.w    $0680
                dc.l    ($79<<$18)|Lamp_Post_Mappings          ; Offset_0x01A06A
                dc.b    $01, $00
                dc.w    $047C
                dc.l    ($03<<$18)|Layer_Switch_Mappings       ; Offset_0x01AA5C
                dc.b    $09, $01
                dc.w    $26BC
                dc.l    ($42<<$18)|Steam_Vent_Mappings         ; Offset_0x021278
                dc.b    $01, $07
                dc.w    $6000
                dc.l    ($64<<$18)|Pistons_Mappings            ; Offset_0x021468
                dc.b    $01, $00
                dc.w    $2000
                dc.l    ($64<<$18)|Pistons_Mappings            ; Offset_0x021468
                dc.b    $11, $01
                dc.w    $2000
                dc.l    ($65<<$18)|Mz_Platform_Mappings        ; Offset_0x0218C4
                dc.b    $80, $00
                dc.w    $6000
                dc.l    ($65<<$18)|Mz_Platform_Mappings        ; Offset_0x0218C4
                dc.b    $13, $01
                dc.w    $6000
                dc.l    ($47<<$18)|Switch_Mappings             ; Offset_0x01F7FE
                dc.b    $00, $02
                dc.w    $0424
                dc.l    ($2D<<$18)|Automatic_Door_Mappings     ; Offset_0x00E91A
                dc.b    $01, $01
                dc.w    $6000
                dc.l    ($66<<$18)|Springs_Wall_Mappings       ; Offset_0x021B1C
                dc.b    $01, $00
                dc.w    $8680
                dc.l    ($66<<$18)|Springs_Wall_Mappings       ; Offset_0x021B1C
                dc.b    $11, $01
                dc.w    $8680
                dc.l    ($68<<$18)|Block_Harpon_Mappings       ; Offset_0x022150
                dc.b    $00, $04
                dc.w    $6414
                dc.l    ($69<<$18)|Screw_Nut_Mappings          ; Offset_0x022426
                dc.b    $04, $00
                dc.w    $2500
                dc.l    ($6A<<$18)|Mz_Platform_Mappings        ; Offset_0x0218C4
                dc.b    $00, $01
                dc.w    $6000
                dc.l    ($6B<<$18)|Mz_Platform_Mappings        ; Offset_0x0218C4
                dc.b    $07, $01
                dc.w    $6000
                dc.l    ($6D<<$18)|Block_Harpon_Mappings       ; Offset_0x022150
                dc.b    $00, $00
                dc.w    $241C
                dc.l    ($6E<<$18)|Machine_Mappings            ; Offset_0x022F20
                dc.b    $00, $00
                dc.w    $6000
                dc.l    ($6E<<$18)|Machine_Mappings            ; Offset_0x022F20
                dc.b    $10, $01
                dc.w    $6000
                dc.l    ($6E<<$18)|Machine_Mappings            ; Offset_0x022F20
                dc.b    $20, $02
                dc.w    $6000
                dc.l    ($6F<<$18)|Parallelogram_Elevator_Mappings; Offset_0x02327A
                dc.b    $00, $00
                dc.w    $653F
                dc.l    ($70<<$18)|Rotating_Gears_Mappings     ; Offset_0x0234D2
                dc.b    $10, $00
                dc.w    $E378
                dc.l    ($71<<$18)|Mz_Lava_Bubble_Mappings     ; Offset_0x00E66E
                dc.b    $22, $05
                dc.w    $4536
                dc.l    ($1C<<$18)|Mz_Misc_Mappings            ; Offset_0x00E64A
                dc.b    $00, $00
                dc.w    $43FD
                dc.l    ($1C<<$18)|Mz_Misc_Mappings            ; Offset_0x00E64A
                dc.b    $01, $01
                dc.w    $43FD
                dc.l    ($1C<<$18)|Mz_Misc_Mappings            ; Offset_0x00E64A
                dc.b    $03, $02
                dc.w    $23FD
                dc.l    ($65<<$18)|Mz_Platform_Mappings        ; Offset_0x0218C4
                dc.b    $B0, $00
                dc.w    $6000
                dc.l    ($9F<<$18)|Shellcracker_Mappings       ; Offset_0x032742
                dc.b    $24, $00
                dc.w    $031C
                dc.l    ($A4<<$18)|Asteron_Mappings            ; Offset_0x032E7E
                dc.b    $2E, $00
                dc.w    $8368
                dc.l    ($A1<<$18)|Slicer_Mappings             ; Offset_0x0329CA
                dc.b    $28, $00
                dc.w    $243C
                dc.l    ($31<<$18)|Lava_Attributes_Mappings    ; Offset_0x01B900
                dc.b    $00, $00
                dc.w    $8680
                dc.l    ($31<<$18)|Lava_Attributes_Mappings    ; Offset_0x01B900
                dc.b    $01, $01
                dc.w    $8680
                dc.l    ($31<<$18)|Lava_Attributes_Mappings    ; Offset_0x01B900
                dc.b    $02, $02
                dc.w    $8680
DOL_02_End:
;-------------------------------------------------------------------------------   
SFz_Debug_Object_List:                                         ; Offset_0x03A524
DOL_03: ; DOL - Debug Object List
                dc.w    ((DOL_03_End-DOL_03-$02)/$08) ; Auto Detecção do número de itens na lista por Esrael Neto
                dc.l    ($25<<$18)|Rings_Mappings              ; Offset_0x00F444
                dc.b    $00, $00
                dc.w    $26BC
                dc.l    ($26<<$18)|Monitors_Mappings           ; Offset_0x00FB30
                dc.b    $08, $00
                dc.w    $0680
                dc.l    ($8B<<$18)|Layer_Switch_Mappings       ; Offset_0x01AA5C
                dc.b    $00, $00
                dc.w    $06BC
                dc.l    ($B3<<$18)|Clouds_Mappings             ; Offset_0x035268
                dc.b    $56, $00
                dc.w    $454F
                dc.l    ($B3<<$18)|Clouds_Mappings             ; Offset_0x035268
                dc.b    $58, $01
                dc.w    $454F
                dc.l    ($B3<<$18)|Clouds_Mappings             ; Offset_0x035268
                dc.b    $5A, $02
                dc.w    $454F
                dc.l    ($B4<<$18)|Vertical_Helix_Mappings     ; Offset_0x0352DA
                dc.b    $5C, $00
                dc.w    $A561
                dc.l    ($B5<<$18)|Horizontal_Helix_Mappings   ; Offset_0x0354A0
                dc.b    $5E, $00
                dc.w    $A3CD
                dc.l    ($B5<<$18)|Horizontal_Helix_Mappings   ; Offset_0x0354A0
                dc.b    $60, $00
                dc.w    $A3CD
                dc.l    ($AD<<$18)|Clucker_Mappings            ; Offset_0x033992
                dc.b    $42, $0C
                dc.w    $0379
                dc.l    ($AE<<$18)|Clucker_Mappings            ; Offset_0x033992
                dc.b    $44, $0B
                dc.w    $0379
                dc.l    ($B6<<$18)|Platform_Helix_Mappings     ; Offset_0x03579E
                dc.b    $62, $00
                dc.w    $A393
                dc.l    ($B6<<$18)|Platform_Helix_Mappings     ; Offset_0x03579E
                dc.b    $64, $00
                dc.w    $A393
                dc.l    ($B6<<$18)|Platform_Helix_Mappings     ; Offset_0x03579E
                dc.b    $66, $00
                dc.w    $A393
                dc.l    ($B6<<$18)|Platform_Helix_Mappings     ; Offset_0x03579E
                dc.b    $68, $00
                dc.w    $A393
                dc.l    ($B7<<$18)|Vertical_Large_Laser_Mappings; Offset_0x03582C
                dc.b    $6A, $00
                dc.w    $C39F
                dc.l    ($B8<<$18)|SFz_Cannon_Mappings         ; Offset_0x03598E
                dc.b    $6C, $00
                dc.w    $03AB
                dc.l    ($B9<<$18)|Laser_Mappings              ; Offset_0x035A5C
                dc.b    $6E, $00
                dc.w    $C3C3
                dc.l    ($BA<<$18)|Conveyor_Belt_Wheels_Mappings; Offset_0x035AB4
                dc.b    $70, $00
                dc.w    $C3EA
                dc.l    ($BC<<$18)|Ship_Boost_Mappings         ; Offset_0x035B2E
                dc.b    $74, $00
                dc.w    $C40E
                dc.l    ($BD<<$18)|SFz_Elevators_Mappings      ; Offset_0x035C46
                dc.b    $76, $00
                dc.w    $E416
                dc.l    ($BD<<$18)|SFz_Elevators_Mappings      ; Offset_0x035C46
                dc.b    $78, $00
                dc.w    $E416
                dc.l    ($BE<<$18)|Hatchway_Mappings           ; Offset_0x035D22
                dc.b    $7A, $00
                dc.w    $E422
                dc.l    ($BF<<$18)|Engine_Part_Mappings        ; Offset_0x035DBC
                dc.b    $7C, $00
                dc.w    $E458
                dc.l    ($C0<<$18)|Speed_Booster_Mappings      ; Offset_0x035F30
                dc.b    $08, $00
                dc.w    $A464
                dc.l    ($C1<<$18)|Breakable_Wall_Mappings     ; Offset_0x036118
                dc.b    $80, $00
                dc.w    $E48C
                dc.l    ($C2<<$18)|SFz_Boss_Access_Switch_Mappings; Offset_0x03624E
                dc.b    $82, $00
                dc.w    $A469
                dc.l    ($19<<$18)|SFz_Rotating_Platforms_Mappings; Offset_0x036286
                dc.b    $38, $00
                dc.w    $A46D
                dc.l    ($D9<<$18)|Rings_Mappings              ; Offset_0x00F444
                dc.b    $00, $00
                dc.w    $26BC
DOL_03_End:
                dc.l    ($80<<$18)|Chain_Hook_Mappings ; Item não listado durante o debug
                dc.b    $00, $00
                dc.w    $23FE
;-------------------------------------------------------------------------------
HTz_Debug_Object_List:                                         ; Offset_0x03A616 
DOL_04: ; DOL - Debug Object List
                dc.w    ((DOL_04_End-DOL_04-$02)/$08) ; Auto Detecção do número de itens na lista por Esrael Neto
                dc.l    ($25<<$18)|Rings_Mappings              ; Offset_0x00F444
                dc.b    $00, $00
                dc.w    $26BC
                dc.l    ($26<<$18)|Monitors_Mappings           ; Offset_0x00FB30
                dc.b    $08, $00
                dc.w    $0680
                dc.l    ($79<<$18)|Lamp_Post_Mappings          ; Offset_0x01A06A
                dc.b    $01, $00
                dc.w    $047C
                dc.l    ($84<<$18)|Layer_Switch_Mappings       ; Offset_0x01AA5C
                dc.b    $00, $00
                dc.w    $06BC
                dc.l    ($84<<$18)|Layer_Switch_Mappings       ; Offset_0x01AA5C
                dc.b    $04, $04
                dc.w    $06BC
                dc.l    ($03<<$18)|Layer_Switch_Mappings       ; Offset_0x01AA5C
                dc.b    $09, $01
                dc.w    $26BC
                dc.l    ($18<<$18)|GHz_HTz_Platforms_Mappings  ; Offset_0x00DA86
                dc.b    $01, $00
                dc.w    $4000
                dc.l    ($18<<$18)|GHz_HTz_Platforms_Mappings  ; Offset_0x00DA86
                dc.b    $9A, $01
                dc.w    $4000
                dc.l    ($36<<$18)|Spikes_Mappings             ; Offset_0x011782
                dc.b    $00, $00
                dc.w    $2434
                dc.l    ($14<<$18)|Seesaw_Mappings             ; Offset_0x01C79C
                dc.b    $00, $00
                dc.w    $03C6
                dc.l    ($2D<<$18)|Automatic_Door_Mappings     ; Offset_0x00E91A
                dc.b    $00, $00
                dc.w    $2426
                dc.l    ($2F<<$18)|Breakable_Floor_Mappings    ; Offset_0x01E16A
                dc.b    $00, $00
                dc.w    $C000
                dc.l    ($20<<$18)|Lava_Bubble_Mappings        ; Offset_0x01DCC4
                dc.b    $44, $02
                dc.w    $8416
                dc.l    ($41<<$18)|Springs_Mappings            ; Offset_0x0143A8
                dc.b    $81, $00
                dc.w    $045C
                dc.l    ($41<<$18)|Springs_Mappings            ; Offset_0x0143A8
                dc.b    $90, $03
                dc.w    $0470
                dc.l    ($41<<$18)|Springs_Mappings            ; Offset_0x0143A8
                dc.b    $A0, $06
                dc.w    $045C
                dc.l    ($41<<$18)|Springs_Mappings            ; Offset_0x0143A8
                dc.b    $30, $07
                dc.w    $043C
                dc.l    ($41<<$18)|Springs_Mappings            ; Offset_0x0143A8
                dc.b    $40, $0A
                dc.w    $043C
                dc.l    ($16<<$18)|Teleferics_Mappings         ; Offset_0x01C98A
                dc.b    $00, $00
                dc.w    $43E6
                dc.l    ($1C<<$18)|Teleferics_Mappings         ; Offset_0x01C98A
                dc.b    $04, $03
                dc.w    $43E6
                dc.l    ($1C<<$18)|Teleferics_Mappings         ; Offset_0x01C98A
                dc.b    $05, $04
                dc.w    $43E6
                dc.l    ($1C<<$18)|HTz_Misc_Mappings           ; Offset_0x00E5EA
                dc.b    $07, $00
                dc.w    $4000
                dc.l    ($1C<<$18)|HTz_Misc_Mappings           ; Offset_0x00E5EA
                dc.b    $08, $01
                dc.w    $4000
                dc.l    ($32<<$18)|HTz_Rock_Mappings           ; Offset_0x01E2C2
                dc.b    $00, $00
                dc.w    $43B2
                dc.l    ($31<<$18)|Lava_Attributes_Mappings    ; Offset_0x01B900
                dc.b    $00, $00
                dc.w    $8680
                dc.l    ($31<<$18)|Lava_Attributes_Mappings    ; Offset_0x01B900
                dc.b    $01, $01
                dc.w    $8680
                dc.l    ($31<<$18)|Lava_Attributes_Mappings    ; Offset_0x01B900
                dc.b    $02, $02
                dc.w    $8680
                dc.l    ($96<<$18)|Rexon_Mappings              ; Offset_0x031AC6
                dc.b    $0E, $02
                dc.w    $637E
                dc.l    ($92<<$18)|Spiker_Mappings             ; Offset_0x0314E0
                dc.b    $0A, $00
                dc.w    $0000
                dc.l    ($95<<$18)|Sol_Mappings                ; Offset_0x031734
                dc.b    $00, $00
                dc.w    $0000
DOL_04_End:
;-------------------------------------------------------------------------------
HPz_Debug_Object_List:                                         ; Offset_0x03A708  
DOL_05: ; DOL - Debug Object List
                dc.w    ((DOL_05_End-DOL_05-$02)/$08) ; Auto Detecção do número de itens na lista por Esrael Neto
                dc.l    ($25<<$18)|Rings_Mappings              ; Offset_0x00F444
                dc.b    $00, $00
                dc.w    $26BC
                dc.l    ($26<<$18)|Monitors_Mappings           ; Offset_0x00FB30
                dc.b    $08, $00
                dc.w    $0680
                dc.l    ($71<<$18)|Hpz_Orbs_Mappings           ; Offset_0x00E5AA
                dc.b    $11, $03
                dc.w    $E35A
                dc.l    ($13<<$18)|HPz_Waterfalls_Mappings     ; Offset_0x01AFB4
                dc.b    $04, $04
                dc.w    $E315
                dc.l    ($1A<<$18)|HPz_Collapsing_Platforms_Mappings; Offset_0x00E2A0
                dc.b    $00, $00
                dc.w    $434A
                dc.l    ($03<<$18)|Layer_Switch_Mappings       ; Offset_0x01AA5C
                dc.b    $09, $01
                dc.w    $26BC
                dc.l    ($4F<<$18)|Dinobot_Mappings            ; Offset_0x028052
                dc.b    $00, $00
                dc.w    $0500
                dc.l    ($4C<<$18)|Batbot_Mappings             ; Offset_0x0277A2
                dc.b    $00, $00
                dc.w    $2530
                dc.l    ($4D<<$18)|Rhinobot_Mappings           ; Offset_0x0287A6
                dc.b    $00, $00
                dc.w    $23B2
DOL_05_End:
;-------------------------------------------------------------------------------
OOz_Debug_Object_List:                                         ; Offset_0x03A752
DOL_06: ; DOL - Debug Object List
                dc.w    ((DOL_06_End-DOL_06-$02)/$08) ; Auto Detecção do número de itens na lista por Esrael Neto
                dc.l    ($25<<$18)|Rings_Mappings              ; Offset_0x00F444
                dc.b    $00, $00
                dc.w    $26BC
                dc.l    ($26<<$18)|Monitors_Mappings           ; Offset_0x00FB30
                dc.b    $08, $00
                dc.w    $0680
                dc.l    ($33<<$18)|Touch_Booster_Mappings      ; Offset_0x01E84C
                dc.b    $01, $00
                dc.w    $632C
                dc.l    ($43<<$18)|Giant_Spikeball_Mappings    ; Offset_0x01EA50
                dc.b    $00, $00
                dc.w    $C30C
                dc.l    ($19<<$18)|Rotating_Platforms_Mappings ; Offset_0x01CCA2
                dc.b    $23, $02
                dc.w    $62F4
                dc.l    ($45<<$18)|Spring_Push_Boost_Mappings  ; Offset_0x01EF82
                dc.b    $02, $00
                dc.w    $43C5
                dc.l    ($45<<$18)|Spring_Push_Boost_Mappings  ; Offset_0x01EF82
                dc.b    $12, $0A
                dc.w    $43C5
                dc.l    ($46<<$18)|Spring_Ball_Mappings        ; Offset_0x01F6BA
                dc.b    $00, $01
                dc.w    $6354
                dc.l    ($47<<$18)|Switch_Mappings             ; Offset_0x01F7FE
                dc.b    $00, $02
                dc.w    $0424
                dc.l    ($15<<$18)|OOz_Swing_Platforms_Mappings; Offset_0x00D484
                dc.b    $88, $01
                dc.w    $43E3
                dc.l    ($3D<<$18)|Break_Boost_Mappings        ; Offset_0x01FAF4
                dc.b    $00, $00
                dc.w    $6332
                dc.l    ($48<<$18)|Cannon_Mappings             ; Offset_0x01FF08
                dc.b    $80, $00
                dc.w    $6368
                dc.l    ($48<<$18)|Cannon_Mappings             ; Offset_0x01FF08
                dc.b    $81, $01
                dc.w    $6368
                dc.l    ($48<<$18)|Cannon_Mappings             ; Offset_0x01FF08
                dc.b    $82, $02
                dc.w    $6368
                dc.l    ($48<<$18)|Cannon_Mappings             ; Offset_0x01FF08
                dc.b    $83, $03
                dc.w    $6368
                dc.l    ($1F<<$18)|OOz_Collapsing_Platforms_Mappings; Offset_0x00E34A
                dc.b    $00, $00
                dc.w    $639D
                dc.l    ($3F<<$18)|Vertical_Fan_Mappings       ; Offset_0x025562
                dc.b    $00, $00
                dc.w    $6403
                dc.l    ($3F<<$18)|Horizontal_Fan_Mappings     ; Offset_0x025614
                dc.b    $80, $00
                dc.w    $6403
                dc.l    ($50<<$18)|Aquis_Mappings              ; Offset_0x028574
                dc.b    $88, $00
                dc.w    $2500
                dc.l    ($4A<<$18)|Octus_Mappings              ; Offset_0x027E88
                dc.b    $00, $00
                dc.w    $2538
                dc.l    ($1C<<$18)|OOz_Misc_Mappings           ; Offset_0x00E61A
                dc.b    $0A, $00
                dc.w    $4346
                dc.l    ($1C<<$18)|OOz_Misc_Mappings           ; Offset_0x00E61A
                dc.b    $0B, $01
                dc.w    $4346
                dc.l    ($1C<<$18)|OOz_Misc_Mappings           ; Offset_0x00E61A
                dc.b    $0C, $02
                dc.w    $4346
                dc.l    ($1C<<$18)|OOz_Misc_Mappings           ; Offset_0x00E61A
                dc.b    $0D, $03
                dc.w    $4346
DOL_06_End:
;-------------------------------------------------------------------------------
DHz_Debug_Object_List:                                         ; Offset_0x03A814
DOL_07: ; DOL - Debug Object List
                dc.w    ((DOL_07_End-DOL_07-$02)/$08) ; Auto Detecção do número de itens na lista por Esrael Neto
                dc.l    ($25<<$18)|Rings_Mappings              ; Offset_0x00F444
                dc.b    $00, $00
                dc.w    $26BC
                dc.l    ($26<<$18)|Monitors_Mappings           ; Offset_0x00FB30
                dc.b    $08, $00
                dc.w    $0680
                dc.l    ($15<<$18)|DHz_Swing_Platforms_Mappings; Offset_0x00D4F2
                dc.b    $48, $02
                dc.w    $0000
                dc.l    ($1F<<$18)|DHz_Collapsing_Platforms_Mappings; Offset_0x00E38A
                dc.b    $00, $00
                dc.w    $63F4
                dc.l    ($73<<$18)|Rotating_Rings_Mappings     ; Offset_0x0238D8
                dc.b    $F5, $00
                dc.w    $26BC
                dc.l    ($6A<<$18)|Rotating_Boxes_Mappings     ; Offset_0x022730
                dc.b    $18, $00
                dc.w    $63D4
                dc.l    ($2A<<$18)|Up_Down_Pillar_Mappings     ; Offset_0x00E75E
                dc.b    $00, $00
                dc.w    $4000
                dc.l    ($36<<$18)|Spikes_Mappings             ; Offset_0x011782
                dc.b    $00, $00
                dc.w    $2434
                dc.l    ($36<<$18)|Spikes_Mappings             ; Offset_0x011782
                dc.b    $40, $04
                dc.w    $2434
                dc.l    ($41<<$18)|Springs_Mappings            ; Offset_0x0143A8
                dc.b    $81, $00
                dc.w    $045C
                dc.l    ($41<<$18)|Springs_Mappings            ; Offset_0x0143A8
                dc.b    $90, $03
                dc.w    $0470
                dc.l    ($40<<$18)|Diagonal_Spring_Mappings    ; Offset_0x021000
                dc.b    $01, $00
                dc.w    $0440
                dc.l    ($74<<$18)|Invisible_Block_Mappings    ; Offset_0x01BA04
                dc.b    $11, $00
                dc.w    $8680
                dc.l    ($75<<$18)|Spikeball_Chain_Mappings    ; Offset_0x023AC6
                dc.b    $18, $02
                dc.w    $2000
                dc.l    ($76<<$18)|Platform_Spikes_Mappings    ; Offset_0x023C76
                dc.b    $00, $00
                dc.w    $0000
                dc.l    ($77<<$18)|DHz_Bridge_Mappings         ; Offset_0x023DA0
                dc.b    $01, $00
                dc.w    $643C
                dc.l    ($7F<<$18)|Vines_Switch_Mappings       ; Offset_0x024668
                dc.b    $00, $00
                dc.w    $640E
                dc.l    ($80<<$18)|Vines_Mappings              ; Offset_0x0248BE
                dc.b    $00, $00
                dc.w    $641E
                dc.l    ($81<<$18)|Vertical_Bridge_Mappings    ; Offset_0x024DBA
                dc.b    $00, $01
                dc.w    $643C
                dc.l    ($7A<<$18)|DHz_Swing_Platforms_Mappings; Offset_0x00D4F2
                dc.b    $12, $00
                dc.w    $0000
                dc.l    ($A3<<$18)|Flasher_Mappings            ; Offset_0x032CD8
                dc.b    $2C, $00
                dc.w    $83A8
                dc.l    ($9E<<$18)|Crawlton_Mappings           ; Offset_0x032420
                dc.b    $22, $00
                dc.w    $23C0
DOL_07_End:
;-------------------------------------------------------------------------------
CNz_Debug_Object_List:                                         ; Offset_0x03A8C6
DOL_08: ; DOL - Debug Object List
                dc.w    ((DOL_08_End-DOL_08-$02)/$08) ; Auto Detecção do número de itens na lista por Esrael Neto
                dc.l    ($25<<$18)|Rings_Mappings              ; Offset_0x00F444
                dc.b    $00, $00
                dc.w    $26BC
                dc.l    ($26<<$18)|Monitors_Mappings           ; Offset_0x00FB30
                dc.b    $08, $00
                dc.w    $0680
                dc.l    ($84<<$18)|Layer_Switch_Mappings       ; Offset_0x01AA5C
                dc.b    $00, $00
                dc.w    $06BC
                dc.l    ($84<<$18)|Layer_Switch_Mappings       ; Offset_0x01AA5C
                dc.b    $04, $04
                dc.w    $06BC
                dc.l    ($03<<$18)|Layer_Switch_Mappings       ; Offset_0x01AA5C
                dc.b    $09, $01
                dc.w    $26BC
                dc.l    ($03<<$18)|Layer_Switch_Mappings       ; Offset_0x01AA5C
                dc.b    $0D, $05
                dc.w    $26BC
                dc.l    ($44<<$18)|Red_Ball_Bumper_Mappings    ; Offset_0x01A304
                dc.b    $00, $00
                dc.w    $439A
                dc.l    ($85<<$18)|Diagonal_Pinball_Spring_Mappings; Offset_0x025B70
                dc.b    $00, $00
                dc.w    $0422
                dc.l    ($85<<$18)|Vertical_Pinball_Spring_Mappings; Offset_0x025BDE
                dc.b    $81, $00
                dc.w    $0402
                dc.l    ($86<<$18)|Flippers_Mappings           ; Offset_0x025F46
                dc.b    $00, $00
                dc.w    $43B2
                dc.l    ($86<<$18)|Flippers_Mappings           ; Offset_0x025F46
                dc.b    $01, $04
                dc.w    $43B2
                dc.l    ($D2<<$18)|Green_Platform_Mappings     ; Offset_0x026180
                dc.b    $01, $00
                dc.w    $437C
                dc.l    ($D3<<$18)|Spikeball_Mappings          ; Offset_0x02639E
                dc.b    $00, $00
                dc.w    $0380
                dc.l    ($D4<<$18)|Blue_Box_Mappings           ; Offset_0x0264A2
                dc.b    $00, $00
                dc.w    $436C
                dc.l    ($D4<<$18)|Blue_Box_Mappings           ; Offset_0x0264A2
                dc.b    $02, $00
                dc.w    $436C
                dc.l    ($D5<<$18)|CNz_Elevator_Mappings       ; Offset_0x026618
                dc.b    $18, $00
                dc.w    $4384
                dc.l    ($D6<<$18)|Slot_Machine_Starter_Mappings; Offset_0x0267A8
                dc.b    $00, $00
                dc.w    $0388
                dc.l    ($D7<<$18)|Blue_Bumper_Mappings        ; Offset_0x027116
                dc.b    $00, $00
                dc.w    $4394
                dc.l    ($D8<<$18)|Green_Bumper_Mappings       ; Offset_0x0273B2
                dc.b    $00, $00
                dc.w    $43E6
                dc.l    ($D8<<$18)|Green_Bumper_Mappings       ; Offset_0x0273B2
                dc.b    $40, $01
                dc.w    $43E6
                dc.l    ($D8<<$18)|Green_Bumper_Mappings       ; Offset_0x0273B2
                dc.b    $80, $02
                dc.w    $43E6
                dc.l    ($C8<<$18)|Crawl_Mappings              ; Offset_0x0375C6
                dc.b    $9C, $00
                dc.w    $8340
DOL_08_End:
;-------------------------------------------------------------------------------
CPz_Debug_Object_List:                                         ; Offset_0x03A978
DOL_09: ; DOL - Debug Object List
                dc.w    ((DOL_09_End-DOL_09-$02)/$08) ; Auto Detecção do número de itens na lista por Esrael Neto
                dc.l    ($25<<$18)|Rings_Mappings              ; Offset_0x00F444
                dc.b    $00, $00
                dc.w    $26BC
                dc.l    ($26<<$18)|Monitors_Mappings           ; Offset_0x00FB30
                dc.b    $08, $00
                dc.w    $0680
                dc.l    ($0B<<$18)|Open_Close_Platform_Mappings; Offset_0x01AC2A
                dc.b    $70, $00
                dc.w    $E3B0
                dc.l    ($1B<<$18)|CPz_Speed_Booster_Mappings  ; Offset_0x01CE52
                dc.b    $00, $00
                dc.w    $E39C
                dc.l    ($1D<<$18)|Worms_Mappings              ; Offset_0x01CFE6
                dc.b    $05, $00
                dc.w    $E43C
                dc.l    ($19<<$18)|Rotating_Platforms_Mappings ; Offset_0x01CCA2
                dc.b    $06, $00
                dc.w    $63A0
                dc.l    ($2D<<$18)|Automatic_Door_Mappings     ; Offset_0x00E91A
                dc.b    $02, $02
                dc.w    $2394
                dc.l    ($32<<$18)|CPz_Tunel_Obstacle_Mappings ; Offset_0x01E2F6
                dc.b    $00, $00
                dc.w    $6430
                dc.l    ($6B<<$18)|CPz_Block_Mappings          ; Offset_0x022A02
                dc.b    $10, $00
                dc.w    $6418
                dc.l    ($78<<$18)|CPz_Block_Mappings          ; Offset_0x022A02
                dc.b    $00, $00
                dc.w    $6418
                dc.l    ($7A<<$18)|Platform_Horizontal_Mappings; Offset_0x0242A0
                dc.b    $00, $00
                dc.w    $E418
                dc.l    ($7B<<$18)|Spring_Tubes_Mappings       ; Offset_0x0244B2
                dc.b    $02, $00
                dc.w    $03E0
                dc.l    ($03<<$18)|Layer_Switch_Mappings       ; Offset_0x01AA5C
                dc.b    $09, $01
                dc.w    $26BC
                dc.l    ($03<<$18)|Layer_Switch_Mappings       ; Offset_0x01AA5C
                dc.b    $0D, $05
                dc.w    $26BC
                dc.l    ($36<<$18)|Spikes_Mappings             ; Offset_0x011782
                dc.b    $00, $00
                dc.w    $2434
                dc.l    ($41<<$18)|Springs_Mappings            ; Offset_0x0143A8
                dc.b    $81, $00
                dc.w    $045C
                dc.l    ($41<<$18)|Springs_Mappings            ; Offset_0x0143A8
                dc.b    $90, $03
                dc.w    $0470
                dc.l    ($41<<$18)|Springs_Mappings            ; Offset_0x0143A8
                dc.b    $A0, $06
                dc.w    $045C
                dc.l    ($40<<$18)|Diagonal_Spring_Mappings    ; Offset_0x021000
                dc.b    $01, $00
                dc.w    $0440
                dc.l    ($A5<<$18)|Spiny_Mappings              ; Offset_0x0330B2
                dc.b    $32, $00
                dc.w    $252D
                dc.l    ($A6<<$18)|Spiny_Mappings              ; Offset_0x0330B2
                dc.b    $32, $03
                dc.w    $252D
                dc.l    ($A7<<$18)|Grabber_Mappings            ; Offset_0x0335F8
                dc.b    $36, $00
                dc.w    $A500
DOL_09_End:
;-------------------------------------------------------------------------------
NGHz_Debug_Object_List:                                        ; Offset_0x03AA2A
DOL_0A: ; DOL - Debug Object List
                dc.w    ((DOL_0A_End-DOL_0A-$02)/$08) ; Auto Detecção do número de itens na lista por Esrael Neto
                dc.l    ($25<<$18)|Rings_Mappings              ; Offset_0x00F444
                dc.b    $00, $00
                dc.w    $26BC
                dc.l    ($26<<$18)|Monitors_Mappings           ; Offset_0x00FB30
                dc.b    $08, $00
                dc.w    $0680
                dc.l    ($15<<$18)|NGHz_Swing_Platforms_Mappings; Offset_0x00D4BA
                dc.b    $88, $02
                dc.w    $0000
                dc.l    ($18<<$18)|NGHz_Platforms_Mappings     ; Offset_0x00DADE
                dc.b    $01, $00
                dc.w    $4000
                dc.l    ($18<<$18)|NGHz_Platforms_Mappings     ; Offset_0x00DADE
                dc.b    $9A, $01
                dc.w    $4000
                dc.l    ($22<<$18)|Arrow_Shooter_Mappings      ; Offset_0x02020C
                dc.b    $00, $01
                dc.w    $0417
                dc.l    ($23<<$18)|Pillar_Mappings             ; Offset_0x0203EE
                dc.b    $00, $00
                dc.w    $2000
                dc.l    ($2B<<$18)|Raising_Pillar_Mappings     ; Offset_0x020674
                dc.b    $00, $00
                dc.w    $2000
                dc.l    ($2C<<$18)|Lava_Attributes_Mappings    ; Offset_0x01B900
                dc.b    $00, $00
                dc.w    $8680
                dc.l    ($2C<<$18)|Lava_Attributes_Mappings    ; Offset_0x01B900
                dc.b    $01, $01
                dc.w    $8680
                dc.l    ($2C<<$18)|Lava_Attributes_Mappings    ; Offset_0x01B900
                dc.b    $02, $02
                dc.w    $8680
                dc.l    ($40<<$18)|Diagonal_Spring_Mappings    ; Offset_0x021000
                dc.b    $01, $00
                dc.w    $0440
                dc.l    ($41<<$18)|Springs_Mappings            ; Offset_0x0143A8
                dc.b    $81, $00
                dc.w    $045C
                dc.l    ($41<<$18)|Springs_Mappings            ; Offset_0x0143A8
                dc.b    $90, $03
                dc.w    $0470
                dc.l    ($41<<$18)|Springs_Mappings            ; Offset_0x0143A8
                dc.b    $A0, $06
                dc.w    $045C
                dc.l    ($03<<$18)|Layer_Switch_Mappings       ; Offset_0x01AA5C
                dc.b    $09, $01
                dc.w    $26BC
                dc.l    ($36<<$18)|Spikes_Mappings             ; Offset_0x011782
                dc.b    $00, $00
                dc.w    $2434
                dc.l    ($2D<<$18)|Automatic_Door_Mappings     ; Offset_0x00E91A
                dc.b    $03, $03
                dc.w    $23F8
                dc.l    ($1F<<$18)|NGHz_Collapsing_Platforms_Mappings; Offset_0x00E3E2
                dc.b    $00, $00
                dc.w    $4000
                dc.l    ($82<<$18)|Falling_Pillar_Mappings     ; Offset_0x024FE2
                dc.b    $03, $00
                dc.w    $0000
                dc.l    ($82<<$18)|Falling_Pillar_Mappings     ; Offset_0x024FE2
                dc.b    $11, $01
                dc.w    $0000
                dc.l    ($83<<$18)|NGHz_Swing_Platforms_Mappings; Offset_0x00D4BA
                dc.b    $10, $01
                dc.w    $0000
                dc.l    ($24<<$18)|Sonic_Underwater_Mappings   ; Offset_0x01A678
                dc.b    $81, $0E
                dc.w    $855B
                dc.l    ($91<<$18)|Chop_Chop_Mappings          ; Offset_0x031348
                dc.b    $08, $00
                dc.w    $253B
                dc.l    ($8C<<$18)|Whisp_Mappings              ; Offset_0x030EA0
                dc.b    $00, $00
                dc.w    $A500
                dc.l    ($8D<<$18)|Grounder_Mappings           ; Offset_0x031142
                dc.b    $02, $00
                dc.w    $A509
                dc.l    ($8E<<$18)|Grounder_Mappings           ; Offset_0x031142
                dc.b    $02, $00
                dc.w    $A509
DOL_0A_End:
;-------------------------------------------------------------------------------
SCz_Debug_Object_List:                                         ; Offset_0x03AB04 
DOL_0B: ; DOL - Debug Object List
                dc.w    ((DOL_0B_End-DOL_0B-$02)/$08) ; Auto Detecção do número de itens na lista por Esrael Neto
                dc.l    ($25<<$18)|Rings_Mappings              ; Offset_0x00F444
                dc.b    $00, $00
                dc.w    $26BC
                dc.l    ($26<<$18)|Monitors_Mappings           ; Offset_0x00FB30
                dc.b    $08, $00
                dc.w    $0680
                dc.l    ($8B<<$18)|Layer_Switch_Mappings       ; Offset_0x01AA5C
                dc.b    $00, $00
                dc.w    $06BC
                dc.l    ($B3<<$18)|Clouds_Mappings             ; Offset_0x035268
                dc.b    $56, $00
                dc.w    $454F
                dc.l    ($B3<<$18)|Clouds_Mappings             ; Offset_0x035268
                dc.b    $58, $01
                dc.w    $454F
                dc.l    ($B3<<$18)|Clouds_Mappings             ; Offset_0x035268
                dc.b    $5A, $02
                dc.w    $454F
                dc.l    ($B4<<$18)|Vertical_Helix_Mappings     ; Offset_0x0352DA
                dc.b    $5C, $00
                dc.w    $A561
                dc.l    ($B5<<$18)|Horizontal_Helix_Mappings   ; Offset_0x0354A0
                dc.b    $5E, $00
                dc.w    $A3CD
                dc.l    ($B5<<$18)|Horizontal_Helix_Mappings   ; Offset_0x0354A0
                dc.b    $60, $00
                dc.w    $A3CD
                dc.l    ($9A<<$18)|Turtloid_Mappings           ; Offset_0x031FB0
                dc.b    $16, $00
                dc.w    $038A
                dc.l    ($AC<<$18)|Balkiry_Mappings            ; Offset_0x0337AA
                dc.b    $40, $00
                dc.w    $0565
                dc.l    ($99<<$18)|Nebula_Mappings             ; Offset_0x031CE8
                dc.b    $12, $00
                dc.w    $A36E
DOL_0B_End:                            
;-------------------------------------------------------------------------------  
                nop
Jmp_3E_To_ModifySpriteAttr_2P:                                 ; Offset_0x03AB68               
                jmp     (ModifySpriteAttr_2P)                  ; Offset_0x01298E  
                dc.w    $0000   
;===============================================================================
; Carga dos gráficos das fases
; Cada fase usa três grupos de LongWord sendo que o primeiro byte dos dois
; primeiros grupos representam um ponteiro para a lista de carga dos gráficos 
; das fases e o primeiro byte do último grupo representa um ponteiro para a 
; lista de carga das paletas das fases.        
; ->>>          
;===============================================================================  
TilesMainTable:                                                ; Offset_0x03AB70
;------------ ; $00             
                dc.l    ($04<<$18)|Green_Hill_Tiles            ; Offset_0x08F480
                dc.l    ($05<<$18)|Green_Hill_Blocks           ; Offset_0x08E6D0
                dc.l    ($04<<$18)|Green_Hill_Chunks           ; Offset_0x093EBC 
;------------ ; $01
                dc.l    ($06<<$18)|Green_Hill_Tiles            ; Offset_0x08F480
                dc.l    ($07<<$18)|Green_Hill_Blocks           ; Offset_0x08E6D0
                dc.l    ($05<<$18)|Green_Hill_Chunks           ; Offset_0x093EBC
;------------ ; $02  
                dc.l    ($08<<$18)|Green_Hill_Tiles            ; Offset_0x08F480
                dc.l    ($09<<$18)|Green_Hill_Blocks           ; Offset_0x08E6D0
                dc.l    ($06<<$18)|Green_Hill_Chunks           ; Offset_0x093EBC
;------------ ; $03       
                dc.l    ($0A<<$18)|Green_Hill_Tiles            ; Offset_0x08F480
                dc.l    ($0B<<$18)|Green_Hill_Blocks           ; Offset_0x08E6D0
                dc.l    ($07<<$18)|Green_Hill_Chunks           ; Offset_0x093EBC
;------------ ; $04                     
                dc.l    ($0C<<$18)|Metropolis_Tiles            ; Offset_0x097CEC
                dc.l    ($0D<<$18)|Metropolis_Blocks           ; Offset_0x09715C
                dc.l    ($08<<$18)|Metropolis_Chunks           ; Offset_0x09B01C 
;------------ ; $05                   
                dc.l    ($0C<<$18)|Metropolis_Tiles            ; Offset_0x097CEC
                dc.l    ($0D<<$18)|Metropolis_Blocks           ; Offset_0x09715C
                dc.l    ($08<<$18)|Metropolis_Chunks           ; Offset_0x09B01C
;------------ ; $06                   
                dc.l    ($10<<$18)|Sky_Fortress_Tiles          ; Offset_0x0C2394
                dc.l    ($11<<$18)|Sky_Fortress_Blocks         ; Offset_0x0C1404
                dc.l    ($0A<<$18)|Sky_Fortress_Chunks         ; Offset_0x0C61FE 
;------------ ; $07   
                dc.l    ($12<<$18)|Green_Hill_Tiles            ; Offset_0x08F480
                dc.l    ($13<<$18)|Green_Hill_Blocks           ; Offset_0x08E6D0
                dc.l    ($0B<<$18)|Green_Hill_Chunks           ; Offset_0x093EBC
;------------ ; $08                   
                dc.l    ($14<<$18)|Hidden_Palace_Tiles         ; Offset_0x09DCBC
                dc.l    ($15<<$18)|Hidden_Palace_Blocks        ; Offset_0x09DCBC
                dc.l    ($0C<<$18)|Hidden_Palace_Chunks        ; Offset_0x09DCBC
;------------ ; $09  
                dc.l    ($16<<$18)|Green_Hill_Tiles            ; Offset_0x08F480
                dc.l    ($17<<$18)|Green_Hill_Blocks           ; Offset_0x08E6D0
                dc.l    ($0D<<$18)|Green_Hill_Chunks           ; Offset_0x093EBC
;------------ ; $0A                                               
                dc.l    ($18<<$18)|Oil_Ocean_Tiles             ; Offset_0x09EB5C
                dc.l    ($19<<$18)|Oil_Ocean_Blocks            ; Offset_0x09DCBC
                dc.l    ($0E<<$18)|Oil_Ocean_Chunks            ; Offset_0x0A15BE                 
;------------ ; $0B                     
                dc.l    ($1A<<$18)|Dust_Hill_Tiles             ; Offset_0x0A4AFE
                dc.l    ($1B<<$18)|Dust_Hill_Blocks            ; Offset_0x0A3A8E
                dc.l    ($0F<<$18)|Dust_Hill_Chunks            ; Offset_0x0A8420       
;------------ ; $0C                   
                dc.l    ($1C<<$18)|Casino_Night_Tiles          ; Offset_0x0AB860
                dc.l    ($1D<<$18)|Casino_Night_Blocks         ; Offset_0x0AAF90
                dc.l    ($10<<$18)|Casino_Night_Chunks         ; Offset_0x0AE598 
;------------ ; $0D                
                dc.l    ($1E<<$18)|Chemical_Plant_Tiles        ; Offset_0x0B19D8
                dc.l    ($1F<<$18)|Chemical_Plant_Blocks       ; Offset_0x0B0A98
                dc.l    ($11<<$18)|Chemical_Plant_Chunks       ; Offset_0x0B55E2 
;------------ ; $0E                     
                dc.l    ($20<<$18)|Chemical_Plant_Tiles        ; Offset_0x0B19D8
                dc.l    ($21<<$18)|Chemical_Plant_Blocks       ; Offset_0x0B0A98
                dc.l    ($12<<$18)|Chemical_Plant_Chunks       ; Offset_0x0B55E2 
;------------ ; $0F                 
                dc.l    ($22<<$18)|Neo_Green_Hill_Tiles        ; Offset_0x0B9142
                dc.l    ($23<<$18)|Neo_Green_Hill_Blocks       ; Offset_0x0B7E62
                dc.l    ($13<<$18)|Neo_Green_Hill_Chunks       ; Offset_0x0BE7C4                 
;------------ ; $10                       
                dc.l    ($24<<$18)|Sky_Fortress_Tiles          ; Offset_0x0C2394
                dc.l    ($25<<$18)|Sky_Fortress_Blocks         ; Offset_0x0C1404
                dc.l    ($14<<$18)|Sky_Fortress_Chunks         ; Offset_0x0C61FE 
                 
;-------------------------------------------------------------------------------
ArtLoadCues:                                                   ; Offset_0x03AC3C
                dc.w    Default_Art_List-ArtLoadCues             ; $00 ; Offset_0x03ACB8
                dc.w    Default_Level_Art_List-ArtLoadCues       ; $01 ; Offset_0x03ACD8
                dc.w    After_Title_Cards_Art_List-ArtLoadCues   ; $02 ; Offset_0x03ACEC
                dc.w    Game_Over_Time_Over_Art_List-ArtLoadCues ; $03 ; Offset_0x03ACFA
                dc.w    Green_Hill_Art_List_0-ArtLoadCues        ; Offset_0x03AD02
                dc.w    Green_Hill_Art_List_1-ArtLoadCues        ; Offset_0x03AD2E
                dc.w    Unk_Lvl_1_Art_Data_0-ArtLoadCues         ; Offset_0x03AD48
                dc.w    Unk_Lvl_1_Art_Data_1-ArtLoadCues         ; Offset_0x03AD48
                dc.w    Wood_Art_Data_0-ArtLoadCues              ; Offset_0x03AD48
                dc.w    Wood_Art_Data_1-ArtLoadCues              ; Offset_0x03AD48
                dc.w    Unk_Lvl_3_Art_Data_0-ArtLoadCues         ; Offset_0x03AD48
                dc.w    Unk_Lvl_3_Art_Data_1-ArtLoadCues         ; Offset_0x03AD48
                dc.w    Metropolis_Art_Data_0-ArtLoadCues        ; Offset_0x03AD48
                dc.w    Metropolis_Art_Data_1-ArtLoadCues        ; Offset_0x03AD86
                dc.w    Metropolis_3_Art_Data_0-ArtLoadCues      ; Offset_0x03ADC4
                dc.w    Metropolis_3_Art_Data_1-ArtLoadCues      ; Offset_0x03ADC4
                dc.w    Sky_Fortress_Art_Data_0-ArtLoadCues      ; Offset_0x03ADC4
                dc.w    Sky_Fortress_Art_Data_1-ArtLoadCues      ; Offset_0x03AE0E
                dc.w    Hill_Top_Art_Data_0-ArtLoadCues          ; Offset_0x03AE64
                dc.w    Hill_Top_Art_Data_1-ArtLoadCues          ; Offset_0x03AEAE
                dc.w    Hidden_Palace_Art_Data_0-ArtLoadCues     ; Offset_0x03AEC2
                dc.w    Hidden_Palace_Art_Data_1-ArtLoadCues     ; Offset_0x03AEF4
                dc.w    Unk_Lvl_9_Art_Data_0-ArtLoadCues         ; Offset_0x03AF0E
                dc.w    Unk_Lvl_9_Art_Data_1-ArtLoadCues         ; Offset_0x03AF0E
                dc.w    Oil_Ocean_Art_Data_0-ArtLoadCues         ; Offset_0x03AF0E
                dc.w    Oil_Ocean_Art_Data_1-ArtLoadCues         ; Offset_0x03AF4C
                dc.w    Dust_Hill_Art_Data_0-ArtLoadCues         ; Offset_0x03AF96
                dc.w    Dust_Hill_Art_Data_1-ArtLoadCues         ; Offset_0x03AFC2
                dc.w    Casino_Night_Art_Data_0-ArtLoadCues      ; Offset_0x03AFE8
                dc.w    Casino_Night_Art_Data_1-ArtLoadCues      ; Offset_0x03B02C
                dc.w    Chemical_Plant_Art_Data_0-ArtLoadCues    ; Offset_0x03B052
                dc.w    Chemical_Plant_Art_Data_1-ArtLoadCues    ; Offset_0x03B09C 
                dc.w    Death_Egg_Art_Data_0-ArtLoadCues         ; Offset_0x03B0C2
                dc.w    Death_Egg_Art_Data_1-ArtLoadCues         ; Offset_0x03B0CA
                dc.w    Neo_Green_Hill_Art_Data_0-ArtLoadCues    ; Offset_0x03B0F0
                dc.w    Neo_Green_Hill_Art_Data_1-ArtLoadCues    ; Offset_0x03B110
                dc.w    Sky_Chase_Art_Data_0-ArtLoadCues         ; Offset_0x03B148
                dc.w    Sky_Chase_Art_Data_1-ArtLoadCues         ; Offset_0x03B150
                dc.w    End_Level_Art_Data_0-ArtLoadCues         ; Offset_0x03B17C
                dc.w    End_Level_Art_Data_1-ArtLoadCues         ; Offset_0x03B184
                dc.w    Chemical_Plant_Boss_Art_Data-ArtLoadCues     ; 28 ; Offset_0x03B18C
                dc.w    Green_Hill_Boss_Art_Data-ArtLoadCues         ; 29 ; Offset_0x03B1AC
                dc.w    Hill_Top_Boss_Art_Data-ArtLoadCues           ; 2A ; Offset_0x03B1C6
                dc.w    Neo_Green_Hill_Boss_Art_Data-ArtLoadCues     ; 2B ; Offset_0x03B1E0
                dc.w    Dust_Hill_Boss_Art_Data-ArtLoadCues          ; 2C ; Offset_0x03B1F4
                dc.w    Casino_Night_Boss_Art_Data-ArtLoadCues       ; 2D ; Offset_0x03B208
                dc.w    Metropolis_Boss_Art_Data-ArtLoadCues         ; 2E ; Offset_0x03B21C
                dc.w    Oil_Ocean_Boss_Art_Data-ArtLoadCues          ; 2F ; Offset_0x03B236
                dc.w    Death_Egg_Boss_Art_Data-ArtLoadCues          ; 30 ; Offset_0x03B244
                dc.w    Final_Boss_Art_Data-ArtLoadCues              ; 31 ; Offset_0x03B24C
                dc.w    Green_Hill_Flickies_Art_Data-ArtLoadCues     ; 32 ; Offset_0x03B254
                dc.w    Dust_Hill_Flickies_Art_Data-ArtLoadCues      ; 33 ; Offset_0x03B262
                dc.w    Mz_SFz_HTz_Flickies_Art_Data-ArtLoadCues     ; 34 ; Offset_0x03B270
                dc.w    Death_Egg_Flickies_Art_Data-ArtLoadCues      ; 35 ; Offset_0x03B27E
                dc.w    Hidden_Palace_Flickies_Art_Data-ArtLoadCues  ; 36 ; Offset_0x03B28C
                dc.w    Oil_Ocean_Flickies_Art_Data-ArtLoadCues      ; 37 ; Offset_0x03B29A
                dc.w    Sky_Chase_Flickies_Art_Data-ArtLoadCues      ; 38 ; Offset_0x03B2A8
                dc.w    Casino_Night_Flickies_Art_Data-ArtLoadCues   ; 39 ; Offset_0x03B2B6
                dc.w    Chemical_Plant_Flickies_Art_Data-ArtLoadCues ; 3A ; Offset_0x03B2C4
                dc.w    Neo_Green_Hill_Flickies_Art_Data-ArtLoadCues ; 3B ; Offset_0x03B2D2
                dc.w    Special_Stage_Art_Data_0-ArtLoadCues         ; 3C ; Offset_0x03B2E0
                dc.w    Special_Stage_Art_Data_1-ArtLoadCues         ; 3D ; Offset_0x03B318
;-------------------------------------------------------------------------------  
Default_Art_List:                                        ; $00 ; Offset_0x03ACB8   
PLC_00:          
                dc.w    (((PLC_00_End-PLC_00-$02)/$06)-$01) ; Auto Detecção do número de sprites por Esrael Neto
                dc.l    Art_LampPost                           ; Offset_0x07E3FA
                dc.w    $8F80
                dc.l    Art_Head_Up_Display                    ; Offset_0x07DB94
                dc.w    $D940
                dc.l    Art_Head_Up_Display_Sonic              ; Offset_0x07DC9C
                dc.w    $FA80 
                dc.l    Art_Rings                              ; Offset_0x07DDB2
                dc.w    $D780 
                dc.l    Art_Hit_Enemy_Points                   ; Offset_0x07E320
                dc.w    $9580
PLC_00_End:                
;------------------------------------------------------------------------------- 
Default_Level_Art_List:                                  ; $01 ; Offset_0x03ACD8   
PLC_01:          
                dc.w    (((PLC_01_End-PLC_01-$02)/$06)-$01) ; Auto Detecção do número de sprites por Esrael Neto
                dc.l    Art_Monitors                           ; Offset_0x07DEA6
                dc.w    $D000
                dc.l    Art_Shield                             ; Offset_0x071D8E
                dc.w    $97C0
                dc.l    Art_Invencibility_Stars                ; Offset_0x071F14
                dc.w    $9BC0
PLC_01_End:                   
;-------------------------------------------------------------------------------
After_Title_Cards_Art_List:                              ; $02 ; Offset_0x03ACEC 
PLC_02:          
                dc.w    (((PLC_02_End-PLC_02-$02)/$06)-$01) ; Auto Detecção do número de sprites por Esrael Neto
                dc.l    Art_Explosion                          ; Offset_0x07F4BE
                dc.w    $B480
                dc.l    Art_Water_Splash                       ; Offset_0x07393C
                dc.w    $BE40
PLC_02_End:
;-------------------------------------------------------------------------------
Game_Over_Time_Over_Art_List:                            ; $03 ; Offset_0x03ACFA 
PLC_03:          
                dc.w    (((PLC_03_End-PLC_03-$02)/$06)-$01) ; Auto Detecção do número de sprites por Esrael Neto               
                dc.l    Art_Game_Over_Time_Over                ; Offset_0x07F32C
                dc.w    $9BC0
PLC_03_End:
;-------------------------------------------------------------------------------
Green_Hill_Art_List_0:                                         ; Offset_0x03AD02
PLC_04:          
                dc.w    (((PLC_04_End-PLC_04-$02)/$06)-$01) ; Auto Detecção do número de sprites por Esrael Neto               
                dc.l    Green_Hill_Tiles                       ; Offset_0x08F480
                dc.w    $0000
                dc.l    Art_GHz_Waterfall                      ; Offset_0x077A36
                dc.w    $73C0
                dc.l    Art_GHz_Bridge                         ; Offset_0x077C8A
                dc.w    $76C0
                dc.l    Art_FireBall                           ; Offset_0x0778C0
                dc.w    $77C0
                dc.l    Art_GHz_Buzzer                         ; Offset_0x08083C
                dc.w    $7A40
                dc.l    Art_GHz_Coconuts                       ; Offset_0x088A50
                dc.w    $7DC0
                dc.l    Art_GHz_Masher                         ; Offset_0x081BB0
                dc.w    $8280
PLC_04_End:                            
;-------------------------------------------------------------------------------
Green_Hill_Art_List_1:                                         ; Offset_0x03AD2E
PLC_05:          
                dc.w    (((PLC_05_End-PLC_05-$02)/$06)-$01) ; Auto Detecção do número de sprites por Esrael Neto                
                dc.l    Art_Spikes                             ; Offset_0x07E2D0
                dc.w    $8680
                dc.l    Art_Diagonal_Spring                    ; Offset_0x07D9C0
                dc.w    $8780
                dc.l    Art_Vertical_Spring                    ; Offset_0x07D7DA
                dc.w    $8B80
                dc.l    Art_Horizontal_Spring                  ; Offset_0x07D8F6
                dc.w    $8E00               
PLC_05_End:
;-------------------------------------------------------------------------------
Unk_Lvl_1_Art_Data_0:                                          ; Offset_0x03AD48
Unk_Lvl_1_Art_Data_1:                                          ; Offset_0x03AD48
Wood_Art_Data_0:                                               ; Offset_0x03AD48
Wood_Art_Data_1:                                               ; Offset_0x03AD48
Unk_Lvl_3_Art_Data_0:                                          ; Offset_0x03AD48
Unk_Lvl_3_Art_Data_1:                                          ; Offset_0x03AD48
;-------------------------------------------------------------------------------
Metropolis_Art_Data_0:                                         ; Offset_0x03AD48
PLC_0C:
                dc.w    (((PLC_0C_End-PLC_0C-$02)/$06)-$01) ; Auto Detecção do número de itens na lista por Esrael Neto
                dc.l    Metropolis_Tiles                       ; Offset_0x097CEC
                dc.w    $0000
                dc.l    Art_Mz_Rotating_Gear                   ; Offset_0x078516
                dc.w    $6F00
                dc.l    Art_Mz_Gear_Holes                      ; Offset_0x07896E
                dc.w    $7E00
                dc.l    Art_Mz_Elevator                        ; Offset_0x078DDC
                dc.w    $7F20
                dc.l    Art_Mz_Miscellaneous                   ; Offset_0x0790F8
                dc.w    $7FA0
                dc.l    Art_Mz_Steam                           ; Offset_0x078AE4
                dc.w    $80A0
                dc.l    Art_Mz_Harpon_Platform                 ; Offset_0x078A16
                dc.w    $8280
                dc.l    Art_Mz_Harpon                          ; Offset_0x078BEE
                dc.w    $8380
                dc.l    Art_Shellcracker                       ; Offset_0x08922E
                dc.w    $6380
                dc.l    Art_Asteron                            ; Offset_0x0894D6
                dc.w    $6D00
PLC_0C_End:
;-------------------------------------------------------------------------------
Metropolis_Art_Data_1:                                         ; Offset_0x03AD86
PLC_0D:
                dc.w    (((PLC_0D_End-PLC_0D-$02)/$06)-$01) ; Auto Detecção do número de itens na lista por Esrael Neto
                dc.l    Art_Switch                             ; Offset_0x07D702
                dc.w    $8480
                dc.l    Art_Spikes                             ; Offset_0x07E2D0
                dc.w    $8680
                dc.l    Art_Slicer                             ; Offset_0x088F56
                dc.w    $8780
                dc.l    Art_Vertical_Spring                    ; Offset_0x07D7DA
                dc.w    $8B80
                dc.l    Art_Horizontal_Spring                  ; Offset_0x07D8F6
                dc.w    $8E00
                dc.l    Art_Mz_Screw_Nut                       ; Offset_0x078CB0
                dc.w    $A000
                dc.l    Art_Mz_Lava_Bubble                     ; Offset_0x078D26
                dc.w    $A6C0
                dc.l    Art_Mz_Parallelogram_Elevator          ; Offset_0x078E4C
                dc.w    $A7E0
                dc.l    Art_Mz_Mini_Gear                       ; Offset_0x07919A
                dc.w    $ABE0
                dc.l    Art_Mz_Teleport_Flash                  ; Offset_0x07927C
                dc.w    $AD60
PLC_0D_End:
;-------------------------------------------------------------------------------
Metropolis_3_Art_Data_0:                                       ; Offset_0x03ADC4
Metropolis_3_Art_Data_1:                                       ; Offset_0x03ADC4 
;-------------------------------------------------------------------------------
Sky_Fortress_Art_Data_0:                                       ; Offset_0x03ADC4
PLC_0E:
                dc.w    (((PLC_0E_End-PLC_0E-$02)/$06)-$01) ; Auto Detecção do número de itens na lista por Esrael Neto
                dc.l    Sky_Fortress_Tiles                     ; Offset_0x0C2394
                dc.w    $0000
                dc.l    Art_SFz_Robotnik_Ship                  ; Offset_0x0C5A7C
                dc.w    $60E0
                dc.l    Art_Tornado                            ; Offset_0x08AE1A
                dc.w    $A000
                dc.l    Art_Clouds                             ; Offset_0x08BCD2
                dc.w    $A9E0
                dc.l    Art_Vertical_Helix                     ; Offset_0x08C08E
                dc.w    $AC20
                dc.l    Art_Horizontal_Helix                   ; Offset_0x08C0BE
                dc.w    $79A0
                dc.l    Art_Balkiry                            ; Offset_0x089DEC
                dc.w    $ACA0
                dc.l    Art_Breakable_Wall                     ; Offset_0x0792F6
                dc.w    $9180
                dc.l    Art_Clucker                            ; Offset_0x089BB2
                dc.w    $6F20
                dc.l    Art_Small_Helix                        ; Offset_0x08C1E6
                dc.w    $7260
                dc.l    Art_Tornado                            ; Offset_0x08AE1A
                dc.w    $A000
                dc.l    Art_Clouds                             ; Offset_0x08BCD2
                dc.w    $A9E0
PLC_0E_End:
;-------------------------------------------------------------------------------
Sky_Fortress_Art_Data_1:                                       ; Offset_0x03AE0E
PLC_11:
                dc.w    (((PLC_11_End-PLC_11-$02)/$06)-$01) ; Auto Detecção do número de itens na lista por Esrael Neto
                dc.l    Art_Vertical_Helix                     ; Offset_0x08C08E
                dc.w    $AC20
                dc.l    Art_Horizontal_Helix                   ; Offset_0x08C0BE
                dc.w    $79A0
                dc.l    Art_Vertical_Laser                     ; Offset_0x08BC44
                dc.w    $73E0
                dc.l    Art_SFz_Cannon                         ; Offset_0x08B376
                dc.w    $7560
                dc.l    Art_Horizontal_Laser                   ; Offset_0x08BE18
                dc.w    $7860
                dc.l    Art_Conveyor_Belts_Wheels              ; Offset_0x08B9AE
                dc.w    $7D40
                dc.l    Art_Chain_Hook                         ; Offset_0x08B55E
                dc.w    $7F40
                dc.l    Art_Rocket_Flame                       ; Offset_0x08C29A
                dc.w    $81C0
                dc.l    Art_SFz_Elevators                      ; Offset_0x08BEE2
                dc.w    $82C0
                dc.l    Art_Hatchways                          ; Offset_0x08B716
                dc.w    $8440
                dc.l    Art_Engine_Part                        ; Offset_0x08BFCC
                dc.w    $8B00
                dc.l    Art_Speed_Boost                        ; Offset_0x08BE78
                dc.w    $8C80
                dc.l    Art_Boss_Switch                        ; Offset_0x079288
                dc.w    $8D20
                dc.l    Art_SFz_Platform                       ; Offset_0x08BB44
                dc.w    $8DA0
PLC_11_End:
;-------------------------------------------------------------------------------  
Hill_Top_Art_Data_0:                                           ; Offset_0x03AE64
PLC_12:
                dc.w    (((PLC_12_End-PLC_12-$02)/$06)-$01) ; Auto Detecção do número de itens na lista por Esrael Neto
                dc.l    Green_Hill_Tiles                       ; Offset_0x08F480
                dc.w    $0000
                dc.l    Hill_Top_Tiles                         ; Offset_0x092A96
                dc.w    $3F80
                dc.l    Art_FireBall                           ; Offset_0x0778C0
                dc.w    $73C0
                dc.l    Art_HTz_Rock                           ; Offset_0x078374
                dc.w    $7640
                dc.l    Art_HTz_See_saw                        ; Offset_0x0780CE
                dc.w    $78C0
                dc.l    ArT_HTz_See_saw_badnick                ; Offset_0x0784AA
                dc.w    $7BC0
                dc.l    Art_Rexon                              ; Offset_0x087FC2
                dc.w    $6FC0
                dc.l    Art_Spiker                             ; Offset_0x088180
                dc.w    $A400
                dc.l    Art_Spikes                             ; Offset_0x07E2D0
                dc.w    $8680
                dc.l    Art_Diagonal_Spring                    ; Offset_0x07D9C0
                dc.w    $8780
                dc.l    Art_Vertical_Spring                    ; Offset_0x07D7DA
                dc.w    $8B80
                dc.l    Art_Horizontal_Spring                  ; Offset_0x07D8F6
                dc.w    $8E00
PLC_12_End:
;-------------------------------------------------------------------------------    
Hill_Top_Art_Data_1:                                           ; Offset_0x03AEAE 
PLC_13:
                dc.w    (((PLC_13_End-PLC_13-$02)/$06)-$01) ; Auto Detecção do número de itens na lista por Esrael Neto
                dc.l    Art_HTz_Teleferic                      ; Offset_0x077D62
                dc.w    $7CC0
                dc.l    Art_HTz_Lava_Bubble                    ; Offset_0x077B3C
                dc.w    $82C0
                dc.l    Art_HTz_Automatic_Door                 ; Offset_0x078056
                dc.w    $84C0
PLC_13_End:
;-------------------------------------------------------------------------------
; Arts carregadas para uso na fase Hidden Palace
; ->>> 
;-------------------------------------------------------------------------------
Hidden_Palace_Art_Data_0:                                      ; Offset_0x03AEC2
PLC_14:
                dc.w    (((PLC_14_End-PLC_14-$02)/$06)-$01) ; Auto Detecção do número de itens na lista por Esrael Neto
                dc.l    Hidden_Palace_Tiles                    ; Offset_0x09DCBC
                dc.w    $0000
                dc.l    Art_HPz_Bridge                         ; Offset_0x0793DA
                dc.w    $6000
                dc.l    Art_HPz_Waterfall                      ; Offset_0x079552
                dc.w    $62A0
                dc.l    Art_HPz_Platform                       ; Offset_0x079B26
                dc.w    $6940
                dc.l    Art_HPz_Orbs_2                         ; Offset_0x079BE6
                dc.w    $6B40
                dc.l    Art_HPz_Unknow_Platform                ; Offset_0x079E22
                dc.w    $6F80
                dc.l    Art_HPz_Emerald                        ; Offset_0x0798B4
                dc.w    $7240
                dc.l    Art_Water_Surface                      ; Offset_0x07C8FC
                dc.w    $8000
PLC_14_End:
;-------------------------------------------------------------------------------                
Hidden_Palace_Art_Data_1:                                      ; Offset_0x03AEF4
PLC_15:
                dc.w    (((PLC_15_End-PLC_15-$02)/$06)-$01) ; Auto Detecção do número de itens na lista por Esrael Neto
                dc.l    Art_Rhinobot                           ; Offset_0x0810B2
                dc.w    $7640
                dc.l    Art_Dinobot                            ; Offset_0x08147A
                dc.w    $A000
                dc.l    Art_Batbot                             ; Offset_0x080A3C
                dc.w    $A600
                dc.l    Art_Bubbles                            ; Offset_0x07EE0E
                dc.w    $BD00
PLC_15_End:
;-------------------------------------------------------------------------------
; Arts carregadas para uso na fase Hidden Palace
; <<<- 
;-------------------------------------------------------------------------------
Unk_Lvl_9_Art_Data_0:                                          ; Offset_0x03AF0E
Unk_Lvl_9_Art_Data_1:                                          ; Offset_0x03AF0E  
;-------------------------------------------------------------------------------
Oil_Ocean_Art_Data_0:                                          ; Offset_0x03AF0E
PLC_17:
                dc.w    (((PLC_17_End-PLC_17-$02)/$06)-$01) ; Auto Detecção do número de itens na lista por Esrael Neto
                dc.l    Oil_Ocean_Tiles                        ; Offset_0x09EB5C
                dc.w    $0000
                dc.l    Art_OOz_Fire_Booster                   ; Offset_0x07B4B2
                dc.w    $5C40
                dc.l    Art_OOz_Elevator                       ; Offset_0x07B056
                dc.w    $5E80
                dc.l    Art_OOz_Giant_Spikeball                ; Offset_0x079FBC
                dc.w    $6180
                dc.l    Art_OOz_Touch_Boost_Up                 ; Offset_0x07A1B4
                dc.w    $6580
                dc.l    Art_OOz_Break_To_Boost_Horizontal      ; Offset_0x07A24A
                dc.w    $6640
                dc.l    Art_OOz_Oil                            ; Offset_0x07A2B6
                dc.w    $66C0
                dc.l    Art_OOz_Oil_01                         ; Offset_0x07A432
                dc.w    $68C0
                dc.l    Art_OOz_Ball                           ; Offset_0x07A55E
                dc.w    $6A80
                dc.l    Art_OOz_Cannon                         ; Offset_0x07A67E
                dc.w    $6D00
PLC_17_End:  
;-------------------------------------------------------------------------------
Oil_Ocean_Art_Data_1:                                          ; Offset_0x03AF4C
PLC_19:
                dc.w    (((PLC_19_End-PLC_19-$02)/$06)-$01) ; Auto Detecção do número de itens na lista por Esrael Neto
                dc.l    Art_OOz_Collapsing_Platform            ; Offset_0x07A96E
                dc.w    $73A0
                dc.l    Art_OOz_Spring_Push_Boost              ; Offset_0x07AC02
                dc.w    $78A0
                dc.l    Art_OOz_Swing_Platform                 ; Offset_0x07ADC4
                dc.w    $7C60
                dc.l    Art_OOz_Break_To_Boost_Vertical        ; Offset_0x07AFE6
                dc.w    $7FE0
                dc.l    Art_OOz_Fans                           ; Offset_0x07B1F2
                dc.w    $8060
                dc.l    Art_Switch                             ; Offset_0x07D702
                dc.w    $8480
                dc.l    Art_Spikes                             ; Offset_0x07E2D0
                dc.w    $8680
                dc.l    Art_Diagonal_Spring                    ; Offset_0x07D9C0
                dc.w    $8780
                dc.l    Art_Vertical_Spring                    ; Offset_0x07D7DA
                dc.w    $8B80
                dc.l    Art_Horizontal_Spring                  ; Offset_0x07D8F6
                dc.w    $8E00
                dc.l    Art_Aquis                              ; Offset_0x081850
                dc.w    $A000
                dc.l    Art_Octus                              ; Offset_0x080D92
                dc.w    $A700
PLC_19_End:  
;-------------------------------------------------------------------------------
Dust_Hill_Art_Data_0:                                          ; Offset_0x03AF96
PLC_1A:
                dc.w    (((PLC_1A_End-PLC_1A-$02)/$06)-$01) ; Auto Detecção do número de itens na lista por Esrael Neto
                dc.l    Dust_Hill_Tiles                        ; Offset_0x0A4AFE
                dc.w    $0000
                dc.l    Art_DHz_Box                            ; Offset_0x07B59E
                dc.w    $7A80
                dc.l    Art_DHz_Collapsing_Platform            ; Offset_0x07B7DC
                dc.w    $7E80
                dc.l    Art_DHz_Vines                          ; Offset_0x07B986
                dc.w    $81C0
                dc.l    Art_DHz_Vines_01                       ; Offset_0x07BA7E
                dc.w    $83C0
                dc.l    Art_Flasher                            ; Offset_0x088E34
                dc.w    $7500
                dc.l    Art_Crawlton                           ; Offset_0x088D0C
                dc.w    $7800
PLC_1A_End:
;-------------------------------------------------------------------------------
Dust_Hill_Art_Data_1:                                          ; Offset_0x03AFC2
PLC_1B:
                dc.w    (((PLC_1B_End-PLC_1B-$02)/$06)-$01) ; Auto Detecção do número de itens na lista por Esrael Neto
                dc.l    Art_DHz_Horizontal_Spikes              ; Offset_0x07EBC6
                dc.w    $8580
                dc.l    Art_Spikes                             ; Offset_0x07E2D0
                dc.w    $8680
                dc.l    Art_DHz_Bridge                         ; Offset_0x07BB28
                dc.w    $8780
                dc.l    Art_Diagonal_Spring_01                 ; Offset_0x07EA76
                dc.w    $8800
                dc.l    Art_Vertical_Spring                    ; Offset_0x07D7DA
                dc.w    $8B80
                dc.l    Art_Horizontal_Spring                  ; Offset_0x07D8F6
                dc.w    $8E00
PLC_1B_End:
;-------------------------------------------------------------------------------
Casino_Night_Art_Data_0:                                       ; Offset_0x03AFE8
PLC_1C:
                dc.w    (((PLC_1C_End-PLC_1C-$02)/$06)-$01) ; Auto Detecção do número de itens na lista por Esrael Neto
                dc.l    Casino_Night_Tiles                     ; Offset_0x0AB860
                dc.w    $0000
                dc.l    Art_Crawl                              ; Offset_0x08E37A
                dc.w    $6800
                dc.l    Art_CNz_Box                            ; Offset_0x07BC60
                dc.w    $6D80
                dc.l    Art_CNz_Green_Platforms                ; Offset_0x07BB98
                dc.w    $6F80
                dc.l    Art_CNz_Spikeball_Slot_Machine         ; Offset_0x07BC00
                dc.w    $7000
                dc.l    Art_CNz_Elevator                       ; Offset_0x07BD4C
                dc.w    $7080
                dc.l    Art_CNz_Slot_Machine_Starter           ; Offset_0x07BDBE
                dc.w    $7100
                dc.l    Art_CNz_Blue_Bumper                    ; Offset_0x07BE2C
                dc.w    $7280
                dc.l    Art_CNz_Bumpers                        ; Offset_0x07BEB6
                dc.w    $7340
                dc.l    Art_CNz_Flippers                       ; Offset_0x07C48A
                dc.w    $7640
                dc.l    Art_CNz_Green_Bumpers                  ; Offset_0x07C364
                dc.w    $7CC0
PLC_1C_End:
;-------------------------------------------------------------------------------
Casino_Night_Art_Data_1:                                       ; Offset_0x03B02C  
PLC_1D:
                dc.w    (((PLC_1D_End-PLC_1D-$02)/$06)-$01) ; Auto Detecção do número de itens na lista por Esrael Neto
                dc.l    Art_CNz_Diagonal_Launcher              ; Offset_0x07C048
                dc.w    $8040
                dc.l    Art_CNz_Vertical_Launcher              ; Offset_0x07C22E
                dc.w    $8440
                dc.l    Art_Spikes                             ; Offset_0x07E2D0
                dc.w    $8680
                dc.l    Art_Diagonal_Spring                    ; Offset_0x07D9C0
                dc.w    $8780
                dc.l    Art_Vertical_Spring                    ; Offset_0x07D7DA
                dc.w    $8B80
                dc.l    Art_Horizontal_Spring                  ; Offset_0x07D8F6
                dc.w    $8E00
PLC_1D_End:
;-------------------------------------------------------------------------------
Chemical_Plant_Art_Data_0:                                     ; Offset_0x03B052  
PLC_1E:
                dc.w    (((PLC_1E_End-PLC_1E-$02)/$06)-$01) ; Auto Detecção do número de itens na lista por Esrael Neto
                dc.l    Chemical_Plant_Tiles                   ; Offset_0x0B19D8
                dc.w    $0000
                dc.l    Art_CPz_Metal_Structure                ; Offset_0x07CB46
                dc.w    $6E60
                dc.l    Art_CPz_Automatic_Door                 ; Offset_0x07CD90
                dc.w    $7280
                dc.l    Art_CPz_Speed_Booster                  ; Offset_0x07CA6C
                dc.w    $7380
                dc.l    Art_CPz_Triangle_Platform              ; Offset_0x07C7AE
                dc.w    $7400
                dc.l    Art_CPz_Open_Close_Platform            ; Offset_0x07CDFC
                dc.w    $7600
                dc.l    Art_CPz_Spring_Tubes                   ; Offset_0x07D19E
                dc.w    $7C00
                dc.l    Art_Water_Surface                      ; Offset_0x07C8FC
                dc.w    $8000
                dc.l    Art_CPz_Platforms                      ; Offset_0x07CFDE
                dc.w    $8300
                dc.l    Art_CPz_Breakable_Block                ; Offset_0x07CD50
                dc.w    $8600
                dc.l    Art_Grabber                            ; Offset_0x08988A
                dc.w    $A000
                dc.l    Art_Lander                             ; Offset_0x089606
                dc.w    $A5A0
PLC_1E_End:
;-------------------------------------------------------------------------------
Chemical_Plant_Art_Data_1:                                     ; Offset_0x03B09C
PLC_1F:
                dc.w    (((PLC_1F_End-PLC_1F-$02)/$06)-$01) ; Auto Detecção do número de itens na lista por Esrael Neto
                dc.l    Art_Bubbles                            ; Offset_0x07EE0E
                dc.w    $BD00
                dc.l    Art_Spikes                             ; Offset_0x07E2D0
                dc.w    $8680
                dc.l    Art_CPz_Worms                          ; Offset_0x07CAD4
                dc.w    $8780
                dc.l    Art_Diagonal_Spring_01                 ; Offset_0x07EA76
                dc.w    $8800
                dc.l    Art_Vertical_Spring                    ; Offset_0x07D7DA
                dc.w    $8B80
                dc.l    Art_Horizontal_Spring                  ; Offset_0x07D8F6
                dc.w    $8E00
PLC_1F_End:
;------------------------------------------------------------------------------- 
Death_Egg_Art_Data_0:                                          ; Offset_0x03B0C2
PLC_20:
                dc.w    (((PLC_20_End-PLC_20-$02)/$06)-$01) ; Auto Detecção do número de itens na lista por Esrael Neto
                dc.l    Chemical_Plant_Tiles                   ; Offset_0x0B19D8
                dc.w    $0000
PLC_20_End:
;-------------------------------------------------------------------------------
Death_Egg_Art_Data_1:                                          ; Offset_0x03B0CA
PLC_21:
                dc.w    (((PLC_21_End-PLC_21-$02)/$06)-$01) ; Auto Detecção do número de itens na lista por Esrael Neto
                dc.l    Art_CPz_Automatic_Door                 ; Offset_0x07CD90
                dc.w    $6500
                dc.l    Art_Metal_Sonic                        ; Offset_0x089FE8
                dc.w    $7000
                dc.l    Art_Robotnik_Window                    ; Offset_0x08D16C
                dc.w    $6F00
                dc.l    Art_Robotnik                           ; Offset_0x08CC30
                dc.w    $A300
                dc.l    Art_Robotnik_Faces                     ; Offset_0x08CA5C
                dc.w    $A000
                dc.l    Art_Robotnik_Body                      ; Offset_0x08D028
                dc.w    $AC80
PLC_21_End:
;-------------------------------------------------------------------------------
Neo_Green_Hill_Art_Data_0:                                     ; Offset_0x03B0F0
PLC_22:
                dc.w    (((PLC_22_End-PLC_22-$02)/$06)-$01) ; Auto Detecção do número de itens na lista por Esrael Neto
                dc.l    Neo_Green_Hill_Tiles                   ; Offset_0x0B9142
                dc.w    $0000
                dc.l    Art_NGHz_Automatic_Door                ; Offset_0x07D66A
                dc.w    $7F00
                dc.l    Art_NGHz_Water_Surface                 ; Offset_0x07D39A
                dc.w    $8000
                dc.l    Art_NGHz_Leaves                        ; Offset_0x07D480
                dc.w    $8200
                dc.l    Art_NGHz_Arrow_Shooter                 ; Offset_0x07D50C
                dc.w    $82E0
PLC_22_End:
;-------------------------------------------------------------------------------
Neo_Green_Hill_Art_Data_1:                                     ; Offset_0x03B110
PLC_23:
                dc.w    (((PLC_23_End-PLC_23-$02)/$06)-$01) ; Auto Detecção do número de itens na lista por Esrael Neto
                dc.l    Art_Chop_Chop                          ; Offset_0x087D70
                dc.w    $A760
                dc.l    Art_Whisp                              ; Offset_0x0877BA
                dc.w    $A000
                dc.l    Art_Grounder                           ; Offset_0x0878E4
                dc.w    $A120
                dc.l    Art_Oxygen_Bubbles                     ; Offset_0x07EC42
                dc.w    $AB60
                dc.l    Art_Bubbles                            ; Offset_0x07EE0E
                dc.w    $BD00
                dc.l    Art_Spikes                             ; Offset_0x07E2D0
                dc.w    $8680
                dc.l    Art_Diagonal_Spring_01                 ; Offset_0x07EA76
                dc.w    $8800
                dc.l    Art_Vertical_Spring                    ; Offset_0x07D7DA
                dc.w    $8B80
                dc.l    Art_Horizontal_Spring                  ; Offset_0x07D8F6
                dc.w    $8E00
PLC_23_End:
;-------------------------------------------------------------------------------
Sky_Chase_Art_Data_0:                                          ; Offset_0x03B148
PLC_24:
                dc.w    (((PLC_24_End-PLC_24-$02)/$06)-$01) ; Auto Detecção do número de itens na lista por Esrael Neto
                dc.l    Sky_Fortress_Tiles                     ; Offset_0x0C2394
                dc.w    $0000
PLC_24_End:
;-------------------------------------------------------------------------------
Sky_Chase_Art_Data_1:                                          ; Offset_0x03B150
PLC_25:
                dc.w    (((PLC_25_End-PLC_25-$02)/$06)-$01) ; Auto Detecção do número de itens na lista por Esrael Neto
                dc.l    Art_Tornado                            ; Offset_0x08AE1A
                dc.w    $A000
                dc.l    Art_Clouds                             ; Offset_0x08BCD2
                dc.w    $A9E0
                dc.l    Art_Vertical_Helix                     ; Offset_0x08C08E
                dc.w    $AC20
                dc.l    Art_Horizontal_Helix                   ; Offset_0x08C0BE
                dc.w    $79A0
                dc.l    Art_Balkiry                            ; Offset_0x089DEC
                dc.w    $ACA0
                dc.l    Art_Turtloid                           ; Offset_0x088538
                dc.w    $7140
                dc.l    Art_Nebula                             ; Offset_0x088318
                dc.w    $6DC0
PLC_25_End:
;-------------------------------------------------------------------------------
End_Level_Art_Data_0:                                          ; Offset_0x03B17C                                        
PLC_26:
                dc.w    (((PLC_26_End-PLC_26-$02)/$06)-$01) ; Auto Detecção do número de itens na lista por Esrael Neto
                dc.l    Art_End_Panel                          ; Offset_0x07E4A0
                dc.w    $8680
PLC_26_End:
;-------------------------------------------------------------------------------
End_Level_Art_Data_1:                                          ; Offset_0x03B184  
PLC_27:
                dc.w    (((PLC_27_End-PLC_27-$02)/$06)-$01) ; Auto Detecção do número de itens na lista por Esrael Neto
                dc.l    Art_End_Panel                          ; Offset_0x07E4A0
                dc.w    $8680
PLC_27_End:
;-------------------------------------------------------------------------------
Chemical_Plant_Boss_Art_Data:                                  ; Offset_0x03B18C             
PLC_28:
                dc.w    (((PLC_28_End-PLC_28-$02)/$06)-$01) ; Auto Detecção do número de itens na lista por Esrael Neto
                dc.l    Art_Robotnik_Ship                      ; Offset_0x081DBC
                dc.w    $8400
                dc.l    Art_CPz_Boss                           ; Offset_0x0824F8
                dc.w    $A000
                dc.l    Art_Ship_Boost                         ; Offset_0x0830DE
                dc.w    $8300
                dc.l    Art_Boss_Smokes                        ; Offset_0x08315C
                dc.w    $AE00
                dc.l    Art_Boss_Explosions                    ; Offset_0x082A56
                dc.w    $B000
PLC_28_End:
;-------------------------------------------------------------------------------
Green_Hill_Boss_Art_Data:                                      ; Offset_0x03B1AC
PLC_29:
                dc.w    (((PLC_29_End-PLC_29-$02)/$06)-$01) ; Auto Detecção do número de itens na lista por Esrael Neto
                dc.l    Art_Robotnik_Ship                      ; Offset_0x081DBC
                dc.w    $7400
                dc.l    Art_GHz_Boss_Car                       ; Offset_0x083242
                dc.w    $8000
                dc.l    Art_GHz_Boss_Blades                    ; Offset_0x083A2E
                dc.w    $BD00
                dc.l    Art_Boss_Explosions                    ; Offset_0x082A56
                dc.w    $B000
PLC_29_End:
;-------------------------------------------------------------------------------
Hill_Top_Boss_Art_Data:                                        ; Offset_0x03B1C6
PLC_2A:
                dc.w    (((PLC_2A_End-PLC_2A-$02)/$06)-$01) ; Auto Detecção do número de itens na lista por Esrael Neto
                dc.l    Art_Robotnik_Ship                      ; Offset_0x081DBC
                dc.w    $7820
                dc.l    Art_HTz_Boss_Fire_Cannon               ; Offset_0x083B22
                dc.w    $8420
                dc.l    Art_Boss_Explosions                    ; Offset_0x082A56
                dc.w    $B000
                dc.l    Art_Boss_Smokes                        ; Offset_0x08315C
                dc.w    $BC80
PLC_2A_End:
;-------------------------------------------------------------------------------
Neo_Green_Hill_Boss_Art_Data:                                  ; Offset_0x03B1E0
PLC_2B:
                dc.w    (((PLC_2B_End-PLC_2B-$02)/$06)-$01) ; Auto Detecção do número de itens na lista por Esrael Neto
                dc.l    Art_Robotnik_Ship                      ; Offset_0x081DBC
                dc.w    $A000
                dc.l    Art_NGHz_Boss                          ; Offset_0x0842EE
                dc.w    $7C00
                dc.l    Art_Boss_Explosions                    ; Offset_0x082A56
                dc.w    $B000
PLC_2B_End:              
;-------------------------------------------------------------------------------
Dust_Hill_Boss_Art_Data:                                       ; Offset_0x03B1F4  
PLC_2C:
                dc.w    (((PLC_2C_End-PLC_2C-$02)/$06)-$01) ; Auto Detecção do número de itens na lista por Esrael Neto
                dc.l    Art_Robotnik_Ship                      ; Offset_0x081DBC
                dc.w    $A000
                dc.l    Art_DHz_Boss                           ; Offset_0x084D44
                dc.w    $7800
                dc.l    Art_Boss_Explosions                    ; Offset_0x082A56
                dc.w    $B000
PLC_2C_End:     
;------------------------------------------------------------------------------- 
Casino_Night_Boss_Art_Data:                                    ; Offset_0x03B208
PLC_2D:
                dc.w    (((PLC_2D_End-PLC_2D-$02)/$06)-$01) ; Auto Detecção do número de itens na lista por Esrael Neto
                dc.l    Art_Robotnik_Ship                      ; Offset_0x081DBC
                dc.w    $A000
                dc.l    Art_CNz_Boss                           ; Offset_0x085C82
                dc.w    $80E0
                dc.l    Art_Boss_Explosions                    ; Offset_0x082A56
                dc.w    $B000
PLC_2D_End:
;-------------------------------------------------------------------------------
Metropolis_Boss_Art_Data:                                      ; Offset_0x03B21C    
PLC_2E:
                dc.w    (((PLC_2E_End-PLC_2E-$02)/$06)-$01) ; Auto Detecção do número de itens na lista por Esrael Neto
                dc.l    Art_Robotnik_Ship                      ; Offset_0x081DBC
                dc.w    $A000
                dc.l    Art_Mz_Boss_Balls_And_Robotniks        ; Offset_0x086F7C
                dc.w    $6F80
                dc.l    Art_Ship_Boost                         ; Offset_0x0830DE
                dc.w    $AC00
                dc.l    Art_Boss_Explosions                    ; Offset_0x082A56
                dc.w    $B000
PLC_2E_End:
;-------------------------------------------------------------------------------
Oil_Ocean_Boss_Art_Data:                                       ; Offset_0x03B236
PLC_2F:
                dc.w    (((PLC_2F_End-PLC_2F-$02)/$06)-$01) ; Auto Detecção do número de itens na lista por Esrael Neto
                dc.l    Art_OOz_Boss                           ; Offset_0x0864AC
                dc.w    $7180
                dc.l    Art_Boss_Explosions                    ; Offset_0x082A56
                dc.w    $B000
PLC_2F_End:
;-------------------------------------------------------------------------------
Death_Egg_Boss_Art_Data:                                       ; Offset_0x03B244
PLC_30:
                dc.w    (((PLC_30_End-PLC_30-$02)/$06)-$01) ; Auto Detecção do número de itens na lista por Esrael Neto
                dc.l    Art_Boss_Explosions                    ; Offset_0x082A56
                dc.w    $B000
PLC_30_End:
;-------------------------------------------------------------------------------
Final_Boss_Art_Data:                                           ; Offset_0x03B24C
PLC_31:
                dc.w    (((PLC_31_End-PLC_31-$02)/$06)-$01) ; Auto Detecção do número de itens na lista por Esrael Neto
                dc.l    Art_Robotnik_Final                     ; Offset_0x08D1FA
                dc.w    $6600
PLC_31_End:
;-------------------------------------------------------------------------------
Green_Hill_Flickies_Art_Data:                                  ; Offset_0x03B254
PLC_32:
                dc.w    (((PLC_32_End-PLC_32-$02)/$06)-$01) ; Auto Detecção do número de itens na lista por Esrael Neto
                dc.l    Art_Squirrel                           ; Offset_0x07F9B4
                dc.w    $B000
                dc.l    Art_Blue_Bird                          ; Offset_0x07F872
                dc.w    $B280
PLC_32_End:
;-------------------------------------------------------------------------------
Dust_Hill_Flickies_Art_Data:                                   ; Offset_0x03B262
PLC_33:
                dc.w    (((PLC_33_End-PLC_33-$02)/$06)-$01) ; Auto Detecção do número de itens na lista por Esrael Neto
                dc.l    Art_Mouse                              ; Offset_0x07FB18
                dc.w    $B000
                dc.l    Art_Chicken                            ; Offset_0x07FC52
                dc.w    $B280
PLC_33_End:
;-------------------------------------------------------------------------------
Mz_SFz_HTz_Flickies_Art_Data:                                  ; Offset_0x03B270
PLC_34:
                dc.w    (((PLC_34_End-PLC_34-$02)/$06)-$01) ; Auto Detecção do número de itens na lista por Esrael Neto
                dc.l    Art_Monkey                             ; Offset_0x07FDB4
                dc.w    $B000
                dc.l    Art_Pigeon                             ; Offset_0x07FEF4
                dc.w    $B280
PLC_34_End:
;-------------------------------------------------------------------------------
Death_Egg_Flickies_Art_Data:                                   ; Offset_0x03B27E
PLC_35:
                dc.w    (((PLC_35_End-PLC_35-$02)/$06)-$01) ; Auto Detecção do número de itens na lista por Esrael Neto
                dc.l    Art_Pig                                ; Offset_0x080022
                dc.w    $B000
                dc.l    Art_Chicken                            ; Offset_0x07FC52
                dc.w    $B280
PLC_35_End:
;-------------------------------------------------------------------------------
Hidden_Palace_Flickies_Art_Data:                               ; Offset_0x03B28C
PLC_36:
                dc.w    (((PLC_36_End-PLC_36-$02)/$06)-$01) ; Auto Detecção do número de itens na lista por Esrael Neto
                dc.l    Art_Mouse                              ; Offset_0x07FB18
                dc.w    $B000
                dc.l    Art_Seal                               ; Offset_0x080158
                dc.w    $B280
PLC_36_End:
;-------------------------------------------------------------------------------
Oil_Ocean_Flickies_Art_Data:                                   ; Offset_0x03B29A
PLC_37:
                dc.w    (((PLC_37_End-PLC_37-$02)/$06)-$01) ; Auto Detecção do número de itens na lista por Esrael Neto
                dc.l    Art_Penguin                            ; Offset_0x080274
                dc.w    $B000
                dc.l    Art_Seal                               ; Offset_0x080158
                dc.w    $B280
PLC_37_End:
;-------------------------------------------------------------------------------
Sky_Chase_Flickies_Art_Data:                                   ; Offset_0x03B2A8
PLC_38:
                dc.w    (((PLC_38_End-PLC_38-$02)/$06)-$01) ; Auto Detecção do número de itens na lista por Esrael Neto
                dc.l    Art_Turtle                             ; Offset_0x0803F0
                dc.w    $B000
                dc.l    Art_Chicken                            ; Offset_0x07FC52
                dc.w    $B280
PLC_38_End:
;-------------------------------------------------------------------------------
Casino_Night_Flickies_Art_Data:                                ; Offset_0x03B2B6
PLC_39:
                dc.w    (((PLC_39_End-PLC_39-$02)/$06)-$01) ; Auto Detecção do número de itens na lista por Esrael Neto
                dc.l    Art_Bear                               ; Offset_0x0805A2
                dc.w    $B000
                dc.l    Art_Blue_Bird                          ; Offset_0x07F872
                dc.w    $B280
PLC_39_End:
;-------------------------------------------------------------------------------
Chemical_Plant_Flickies_Art_Data:                              ; Offset_0x03B2C4
PLC_3A:
                dc.w    (((PLC_3A_End-PLC_3A-$02)/$06)-$01) ; Auto Detecção do número de itens na lista por Esrael Neto
                dc.l    Art_Rabbit                             ; Offset_0x0806E4
                dc.w    $B000
                dc.l    Art_Pigeon                             ; Offset_0x07FEF4
                dc.w    $B280
PLC_3A_End:
;-------------------------------------------------------------------------------
Neo_Green_Hill_Flickies_Art_Data:                              ; Offset_0x03B2D2
PLC_3B:
                dc.w    (((PLC_3B_End-PLC_3B-$02)/$06)-$01) ; Auto Detecção do número de itens na lista por Esrael Neto
                dc.l    Art_Penguin                            ; Offset_0x080274
                dc.w    $B000
                dc.l    Art_Blue_Bird                          ; Offset_0x07F872
                dc.w    $B280
PLC_3B_End:
;-------------------------------------------------------------------------------
Special_Stage_Art_Data_0:                                      ; Offset_0x03B2E0
PLC_3C:
                dc.w    (((PLC_3C_End-PLC_3C-$02)/$06)-$01) ; Auto Detecção do número de itens na lista por Esrael Neto
                dc.l    Art_SS_Emerald                         ; Offset_0x0DFF28
                dc.w    $2E80
                dc.l    Art_SS_Wings_Hand                      ; Offset_0x0E0170
                dc.w    $3440
                dc.l    SS_Background_Tiles                    ; Offset_0x0DC626
                dc.w    $E000
                dc.l    Art_SS_HUD_Font                        ; Offset_0x0DCD48
                dc.w    $46E0
                dc.l    Art_SS_Player_Shadow                   ; Offset_0x0DD7E6
                dc.w    $4F20
                dc.l    Art_SS_Player_Diagonal_Shadow          ; Offset_0x0DD89C
                dc.w    $53E0
                dc.l    Art_SS_Player_Vertical_Shadow          ; Offset_0x0DD962
                dc.w    $5B20
                dc.l    Art_SS_Start_Traffic_Lights            ; Offset_0x0DD042
                dc.w    $61A0
                dc.l    Art_SS_Bombs_Explosion                 ; Offset_0x0DF804
                dc.w    $7A00
PLC_3C_End:
;-------------------------------------------------------------------------------
Special_Stage_Art_Data_1:                                      ; Offset_0x03B318
PLC_3D:
                dc.w    (((PLC_3D_End-PLC_3D-$02)/$06)-$01) ; Auto Detecção do número de itens na lista por Esrael Neto
                dc.l    Art_SS_Rings                           ; Offset_0x0DD27E
                dc.w    $61A0
PLC_3D_End:   
;-------------------------------------------------------------------------------
; Dados de carga dos gráficos não usados - left over
; Provavelmente de uma compilação anterior
; ->>>
;------------------------------------------------------------------------------- 
Previus_Build_Special_Stage_Art_Data_1:                        ; Offset_0x03B320
PLC_00_PB:
                dc.w    (((PLC_00_PB_End-PLC_00_PB-$02)/$06)-$01) ; Auto Detecção do número de itens na lista por Esrael Neto
                dc.l    Art_SS_Rings                           ; Offset_0x0DD27E
                dc.w    $61A0
PLC_00_PB_End:   
;-------------------------------------------------------------------------------
                dc.w    $B280                     
;------------------------------------------------------------------------------- 
Previus_Build_Oil_Ocean_Flickies_Art_Data:                     ; Offset_0x03B32A
PLC_01_PB:
                dc.w    (((PLC_01_PB_End-PLC_01_PB-$02)/$06)-$01) ; Auto Detecção do número de itens na lista por Esrael Neto
                dc.l    Art_Penguin                            ; Offset_0x080274
                dc.w    $B000
                dc.l    Art_Seal                               ; Offset_0x080158
                dc.w    $B280
PLC_01_PB_End:
;-------------------------------------------------------------------------------
Previus_Build_Sky_Chase_Flickies_Art_Data:                     ; Offset_0x03B338
PLC_02_PB:
                dc.w    (((PLC_02_PB_End-PLC_02_PB-$02)/$06)-$01) ; Auto Detecção do número de itens na lista por Esrael Neto
                dc.l    Art_Turtle                             ; Offset_0x0803F0
                dc.w    $B000
                dc.l    Art_Chicken                            ; Offset_0x07FC52
                dc.w    $B280
PLC_02_PB_End:
;-------------------------------------------------------------------------------
Previus_Build_Casino_Night_Flickies_Art_Data:                  ; Offset_0x03B346
PLC_03_PB:
                dc.w    (((PLC_03_PB_End-PLC_03_PB-$02)/$06)-$01) ; Auto Detecção do número de itens na lista por Esrael Neto
                dc.l    Art_Bear                               ; Offset_0x0805A2
                dc.w    $B000
                dc.l    Art_Blue_Bird                          ; Offset_0x07F872
                dc.w    $B280
PLC_03_PB_End:
;-------------------------------------------------------------------------------
Previus_Build_Chemical_Plant_Flickies_Art_Data:                ; Offset_0x03B354
PLC_04_PB:
                dc.w    (((PLC_04_PB_End-PLC_04_PB-$02)/$06)-$01) ; Auto Detecção do número de itens na lista por Esrael Neto
                dc.l    Art_Rabbit                             ; Offset_0x0806E4
                dc.w    $B000
                dc.l    Art_Pigeon                             ; Offset_0x07FEF4
                dc.w    $B280
PLC_04_PB_End:
;-------------------------------------------------------------------------------
Previus_Build_Neo_Green_Hill_Flickies_Art_Data:                ; Offset_0x03B362
PLC_05_PB:
                dc.w    (((PLC_05_PB_End-PLC_05_PB-$02)/$06)-$01) ; Auto Detecção do número de itens na lista por Esrael Neto
                dc.l    Art_Penguin                            ; Offset_0x080274
                dc.w    $B000
                dc.l    Art_Blue_Bird                          ; Offset_0x07F872
                dc.w    $B280
PLC_05_PB_End:
;-------------------------------------------------------------------------------
Previus_Build_Special_Stage_Art_Data_0:                        ; Offset_0x03B370
PLC_06_PB:
                dc.w    (((PLC_06_PB_End-PLC_06_PB-$02)/$06)-$01) ; Auto Detecção do número de itens na lista por Esrael Neto
                dc.l    Art_SS_Emerald                         ; Offset_0x0DFF28
                dc.w    $2E80
                dc.l    Art_SS_Wings_Hand                      ; Offset_0x0E0170
                dc.w    $3440
                dc.l    SS_Background_Tiles                    ; Offset_0x0DC626
                dc.w    $E000
                dc.l    Art_SS_HUD_Font                        ; Offset_0x0DCD48
                dc.w    $46E0
                dc.l    Art_SS_Player_Shadow                   ; Offset_0x0DD7E6
                dc.w    $4F20
                dc.l    Art_SS_Player_Diagonal_Shadow          ; Offset_0x0DD89C
                dc.w    $53E0
                dc.l    Art_SS_Player_Vertical_Shadow          ; Offset_0x0DD962
                dc.w    $5B20
                dc.l    Art_SS_Start_Traffic_Lights            ; Offset_0x0DD042
                dc.w    $61A0
                dc.l    Art_SS_Bombs_Explosion                 ; Offset_0x0DF804
                dc.w    $7A00
PLC_06_PB_End:
;-------------------------------------------------------------------------------
Previus_Build_1_Special_Stage_Art_Data_1:                      ; Offset_0x03B3A8
PLC_07_PB:
                dc.w    (((PLC_07_PB_End-PLC_07_PB-$02)/$06)-$01) ; Auto Detecção do número de itens na lista por Esrael Neto
                dc.l    Art_SS_Rings                           ; Offset_0x0DD27E
                dc.w    $61A0
PLC_07_PB_End:
;-------------------------------------------------------------------------------                
; Offset_0x03B3B0:
                dc.w    $D27E
                dc.w    $61A0
                dc.w    $D556
                dc.w    $D557
                dc.w    $8856
;-------------------------------------------------------------------------------
; Dados de carga dos gráficos não usados - left over
; Provavelmente de uma compilação anterior
; <<<-
;------------------------------------------------------------------------------- 

;===============================================================================
; Carga dos gráficos das fases       
; <<<-
;=============================================================================== 
            
Previous_Build_Art_CNz_Symbols:                                ; Offset_0x03B3BA
                incbin  'data\cnz\pb_smbls.dat' 
Previous_Build_Art_CNz_Slot_Machine_Checks:                    ; Offset_0x03BEEA
                incbin  'data\cnz\sm_check.dat'                              
Previous_Build_Art_CPz_Dyn_Background:                         ; Offset_0x03CAEA 
Previous_Build_Art_DEz_Dyn_Background:                         ; Offset_0x03CAEA  
                incbin  'data\cpz\backgnd.dat'   
Previous_Build_Art_NGHz_Water_Falls_1:                         ; Offset_0x03CCEA
                incbin  'data\nghz\water_f1.dat'
Previous_Build_Art_NGHz_Water_Falls_2:                         ; Offset_0x03CDEA
                incbin  'data\nghz\water_f2.dat' 
Previous_Build_Art_NGHz_Water_Falls_3:                         ; Offset_0x03CEEA
                incbin  'data\nghz\water_f3.dat' 
Previous_Build_AngleMap:                                       ; Offset_0x03CFEA
                incbin  'data\all\anglemap.dat'
Previous_Build_Colision_Array_1:                               ; Offset_0x03D0EA
                incbin  'data\all\c_array1.dat'   
Previous_Build_Colision_Array_2:                               ; Offset_0x03E0EA
                incbin  'data\all\c_array2.dat'       
Previous_Build_Green_Hill_Colision_Data_1:                     ; Offset_0x03F0EA                  
Previous_Build_Hill_Top_Colision_Data_1:                       ; Offset_0x03F0EA
                incbin  'data\ghz\ghz_col1.dat'  
Previous_Build_Green_Hill_Colision_Data_2:                     ; Offset_0x03F3EA
Previous_Build_Hill_Top_Colision_Data_2:                       ; Offset_0x03F3EA
                incbin  'data\ghz\ghz_col2.dat' 
Previous_Build_Wood_Colision_Data_1:                           ; Offset_0x03F6EA
Previous_Build_Wood_Colision_Data_2:                           ; Offset_0x03F6EA   
Previous_Build_Metropolis_Colision_Data_1:                     ; Offset_0x03F6EA  
Previous_Build_Metropolis_Colision_Data_2:                     ; Offset_0x03F6EA
                incbin  'data\mz\mz_col.dat'        
Previous_Build_Hidden_Palace_Colision_Data_1:                  ; Offset_0x03F9EA
Previous_Build_Hidden_Palace_Colision_Data_2:                  ; Offset_0x03F9EA
                incbin  'data\hpz\hpz_col.dat'      
Previous_Build_Oil_Ocean_Colision_Data_1:                      ; Offset_0x03FCEA
Previous_Build_Oil_Ocean_Colision_Data_2:                      ; Offset_0x03FCEA
                incbin  'data\ooz\ooz_col.dat'                   
Previous_Build_Dust_Hill_Colision_Data_1:                      ; Offset_0x03FFEA
Previous_Build_Dust_Hill_Colision_Data_2:                      ; Offset_0x03FFEA
                dc.b    $00, $FF, $FF, $FF, $FF, $FF, $FF, $FF
                dc.b    $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF
                dc.b    $FF, $FF, $FF, $FF, $FF, $FF                                                                                              
;------------------------------------------------------------------------------- 

Art_GHz_Flower_1:                                              ; Offset_0x040000                   
Art_HTz_Flower_1:                                              ; Offset_0x040000
                incbin  'data\ghz\flower_1.dat'
Art_GHz_Flower_2:                                              ; Offset_0x040080 
Art_HTz_Flower_2:                                              ; Offset_0x040080  
                incbin  'data\ghz\flower_2.dat' 
Art_GHz_Flower_3:                                              ; Offset_0x040100 
Art_HTz_Flower_3:                                              ; Offset_0x040100 
                incbin  'data\ghz\flower_3.dat'
Art_GHz_Flower_4:                                              ; Offset_0x040180 
Art_HTz_Flower_4:                                              ; Offset_0x040180  
                incbin  'data\ghz\flower_4.dat' 
Art_GHz_Dyn_Wall:                                              ; Offset_0x040200 
Art_HTz_Dyn_Wall:                                              ; Offset_0x040200 
                incbin  'data\ghz\dyn_wall.dat'
Art_Hill_Top_Background:                                       ; Offset_0x040300
                incbin  'data\htz\backgnd.nem'  
Art_Hill_Top_Background_Uncomp:                                ; Offset_0x040C2A 
                incbin  'data\htz\backgnd.dat' 
Art_Mz_Spinnig_Cylinder:                                       ; Offset_0x04102A 
                incbin  'data\mz\spin_cyl.dat'
Art_Mz_Lava:                                                   ; Offset_0x04202A
                incbin  'data\mz\lava.dat'
Art_Mz_Pistons:                                                ; Offset_0x04262A
                incbin  'data\mz\pistons.dat'
Art_HPz_Background: ; Não usado ( Left over )                  ; Offset_0x04286A
                incbin  'data\hpz\backgnd.dat'  
Art_HPz_Orbs:                                                  ; Offset_0x042C6A
                incbin  'data\hpz\orbs.dat'
Art_OOz_Red_Balls:                                             ; Offset_0x042F6A
                incbin  'data\ooz\red_ball.dat'
Art_OOz_Rotating_Square_1:                                     ; Offset_0x0430EA
                incbin  'data\ooz\r_squar1.dat'  
Art_OOz_Rotating_Square_2:                                     ; Offset_0x0432EA
                incbin  'data\ooz\r_squar2.dat'  
Art_OOz_Oil_1:                                                 ; Offset_0x0434EA
                incbin  'data\ooz\oil_1.dat' 
Art_OOz_Oil_2:                                                 ; Offset_0x043CEA
                incbin  'data\ooz\oil_2.dat' 
Art_CNz_Symbols:                                               ; Offset_0x0444EA
                incbin  'data\cnz\symbols.dat' 
Art_CNz_Slot_Machine_Checks:                                   ; Offset_0x045EEA
                incbin  'data\cnz\sm_check.dat'                   
Art_CPz_Dyn_Background:                                        ; Offset_0x0464EA
Art_DEz_Dyn_Background:                                        ; Offset_0x0464EA  
                incbin  'data\cpz\backgnd.dat'                
Art_NGHz_Water_Falls_1:                                        ; Offset_0x046CEA
                incbin  'data\nghz\water_f1.dat'
Art_NGHz_Water_Falls_2:                                        ; Offset_0x046DEA
                incbin  'data\nghz\water_f2.dat' 
Art_NGHz_Water_Falls_3:                                        ; Offset_0x046EEA
                incbin  'data\nghz\water_f3.dat'
AngleMap:                                                      ; Offset_0x046FEA
                incbin  'data\all\anglemap.dat'
Colision_Array_1:                                              ; Offset_0x0470EA
                incbin  'data\all\c_array1.dat'
Colision_Array_2:                                              ; Offset_0x0480EA
                incbin  'data\all\c_array2.dat'                                
;=============================================================================== 
; Dados de colisão das fases
; ->>>
;===============================================================================    
Green_Hill_Colision_Data_1:                                    ; Offset_0x0490EA                  
Hill_Top_Colision_Data_1:                                      ; Offset_0x0490EA
                incbin  'data\ghz\ghz_col1.dat'
Green_Hill_Colision_Data_2:                                    ; Offset_0x0493EA
Hill_Top_Colision_Data_2:                                      ; Offset_0x0493EA
                incbin  'data\ghz\ghz_col2.dat'
Wood_Colision_Data_1:                                          ; Offset_0x0496EA
Wood_Colision_Data_2:                                          ; Offset_0x0496EA   
Metropolis_Colision_Data_1:                                    ; Offset_0x0496EA  
Metropolis_Colision_Data_2:                                    ; Offset_0x0496EA
                incbin  'data\mz\mz_col.dat' 
Hidden_Palace_Colision_Data_1:                                 ; Offset_0x0499EA
Hidden_Palace_Colision_Data_2:                                 ; Offset_0x0499EA
                incbin  'data\hpz\hpz_col.dat' 
Oil_Ocean_Colision_Data_1:                                     ; Offset_0x049CEA
Oil_Ocean_Colision_Data_2:                                     ; Offset_0x049CEA
                incbin  'data\ooz\ooz_col.dat'
Dust_Hill_Colision_Data_1:                                     ; Offset_0x049FEA
Dust_Hill_Colision_Data_2:                                     ; Offset_0x049FEA
                incbin  'data\dhz\dhz_col.dat'
Casino_Night_Colision_Data_1:                                  ; Offset_0x04A2EA
                incbin  'data\cnz\cnz_col1.dat'
Casino_Night_Colision_Data_2:                                  ; Offset_0x04A5EA
                incbin  'data\cnz\cnz_col2.dat'
Chemical_Plant_Colision_Data_1:                                ; Offset_0x04A8EA
Death_Egg_Colision_Data_1:                                     ; Offset_0x04A8EA
                incbin  'data\cpz\cpz_col1.dat'
Chemical_Plant_Colision_Data_2:                                ; Offset_0x04ABEA
Death_Egg_Colision_Data_2:                                     ; Offset_0x04ABEA
                incbin  'data\cpz\cpz_col2.dat'
Neo_Green_Hill_Colision_Data_1:                                ; Offset_0x04AEEA
                incbin  'data\nghz\nghzcol1.dat'
Neo_Green_Hill_Colision_Data_2:                                ; Offset_0x04B1EA
                incbin  'data\nghz\nghzcol2.dat'
Sky_Fortress_Colision_Data_1:                                  ; Offset_0x04B4EA
Sky_Chase_Colision_Data_1:                                     ; Offset_0x04B4EA
                incbin  'data\sfz\sfz_col1.dat'
Sky_Fortress_Colision_Data_2:                                  ; Offset_0x04B7EA
Sky_Chase_Colision_Data_2:                                     ; Offset_0x04B7EA 
                incbin  'data\sfz\sfz_col2.dat'   
Lvl1_Colision_Data_1:                                          ; Offset_0x04BAEA
Lvl1_Colision_Data_2:                                          ; Offset_0x04BAEA  
Lvl3_Colision_Data_1:                                          ; Offset_0x04BAEA
Lvl9_Colision_Data_1:                                          ; Offset_0x04BAEA
Lvl3_Colision_Data_2:                                          ; Offset_0x04BAEA
Lvl9_Colision_Data_2:                                          ; Offset_0x04BAEA    
;=============================================================================== 
; Dados de colisão das fases
; <<<-
;===============================================================================  

;=============================================================================== 
; Leiaute das fases
; ->>>
;===============================================================================  
Level_Layout:                                                  ; Offset_0x04BAEA 
                dc.w    GHz_Map_Act1-Level_Layout              ; Offset_0x04BB2E
                dc.w    GHz_Map_Act2-Level_Layout              ; Offset_0x04BCEE
                dc.w    Lvl1_Map_Act1-Level_Layout             ; Offset_0x04BB2E
                dc.w    Lvl1_Map_Act2-Level_Layout             ; Offset_0x04BB2E
                dc.w    Wz_Map_Act1-Level_Layout               ; Offset_0x04BB2E
                dc.w    Wz_Map_Act2-Level_Layout               ; Offset_0x04BB2E
                dc.w    Lvl3_Map_Act1-Level_Layout             ; Offset_0x04BB2E
                dc.w    Lvl3_Map_Act2-Level_Layout             ; Offset_0x04BB2E
                dc.w    Mz_Map_Act1-Level_Layout               ; Offset_0x04BECE
                dc.w    Mz_Map_Act2-Level_Layout               ; Offset_0x04C30E
                dc.w    Mz_Map_Act3-Level_Layout               ; Offset_0x04C6EE
                dc.w    Mz_Map_Act4-Level_Layout               ; Offset_0x04C6EE
                dc.w    SFz_Map_Act1-Level_Layout              ; Offset_0x04CB6E
                dc.w    SFz_Map_Act2-Level_Layout              ; Offset_0x04CB6E
                dc.w    HTz_Map_Act1-Level_Layout              ; Offset_0x04CE3E
                dc.w    HTz_Map_Act2-Level_Layout              ; Offset_0x04D0AE
                dc.w    HPz_Map_Act1-Level_Layout              ; Offset_0x04D46E
                dc.w    HPz_Map_Act2-Level_Layout              ; Offset_0x04D46E
                dc.w    Lvl9_Map_Act1-Level_Layout             ; Offset_0x04BB2E
                dc.w    Lvl9_Map_Act2-Level_Layout             ; Offset_0x04BB2E
                dc.w    OOz_Map_Act1-Level_Layout              ; Offset_0x04D7EE
                dc.w    OOz_Map_Act2-Level_Layout              ; Offset_0x04DB6E
                dc.w    DHz_Map_Act1-Level_Layout              ; Offset_0x04DF0E
                dc.w    DHz_Map_Act2-Level_Layout              ; Offset_0x04E10E
                dc.w    CNz_Map_Act1-Level_Layout              ; Offset_0x04E3DE
                dc.w    CNz_Map_Act2-Level_Layout              ; Offset_0x04E7AE  
                dc.w    CPz_Map_Act1-Level_Layout              ; Offset_0x04EB5E
                dc.w    CPz_Map_Act2-Level_Layout              ; Offset_0x04EE6E
                dc.w    DEz_Map_Act1-Level_Layout              ; Offset_0x04F1CE
                dc.w    DEz_Map_Act2-Level_Layout              ; Offset_0x04F1CE
                dc.w    NGHz_Map_Act1-Level_Layout             ; Offset_0x04F27E
                dc.w    NGHz_Map_Act2-Level_Layout             ; Offset_0x04F64E
                dc.w    SCz_Map_Act1-Level_Layout              ; Offset_0x04FA1E
                dc.w    SCz_Map_Act2-Level_Layout              ; Offset_0x04FA1E
;-------------------------------------------------------------------------------
Lvl1_Map_Act1:                                                 ; Offset_0x04BB2E
Lvl1_Map_Act2:                                                 ; Offset_0x04BB2E
Wz_Map_Act1:                                                   ; Offset_0x04BB2E
Wz_Map_Act2:                                                   ; Offset_0x04BB2E
Lvl3_Map_Act1:                                                 ; Offset_0x04BB2E
Lvl3_Map_Act2:                                                 ; Offset_0x04BB2E
Lvl9_Map_Act1:                                                 ; Offset_0x04BB2E
Lvl9_Map_Act2:                                                 ; Offset_0x04BB2E               
GHz_Map_Act1:                                                  ; Offset_0x04BB2E
                incbin  'data\ghz\ghz_map1.kos'
                dc.w    $0000, $0000, $0000, $0000, $0000, $0000, $0000
GHz_Map_Act2:                                                  ; Offset_0x04BCEE
                incbin  'data\ghz\ghz_map2.kos'
                dc.w    $0000, $0000, $0000, $0000, $0000
Mz_Map_Act1:                                                   ; Offset_0x04BECE
                incbin  'data\mz\mz_map1.kos'
                dc.w    $0000, $0000, $0000, $0000, $0000, $0000, $0000
Mz_Map_Act2:                                                   ; Offset_0x04C30E
                incbin  'data\mz\mz_map2.kos'
                dc.w    $0000, $0000, $0000, $0000, $0000
Mz_Map_Act3:                                                   ; Offset_0x04C6EE
Mz_Map_Act4:                                                   ; Offset_0x04C6EE
                incbin  'data\mz\mz_map3.kos'
                dc.w    $0000, $0000, $0000, $0000, $0000, $0000, $0000
SFz_Map_Act1:                                                  ; Offset_0x04CB6E
SFz_Map_Act2:                                                  ; Offset_0x04CB6E
                incbin  'data\sfz\sfz_map.kos'
HTz_Map_Act1:                                                  ; Offset_0x04CE3E
                incbin  'data\htz\htz_map1.kos'
                dc.w    $0000, $0000, $0000
HTz_Map_Act2:                                                  ; Offset_0x04D0AE
                incbin  'data\htz\htz_map2.kos'
HPz_Map_Act1:                                                  ; Offset_0x04D46E
HPz_Map_Act2:                                                  ; Offset_0x04D46E
                incbin  'data\ooz\ooz_map1.kos'
                dc.w    $0000
OOz_Map_Act1:                                                  ; Offset_0x04D7EE
                incbin  'data\ooz\ooz_map1.kos'
                dc.w    $0000
OOz_Map_Act2:                                                  ; Offset_0x04DB6E
                incbin  'data\ooz\ooz_map2.kos'
                dc.w    $0000, $0000, $0000, $0000, $0000, $0000, $0000
DHz_Map_Act1:                                                  ; Offset_0x04DF0E
                incbin  'data\dhz\dhz_map1.kos'
                dc.w    $0000, $0000, $0000, $0000, $0000
DHz_Map_Act2:                                                  ; Offset_0x04E10E
                incbin  'data\dhz\dhz_map2.kos'
                dc.w    $0000, $0000, $0000, $0000, $0000, $0000, $0000
CNz_Map_Act1:                                                  ; Offset_0x04E3DE
                incbin  'data\cnz\cnz_map1.kos'
                dc.w    $0000, $0000, $0000, $0000, $0000, $0000, $0000
CNz_Map_Act2:                                                  ; Offset_0x04E7AE
                incbin  'data\cnz\cnz_map2.kos'
                dc.w    $0000, $0000, $0000, $0000, $0000, $0000
CPz_Map_Act1:                                                  ; Offset_0x04EB5E
                incbin  'data\cpz\cpz_map1.kos'
                dc.w    $0000, $0000
CPz_Map_Act2:                                                  ; Offset_0x04EE6E
                incbin  'data\cpz\cpz_map2.kos'
                dc.w    $0000, $0000, $0000, $0000, $0000, $0000, $0000
DEz_Map_Act1:                                                  ; Offset_0x04F1CE
DEz_Map_Act2:                                                  ; Offset_0x04F1CE
                incbin  'data\dez\dez_map.kos'
                dc.w    $0000
NGHz_Map_Act1:                                                 ; Offset_0x04F27E
                incbin  'data\nghz\nghzmap1.kos'
                dc.w    $0000, $0000, $0000
NGHz_Map_Act2:                                                 ; Offset_0x04F64E
                incbin  'data\nghz\nghzmap2.kos'
                dc.w    $0000, $0000
SCz_Map_Act1:                                                  ; Offset_0x04FA1E
SCz_Map_Act2:                                                  ; Offset_0x04FA1E
                incbin  'data\scz\scz_map.kos'
;=============================================================================== 
; Leiaute das fases
; <<<-
;===============================================================================
                incbin  'data\all\unk_data.dat'

Art_Sonic:                                                     ; Offset_0x050000
                incbin  'data\art\sonic.dat'  
Art_Miles:                                                     ; Offset_0x064320
                incbin  'data\art\miles.dat'  
;-------------------------------------------------------------------------------
Sonic_Mappings:                                                ; Offset_0x06FBE0    
                dc.w    Offset_0x06FD8C-Sonic_Mappings
                dc.w    Offset_0x06FD8E-Sonic_Mappings
                dc.w    Offset_0x06FDB0-Sonic_Mappings
                dc.w    Offset_0x06FDC2-Sonic_Mappings
                dc.w    Offset_0x06FDE4-Sonic_Mappings
                dc.w    Offset_0x06FE06-Sonic_Mappings
                dc.w    Offset_0x06FE30-Sonic_Mappings
                dc.w    Offset_0x06FE4A-Sonic_Mappings
                dc.w    Offset_0x06FE5C-Sonic_Mappings
                dc.w    Offset_0x06FE6E-Sonic_Mappings
                dc.w    Offset_0x06FE80-Sonic_Mappings
                dc.w    Offset_0x06FE92-Sonic_Mappings
                dc.w    Offset_0x06FEB4-Sonic_Mappings
                dc.w    Offset_0x06FED6-Sonic_Mappings
                dc.w    Offset_0x06FEF0-Sonic_Mappings
                dc.w    Offset_0x06FF12-Sonic_Mappings
                dc.w    Offset_0x06FF2C-Sonic_Mappings
                dc.w    Offset_0x06FF3E-Sonic_Mappings
                dc.w    Offset_0x06FF58-Sonic_Mappings
                dc.w    Offset_0x06FF7A-Sonic_Mappings
                dc.w    Offset_0x06FF94-Sonic_Mappings
                dc.w    Offset_0x06FFA6-Sonic_Mappings
                dc.w    Offset_0x06FFC8-Sonic_Mappings
                dc.w    Offset_0x06FFF2-Sonic_Mappings
                dc.w    Offset_0x070014-Sonic_Mappings
                dc.w    Offset_0x070036-Sonic_Mappings
                dc.w    Offset_0x070060-Sonic_Mappings
                dc.w    Offset_0x07008A-Sonic_Mappings
                dc.w    Offset_0x0700AC-Sonic_Mappings
                dc.w    Offset_0x0700D6-Sonic_Mappings
                dc.w    Offset_0x0700F0-Sonic_Mappings
                dc.w    Offset_0x07010A-Sonic_Mappings
                dc.w    Offset_0x070124-Sonic_Mappings
                dc.w    Offset_0x070136-Sonic_Mappings
                dc.w    Offset_0x070150-Sonic_Mappings
                dc.w    Offset_0x07016A-Sonic_Mappings
                dc.w    Offset_0x070184-Sonic_Mappings
                dc.w    Offset_0x070196-Sonic_Mappings
                dc.w    Offset_0x0701B8-Sonic_Mappings
                dc.w    Offset_0x0701E2-Sonic_Mappings
                dc.w    Offset_0x070204-Sonic_Mappings
                dc.w    Offset_0x070226-Sonic_Mappings
                dc.w    Offset_0x070248-Sonic_Mappings
                dc.w    Offset_0x070272-Sonic_Mappings
                dc.w    Offset_0x070294-Sonic_Mappings
                dc.w    Offset_0x0702B6-Sonic_Mappings
                dc.w    Offset_0x0702C8-Sonic_Mappings
                dc.w    Offset_0x0702DA-Sonic_Mappings
                dc.w    Offset_0x0702EC-Sonic_Mappings
                dc.w    Offset_0x0702FE-Sonic_Mappings
                dc.w    Offset_0x070320-Sonic_Mappings
                dc.w    Offset_0x07033A-Sonic_Mappings
                dc.w    Offset_0x07035C-Sonic_Mappings
                dc.w    Offset_0x070376-Sonic_Mappings
                dc.w    Offset_0x070388-Sonic_Mappings
                dc.w    Offset_0x07039A-Sonic_Mappings
                dc.w    Offset_0x0703AC-Sonic_Mappings
                dc.w    Offset_0x0703BE-Sonic_Mappings
                dc.w    Offset_0x0703D8-Sonic_Mappings
                dc.w    Offset_0x0703EA-Sonic_Mappings
                dc.w    Offset_0x070404-Sonic_Mappings
                dc.w    Offset_0x070416-Sonic_Mappings
                dc.w    Offset_0x070420-Sonic_Mappings
                dc.w    Offset_0x07042A-Sonic_Mappings
                dc.w    Offset_0x070434-Sonic_Mappings
                dc.w    Offset_0x07043E-Sonic_Mappings
                dc.w    Offset_0x070448-Sonic_Mappings
                dc.w    Offset_0x070452-Sonic_Mappings
                dc.w    Offset_0x07045C-Sonic_Mappings
                dc.w    Offset_0x070466-Sonic_Mappings
                dc.w    Offset_0x070470-Sonic_Mappings
                dc.w    Offset_0x07047A-Sonic_Mappings
                dc.w    Offset_0x070484-Sonic_Mappings
                dc.w    Offset_0x07049E-Sonic_Mappings
                dc.w    Offset_0x0704B8-Sonic_Mappings
                dc.w    Offset_0x0704D2-Sonic_Mappings
                dc.w    Offset_0x0704EC-Sonic_Mappings
                dc.w    Offset_0x0704F6-Sonic_Mappings
                dc.w    Offset_0x070500-Sonic_Mappings
                dc.w    Offset_0x070512-Sonic_Mappings
                dc.w    Offset_0x070524-Sonic_Mappings
                dc.w    Offset_0x07053E-Sonic_Mappings
                dc.w    Offset_0x070558-Sonic_Mappings
                dc.w    Offset_0x07056A-Sonic_Mappings
                dc.w    Offset_0x07057C-Sonic_Mappings
                dc.w    Offset_0x070596-Sonic_Mappings
                dc.w    Offset_0x0705B8-Sonic_Mappings
                dc.w    Offset_0x0705D2-Sonic_Mappings
                dc.w    Offset_0x0705EC-Sonic_Mappings
                dc.w    Offset_0x070606-Sonic_Mappings
                dc.w    Offset_0x070620-Sonic_Mappings
                dc.w    Offset_0x07063A-Sonic_Mappings
                dc.w    Offset_0x07064C-Sonic_Mappings
                dc.w    Offset_0x07066E-Sonic_Mappings
                dc.w    Offset_0x070690-Sonic_Mappings
                dc.w    Offset_0x0706AA-Sonic_Mappings
                dc.w    Offset_0x0706C4-Sonic_Mappings
                dc.w    Offset_0x0706DE-Sonic_Mappings
                dc.w    Offset_0x0706F0-Sonic_Mappings
                dc.w    Offset_0x0706FA-Sonic_Mappings
                dc.w    Offset_0x07070C-Sonic_Mappings
                dc.w    Offset_0x070726-Sonic_Mappings
                dc.w    Offset_0x070740-Sonic_Mappings
                dc.w    Offset_0x07075A-Sonic_Mappings
                dc.w    Offset_0x07076C-Sonic_Mappings
                dc.w    Offset_0x07077E-Sonic_Mappings
                dc.w    Offset_0x070798-Sonic_Mappings
                dc.w    Offset_0x0707AA-Sonic_Mappings
                dc.w    Offset_0x0707C4-Sonic_Mappings
                dc.w    Offset_0x0707DE-Sonic_Mappings
                dc.w    Offset_0x0707E8-Sonic_Mappings
                dc.w    Offset_0x070802-Sonic_Mappings
                dc.w    Offset_0x07081C-Sonic_Mappings
                dc.w    Offset_0x070846-Sonic_Mappings
                dc.w    Offset_0x070870-Sonic_Mappings
                dc.w    Offset_0x070882-Sonic_Mappings
                dc.w    Offset_0x070894-Sonic_Mappings
                dc.w    Offset_0x0708A6-Sonic_Mappings
                dc.w    Offset_0x0708C0-Sonic_Mappings
                dc.w    Offset_0x0708E2-Sonic_Mappings
                dc.w    Offset_0x0708FC-Sonic_Mappings
                dc.w    Offset_0x07090E-Sonic_Mappings
                dc.w    Offset_0x070928-Sonic_Mappings
                dc.w    Offset_0x07094A-Sonic_Mappings
                dc.w    Offset_0x070964-Sonic_Mappings
                dc.w    Offset_0x070976-Sonic_Mappings
                dc.w    Offset_0x070998-Sonic_Mappings
                dc.w    Offset_0x0709C2-Sonic_Mappings
                dc.w    Offset_0x0709EC-Sonic_Mappings
                dc.w    Offset_0x070A16-Sonic_Mappings
                dc.w    Offset_0x070A48-Sonic_Mappings
                dc.w    Offset_0x070A7A-Sonic_Mappings
                dc.w    Offset_0x070AA4-Sonic_Mappings
                dc.w    Offset_0x070ACE-Sonic_Mappings
                dc.w    Offset_0x070AE8-Sonic_Mappings
                dc.w    Offset_0x070B02-Sonic_Mappings
                dc.w    Offset_0x070B1C-Sonic_Mappings
                dc.w    Offset_0x070B2E-Sonic_Mappings
                dc.w    Offset_0x070B48-Sonic_Mappings
                dc.w    Offset_0x070B62-Sonic_Mappings
                dc.w    Offset_0x070B7C-Sonic_Mappings
                dc.w    Offset_0x070B8E-Sonic_Mappings
                dc.w    Offset_0x070BB0-Sonic_Mappings
                dc.w    Offset_0x070BDA-Sonic_Mappings
                dc.w    Offset_0x070BFC-Sonic_Mappings
                dc.w    Offset_0x070C1E-Sonic_Mappings
                dc.w    Offset_0x070C40-Sonic_Mappings
                dc.w    Offset_0x070C6A-Sonic_Mappings
                dc.w    Offset_0x070C8C-Sonic_Mappings
                dc.w    Offset_0x070CAE-Sonic_Mappings
                dc.w    Offset_0x070CC8-Sonic_Mappings
                dc.w    Offset_0x070CEA-Sonic_Mappings
                dc.w    Offset_0x070D04-Sonic_Mappings
                dc.w    Offset_0x070D16-Sonic_Mappings
                dc.w    Offset_0x070D30-Sonic_Mappings
                dc.w    Offset_0x070D52-Sonic_Mappings
                dc.w    Offset_0x070D6C-Sonic_Mappings
                dc.w    Offset_0x070D7E-Sonic_Mappings
                dc.w    Offset_0x070DA8-Sonic_Mappings
                dc.w    Offset_0x070DDA-Sonic_Mappings
                dc.w    Offset_0x070E04-Sonic_Mappings
                dc.w    Offset_0x070E2E-Sonic_Mappings
                dc.w    Offset_0x070E60-Sonic_Mappings
                dc.w    Offset_0x070E92-Sonic_Mappings
                dc.w    Offset_0x070EBC-Sonic_Mappings
                dc.w    Offset_0x070EEE-Sonic_Mappings
                dc.w    Offset_0x070F08-Sonic_Mappings
                dc.w    Offset_0x070F22-Sonic_Mappings
                dc.w    Offset_0x070F3C-Sonic_Mappings
                dc.w    Offset_0x070F4E-Sonic_Mappings
                dc.w    Offset_0x070F68-Sonic_Mappings
                dc.w    Offset_0x070F82-Sonic_Mappings
                dc.w    Offset_0x070F9C-Sonic_Mappings
                dc.w    Offset_0x070FAE-Sonic_Mappings
                dc.w    Offset_0x070FD0-Sonic_Mappings
                dc.w    Offset_0x070FFA-Sonic_Mappings
                dc.w    Offset_0x071024-Sonic_Mappings
                dc.w    Offset_0x071046-Sonic_Mappings
                dc.w    Offset_0x071068-Sonic_Mappings
                dc.w    Offset_0x071092-Sonic_Mappings
                dc.w    Offset_0x0710BC-Sonic_Mappings
                dc.w    Offset_0x0710E6-Sonic_Mappings
                dc.w    Offset_0x071108-Sonic_Mappings
                dc.w    Offset_0x07112A-Sonic_Mappings
                dc.w    Offset_0x07114C-Sonic_Mappings
                dc.w    Offset_0x071176-Sonic_Mappings
                dc.w    Offset_0x071198-Sonic_Mappings
                dc.w    Offset_0x0711BA-Sonic_Mappings
                dc.w    Offset_0x0711DC-Sonic_Mappings
                dc.w    Offset_0x071206-Sonic_Mappings
                dc.w    Offset_0x071228-Sonic_Mappings
                dc.w    Offset_0x07124A-Sonic_Mappings
                dc.w    Offset_0x07126C-Sonic_Mappings
                dc.w    Offset_0x07128E-Sonic_Mappings
                dc.w    Offset_0x0712A0-Sonic_Mappings
                dc.w    Offset_0x0712BA-Sonic_Mappings
                dc.w    Offset_0x0712D4-Sonic_Mappings
                dc.w    Offset_0x0712EE-Sonic_Mappings
                dc.w    Offset_0x071308-Sonic_Mappings
                dc.w    Offset_0x071322-Sonic_Mappings
                dc.w    Offset_0x07133C-Sonic_Mappings
                dc.w    Offset_0x071356-Sonic_Mappings
                dc.w    Offset_0x071370-Sonic_Mappings
                dc.w    Offset_0x07138A-Sonic_Mappings
                dc.w    Offset_0x0713B4-Sonic_Mappings
                dc.w    Offset_0x0713D6-Sonic_Mappings
                dc.w    Offset_0x0713F8-Sonic_Mappings
                dc.w    Offset_0x07141A-Sonic_Mappings
                dc.w    Offset_0x071434-Sonic_Mappings
                dc.w    Offset_0x07144E-Sonic_Mappings
                dc.w    Offset_0x071468-Sonic_Mappings
                dc.w    Offset_0x07148A-Sonic_Mappings
                dc.w    Offset_0x0714AC-Sonic_Mappings
                dc.w    Offset_0x0714CE-Sonic_Mappings
Offset_0x06FD8C:
                dc.w    $0000
Offset_0x06FD8E:
                dc.w    $0004
                dc.l    $E4050000, $0000FFF8, $EC030004, $0002FFF0
                dc.l    $F4090008, $0004FFF8, $0409000E, $0007FFF8
Offset_0x06FDB0:
                dc.w    $0002
                dc.l    $EC0B0000, $0000FFF0, $0C09000C, $0006FFF8
Offset_0x06FDC2:
                dc.w    $0004
                dc.l    $EC030000, $0000FFF0, $EC050004, $0002FFF8
                dc.l    $FC050008, $0004FFF8, $0C09000C, $0006FFF8
Offset_0x06FDE4:
                dc.w    $0004
                dc.l    $EC030000, $0000FFF0, $EC050004, $0002FFF8
                dc.l    $FC050008, $0004FFF8, $0C09000C, $0006FFF8
Offset_0x06FE06:
                dc.w    $0005
                dc.l    $EC030000, $0000FFF0, $EC050004, $0002FFF8
                dc.l    $FC050008, $0004FFF8, $0C01000C, $0006FFF8
                dc.l    $0C05000E, $00070000
Offset_0x06FE30:
                dc.w    $0003
                dc.l    $EC030000, $0000FFF0, $EC070004, $0002FFF8
                dc.l    $0C09000C, $0006FFF8
Offset_0x06FE4A:
                dc.w    $0002
                dc.l    $F40B0000, $0000FFF0, $0401000C, $00060008
Offset_0x06FE5C:
                dc.w    $0002
                dc.l    $F40B0000, $0000FFE8, $0405000C, $00060000
Offset_0x06FE6E:
                dc.w    $0002
                dc.l    $F40B0000, $0000FFE8, $0405000C, $00060000
Offset_0x06FE80:
                dc.w    $0002
                dc.l    $E40B0000, $0000FFF0, $040D000C, $0006FFF0
Offset_0x06FE92:
                dc.w    $0004
                dc.l    $E4050000, $0000FFF8, $EC030004, $0002FFF0
                dc.l    $F4090008, $0004FFF8, $0409000E, $0007FFF8
Offset_0x06FEB4:
                dc.w    $0004
                dc.l    $EC030000, $0000FFF0, $E4050004, $0002FFF8
                dc.l    $F4050008, $0004FFF8, $0409000C, $0006FFF8
Offset_0x06FED6:
                dc.w    $0003
                dc.l    $EB0D0000, $0000FFEE, $03010008, $0004FFEC
                dc.l    $FB0F000A, $0005FFF4
Offset_0x06FEF0:
                dc.w    $0004
                dc.l    $EC0D0000, $0000FFEE, $04010008, $0004FFEC
                dc.l    $FC0B000A, $0005FFF4, $04010016, $000B000C
Offset_0x06FF12:
                dc.w    $0003
                dc.l    $ED0D0000, $0000FFED, $FD090008, $0004FFF4
                dc.l    $0D05000E, $0007FFF7
Offset_0x06FF2C:
                dc.w    $0002
                dc.l    $EC090000, $0000FFF4, $FC0F0006, $0003FFEE
Offset_0x06FF3E:
                dc.w    $0003
                dc.l    $EB090000, $0000FFF4, $FB0F0006, $0003FFEE
                dc.l    $FB010016, $000B000E
Offset_0x06FF58:
                dc.w    $0004
                dc.l    $EC090000, $0000FFF4, $04010006, $0003FFEC
                dc.l    $FC0B0008, $0004FFF4, $04010014, $000A000C
Offset_0x06FF7A:
                dc.w    $0003
                dc.l    $ED0D0000, $0000FFED, $FD090008, $0004FFF4
                dc.l    $0D05000E, $0007FFF7
Offset_0x06FF94:
                dc.w    $0002
                dc.l    $EC0D0000, $0000FFEE, $FC0B0008, $0004FFF3
Offset_0x06FFA6:
                dc.w    $0004
                dc.l    $EB090000, $0000FFEA, $FB090006, $0003FFEA
                dc.l    $F305000C, $00060002, $0B010010, $0008FFFA
Offset_0x06FFC8:
                dc.w    $0005
                dc.l    $EC090000, $0000FFEB, $EC010006, $00030003
                dc.l    $FC0D0008, $0004FFEB, $FC050010, $0008000B
                dc.l    $0C010014, $000AFFFB
Offset_0x06FFF2:
                dc.w    $0004
                dc.l    $ED070000, $0000FFEC, $ED030008, $0004FFFC
                dc.l    $F501000C, $00060004, $0505000E, $00070004
Offset_0x070014:
                dc.w    $0004
                dc.l    $EC090000, $0000FFEB, $EC010006, $00030003
                dc.l    $FC050008, $0004FFEB, $FC0B000C, $0006FFFB
Offset_0x070036:
                dc.w    $0005
                dc.l    $EB090000, $0000FFEA, $EB010006, $00030002
                dc.l    $FB0D0008, $0004FFEA, $F3010010, $0008000A
                dc.l    $0B050012, $0009FFF2
Offset_0x070060:
                dc.w    $0005
                dc.l    $EC090000, $0000FFEB, $EC010006, $00030003
                dc.l    $FC0D0008, $0004FFEB, $FA050010, $0008000B
                dc.l    $0C010014, $000AFFFB
Offset_0x07008A:
                dc.w    $0004
                dc.l    $ED070000, $0000FFEC, $ED030008, $0004FFFC
                dc.l    $F501000C, $00060004, $0505000E, $00070004
Offset_0x0700AC:
                dc.w    $0005
                dc.l    $EC090000, $0000FFEB, $FC090006, $0003FFEB
                dc.l    $F401000C, $00060003, $0C01000E, $0007FFFB
                dc.l    $04050010, $00080003
Offset_0x0700D6:
                dc.w    $0003
                dc.l    $F2070000, $0000FFEB, $EC0B0008, $0004FFFB
                dc.l    $0C050014, $000A0003
Offset_0x0700F0:
                dc.w    $0003
                dc.l    $F2070000, $0000FFEC, $EC0B0008, $0004FFFC
                dc.l    $0C050014, $000A0004
Offset_0x07010A:
                dc.w    $0003
                dc.l    $F3070000, $0000FFED, $F4030008, $0004FFFD
                dc.l    $F905000C, $00060005
Offset_0x070124:
                dc.w    $0002
                dc.l    $F4070000, $0000FFEC, $F20B0008, $0004FFFC
Offset_0x070136:
                dc.w    $0003
                dc.l    $F4070000, $0000FFEB, $E3050008, $0004FFFB
                dc.l    $F30B000C, $0006FFFB
Offset_0x070150:
                dc.w    $0003
                dc.l    $F4070000, $0000FFEC, $EC0B0008, $0004FFFC
                dc.l    $0C050014, $000A0004
Offset_0x07016A:
                dc.w    $0003
                dc.l    $F3070000, $0000FFED, $F4030008, $0004FFFD
                dc.l    $F905000C, $00060005
Offset_0x070184:
                dc.w    $0002
                dc.l    $F2070000, $0000FFEC, $F40B0008, $0004FFFC
Offset_0x070196:
                dc.w    $0004
                dc.l    $EE050000, $0000FFF3, $FE070004, $0002FFEB
                dc.l    $FE0D000C, $0006FFFB, $0E010014, $000AFFFB
Offset_0x0701B8:
                dc.w    $0005
                dc.l    $DD050000, $0000FFFC, $ED090004, $0002FFF4
                dc.l    $FD07000A, $0005FFEC, $FD0D0012, $0009FFFC
                dc.l    $0D01001A, $000DFFFC
Offset_0x0701E2:
                dc.w    $0004
                dc.l    $EC0D0000, $0000FFF5, $FC070008, $0004FFED
                dc.l    $FC050010, $0008FFFD, $0C010014, $000AFFFD
Offset_0x070204:
                dc.w    $0004
                dc.l    $ED0D0000, $0000FFF4, $FD070008, $0004FFEC
                dc.l    $FD090010, $0008FFFC, $0D010016, $000BFFFC
Offset_0x070226:
                dc.w    $0004
                dc.l    $EE090000, $0000FFF3, $FE070006, $0003FFEB
                dc.l    $FE0D000E, $0007FFFB, $0E010016, $000BFFFB
Offset_0x070248:
                dc.w    $0005
                dc.l    $DD050000, $0000FFFA, $ED090004, $0002FFF4
                dc.l    $FD07000A, $0005FFEC, $FD0D0012, $0009FFFC
                dc.l    $0D01001A, $000DFFFC
Offset_0x070272:
                dc.w    $0004
                dc.l    $EC0D0000, $0000FFF5, $FC070008, $0004FFED
                dc.l    $FC050010, $0008FFFD, $0C010014, $000AFFFD
Offset_0x070294:
                dc.w    $0004
                dc.l    $ED0D0000, $0000FFF4, $FD070008, $0004FFEC
                dc.l    $FD090010, $0008FFFC, $0D010016, $000BFFFC
Offset_0x0702B6:
                dc.w    $0002
                dc.l    $EE090000, $0000FFF8, $FE0F0006, $0003FFF0
Offset_0x0702C8:
                dc.w    $0002
                dc.l    $EE090000, $0000FFF8, $FE0F0006, $0003FFF0
Offset_0x0702DA:
                dc.w    $0002
                dc.l    $EE090000, $0000FFF8, $FE0F0006, $0003FFF0
Offset_0x0702EC:
                dc.w    $0002
                dc.l    $EE090000, $0000FFF8, $FE0F0006, $0003FFF0
Offset_0x0702FE:
                dc.w    $0004
                dc.l    $EC090000, $0000FFED, $EC010006, $00030005
                dc.l    $FC0D0008, $0004FFF4, $0C090010, $0008FFFA
Offset_0x070320:
                dc.w    $0003
                dc.l    $EC0D0000, $0000FFED, $FC0D0008, $0004FFF5
                dc.l    $0C090010, $0008FFF8
Offset_0x07033A:
                dc.w    $0004
                dc.l    $EC090000, $0000FFED, $EC010006, $00030005
                dc.l    $FC0D0008, $0004FFF4, $0C090010, $0008FFFD
Offset_0x07035C:
                dc.w    $0003
                dc.l    $EC0D0000, $0000FFED, $FC0D0008, $0004FFF5
                dc.l    $0C090010, $0008FFF8
Offset_0x070376:
                dc.w    $0002
                dc.l    $F0070000, $0000FFEE, $F00B0008, $0004FFFE
Offset_0x070388:
                dc.w    $0002
                dc.l    $F0070000, $0000FFEE, $F00B0008, $0004FFFE
Offset_0x07039A:
                dc.w    $0002
                dc.l    $F0070000, $0000FFEE, $F00B0008, $0004FFFE
Offset_0x0703AC:
                dc.w    $0002
                dc.l    $F0070000, $0000FFEE, $F00B0008, $0004FFFE
Offset_0x0703BE:
                dc.w    $0003
                dc.l    $E9010000, $0000FFF4, $F9070002, $0001FFEC
                dc.l    $EC0B000A, $0005FFFC
Offset_0x0703D8:
                dc.w    $0002
                dc.l    $F3070000, $0000FFEC, $EB0B0008, $0004FFFC
Offset_0x0703EA:
                dc.w    $0003
                dc.l    $E9010000, $0000FFF4, $F9070002, $0001FFEC
                dc.l    $EC0B000A, $0005FFFC
Offset_0x070404:
                dc.w    $0002
                dc.l    $F3070000, $0000FFEC, $EB0B0008, $0004FFFC
Offset_0x070416:
                dc.w    $0001
                dc.l    $F00F0000, $0000FFF0
Offset_0x070420:
                dc.w    $0001
                dc.l    $F00F0000, $0000FFF0
Offset_0x07042A:
                dc.w    $0001
                dc.l    $F00F0000, $0000FFF0
Offset_0x070434:
                dc.w    $0001
                dc.l    $F00F0000, $0000FFF0
Offset_0x07043E:
                dc.w    $0001
                dc.l    $F00F0000, $0000FFF0
Offset_0x070448:
                dc.w    $0001
                dc.l    $F80F0000, $0000FFF4
Offset_0x070452:
                dc.w    $0001
                dc.l    $F80F0000, $0000FFF4
Offset_0x07045C:
                dc.w    $0001
                dc.l    $F80F0000, $0000FFF4
Offset_0x070466:
                dc.w    $0001
                dc.l    $F80F0000, $0000FFF4
Offset_0x070470:
                dc.w    $0001
                dc.l    $F80F0000, $0000FFF4
Offset_0x07047A:
                dc.w    $0001
                dc.l    $F80F0000, $0000FFF4
Offset_0x070484:
                dc.w    $0003
                dc.l    $E5090000, $0000FFF3, $F5090006, $0003FFF3
                dc.l    $050D000C, $0006FFEB
Offset_0x07049E:
                dc.w    $0003
                dc.l    $E4090000, $0000FFF3, $F4090006, $0003FFF3
                dc.l    $0409000C, $0006FFF3
Offset_0x0704B8:
                dc.w    $0003
                dc.l    $E5090000, $0000FFF3, $F5090006, $0003FFF3
                dc.l    $050D000C, $0006FFEB
Offset_0x0704D2:
                dc.w    $0003
                dc.l    $E5090000, $0000FFF3, $F5090006, $0003FFF3
                dc.l    $0509000C, $0006FFF3
Offset_0x0704EC:
                dc.w    $0001
                dc.l    $F40B0000, $0000FFF6
Offset_0x0704F6:
                dc.w    $0001
                dc.l    $F40F0000, $0000FFF2
Offset_0x070500:
                dc.w    $0002
                dc.l    $F8010000, $0000FFEC, $F00F0002, $0001FFF4
Offset_0x070512:
                dc.w    $0002
                dc.l    $F0030000, $0000FFEC, $F00F0004, $0002FFF4
Offset_0x070524:
                dc.w    $0003
                dc.l    $E80F0000, $0000FFE8, $E8010010, $00080008
                dc.l    $F8050012, $00090008
Offset_0x07053E:
                dc.w    $0003
                dc.l    $E80F0000, $0000FFE8, $E8010010, $00080008
                dc.l    $F8050012, $00090008
Offset_0x070558:
                dc.w    $0002
                dc.l    $E80B0000, $0000FFF4, $0809000C, $0006FFF4
Offset_0x07056A:
                dc.w    $0002
                dc.l    $E80B0000, $0000FFF4, $0809000C, $0006FFF4
Offset_0x07057C:
                dc.w    $0003
                dc.l    $FC050000, $0000FFEC, $F40B0004, $0002FFFC
                dc.l    $F4010010, $00080014
Offset_0x070596:
                dc.w    $0004
                dc.l    $F4010000, $0000FFE8, $F4070002, $0001FFF0
                dc.l    $F4070802, $08010000, $F4010800, $08000010
Offset_0x0705B8:
                dc.w    $0003
                dc.l    $FC050800, $08000004, $F40B0804, $0802FFEC
                dc.l    $F4010810, $0808FFE4
Offset_0x0705D2:
                dc.w    $0003
                dc.l    $F4010000, $0000FFE4, $F40B0002, $0001FFEC
                dc.l    $FC01000E, $00070004
Offset_0x0705EC:
                dc.w    $0003
                dc.l    $F4010800, $08000014, $F40B0802, $0801FFFC
                dc.l    $FC01080E, $0807FFF4
Offset_0x070606:
                dc.w    $0003
                dc.l    $FC050000, $0000FFEC, $F40B0004, $0002FFFC
                dc.l    $F4010010, $00080014
Offset_0x070620:
                dc.w    $0003
                dc.l    $E4090000, $0000FFF4, $F40F0006, $0003FFEC
                dc.l    $04010016, $000B000C
Offset_0x07063A:
                dc.w    $0002
                dc.l    $E80B0000, $0000FFF4, $0805000C, $0006FFFC
Offset_0x07064C:
                dc.w    $0004
                dc.l    $EA010000, $0000FFE8, $EA0B0002, $0001FFF0
                dc.l    $EA01000E, $00070008, $0A0D0010, $0008FFF0
Offset_0x07066E:
                dc.w    $0004
                dc.l    $EA010000, $0000FFE8, $EA0B0002, $0001FFF0
                dc.l    $EA01000E, $00070008, $0A0D0010, $0008FFF0
Offset_0x070690:
                dc.w    $0003
                dc.l    $EA0D0000, $0000FFE8, $EA010008, $00040008
                dc.l    $FA0B000A, $0005FFF0
Offset_0x0706AA:
                dc.w    $0003
                dc.l    $E4090000, $0000FFF0, $F40B0006, $0003FFF0
                dc.l    $F4010012, $00090008
Offset_0x0706C4:
                dc.w    $0003
                dc.l    $E50B0000, $0000FFF0, $F401000C, $00060008
                dc.l    $0505000E, $0007FFF8
Offset_0x0706DE:
                dc.w    $0002
                dc.l    $EC0B0000, $0000FFF1, $FC01000C, $00060009
Offset_0x0706F0:
                dc.w    $0001
                dc.l    $EE0F0000, $0000FFF0
Offset_0x0706FA:
                dc.w    $0002
                dc.l    $F20B0000, $0000FFF0, $FA01000C, $00060008
Offset_0x07070C:
                dc.w    $0003
                dc.l    $E4010000, $00000000, $F40B0002, $0001FFF0
                dc.l    $F401000E, $00070008
Offset_0x070726:
                dc.w    $0003
                dc.l    $E5090000, $0000FFF0, $F50B0006, $0003FFF0
                dc.l    $ED030012, $00090008
Offset_0x070740:
                dc.w    $0003
                dc.l    $E4050000, $0000FFF8, $F40B0004, $0002FFF0
                dc.l    $F4010010, $00080008
Offset_0x07075A:
                dc.w    $0002
                dc.l    $ED0B0000, $0000FFF0, $F501000C, $00060008
Offset_0x07076C:
                dc.w    $0002
                dc.l    $F4010000, $0000FFF0, $F10B0002, $0001FFF8
Offset_0x07077E:
                dc.w    $0003
                dc.l    $E4050000, $0000FFF1, $F40B0004, $0002FFF0
                dc.l    $F4010010, $00080008
Offset_0x070798:
                dc.w    $0002
                dc.l    $E1050000, $0000FFF0, $F10F0004, $0002FFF0
Offset_0x0707AA:
                dc.w    $0003
                dc.l    $E8070000, $0000FFF0, $E0030008, $00040000
                dc.l    $0009000C, $00060000
Offset_0x0707C4:
                dc.w    $0003
                dc.l    $E8070000, $0000FFF0, $E0030008, $00040000
                dc.l    $0009000C, $00060000
Offset_0x0707DE:
                dc.w    $0001
                dc.l    $F00B0000, $0000FFF5
Offset_0x0707E8:
                dc.w    $0003
                dc.l    $E60B0000, $0000FFF0, $EE01000C, $00060008
                dc.l    $0609000E, $0007FFF0
Offset_0x070802:
                dc.w    $0003
                dc.l    $E40A0000, $0000FFF0, $FC000009, $00040008
                dc.l    $FC0A000A, $0005FFF0
Offset_0x07081C:
                dc.w    $0005
                dc.l    $E4080000, $0000FFF0, $EC010003, $0001FFF0
                dc.l    $EC050005, $0002FFF8, $FC0A0009, $0004FFF0
                dc.l    $FD000012, $00090008
Offset_0x070846:
                dc.w    $0005
                dc.l    $E4080000, $0000FFF0, $EC010003, $0001FFF0
                dc.l    $EC050005, $0002FFF8, $FC0A0009, $0004FFF0
                dc.l    $FD000012, $00090008
Offset_0x070870:
                dc.w    $0002
                dc.l    $E70A0000, $0000FFF1, $FF0A0009, $0004FFF3
Offset_0x070882:
                dc.w    $0002
                dc.l    $E70A0000, $0000FFF1, $FF0A0009, $0004FFF3
Offset_0x070894:
                dc.w    $0002
                dc.l    $E70A0000, $0000FFF1, $FF0A0009, $0004FFF3
Offset_0x0708A6:
                dc.w    $0003
                dc.l    $E30E0000, $0000FFEE, $0301000C, $0006FFEC
                dc.l    $FB0F000E, $0007FFF4
Offset_0x0708C0:
                dc.w    $0004
                dc.l    $E40E0000, $0000FFEE, $0401000C, $0006FFEC
                dc.l    $FC0B000E, $0007FFF4, $0401001A, $000D000C
Offset_0x0708E2:
                dc.w    $0003
                dc.l    $E50E0000, $0000FFED, $FD09000C, $0006FFF4
                dc.l    $0D050012, $0009FFF7
Offset_0x0708FC:
                dc.w    $0002
                dc.l    $E40A0000, $0000FFF4, $FC0F0009, $0004FFEE
Offset_0x07090E:
                dc.w    $0003
                dc.l    $E30A0000, $0000FFF4, $FB0F0009, $0004FFEE
                dc.l    $FB010019, $000C000E
Offset_0x070928:
                dc.w    $0004
                dc.l    $E40A0000, $0000FFF4, $04010009, $0004FFEC
                dc.l    $FC0B000B, $0005FFF4, $04010017, $000B000C
Offset_0x07094A:
                dc.w    $0003
                dc.l    $E50E0000, $0000FFED, $FD09000C, $0006FFF4
                dc.l    $0D050012, $0009FFF7
Offset_0x070964:
                dc.w    $0002
                dc.l    $E40E0000, $0000FFEE, $FC0B000C, $0006FFF3
Offset_0x070976:
                dc.w    $0004
                dc.l    $EB0D0000, $0000FFE2, $F3050008, $00040002
                dc.l    $FB09000C, $0006FFEA, $0B010012, $0009FFFA
Offset_0x070998:
                dc.w    $0005
                dc.l    $EC0D0000, $0000FFE3, $EC010008, $00040003
                dc.l    $FC0D000A, $0005FFEB, $FC050012, $0009000B
                dc.l    $0C010016, $000BFFFB
Offset_0x0709C2:
                dc.w    $0005
                dc.l    $ED0A0000, $0000FFE4, $ED030009, $0004FFFC
                dc.l    $0500000D, $0006FFF4, $F501000E, $00070004
                dc.l    $05050010, $00080004
Offset_0x0709EC:
                dc.w    $0005
                dc.l    $E4000000, $0000FFF1, $EC0D0001, $0000FFE3
                dc.l    $EC010009, $00040003, $FC05000B, $0005FFEB
                dc.l    $FC0B000F, $0007FFFB
Offset_0x070A16:
                dc.w    $0006
                dc.l    $E3000000, $0000FFF0, $EB0D0001, $0000FFE2
                dc.l    $EB010009, $00040002, $F301000B, $0005000A
                dc.l    $FB0D000D, $0006FFEA, $0B050015, $000AFFF2
Offset_0x070A48:
                dc.w    $0006
                dc.l    $E4000000, $0000FFF1, $EC0D0001, $0000FFE3
                dc.l    $EC010009, $00040003, $FC0D000B, $0005FFEB
                dc.l    $FA050013, $0009000B, $0C010017, $000BFFFB
Offset_0x070A7A:
                dc.w    $0005
                dc.l    $ED0A0000, $0000FFE4, $ED030009, $0004FFFC
                dc.l    $0500000D, $0006FFF4, $F501000E, $00070004
                dc.l    $05050010, $00080004
Offset_0x070AA4:
                dc.w    $0005
                dc.l    $EC0D0000, $0000FFE3, $F4010008, $00040003
                dc.l    $FC09000A, $0005FFEB, $0C000010, $0008FFFB
                dc.l    $04050011, $00080003
Offset_0x070ACE:
                dc.w    $0003
                dc.l    $F20B0000, $0000FFE3, $EC0B000C, $0006FFFB
                dc.l    $0C050018, $000C0003
Offset_0x070AE8:
                dc.w    $0003
                dc.l    $F20B0000, $0000FFE4, $EC0B000C, $0006FFFC
                dc.l    $0C050018, $000C0004
Offset_0x070B02:
                dc.w    $0003
                dc.l    $F30B0000, $0000FFE5, $F403000C, $0006FFFD
                dc.l    $F9050010, $00080005
Offset_0x070B1C:
                dc.w    $0002
                dc.l    $F40A0000, $0000FFE4, $F20B0009, $0004FFFC
Offset_0x070B2E:
                dc.w    $0003
                dc.l    $F40A0000, $0000FFE3, $E3050009, $0004FFFB
                dc.l    $F30B000D, $0006FFFB
Offset_0x070B48:
                dc.w    $0003
                dc.l    $F40A0000, $0000FFE4, $EC0B0009, $0004FFFC
                dc.l    $0C050015, $000A0004
Offset_0x070B62:
                dc.w    $0003
                dc.l    $F30B0000, $0000FFE5, $F403000C, $0006FFFD
                dc.l    $F9050010, $00080005
Offset_0x070B7C:
                dc.w    $0002
                dc.l    $F40B0000, $0000FFE4, $F20B000C, $0006FFFC
Offset_0x070B8E:
                dc.w    $0004
                dc.l    $EE050000, $0000FFF3, $FE070004, $0002FFEB
                dc.l    $FE0D000C, $0006FFFB, $0E000014, $000AFFFB
Offset_0x070BB0:
                dc.w    $0005
                dc.l    $DD050000, $0000FFFC, $ED090004, $0002FFF4
                dc.l    $FD07000A, $0005FFEC, $FD0D0012, $0009FFFC
                dc.l    $0D00001A, $000DFFFC
Offset_0x070BDA:
                dc.w    $0004
                dc.l    $EC0D0000, $0000FFF5, $FC070008, $0004FFED
                dc.l    $FC050010, $0008FFFD, $0C010014, $000AFFFD
Offset_0x070BFC:
                dc.w    $0004
                dc.l    $ED0D0000, $0000FFF4, $FD0B0008, $0004FFE4
                dc.l    $FD090014, $000AFFFC, $0D00001A, $000DFFFC
Offset_0x070C1E:
                dc.w    $0004
                dc.l    $EE090000, $0000FFF3, $FE0B0006, $0003FFE3
                dc.l    $FE0D0012, $0009FFFB, $0E00001A, $000DFFFB
Offset_0x070C40:
                dc.w    $0005
                dc.l    $DD050000, $0000FFFA, $ED090004, $0002FFF4
                dc.l    $FD0B000A, $0005FFE4, $FD0D0016, $000BFFFC
                dc.l    $0D00001E, $000FFFFC
Offset_0x070C6A:
                dc.w    $0004
                dc.l    $EC0D0000, $0000FFF5, $FC070008, $0004FFED
                dc.l    $FC050010, $0008FFFD, $0C010014, $000AFFFD
Offset_0x070C8C:
                dc.w    $0004
                dc.l    $ED0D0000, $0000FFF4, $FD070008, $0004FFEC
                dc.l    $FD090010, $0008FFFC, $0D000016, $000BFFFC
Offset_0x070CAE:
                dc.w    $0003
                dc.l    $E30E0000, $0000FFEE, $0301000C, $0006FFEC
                dc.l    $FB0F000E, $0007FFF4
Offset_0x070CC8:
                dc.w    $0004
                dc.l    $E40E0000, $0000FFEE, $0401000C, $0006FFEC
                dc.l    $FC0B000E, $0007FFF4, $0401001A, $000D000C
Offset_0x070CEA:
                dc.w    $0003
                dc.l    $E50E0000, $0000FFED, $FD09000C, $0006FFF4
                dc.l    $0D050012, $0009FFF7
Offset_0x070D04:
                dc.w    $0002
                dc.l    $E40A0000, $0000FFF4, $FC0F0009, $0004FFEE
Offset_0x070D16:
                dc.w    $0003
                dc.l    $E30A0000, $0000FFF4, $FB0F0009, $0004FFEE
                dc.l    $FB010019, $000C000E
Offset_0x070D30:
                dc.w    $0004
                dc.l    $E40A0000, $0000FFF4, $04010009, $0004FFEC
                dc.l    $FC0B000B, $0005FFF4, $04010017, $000B000C
Offset_0x070D52:
                dc.w    $0003
                dc.l    $E50E0000, $0000FFED, $FD09000C, $0006FFF4
                dc.l    $0D050012, $0009FFF7
Offset_0x070D6C:
                dc.w    $0002
                dc.l    $E40E0000, $0000FFEE, $FC0B000C, $0006FFF3
Offset_0x070D7E:
                dc.w    $0005
                dc.l    $E3040000, $0000FFEA, $EB0D0002, $0001FFE2
                dc.l    $FB09000A, $0005FFEA, $F3050010, $00080002
                dc.l    $0B010014, $000AFFFA
Offset_0x070DA8:
                dc.w    $0006
                dc.l    $E4040000, $0000FFEB, $EC0D0002, $0001FFE3
                dc.l    $EC01000A, $00050003, $FC0D000C, $0006FFEB
                dc.l    $FC050014, $000A000B, $0C010018, $000CFFFB
Offset_0x070DDA:
                dc.w    $0005
                dc.l    $EB090000, $0000FFE4, $FB050006, $0003FFEC
                dc.l    $ED03000A, $0005FFFC, $F501000E, $00070004
                dc.l    $05050010, $00080004
Offset_0x070E04:
                dc.w    $0005
                dc.l    $E4040000, $0000FFEB, $EC0D0002, $0001FFE3
                dc.l    $EC01000A, $00050003, $FC05000C, $0006FFEB
                dc.l    $FC0B0010, $0008FFFB
Offset_0x070E2E:
                dc.w    $0006
                dc.l    $E3040000, $0000FFEA, $EB0D0002, $0001FFE2
                dc.l    $EB01000A, $00050002, $F301000C, $0006000A
                dc.l    $FB0D000E, $0007FFEA, $0B050016, $000BFFF2
Offset_0x070E60:
                dc.w    $0006
                dc.l    $E4040000, $0000FFEB, $EC0D0002, $0001FFE3
                dc.l    $EC01000A, $00050003, $FC0D000C, $0006FFEB
                dc.l    $FA050014, $000A000B, $0C010018, $000CFFFB
Offset_0x070E92:
                dc.w    $0005
                dc.l    $EB090000, $0000FFE4, $FB050006, $0003FFEC
                dc.l    $ED03000A, $0005FFFC, $F501000E, $00070004
                dc.l    $05050010, $00080004
Offset_0x070EBC:
                dc.w    $0006
                dc.l    $E4040000, $0000FFEB, $EC0D0002, $0001FFE3
                dc.l    $FC09000A, $0005FFEB, $F4010010, $00080003
                dc.l    $04050012, $00090003, $0C010016, $000BFFFB
Offset_0x070EEE:
                dc.w    $0003
                dc.l    $F20B0000, $0000FFE3, $EC0B000C, $0006FFFB
                dc.l    $0C050018, $000C0003
Offset_0x070F08:
                dc.w    $0003
                dc.l    $F20B0000, $0000FFE4, $EC0B000C, $0006FFFC
                dc.l    $0C050018, $000C0004
Offset_0x070F22:
                dc.w    $0003
                dc.l    $F30B0000, $0000FFE5, $F403000C, $0006FFFD
                dc.l    $F9050010, $00080005
Offset_0x070F3C:
                dc.w    $0002
                dc.l    $F40A0000, $0000FFE4, $F20B0009, $0004FFFC
Offset_0x070F4E:
                dc.w    $0003
                dc.l    $F40A0000, $0000FFE3, $E3050009, $0004FFFB
                dc.l    $F30B000D, $0006FFFB
Offset_0x070F68:
                dc.w    $0003
                dc.l    $F40A0000, $0000FFE4, $EC0B0009, $0004FFFC
                dc.l    $0C050015, $000A0004
Offset_0x070F82:
                dc.w    $0003
                dc.l    $F30B0000, $0000FFE5, $F403000C, $0006FFFD
                dc.l    $F9050010, $00080005
Offset_0x070F9C:
                dc.w    $0002
                dc.l    $F20B0000, $0000FFE4, $F40B000C, $0006FFFC
Offset_0x070FAE:
                dc.w    $0004
                dc.l    $EE050000, $0000FFF3, $FE0B0004, $0002FFE3
                dc.l    $FE0D0010, $0008FFFB, $0E000018, $000CFFFB
Offset_0x070FD0:
                dc.w    $0005
                dc.l    $DD050000, $0000FFFC, $ED090004, $0002FFF4
                dc.l    $FD0B000A, $0005FFE4, $FD0D0016, $000BFFFC
                dc.l    $0D00001E, $000FFFFC
Offset_0x070FFA:
                dc.w    $0005
                dc.l    $EC0D0000, $0000FFF5, $04010008, $0004FFE5
                dc.l    $FC07000A, $0005FFED, $FC050012, $0009FFFD
                dc.l    $0C000016, $000BFFFD
Offset_0x071024:
                dc.w    $0004
                dc.l    $ED0D0000, $0000FFF4, $FD0B0008, $0004FFE4
                dc.l    $FD090014, $000AFFFC, $0D00001A, $000DFFFC
Offset_0x071046:
                dc.w    $0004
                dc.l    $EE090000, $0000FFF3, $FE0B0006, $0003FFE3
                dc.l    $FE0D0012, $0009FFFB, $0E00001A, $000DFFFB
Offset_0x071068:
                dc.w    $0005
                dc.l    $DD050000, $0000FFFA, $ED090004, $0002FFF4
                dc.l    $FD0B000A, $0005FFE4, $FD0D0016, $000BFFFC
                dc.l    $0D00001E, $000FFFFC
Offset_0x071092:
                dc.w    $0005
                dc.l    $EC0D0000, $0000FFF5, $04010008, $0004FFE5
                dc.l    $FC07000A, $0005FFED, $FC050012, $0009FFFD
                dc.l    $0C000016, $000BFFFD
Offset_0x0710BC:
                dc.w    $0005
                dc.l    $ED0D0000, $0000FFF4, $05010008, $0004FFE4
                dc.l    $FD07000A, $0005FFEC, $FD090012, $0009FFFC
                dc.l    $0D000018, $000CFFFC
Offset_0x0710E6:
                dc.w    $0004
                dc.l    $F0080000, $0000FFFC, $F8000003, $0001FFFC
                dc.l    $F8050004, $00020004, $00090008, $0004FFEC
Offset_0x071108:
                dc.w    $0004
                dc.l    $E6040000, $0000FFFA, $EE0B0002, $0001FFF2
                dc.l    $EE02000E, $0007000A, $0E040011, $0008FFFA
Offset_0x07112A:
                dc.w    $0004
                dc.l    $EC020000, $0000FFF0, $EC050003, $0001FFF8
                dc.l    $FC080007, $0003FFF8, $0405000A, $00050000
Offset_0x07114C:
                dc.w    $0005
                dc.l    $EE080000, $0000FFEE, $F60D0003, $0001FFE6
                dc.l    $F605000B, $00050006, $0604000F, $0007FFEE
                dc.l    $06000011, $00080006
Offset_0x071176:
                dc.w    $0004
                dc.l    $E8090000, $0000FFFC, $F8000006, $0003FFFC
                dc.l    $F8050007, $00030004, $0009000B, $0005FFEC
Offset_0x071198:
                dc.w    $0004
                dc.l    $E6040000, $0000FFFA, $EE0B0002, $0001FFF2
                dc.l    $EE02000E, $0007000A, $0E000011, $0008FFFA
Offset_0x0711BA:
                dc.w    $0004
                dc.l    $EC060000, $0000FFE8, $EC050006, $0003FFF8
                dc.l    $FC00000A, $0005FFF8, $FC06000B, $00050000
Offset_0x0711DC:
                dc.w    $0005
                dc.l    $EE080000, $0000FFEE, $F60D0003, $0001FFE6
                dc.l    $F605000B, $00050006, $0604000F, $0007FFEE
                dc.l    $06000011, $00080006
Offset_0x071206:
                dc.w    $0004
                dc.l    $E5090000, $0000FFEE, $F5050006, $0003FFEB
                dc.l    $F505000A, $0005FFFB, $050D000E, $0007FFEB
Offset_0x071228:
                dc.w    $0004
                dc.l    $E4090000, $0000FFEE, $F4050006, $0003FFEB
                dc.l    $F405000A, $0005FFFB, $040D000E, $0007FFEB
Offset_0x07124A:
                dc.w    $0004
                dc.l    $E5090000, $0000FFEE, $F5050006, $0003FFEB
                dc.l    $F505000A, $0005FFFB, $050D000E, $0007FFEB
Offset_0x07126C:
                dc.w    $0004
                dc.l    $E4090000, $0000FFEE, $F4050006, $0003FFEB
                dc.l    $F405000A, $0005FFFB, $040D000E, $0007FFEB
Offset_0x07128E:
                dc.w    $0002
                dc.l    $FC020000, $0000FFF0, $F40B0003, $0001FFF8
Offset_0x0712A0:
                dc.w    $0003
                dc.l    $E40A0000, $0000FFEC, $FC080009, $0004FFEC
                dc.l    $0405000C, $0006FFF1
Offset_0x0712BA:
                dc.w    $0003
                dc.l    $E40A0000, $0000FFEC, $FC080009, $0004FFEC
                dc.l    $0405000C, $0006FFF1
Offset_0x0712D4:
                dc.w    $0003
                dc.l    $E40A0000, $0000FFEC, $FC080009, $0004FFEC
                dc.l    $0405000C, $0006FFF1
Offset_0x0712EE:
                dc.w    $0003
                dc.l    $E50A0000, $0000FFED, $FD080009, $0004FFED
                dc.l    $0505000C, $0006FFF1
Offset_0x071308:
                dc.w    $0003
                dc.l    $E50A0000, $0000FFED, $FD080009, $0004FFED
                dc.l    $0505000C, $0006FFF1
Offset_0x071322:
                dc.w    $0003
                dc.l    $E50A0000, $0000FFED, $FD080009, $0004FFED
                dc.l    $0505000C, $0006FFF1
Offset_0x07133C:
                dc.w    $0003
                dc.l    $EC0B0000, $0000FFF0, $EC03000C, $00060008
                dc.l    $0C050010, $0008FFF1
Offset_0x071356:
                dc.w    $0003
                dc.l    $EC0B0000, $0000FFF0, $EC03000C, $00060008
                dc.l    $0C050010, $0008FFF1
Offset_0x071370:
                dc.w    $0003
                dc.l    $EC0B0000, $0000FFF0, $EC03000C, $00060008
                dc.l    $0C050010, $0008FFF1
Offset_0x07138A:
                dc.w    $0005
                dc.l    $EC0B0000, $0000FFF0, $EC01000C, $00060008
                dc.l    $EC01000E, $00070010, $FC010010, $00080008
                dc.l    $0C050012, $0009FFF1
Offset_0x0713B4:
                dc.w    $0004
                dc.l    $EC070000, $0000FFEB, $EC090008, $0004FFFB
                dc.l    $FC05000E, $0007FFFB, $0C090012, $0009FFEE
Offset_0x0713D6:
                dc.w    $0004
                dc.l    $EC070000, $0000FFEC, $EC090008, $0004FFFC
                dc.l    $FC05000E, $0007FFFC, $0C090012, $0009FFEF
Offset_0x0713F8:
                dc.w    $0004
                dc.l    $EC070000, $0000FFEC, $EC090008, $0004FFFC
                dc.l    $FC09000E, $0007FFFC, $0C090014, $000AFFF0
Offset_0x07141A:
                dc.w    $0003
                dc.l    $F4030000, $0000FFE8, $EC0B0004, $0002FFF0
                dc.l    $0C050010, $0008FFF0
Offset_0x071434:
                dc.w    $0003
                dc.l    $F4030800, $0800000C, $EC0B0804, $0802FFF4
                dc.l    $0C050810, $0808FFFC
Offset_0x07144E:
                dc.w    $0003
                dc.l    $F4030800, $0800000C, $EC0B0804, $0802FFF4
                dc.l    $0C050810, $0808FFFC
Offset_0x071468:
                dc.w    $0004
                dc.l    $EC0D0000, $0000FFED, $FC0D0008, $0004FFEF
                dc.l    $FC010010, $0008000F, $0C050012, $00090001
Offset_0x07148A:
                dc.w    $0004
                dc.l    $EC0D0000, $0000FFEE, $FC0D0008, $0004FFEF
                dc.l    $FC010010, $0008000F, $0C050012, $00090001
Offset_0x0714AC:
                dc.w    $0004
                dc.l    $EC0D0000, $0000FFEF, $FC0D0008, $0004FFEF
                dc.l    $FC010010, $0008000F, $0C050012, $00090001
Offset_0x0714CE:
                dc.w    $0002
                dc.l    $EC090000, $0000FFF4, $FC0B0006, $0003FFF7
;-------------------------------------------------------------------------------
Sonic_Dyn_Script                                               ; Offset_0x0714E0 
                dc.w    Offset_0x07168C-Sonic_Dyn_Script
                dc.w    Offset_0x07168E-Sonic_Dyn_Script
                dc.w    Offset_0x071698-Sonic_Dyn_Script
                dc.w    Offset_0x07169E-Sonic_Dyn_Script
                dc.w    Offset_0x0716A8-Sonic_Dyn_Script
                dc.w    Offset_0x0716B2-Sonic_Dyn_Script
                dc.w    Offset_0x0716BE-Sonic_Dyn_Script
                dc.w    Offset_0x0716C6-Sonic_Dyn_Script
                dc.w    Offset_0x0716CC-Sonic_Dyn_Script
                dc.w    Offset_0x0716D2-Sonic_Dyn_Script
                dc.w    Offset_0x0716D8-Sonic_Dyn_Script
                dc.w    Offset_0x0716DE-Sonic_Dyn_Script
                dc.w    Offset_0x0716E8-Sonic_Dyn_Script
                dc.w    Offset_0x0716F2-Sonic_Dyn_Script
                dc.w    Offset_0x0716FA-Sonic_Dyn_Script
                dc.w    Offset_0x071704-Sonic_Dyn_Script
                dc.w    Offset_0x07170C-Sonic_Dyn_Script
                dc.w    Offset_0x071712-Sonic_Dyn_Script
                dc.w    Offset_0x07171A-Sonic_Dyn_Script
                dc.w    Offset_0x071724-Sonic_Dyn_Script
                dc.w    Offset_0x07172C-Sonic_Dyn_Script
                dc.w    Offset_0x071732-Sonic_Dyn_Script
                dc.w    Offset_0x07173C-Sonic_Dyn_Script
                dc.w    Offset_0x071748-Sonic_Dyn_Script
                dc.w    Offset_0x071752-Sonic_Dyn_Script
                dc.w    Offset_0x07175C-Sonic_Dyn_Script
                dc.w    Offset_0x071768-Sonic_Dyn_Script
                dc.w    Offset_0x071774-Sonic_Dyn_Script
                dc.w    Offset_0x07177E-Sonic_Dyn_Script
                dc.w    Offset_0x07178A-Sonic_Dyn_Script
                dc.w    Offset_0x071792-Sonic_Dyn_Script
                dc.w    Offset_0x07179A-Sonic_Dyn_Script
                dc.w    Offset_0x0717A2-Sonic_Dyn_Script
                dc.w    Offset_0x0717A8-Sonic_Dyn_Script
                dc.w    Offset_0x0717B0-Sonic_Dyn_Script
                dc.w    Offset_0x0717B8-Sonic_Dyn_Script
                dc.w    Offset_0x0717C0-Sonic_Dyn_Script
                dc.w    Offset_0x0717C6-Sonic_Dyn_Script
                dc.w    Offset_0x0717D0-Sonic_Dyn_Script
                dc.w    Offset_0x0717DC-Sonic_Dyn_Script
                dc.w    Offset_0x0717E6-Sonic_Dyn_Script
                dc.w    Offset_0x0717F0-Sonic_Dyn_Script
                dc.w    Offset_0x0717FA-Sonic_Dyn_Script
                dc.w    Offset_0x071806-Sonic_Dyn_Script
                dc.w    Offset_0x071810-Sonic_Dyn_Script
                dc.w    Offset_0x07181A-Sonic_Dyn_Script
                dc.w    Offset_0x071820-Sonic_Dyn_Script
                dc.w    Offset_0x071826-Sonic_Dyn_Script
                dc.w    Offset_0x07182C-Sonic_Dyn_Script
                dc.w    Offset_0x071832-Sonic_Dyn_Script
                dc.w    Offset_0x07183C-Sonic_Dyn_Script
                dc.w    Offset_0x071844-Sonic_Dyn_Script
                dc.w    Offset_0x07184E-Sonic_Dyn_Script
                dc.w    Offset_0x071856-Sonic_Dyn_Script
                dc.w    Offset_0x07185C-Sonic_Dyn_Script
                dc.w    Offset_0x071862-Sonic_Dyn_Script
                dc.w    Offset_0x071868-Sonic_Dyn_Script
                dc.w    Offset_0x07186E-Sonic_Dyn_Script
                dc.w    Offset_0x071876-Sonic_Dyn_Script
                dc.w    Offset_0x07187C-Sonic_Dyn_Script
                dc.w    Offset_0x071884-Sonic_Dyn_Script
                dc.w    Offset_0x07188A-Sonic_Dyn_Script
                dc.w    Offset_0x07188E-Sonic_Dyn_Script
                dc.w    Offset_0x071892-Sonic_Dyn_Script
                dc.w    Offset_0x071896-Sonic_Dyn_Script
                dc.w    Offset_0x07189A-Sonic_Dyn_Script
                dc.w    Offset_0x07189E-Sonic_Dyn_Script
                dc.w    Offset_0x0718A2-Sonic_Dyn_Script
                dc.w    Offset_0x0718A6-Sonic_Dyn_Script
                dc.w    Offset_0x0718AA-Sonic_Dyn_Script
                dc.w    Offset_0x0718AE-Sonic_Dyn_Script
                dc.w    Offset_0x0718B2-Sonic_Dyn_Script
                dc.w    Offset_0x0718B6-Sonic_Dyn_Script
                dc.w    Offset_0x0718BE-Sonic_Dyn_Script
                dc.w    Offset_0x0718C6-Sonic_Dyn_Script
                dc.w    Offset_0x0718CE-Sonic_Dyn_Script
                dc.w    Offset_0x0718D6-Sonic_Dyn_Script
                dc.w    Offset_0x0718DA-Sonic_Dyn_Script
                dc.w    Offset_0x0718DE-Sonic_Dyn_Script
                dc.w    Offset_0x0718E4-Sonic_Dyn_Script
                dc.w    Offset_0x0718EA-Sonic_Dyn_Script
                dc.w    Offset_0x0718F2-Sonic_Dyn_Script
                dc.w    Offset_0x0718FA-Sonic_Dyn_Script
                dc.w    Offset_0x071900-Sonic_Dyn_Script
                dc.w    Offset_0x071906-Sonic_Dyn_Script
                dc.w    Offset_0x07190E-Sonic_Dyn_Script
                dc.w    Offset_0x071906-Sonic_Dyn_Script
                dc.w    Offset_0x071914-Sonic_Dyn_Script
                dc.w    Offset_0x071914-Sonic_Dyn_Script
                dc.w    Offset_0x07191C-Sonic_Dyn_Script
                dc.w    Offset_0x071924-Sonic_Dyn_Script
                dc.w    Offset_0x07192C-Sonic_Dyn_Script
                dc.w    Offset_0x071932-Sonic_Dyn_Script
                dc.w    Offset_0x07193C-Sonic_Dyn_Script
                dc.w    Offset_0x071946-Sonic_Dyn_Script
                dc.w    Offset_0x07194E-Sonic_Dyn_Script
                dc.w    Offset_0x071956-Sonic_Dyn_Script
                dc.w    Offset_0x07195E-Sonic_Dyn_Script
                dc.w    Offset_0x071964-Sonic_Dyn_Script
                dc.w    Offset_0x071968-Sonic_Dyn_Script
                dc.w    Offset_0x07196E-Sonic_Dyn_Script
                dc.w    Offset_0x071976-Sonic_Dyn_Script
                dc.w    Offset_0x07197E-Sonic_Dyn_Script
                dc.w    Offset_0x071986-Sonic_Dyn_Script
                dc.w    Offset_0x07198C-Sonic_Dyn_Script
                dc.w    Offset_0x071992-Sonic_Dyn_Script
                dc.w    Offset_0x07199A-Sonic_Dyn_Script
                dc.w    Offset_0x0719A0-Sonic_Dyn_Script
                dc.w    Offset_0x0719A8-Sonic_Dyn_Script
                dc.w    Offset_0x0719B0-Sonic_Dyn_Script
                dc.w    Offset_0x0719B4-Sonic_Dyn_Script
                dc.w    Offset_0x0719BC-Sonic_Dyn_Script
                dc.w    Offset_0x0719C4-Sonic_Dyn_Script
                dc.w    Offset_0x0719D0-Sonic_Dyn_Script
                dc.w    Offset_0x0719DC-Sonic_Dyn_Script
                dc.w    Offset_0x0719E2-Sonic_Dyn_Script
                dc.w    Offset_0x0719E8-Sonic_Dyn_Script
                dc.w    Offset_0x0719EE-Sonic_Dyn_Script
                dc.w    Offset_0x0719F6-Sonic_Dyn_Script
                dc.w    Offset_0x071A00-Sonic_Dyn_Script
                dc.w    Offset_0x071A08-Sonic_Dyn_Script
                dc.w    Offset_0x071A0E-Sonic_Dyn_Script
                dc.w    Offset_0x071A16-Sonic_Dyn_Script
                dc.w    Offset_0x071A20-Sonic_Dyn_Script
                dc.w    Offset_0x071A28-Sonic_Dyn_Script
                dc.w    Offset_0x071A2E-Sonic_Dyn_Script
                dc.w    Offset_0x071A38-Sonic_Dyn_Script
                dc.w    Offset_0x071A44-Sonic_Dyn_Script
                dc.w    Offset_0x071A50-Sonic_Dyn_Script
                dc.w    Offset_0x071A5C-Sonic_Dyn_Script
                dc.w    Offset_0x071A6A-Sonic_Dyn_Script
                dc.w    Offset_0x071A78-Sonic_Dyn_Script
                dc.w    Offset_0x071A84-Sonic_Dyn_Script
                dc.w    Offset_0x071A90-Sonic_Dyn_Script
                dc.w    Offset_0x071A98-Sonic_Dyn_Script
                dc.w    Offset_0x071AA0-Sonic_Dyn_Script
                dc.w    Offset_0x071AA8-Sonic_Dyn_Script
                dc.w    Offset_0x071AAE-Sonic_Dyn_Script
                dc.w    Offset_0x071AB6-Sonic_Dyn_Script
                dc.w    Offset_0x071ABE-Sonic_Dyn_Script
                dc.w    Offset_0x071AC6-Sonic_Dyn_Script
                dc.w    Offset_0x071ACC-Sonic_Dyn_Script
                dc.w    Offset_0x071AD6-Sonic_Dyn_Script
                dc.w    Offset_0x071AE2-Sonic_Dyn_Script
                dc.w    Offset_0x071AEC-Sonic_Dyn_Script
                dc.w    Offset_0x071AF6-Sonic_Dyn_Script
                dc.w    Offset_0x071B00-Sonic_Dyn_Script
                dc.w    Offset_0x071B0C-Sonic_Dyn_Script
                dc.w    Offset_0x071B16-Sonic_Dyn_Script
                dc.w    Offset_0x071B20-Sonic_Dyn_Script
                dc.w    Offset_0x071B28-Sonic_Dyn_Script
                dc.w    Offset_0x071B32-Sonic_Dyn_Script
                dc.w    Offset_0x071B3A-Sonic_Dyn_Script
                dc.w    Offset_0x071B40-Sonic_Dyn_Script
                dc.w    Offset_0x071B48-Sonic_Dyn_Script
                dc.w    Offset_0x071B52-Sonic_Dyn_Script
                dc.w    Offset_0x071B5A-Sonic_Dyn_Script
                dc.w    Offset_0x071B60-Sonic_Dyn_Script
                dc.w    Offset_0x071B6C-Sonic_Dyn_Script
                dc.w    Offset_0x071B7A-Sonic_Dyn_Script
                dc.w    Offset_0x071B86-Sonic_Dyn_Script
                dc.w    Offset_0x071B92-Sonic_Dyn_Script
                dc.w    Offset_0x071BA0-Sonic_Dyn_Script
                dc.w    Offset_0x071BAE-Sonic_Dyn_Script
                dc.w    Offset_0x071BBA-Sonic_Dyn_Script
                dc.w    Offset_0x071BC8-Sonic_Dyn_Script
                dc.w    Offset_0x071BD0-Sonic_Dyn_Script
                dc.w    Offset_0x071BD8-Sonic_Dyn_Script
                dc.w    Offset_0x071BE0-Sonic_Dyn_Script
                dc.w    Offset_0x071BE6-Sonic_Dyn_Script
                dc.w    Offset_0x071BEE-Sonic_Dyn_Script
                dc.w    Offset_0x071BF6-Sonic_Dyn_Script
                dc.w    Offset_0x071BFE-Sonic_Dyn_Script
                dc.w    Offset_0x071C04-Sonic_Dyn_Script
                dc.w    Offset_0x071C0E-Sonic_Dyn_Script
                dc.w    Offset_0x071C1A-Sonic_Dyn_Script
                dc.w    Offset_0x071C26-Sonic_Dyn_Script
                dc.w    Offset_0x071C30-Sonic_Dyn_Script
                dc.w    Offset_0x071C3A-Sonic_Dyn_Script
                dc.w    Offset_0x071C46-Sonic_Dyn_Script
                dc.w    Offset_0x071C52-Sonic_Dyn_Script
                dc.w    Offset_0x071C5E-Sonic_Dyn_Script
                dc.w    Offset_0x071C68-Sonic_Dyn_Script
                dc.w    Offset_0x071C72-Sonic_Dyn_Script
                dc.w    Offset_0x071C7C-Sonic_Dyn_Script
                dc.w    Offset_0x071C88-Sonic_Dyn_Script
                dc.w    Offset_0x071C92-Sonic_Dyn_Script
                dc.w    Offset_0x071C9C-Sonic_Dyn_Script
                dc.w    Offset_0x071CA6-Sonic_Dyn_Script
                dc.w    Offset_0x071CB2-Sonic_Dyn_Script
                dc.w    Offset_0x071CBC-Sonic_Dyn_Script
                dc.w    Offset_0x071CC6-Sonic_Dyn_Script
                dc.w    Offset_0x071CD0-Sonic_Dyn_Script
                dc.w    Offset_0x071CDA-Sonic_Dyn_Script
                dc.w    Offset_0x071CE0-Sonic_Dyn_Script
                dc.w    Offset_0x071CE8-Sonic_Dyn_Script
                dc.w    Offset_0x071CF0-Sonic_Dyn_Script
                dc.w    Offset_0x071CF8-Sonic_Dyn_Script
                dc.w    Offset_0x071D00-Sonic_Dyn_Script
                dc.w    Offset_0x071D08-Sonic_Dyn_Script
                dc.w    Offset_0x071D10-Sonic_Dyn_Script
                dc.w    Offset_0x071D18-Sonic_Dyn_Script
                dc.w    Offset_0x071D20-Sonic_Dyn_Script
                dc.w    Offset_0x071D28-Sonic_Dyn_Script
                dc.w    Offset_0x071D34-Sonic_Dyn_Script
                dc.w    Offset_0x071D3E-Sonic_Dyn_Script
                dc.w    Offset_0x071D48-Sonic_Dyn_Script
                dc.w    Offset_0x071D52-Sonic_Dyn_Script
                dc.w    Offset_0x071D5A-Sonic_Dyn_Script
                dc.w    Offset_0x071D62-Sonic_Dyn_Script
                dc.w    Offset_0x071D6A-Sonic_Dyn_Script
                dc.w    Offset_0x071D74-Sonic_Dyn_Script
                dc.w    Offset_0x071D7E-Sonic_Dyn_Script
                dc.w    Offset_0x071D88-Sonic_Dyn_Script
Offset_0x07168C:
                dc.w    $0000
Offset_0x07168E:
                dc.w    $0004
                dc.w    $3000, $3004, $5008, $500E
Offset_0x071698:
                dc.w    $0002
                dc.w    $B014, $5020
Offset_0x07169E:
                dc.w    $0004
                dc.w    $3026, $302A, $302E, $5032
Offset_0x0716A8:
                dc.w    $0004
                dc.w    $3026, $3038, $302E, $5032
Offset_0x0716B2:
                dc.w    $0005
                dc.w    $3026, $3038, $302E, $1032, $303C
Offset_0x0716BE:
                dc.w    $0003
                dc.w    $3026, $7040, $5032
Offset_0x0716C6:
                dc.w    $0002
                dc.w    $B048, $1054
Offset_0x0716CC:
                dc.w    $0002
                dc.w    $B056, $3062
Offset_0x0716D2:
                dc.w    $0002
                dc.w    $B056, $3066
Offset_0x0716D8:
                dc.w    $0002
                dc.w    $B06A, $7076
Offset_0x0716DE:
                dc.w    $0004
                dc.w    $307E, $3082, $5086, $500E
Offset_0x0716E8:
                dc.w    $0004
                dc.w    $308C, $3090, $3094, $500E
Offset_0x0716F2:
                dc.w    $0003
                dc.w    $7098, $10A0, $F0A2
Offset_0x0716FA:
                dc.w    $0004
                dc.w    $7098, $10B2, $B0B4, $10C0
Offset_0x071704:
                dc.w    $0003
                dc.w    $70C2, $50CA, $30D0
Offset_0x07170C:
                dc.w    $0002
                dc.w    $50D4, $F0DA
Offset_0x071712:
                dc.w    $0003
                dc.w    $50D4, $F0EA, $10FA
Offset_0x07171A:
                dc.w    $0004
                dc.w    $50D4, $10FC, $B0FE, $110A
Offset_0x071724:
                dc.w    $0003
                dc.w    $70C2, $510C, $3112
Offset_0x07172C:
                dc.w    $0002
                dc.w    $7098, $B116
Offset_0x071732:
                dc.w    $0004
                dc.w    $5122, $5128, $312E, $1132
Offset_0x07173C:
                dc.w    $0005
                dc.w    $5122, $1134, $7136, $313E, $1142
Offset_0x071748:
                dc.w    $0004
                dc.w    $7144, $314C, $1150, $3152
Offset_0x071752:
                dc.w    $0004
                dc.w    $5156, $115C, $315E, $B162
Offset_0x07175C:
                dc.w    $0005
                dc.w    $5156, $116E, $7170, $1178, $317A
Offset_0x071768:
                dc.w    $0005
                dc.w    $5156, $117E, $7180, $3188, $118C
Offset_0x071774:
                dc.w    $0004
                dc.w    $7144, $318E, $1192, $3194
Offset_0x07177E:
                dc.w    $0005
                dc.w    $5122, $5198, $119E, $11A0, $31A2
Offset_0x07178A:
                dc.w    $0003
                dc.w    $71A6, $B1AE, $31BA
Offset_0x071792:
                dc.w    $0003
                dc.w    $71A6, $B1BE, $31CA
Offset_0x07179A:
                dc.w    $0003
                dc.w    $71CE, $31D6, $31DA
Offset_0x0717A2:
                dc.w    $0002
                dc.w    $71DE, $B1E6
Offset_0x0717A8:
                dc.w    $0003
                dc.w    $71DE, $31F2, $B1F6
Offset_0x0717B0:
                dc.w    $0003
                dc.w    $71DE, $B202, $320E
Offset_0x0717B8:
                dc.w    $0003
                dc.w    $71CE, $3212, $3216
Offset_0x0717C0:
                dc.w    $0002
                dc.w    $71A6, $B21A
Offset_0x0717C6:
                dc.w    $0004
                dc.w    $3226, $722A, $7232, $123A
Offset_0x0717D0:
                dc.w    $0005
                dc.w    $323C, $5240, $722A, $7246, $123A
Offset_0x0717DC:
                dc.w    $0004
                dc.w    $724E, $7256, $325E, $1262
Offset_0x0717E6:
                dc.w    $0004
                dc.w    $7264, $726C, $5274, $127A
Offset_0x0717F0:
                dc.w    $0004
                dc.w    $527C, $726C, $7282, $127A
Offset_0x0717FA:
                dc.w    $0005
                dc.w    $328A, $528E, $726C, $7294, $127A
Offset_0x071806:
                dc.w    $0004
                dc.w    $729C, $7256, $32A4, $1262
Offset_0x071810:
                dc.w    $0004
                dc.w    $72A8, $722A, $52B0, $123A
Offset_0x07181A:
                dc.w    $0002
                dc.w    $52B6, $F2BC
Offset_0x071820:
                dc.w    $0002
                dc.w    $52CC, $F2D2
Offset_0x071826:
                dc.w    $0002
                dc.w    $52B6, $F2E2
Offset_0x07182C:
                dc.w    $0002
                dc.w    $52CC, $F2F2
Offset_0x071832:
                dc.w    $0004
                dc.w    $5302, $1308, $730A, $5312
Offset_0x07183C:
                dc.w    $0003
                dc.w    $7318, $7320, $5328
Offset_0x071844:
                dc.w    $0004
                dc.w    $5302, $132E, $7330, $5338
Offset_0x07184E:
                dc.w    $0003
                dc.w    $7318, $733E, $5346
Offset_0x071856:
                dc.w    $0002
                dc.w    $734C, $B354
Offset_0x07185C:
                dc.w    $0002
                dc.w    $7360, $B368
Offset_0x071862:
                dc.w    $0002
                dc.w    $734C, $B374
Offset_0x071868:
                dc.w    $0002
                dc.w    $7360, $B380
Offset_0x07186E:
                dc.w    $0003
                dc.w    $138C, $738E, $B396
Offset_0x071876:
                dc.w    $0002
                dc.w    $73A2, $B3AA
Offset_0x07187C:
                dc.w    $0003
                dc.w    $13B6, $738E, $B3C0
Offset_0x071884:
                dc.w    $0002
                dc.w    $73A2, $B3CC
Offset_0x07188A:
                dc.w    $0001
                dc.w    $F400
Offset_0x07188E:
                dc.w    $0001
                dc.w    $F410
Offset_0x071892:
                dc.w    $0001
                dc.w    $F420
Offset_0x071896:
                dc.w    $0001
                dc.w    $F430
Offset_0x07189A:
                dc.w    $0001
                dc.w    $F440
Offset_0x07189E:
                dc.w    $0001
                dc.w    $F450
Offset_0x0718A2:
                dc.w    $0001
                dc.w    $F460
Offset_0x0718A6:
                dc.w    $0001
                dc.w    $F470
Offset_0x0718AA:
                dc.w    $0001
                dc.w    $F480
Offset_0x0718AE:
                dc.w    $0001
                dc.w    $F490
Offset_0x0718B2:
                dc.w    $0001
                dc.w    $F4A0
Offset_0x0718B6:
                dc.w    $0003
                dc.w    $53D8, $53DE, $73E4
Offset_0x0718BE:
                dc.w    $0003
                dc.w    $53D8, $53EC, $53F2
Offset_0x0718C6:
                dc.w    $0003
                dc.w    $53D8, $53DE, $73B8
Offset_0x0718CE:
                dc.w    $0003
                dc.w    $53D8, $53EC, $54B0
Offset_0x0718D6:
                dc.w    $0001
                dc.w    $B4B6
Offset_0x0718DA:
                dc.w    $0001
                dc.w    $F4C2
Offset_0x0718DE:
                dc.w    $0002
                dc.w    $14D2, $F4D4
Offset_0x0718E4:
                dc.w    $0002
                dc.w    $34E4, $F4E8
Offset_0x0718EA:
                dc.w    $0003
                dc.w    $F4F8, $1508, $350A
Offset_0x0718F2:
                dc.w    $0003
                dc.w    $F50E, $151E, $3520
Offset_0x0718FA:
                dc.w    $0002
                dc.w    $B524, $5530
Offset_0x071900:
                dc.w    $0002
                dc.w    $B536, $5542
Offset_0x071906:
                dc.w    $0003
                dc.w    $3548, $B54C, $1558
Offset_0x07190E:
                dc.w    $0002
                dc.w    $155A, $755C
Offset_0x071914:
                dc.w    $0003
                dc.w    $1564, $B566, $1572
Offset_0x07191C:
                dc.w    $0003
                dc.w    $3574, $B578, $1584
Offset_0x071924:
                dc.w    $0003
                dc.w    $5586, $F58C, $159C
Offset_0x07192C:
                dc.w    $0002
                dc.w    $B59E, $35AA
Offset_0x071932:
                dc.w    $0004
                dc.w    $15AE, $B5B0, $15BC, $75BE
Offset_0x07193C:
                dc.w    $0004
                dc.w    $15AE, $B5C6, $15BC, $75BE
Offset_0x071946:
                dc.w    $0003
                dc.w    $75D2, $15DA, $B5DC
Offset_0x07194E:
                dc.w    $0003
                dc.w    $55E8, $B5EE, $15FA
Offset_0x071956:
                dc.w    $0003
                dc.w    $B5FC, $1608, $360A
Offset_0x07195E:
                dc.w    $0002
                dc.w    $B60E, $161A
Offset_0x071964:
                dc.w    $0001
                dc.w    $F61C
Offset_0x071968:
                dc.w    $0002
                dc.w    $B62C, $1638
Offset_0x07196E:
                dc.w    $0003
                dc.w    $163A, $B63C, $1648
Offset_0x071976:
                dc.w    $0003
                dc.w    $564A, $B650, $365C
Offset_0x07197E:
                dc.w    $0003
                dc.w    $3660, $B664, $1670
Offset_0x071986:
                dc.w    $0002
                dc.w    $B672, $167E
Offset_0x07198C:
                dc.w    $0002
                dc.w    $1680, $B682
Offset_0x071992:
                dc.w    $0003
                dc.w    $368E, $B692, $169E
Offset_0x07199A:
                dc.w    $0002
                dc.w    $36A0, $F6A4
Offset_0x0719A0:
                dc.w    $0003
                dc.w    $76B4, $36BC, $56C0
Offset_0x0719A8:
                dc.w    $0003
                dc.w    $76C6, $36BC, $56CE
Offset_0x0719B0:
                dc.w    $0001
                dc.w    $B7D6
Offset_0x0719B4:
                dc.w    $0003
                dc.w    $B7E2, $17EE, $57F0
Offset_0x0719BC:
                dc.w    $0003
                dc.w    $87F6, $0A18, $8800
Offset_0x0719C4:
                dc.w    $0005
                dc.w    $2809, $180C, $380E, $8812, $081B
Offset_0x0719D0:
                dc.w    $0005
                dc.w    $281C, $181F, $380E, $8812, $081B
Offset_0x0719DC:
                dc.w    $0002
                dc.w    $8821, $882A
Offset_0x0719E2:
                dc.w    $0002
                dc.w    $8833, $882A
Offset_0x0719E8:
                dc.w    $0002
                dc.w    $883C, $882A
Offset_0x0719EE:
                dc.w    $0003
                dc.w    $B6D4, $10A0, $F0A2
Offset_0x0719F6:
                dc.w    $0004
                dc.w    $B6D4, $10B2, $B0B4, $10C0
Offset_0x071A00:
                dc.w    $0003
                dc.w    $B6E0, $50CA, $30D0
Offset_0x071A08:
                dc.w    $0002
                dc.w    $86EC, $F0DA
Offset_0x071A0E:
                dc.w    $0003
                dc.w    $86EC, $F0EA, $10FA
Offset_0x071A16:
                dc.w    $0004
                dc.w    $86EC, $10FC, $B0FE, $110A
Offset_0x071A20:
                dc.w    $0003
                dc.w    $B6E0, $510C, $3112
Offset_0x071A28:
                dc.w    $0002
                dc.w    $B6D4, $B116
Offset_0x071A2E:
                dc.w    $0004
                dc.w    $76F5, $312E, $5128, $1132
Offset_0x071A38:
                dc.w    $0005
                dc.w    $76F5, $1134, $7136, $313E, $1142
Offset_0x071A44:
                dc.w    $0005
                dc.w    $86FD, $314C, $0706, $1150, $3152
Offset_0x071A50:
                dc.w    $0005
                dc.w    $0707, $7708, $115C, $315E, $B162
Offset_0x071A5C:
                dc.w    $0006
                dc.w    $0707, $7708, $116E, $1178, $7170, $317A
Offset_0x071A6A:
                dc.w    $0006
                dc.w    $0707, $7708, $117E, $7180, $3188, $118C
Offset_0x071A78:
                dc.w    $0005
                dc.w    $86FD, $318E, $0706, $1192, $3194
Offset_0x071A84:
                dc.w    $0005
                dc.w    $76F5, $119E, $5198, $01A0, $31A2
Offset_0x071A90:
                dc.w    $0003
                dc.w    $B710, $B1AE, $31BA
Offset_0x071A98:
                dc.w    $0003
                dc.w    $B710, $B1BE, $31CA
Offset_0x071AA0:
                dc.w    $0003
                dc.w    $B71C, $31D6, $31DA
Offset_0x071AA8:
                dc.w    $0002
                dc.w    $8728, $B1E6
Offset_0x071AAE:
                dc.w    $0003
                dc.w    $8728, $31F2, $B1F6
Offset_0x071AB6:
                dc.w    $0003
                dc.w    $8728, $B202, $320E
Offset_0x071ABE:
                dc.w    $0003
                dc.w    $B71C, $3212, $3216
Offset_0x071AC6:
                dc.w    $0002
                dc.w    $B710, $B21A
Offset_0x071ACC:
                dc.w    $0004
                dc.w    $3226, $7731, $7232, $0739
Offset_0x071AD6:
                dc.w    $0005
                dc.w    $323C, $5240, $7731, $7246, $0739
Offset_0x071AE2:
                dc.w    $0004
                dc.w    $724E, $773A, $325E, $1742
Offset_0x071AEC:
                dc.w    $0004
                dc.w    $7264, $B744, $5274, $0750
Offset_0x071AF6:
                dc.w    $0004
                dc.w    $527C, $B744, $7282, $0750
Offset_0x071B00:
                dc.w    $0005
                dc.w    $328A, $528E, $B744, $7294, $0750
Offset_0x071B0C:
                dc.w    $0004
                dc.w    $729C, $773A, $32A4, $1742
Offset_0x071B16:
                dc.w    $0004
                dc.w    $72A8, $7731, $52B0, $0739
Offset_0x071B20:
                dc.w    $0003
                dc.w    $B751, $10A0, $F0A2
Offset_0x071B28:
                dc.w    $0004
                dc.w    $B751, $10B2, $B0B4, $10C0
Offset_0x071B32:
                dc.w    $0003
                dc.w    $B75D, $50CA, $30D0
Offset_0x071B3A:
                dc.w    $0002
                dc.w    $8769, $F0DA
Offset_0x071B40:
                dc.w    $0003
                dc.w    $8769, $F0EA, $10FA
Offset_0x071B48:
                dc.w    $0004
                dc.w    $8769, $10FC, $B0FE, $110A
Offset_0x071B52:
                dc.w    $0003
                dc.w    $B75D, $510C, $3112
Offset_0x071B5A:
                dc.w    $0002
                dc.w    $B751, $B116
Offset_0x071B60:
                dc.w    $0005
                dc.w    $1772, $7774, $5128, $312E, $1132
Offset_0x071B6C:
                dc.w    $0006
                dc.w    $1772, $7774, $1134, $7136, $313E, $1142
Offset_0x071B7A:
                dc.w    $0005
                dc.w    $577C, $3782, $314C, $1150, $3152
Offset_0x071B86:
                dc.w    $0005
                dc.w    $1786, $7788, $115C, $315E, $B162
Offset_0x071B92:
                dc.w    $0006
                dc.w    $1786, $7788, $116E, $1178, $7170, $317A
Offset_0x071BA0:
                dc.w    $0006
                dc.w    $1786, $7788, $117E, $7180, $3188, $118C
Offset_0x071BAE:
                dc.w    $0005
                dc.w    $577C, $3782, $318E, $1192, $3194
Offset_0x071BBA:
                dc.w    $0006
                dc.w    $1772, $7774, $5198, $119E, $31A2, $11A0
Offset_0x071BC8:
                dc.w    $0003
                dc.w    $B790, $B1AE, $31BA
Offset_0x071BD0:
                dc.w    $0003
                dc.w    $B790, $B1BE, $31CA
Offset_0x071BD8:
                dc.w    $0003
                dc.w    $B79C, $31D6, $31DA
Offset_0x071BE0:
                dc.w    $0002
                dc.w    $87A8, $B1E6
Offset_0x071BE6:
                dc.w    $0003
                dc.w    $87A8, $31F2, $B1F6
Offset_0x071BEE:
                dc.w    $0003
                dc.w    $87A8, $B202, $320E
Offset_0x071BF6:
                dc.w    $0003
                dc.w    $B79C, $3212, $3216
Offset_0x071BFE:
                dc.w    $0002
                dc.w    $B790, $B21A
Offset_0x071C04:
                dc.w    $0004
                dc.w    $3226, $B7B1, $7232, $07BD
Offset_0x071C0E:
                dc.w    $0005
                dc.w    $323C, $5240, $B7B1, $7246, $07BD
Offset_0x071C1A:
                dc.w    $0005
                dc.w    $724E, $17BE, $77C0, $325E, $07C8
Offset_0x071C26:
                dc.w    $0004
                dc.w    $7264, $B7C9, $5274, $07D5
Offset_0x071C30:
                dc.w    $0004
                dc.w    $527C, $B7C9, $7282, $07D5
Offset_0x071C3A:
                dc.w    $0005
                dc.w    $328A, $528E, $B7C9, $7294, $07D5
Offset_0x071C46:
                dc.w    $0005
                dc.w    $729C, $17BE, $77C0, $32A4, $07C8
Offset_0x071C52:
                dc.w    $0005
                dc.w    $72A8, $17B2, $77B5, $52B0, $07BD
Offset_0x071C5E:
                dc.w    $0004
                dc.w    $2845, $0848, $3849, $584D
Offset_0x071C68:
                dc.w    $0004
                dc.w    $1853, $B855, $2861, $1864
Offset_0x071C72:
                dc.w    $0004
                dc.w    $2866, $3869, $286D, $3870
Offset_0x071C7C:
                dc.w    $0005
                dc.w    $2874, $7877, $387F, $1883, $0885
Offset_0x071C88:
                dc.w    $0004
                dc.w    $5886, $088C, $3849, $588D
Offset_0x071C92:
                dc.w    $0004
                dc.w    $1893, $B895, $2861, $08A1
Offset_0x071C9C:
                dc.w    $0004
                dc.w    $58A2, $3869, $08A8, $58A9
Offset_0x071CA6:
                dc.w    $0005
                dc.w    $2874, $78AF, $38B7, $18BB, $0885
Offset_0x071CB2:
                dc.w    $0004
                dc.w    $58BD, $38C3, $38C7, $78CB
Offset_0x071CBC:
                dc.w    $0004
                dc.w    $58D3, $38D9, $38C7, $78DD
Offset_0x071CC6:
                dc.w    $0004
                dc.w    $58BD, $38C3, $38C7, $78E5
Offset_0x071CD0:
                dc.w    $0004
                dc.w    $58D3, $38D9, $38C7, $78ED
Offset_0x071CDA:
                dc.w    $0002
                dc.w    $28F5, $B8F8
Offset_0x071CE0:
                dc.w    $0003
                dc.w    $8904, $290D, $3910
Offset_0x071CE8:
                dc.w    $0003
                dc.w    $8833, $290D, $3910
Offset_0x071CF0:
                dc.w    $0003
                dc.w    $883C, $290D, $3910
Offset_0x071CF8:
                dc.w    $0003
                dc.w    $8904, $290D, $3914
Offset_0x071D00:
                dc.w    $0003
                dc.w    $8833, $290D, $3914
Offset_0x071D08:
                dc.w    $0003
                dc.w    $883C, $290D, $3914
Offset_0x071D10:
                dc.w    $0003
                dc.w    $B918, $3924, $3928
Offset_0x071D18:
                dc.w    $0003
                dc.w    $B92C, $3938, $3928
Offset_0x071D20:
                dc.w    $0003
                dc.w    $B93C, $3948, $3928
Offset_0x071D28:
                dc.w    $0005
                dc.w    $B94C, $1924, $1958, $193A, $3928
Offset_0x071D34:
                dc.w    $0004
                dc.w    $795A, $5962, $3968, $596C
Offset_0x071D3E:
                dc.w    $0004
                dc.w    $7972, $5962, $397A, $597E
Offset_0x071D48:
                dc.w    $0004
                dc.w    $7984, $5962, $598C, $5992
Offset_0x071D52:
                dc.w    $0003
                dc.w    $3998, $B99C, $39A8
Offset_0x071D5A:
                dc.w    $0003
                dc.w    $39AC, $B9B0, $39BC
Offset_0x071D62:
                dc.w    $0003
                dc.w    $39C0, $B9C4, $39BC
Offset_0x071D6A:
                dc.w    $0004
                dc.w    $79D0, $79D8, $19E0, $39E2
Offset_0x071D74:
                dc.w    $0004
                dc.w    $79E6, $79EE, $19E0, $39E2
Offset_0x071D7E:
                dc.w    $0004
                dc.w    $79F6, $79FE, $19E0, $39E2
Offset_0x071D88:
                dc.w    $0002
                dc.w    $5A06, $BA0C
;-------------------------------------------------------------------------------  
Art_Shield:                                                    ; Offset_0x071D8E
                incbin  'data\art\shield.nem'  
Art_Invencibility_Stars:                                       ; Offset_0x071F14   
                incbin  'data\art\invstars.nem'   
Art_Water_Splash_Dust:                                         ; Offset_0x071FFC  
                incbin  'data\art\spshdust.dat'   
Art_Water_Splash:                                              ; Offset_0x07393C                  
                incbin  'data\art\w_splash.nem'                          
;-------------------------------------------------------------------------------
Miles_Mappings:                                                ; Offset_0x0739E2             
                dc.w    Offset_0x073AF8-Miles_Mappings
                dc.w    Offset_0x073AFA-Miles_Mappings
                dc.w    Offset_0x073B0C-Miles_Mappings
                dc.w    Offset_0x073B1E-Miles_Mappings
                dc.w    Offset_0x073B30-Miles_Mappings
                dc.w    Offset_0x073B42-Miles_Mappings
                dc.w    Offset_0x073B4C-Miles_Mappings
                dc.w    Offset_0x073B56-Miles_Mappings
                dc.w    Offset_0x073B68-Miles_Mappings
                dc.w    Offset_0x073B7A-Miles_Mappings
                dc.w    Offset_0x073B84-Miles_Mappings
                dc.w    Offset_0x073B8E-Miles_Mappings
                dc.w    Offset_0x073B98-Miles_Mappings
                dc.w    Offset_0x073BA2-Miles_Mappings
                dc.w    Offset_0x073BAC-Miles_Mappings
                dc.w    Offset_0x073BC6-Miles_Mappings
                dc.w    Offset_0x073BE0-Miles_Mappings
                dc.w    Offset_0x073BFA-Miles_Mappings
                dc.w    Offset_0x073C14-Miles_Mappings
                dc.w    Offset_0x073C2E-Miles_Mappings
                dc.w    Offset_0x073C48-Miles_Mappings
                dc.w    Offset_0x073C62-Miles_Mappings
                dc.w    Offset_0x073C7C-Miles_Mappings
                dc.w    Offset_0x073C96-Miles_Mappings
                dc.w    Offset_0x073CB0-Miles_Mappings
                dc.w    Offset_0x073CCA-Miles_Mappings
                dc.w    Offset_0x073CE4-Miles_Mappings
                dc.w    Offset_0x073CFE-Miles_Mappings
                dc.w    Offset_0x073D18-Miles_Mappings
                dc.w    Offset_0x073D32-Miles_Mappings
                dc.w    Offset_0x073D4C-Miles_Mappings
                dc.w    Offset_0x073D66-Miles_Mappings
                dc.w    Offset_0x073D80-Miles_Mappings
                dc.w    Offset_0x073D9A-Miles_Mappings
                dc.w    Offset_0x073DB4-Miles_Mappings
                dc.w    Offset_0x073DCE-Miles_Mappings
                dc.w    Offset_0x073DE8-Miles_Mappings
                dc.w    Offset_0x073E02-Miles_Mappings
                dc.w    Offset_0x073E1C-Miles_Mappings
                dc.w    Offset_0x073E2E-Miles_Mappings
                dc.w    Offset_0x073E48-Miles_Mappings
                dc.w    Offset_0x073E5A-Miles_Mappings
                dc.w    Offset_0x073E74-Miles_Mappings
                dc.w    Offset_0x073E86-Miles_Mappings
                dc.w    Offset_0x073EA0-Miles_Mappings
                dc.w    Offset_0x073EB2-Miles_Mappings
                dc.w    Offset_0x073ECC-Miles_Mappings
                dc.w    Offset_0x073EDE-Miles_Mappings
                dc.w    Offset_0x073EF0-Miles_Mappings
                dc.w    Offset_0x073F02-Miles_Mappings
                dc.w    Offset_0x073F14-Miles_Mappings
                dc.w    Offset_0x073F26-Miles_Mappings
                dc.w    Offset_0x073F38-Miles_Mappings
                dc.w    Offset_0x073F52-Miles_Mappings
                dc.w    Offset_0x073F6C-Miles_Mappings
                dc.w    Offset_0x073F86-Miles_Mappings
                dc.w    Offset_0x073FA0-Miles_Mappings
                dc.w    Offset_0x073FBA-Miles_Mappings
                dc.w    Offset_0x073FD4-Miles_Mappings
                dc.w    Offset_0x073FEE-Miles_Mappings
                dc.w    Offset_0x074008-Miles_Mappings
                dc.w    Offset_0x073FEE-Miles_Mappings
                dc.w    Offset_0x074022-Miles_Mappings
                dc.w    Offset_0x07403C-Miles_Mappings
                dc.w    Offset_0x074056-Miles_Mappings
                dc.w    Offset_0x074070-Miles_Mappings
                dc.w    Offset_0x07408A-Miles_Mappings
                dc.w    Offset_0x0740A4-Miles_Mappings
                dc.w    Offset_0x0740BE-Miles_Mappings
                dc.w    Offset_0x0740D8-Miles_Mappings
                dc.w    Offset_0x0740F2-Miles_Mappings
                dc.w    Offset_0x0740FC-Miles_Mappings
                dc.w    Offset_0x074106-Miles_Mappings
                dc.w    Offset_0x074110-Miles_Mappings
                dc.w    Offset_0x07411A-Miles_Mappings
                dc.w    Offset_0x074124-Miles_Mappings
                dc.w    Offset_0x07412E-Miles_Mappings
                dc.w    Offset_0x074138-Miles_Mappings
                dc.w    Offset_0x074142-Miles_Mappings
                dc.w    Offset_0x07414C-Miles_Mappings
                dc.w    Offset_0x074156-Miles_Mappings
                dc.w    Offset_0x074160-Miles_Mappings
                dc.w    Offset_0x07416A-Miles_Mappings
                dc.w    Offset_0x074174-Miles_Mappings
                dc.w    Offset_0x07417E-Miles_Mappings
                dc.w    Offset_0x074188-Miles_Mappings
                dc.w    Offset_0x074192-Miles_Mappings
                dc.w    Offset_0x07419C-Miles_Mappings
                dc.w    Offset_0x0741A6-Miles_Mappings
                dc.w    Offset_0x0741B0-Miles_Mappings
                dc.w    Offset_0x0741C2-Miles_Mappings
                dc.w    Offset_0x0741D4-Miles_Mappings
                dc.w    Offset_0x0741DE-Miles_Mappings
                dc.w    Offset_0x0741E8-Miles_Mappings
                dc.w    Offset_0x0741F2-Miles_Mappings
                dc.w    Offset_0x074204-Miles_Mappings
                dc.w    Offset_0x074216-Miles_Mappings
                dc.w    Offset_0x074220-Miles_Mappings
                dc.w    Offset_0x07422A-Miles_Mappings
                dc.w    Offset_0x074234-Miles_Mappings
                dc.w    Offset_0x074246-Miles_Mappings
                dc.w    Offset_0x074258-Miles_Mappings
                dc.w    Offset_0x07426A-Miles_Mappings
                dc.w    Offset_0x07427C-Miles_Mappings
                dc.w    Offset_0x07428E-Miles_Mappings
                dc.w    Offset_0x0742A0-Miles_Mappings
                dc.w    Offset_0x0742B2-Miles_Mappings
                dc.w    Offset_0x0742C4-Miles_Mappings
                dc.w    Offset_0x0742CE-Miles_Mappings
                dc.w    Offset_0x0742E0-Miles_Mappings
                dc.w    Offset_0x0742F2-Miles_Mappings
                dc.w    Offset_0x074304-Miles_Mappings
                dc.w    Offset_0x074316-Miles_Mappings
                dc.w    Offset_0x074328-Miles_Mappings
                dc.w    Offset_0x07433A-Miles_Mappings
                dc.w    Offset_0x07434C-Miles_Mappings
                dc.w    Offset_0x07435E-Miles_Mappings
                dc.w    Offset_0x074368-Miles_Mappings
                dc.w    Offset_0x074372-Miles_Mappings
                dc.w    Offset_0x074384-Miles_Mappings
                dc.w    Offset_0x07438E-Miles_Mappings
                dc.w    Offset_0x074398-Miles_Mappings
                dc.w    Offset_0x0743A2-Miles_Mappings
                dc.w    Offset_0x0743AC-Miles_Mappings
                dc.w    Offset_0x0743B6-Miles_Mappings
                dc.w    Offset_0x0743C0-Miles_Mappings
                dc.w    Offset_0x0743CA-Miles_Mappings
                dc.w    Offset_0x0743D4-Miles_Mappings
                dc.w    Offset_0x0743E6-Miles_Mappings
                dc.w    Offset_0x0743F8-Miles_Mappings
                dc.w    Offset_0x074402-Miles_Mappings
                dc.w    Offset_0x07440C-Miles_Mappings
                dc.w    Offset_0x074416-Miles_Mappings
                dc.w    Offset_0x074420-Miles_Mappings
                dc.w    Offset_0x074432-Miles_Mappings
                dc.w    Offset_0x074444-Miles_Mappings
                dc.w    Offset_0x07444E-Miles_Mappings
                dc.w    Offset_0x074458-Miles_Mappings
                dc.w    Offset_0x074462-Miles_Mappings
Offset_0x073AF8:
                dc.w    $0000
Offset_0x073AFA:
                dc.w    $0002
                dc.l    $F0090000, $0000FFF4, $00090006, $0003FFF4
Offset_0x073B0C:
                dc.w    $0002
                dc.l    $F0090000, $0000FFF4, $00090006, $0003FFF4
Offset_0x073B1E:
                dc.w    $0002
                dc.l    $F0090000, $0000FFF4, $00090006, $0003FFF4
Offset_0x073B30:
                dc.w    $0002
                dc.l    $F0090000, $0000FFF4, $00090006, $0003FFF4
Offset_0x073B42:
                dc.w    $0001
                dc.l    $F00B0000, $0000FFF4
Offset_0x073B4C:
                dc.w    $0001
                dc.l    $F00B0000, $0000FFF4
Offset_0x073B56:
                dc.w    $0002
                dc.l    $F0090000, $0000FFF4, $00090006, $0003FFF4
Offset_0x073B68:
                dc.w    $0002
                dc.l    $F0090000, $0000FFF4, $00090006, $0003FFF4
Offset_0x073B7A:
                dc.w    $0001
                dc.l    $F0070000, $0000FFEC
Offset_0x073B84:
                dc.w    $0001
                dc.l    $F00B0000, $0000FFE4
Offset_0x073B8E:
                dc.w    $0001
                dc.l    $F00B0000, $0000FFE4
Offset_0x073B98:
                dc.w    $0001
                dc.l    $00090000, $0000FFE4
Offset_0x073BA2:
                dc.w    $0001
                dc.l    $F00B0000, $0000FFE4
Offset_0x073BAC:
                dc.w    $0003
                dc.l    $EC090000, $0000FFF0, $FC0D0006, $0003FFF0
                dc.l    $FC09000E, $0007FFE2
Offset_0x073BC6:
                dc.w    $0003
                dc.l    $F0090000, $0000FFF3, $000D0006, $0003FFF0
                dc.l    $0009000E, $0007FFE4
Offset_0x073BE0:
                dc.w    $0003
                dc.l    $F0090000, $0000FFF8, $00090006, $0003FFF3
                dc.l    $FD09000C, $0006FFE4
Offset_0x073BFA:
                dc.w    $0003
                dc.l    $F0090000, $0000FFF2, $00090006, $0003FFF2
                dc.l    $FD09000C, $0006FFE6
Offset_0x073C14:
                dc.w    $0003
                dc.l    $EC090000, $0000FFF0, $FC0D0006, $0003FFF0
                dc.l    $FC09000E, $0007FFE2
Offset_0x073C2E:
                dc.w    $0003
                dc.l    $F0090000, $0000FFF3, $000D0006, $0003FFF0
                dc.l    $0009000E, $0007FFE4
Offset_0x073C48:
                dc.w    $0003
                dc.l    $F0090000, $0000FFF8, $00090006, $0003FFF1
                dc.l    $FD09000C, $0006FFE4
Offset_0x073C62:
                dc.w    $0003
                dc.l    $F0090000, $0000FFF2, $00090006, $0003FFF2
                dc.l    $FD09000C, $0006FFE6
Offset_0x073C7C:
                dc.w    $0003
                dc.l    $E3010000, $0000FFF3, $F3030002, $0001FFEC
                dc.l    $F30B0006, $0003FFF4
Offset_0x073C96:
                dc.w    $0003
                dc.l    $E7050000, $0000FFF6, $F70B0004, $0002FFEE
                dc.l    $FE050010, $00080006
Offset_0x073CB0:
                dc.w    $0003
                dc.l    $E6050000, $0000FFF8, $F6030004, $0002FFEF
                dc.l    $F60B0008, $0004FFF7
Offset_0x073CCA:
                dc.w    $0003
                dc.l    $E3010000, $0000FFF7, $F30F0002, $0001FFEC
                dc.l    $FB010012, $0009000C
Offset_0x073CE4:
                dc.w    $0003
                dc.l    $E3010000, $0000FFF3, $F3030002, $0001FFEC
                dc.l    $F30B0006, $0003FFF4
Offset_0x073CFE:
                dc.w    $0003
                dc.l    $E7050000, $0000FFF6, $F70B0004, $0002FFEE
                dc.l    $FF050010, $00080006
Offset_0x073D18:
                dc.w    $0003
                dc.l    $E6050000, $0000FFF8, $F6030004, $0002FFEF
                dc.l    $F60B0008, $0004FFF7
Offset_0x073D32:
                dc.w    $0003
                dc.l    $E3010000, $0000FFF7, $F30F0002, $0001FFEC
                dc.l    $03010012, $0009000C
Offset_0x073D4C:
                dc.w    $0003
                dc.l    $F0070000, $0000FFEC, $F0070008, $0004FFFC
                dc.l    $06070010, $0008FFFC
Offset_0x073D66:
                dc.w    $0003
                dc.l    $F0070000, $0000FFF0, $F0070008, $00040000
                dc.l    $04070010, $00080000
Offset_0x073D80:
                dc.w    $0003
                dc.l    $F0070000, $0000FFF0, $F0070008, $00040000
                dc.l    $04070010, $0008FFFD
Offset_0x073D9A:
                dc.w    $0003
                dc.l    $F0070000, $0000FFF0, $F0070008, $00040000
                dc.l    $04070010, $0008FFFD
Offset_0x073DB4:
                dc.w    $0003
                dc.l    $F0070000, $0000FFEC, $F0070008, $0004FFFC
                dc.l    $06070010, $0008FFFC
Offset_0x073DCE:
                dc.w    $0003
                dc.l    $F0070000, $0000FFF0, $F0070008, $00040000
                dc.l    $04070010, $00080000
Offset_0x073DE8:
                dc.w    $0003
                dc.l    $F0070000, $0000FFF0, $F0070008, $00040000
                dc.l    $04070010, $0008FFFD
Offset_0x073E02:
                dc.w    $0003
                dc.l    $F0070000, $0000FFF0, $F0070008, $00040000
                dc.l    $04070010, $0008FFFD
Offset_0x073E1C:
                dc.w    $0002
                dc.l    $04010000, $0000FFEB, $F40F0002, $0001FFF3
Offset_0x073E2E:
                dc.w    $0003
                dc.l    $E2050000, $0000FFF8, $FA010004, $0002FFF0
                dc.l    $F20F0006, $0003FFF8
Offset_0x073E48:
                dc.w    $0002
                dc.l    $F9010000, $0000FFEC, $F10F0002, $0001FFF4
Offset_0x073E5A:
                dc.w    $0003
                dc.l    $FC010000, $0000FFEF, $E5010002, $0001FFFF
                dc.l    $F50F0004, $0002FFF7
Offset_0x073E74:
                dc.w    $0002
                dc.l    $04010000, $0000FFEB, $F40F0002, $0001FFF3
Offset_0x073E86:
                dc.w    $0003
                dc.l    $E2010000, $00000000, $FA010002, $0001FFF0
                dc.l    $F20F0004, $0002FFF8
Offset_0x073EA0:
                dc.w    $0002
                dc.l    $F9010000, $0000FFEC, $F10F0002, $0001FFF4
Offset_0x073EB2:
                dc.w    $0003
                dc.l    $E4010000, $0000FFFF, $FC010002, $0001FFEF
                dc.l    $F40F0004, $0002FFF7
Offset_0x073ECC:
                dc.w    $0002
                dc.l    $F00F0000, $0000FFF0, $F0070010, $0008FFEA
Offset_0x073EDE:
                dc.w    $0002
                dc.l    $F00F0000, $0000FFF0, $F8050010, $0008FFEA
Offset_0x073EF0:
                dc.w    $0002
                dc.l    $F00F0000, $0000FFF0, $F8050010, $0008FFEA
Offset_0x073F02:
                dc.w    $0002
                dc.l    $F00F0000, $0000FFF0, $F8051010, $1008FFEA
Offset_0x073F14:
                dc.w    $0002
                dc.l    $F00F0000, $0000FFF0, $F0070010, $0008FFEA
Offset_0x073F26:
                dc.w    $0002
                dc.l    $F00F0000, $0000FFF0, $F0071810, $1808FFE8
Offset_0x073F38:
                dc.w    $0003
                dc.l    $E4010000, $0000FFFA, $F40B0002, $0001FFF0
                dc.l    $FE0B000E, $0007FFE8
Offset_0x073F52:
                dc.w    $0003
                dc.l    $E4050000, $0000FFF8, $F40B0004, $0002FFF0
                dc.l    $04050010, $0008FFEF
Offset_0x073F6C:
                dc.w    $0003
                dc.l    $E4010000, $0000FFFA, $F40B0002, $0001FFF0
                dc.l    $0405000E, $0007FFEF
Offset_0x073F86:
                dc.w    $0003
                dc.l    $E4050000, $0000FFF8, $F40B0004, $0002FFF0
                dc.l    $04050010, $0008FFEF
Offset_0x073FA0:
                dc.w    $0003
                dc.l    $E4010000, $0000FFFA, $F40B0002, $0001FFF0
                dc.l    $FC0B000E, $0007FFEA
Offset_0x073FBA:
                dc.w    $0003
                dc.l    $E4050000, $0000FFF8, $F40B0004, $0002FFF0
                dc.l    $F70B1810, $1808FFEA
Offset_0x073FD4:
                dc.w    $0003
                dc.l    $F0090000, $0000FFF0, $000D0006, $0003FFF0
                dc.l    $060D000E, $0007FFF0
Offset_0x073FEE:
                dc.w    $0003
                dc.l    $F0090000, $0000FFF0, $000D0006, $0003FFF0
                dc.l    $0605000E, $0007FFF8
Offset_0x074008:
                dc.w    $0003
                dc.l    $F0090000, $0000FFF0, $000D0006, $0003FFF0
                dc.l    $0605000E, $0007FFF8
Offset_0x074022:
                dc.w    $0003
                dc.l    $F0090000, $0000FFF0, $000D0006, $0003FFF0
                dc.l    $060D000E, $0007FFF0
Offset_0x07403C:
                dc.w    $0003
                dc.l    $F0090000, $0000FFF0, $000D0006, $0003FFF0
                dc.l    $080D180E, $1807FFF0
Offset_0x074056:
                dc.w    $0003
                dc.l    $F80B0000, $0000FFEC, $F805000C, $00060004
                dc.l    $FE0B0810, $08080000
Offset_0x074070:
                dc.w    $0003
                dc.l    $F80B0000, $0000FFEC, $F805000C, $00060004
                dc.l    $01050810, $08080004
Offset_0x07408A:
                dc.w    $0003
                dc.l    $F80B0000, $0000FFEC, $F805000C, $00060004
                dc.l    $01050810, $08080004
Offset_0x0740A4:
                dc.w    $0003
                dc.l    $F80B0000, $0000FFEC, $F805000C, $00060004
                dc.l    $01050810, $08080004
Offset_0x0740BE:
                dc.w    $0003
                dc.l    $F80B0000, $0000FFEC, $F805000C, $00060004
                dc.l    $FC0B0810, $0808FFFE
Offset_0x0740D8:
                dc.w    $0003
                dc.l    $F80B0000, $0000FFEC, $F805000C, $00060004
                dc.l    $F70B1010, $1008FFFF
Offset_0x0740F2:
                dc.w    $0001
                dc.l    $F00F0000, $0000FFF0
Offset_0x0740FC:
                dc.w    $0001
                dc.l    $F00F0000, $0000FFF0
Offset_0x074106:
                dc.w    $0001
                dc.l    $F00F0000, $0000FFF0
Offset_0x074110:
                dc.w    $0001
                dc.l    $F8090000, $0000FFDC
Offset_0x07411A:
                dc.w    $0001
                dc.l    $F8090000, $0000FFDC
Offset_0x074124:
                dc.w    $0001
                dc.l    $F8090000, $0000FFDC
Offset_0x07412E:
                dc.w    $0001
                dc.l    $F8090000, $0000FFDC
Offset_0x074138:
                dc.w    $0001
                dc.l    $07090000, $0000FFE1
Offset_0x074142:
                dc.w    $0001
                dc.l    $07090000, $0000FFE1
Offset_0x07414C:
                dc.w    $0001
                dc.l    $07090000, $0000FFE1
Offset_0x074156:
                dc.w    $0001
                dc.l    $07090000, $0000FFE1
Offset_0x074160:
                dc.w    $0001
                dc.l    $0C070000, $0000FFF8
Offset_0x07416A:
                dc.w    $0001
                dc.l    $0C070000, $0000FFF8
Offset_0x074174:
                dc.w    $0001
                dc.l    $0C070000, $0000FFF8
Offset_0x07417E:
                dc.w    $0001
                dc.l    $0C070000, $0000FFF8
Offset_0x074188:
                dc.w    $0001
                dc.l    $07070000, $00000007
Offset_0x074192:
                dc.w    $0001
                dc.l    $07070000, $00000007
Offset_0x07419C:
                dc.w    $0001
                dc.l    $07070000, $00000007
Offset_0x0741A6:
                dc.w    $0001
                dc.l    $07070000, $00000007
Offset_0x0741B0:
                dc.w    $0002
                dc.l    $E8050000, $0000FFF8, $F80B0004, $0002FFF0
Offset_0x0741C2:
                dc.w    $0002
                dc.l    $E8050000, $0000FFF8, $F80B0004, $0002FFF0
Offset_0x0741D4:
                dc.w    $0001
                dc.l    $F00B0000, $0000FFF9
Offset_0x0741DE:
                dc.w    $0001
                dc.l    $F00F0000, $0000FFF0
Offset_0x0741E8:
                dc.w    $0001
                dc.l    $F00F0000, $0000FFF0
Offset_0x0741F2:
                dc.w    $0002
                dc.l    $F00F0000, $0000FFF0, $E40D0010, $0008FFEA
Offset_0x074204:
                dc.w    $0002
                dc.l    $F00F0000, $0000FFF0, $E40D0810, $0808FFEA
Offset_0x074216:
                dc.w    $0001
                dc.l    $F40F0000, $0000FFF0
Offset_0x074220:
                dc.w    $0001
                dc.l    $F40F0000, $0000FFF0
Offset_0x07422A:
                dc.w    $0001
                dc.l    $F40F0000, $0000FFF0
Offset_0x074234:
                dc.w    $0002
                dc.l    $F0090000, $0000FFF8, $000D0006, $0003FFF0
Offset_0x074246:
                dc.w    $0002
                dc.l    $F0090000, $0000FFF8, $00090006, $0003FFF8
Offset_0x074258:
                dc.w    $0002
                dc.l    $F0090000, $0000FFF8, $00090006, $0003FFF8
Offset_0x07426A:
                dc.w    $0002
                dc.l    $F0090000, $0000FFF8, $00090006, $0003FFF8
Offset_0x07427C:
                dc.w    $0002
                dc.l    $F0090000, $0000FFF0, $000D0006, $0003FFF0
Offset_0x07428E:
                dc.w    $0002
                dc.l    $F0090000, $0000FFF0, $000D0006, $0003FFF0
Offset_0x0742A0:
                dc.w    $0002
                dc.l    $F8010000, $0000FFE8, $F00B0002, $0001FFF0
Offset_0x0742B2:
                dc.w    $0002
                dc.l    $F0090000, $0000FFF0, $000D0006, $0003FFE8
Offset_0x0742C4:
                dc.w    $0001
                dc.l    $F00F0000, $0000FFF0
Offset_0x0742CE:
                dc.w    $0002
                dc.l    $F00F0000, $0000FFEC, $F0030010, $0008000C
Offset_0x0742E0:
                dc.w    $0002
                dc.l    $F00F0000, $0000FFEC, $F0030010, $0008000C
Offset_0x0742F2:
                dc.w    $0002
                dc.l    $F8050000, $0000FFEC, $F00B0004, $0002FFFC
Offset_0x074304:
                dc.w    $0002
                dc.l    $F0070000, $0000FFF0, $F0070800, $08000000
Offset_0x074316:
                dc.w    $0002
                dc.l    $F8050800, $08000004, $F00B0804, $0802FFEC
Offset_0x074328:
                dc.w    $0002
                dc.l    $F0070000, $0000FFF0, $F8050008, $00040000
Offset_0x07433A:
                dc.w    $0002
                dc.l    $F0070800, $08000000, $F8050808, $0804FFF0
Offset_0x07434C:
                dc.w    $0002
                dc.l    $F8050000, $0000FFEC, $F00B0004, $0002FFFC
Offset_0x07435E:
                dc.w    $0001
                dc.l    $F00F0000, $0000FFF0
Offset_0x074368:
                dc.w    $0001
                dc.l    $F00B0000, $0000FFF1
Offset_0x074372:
                dc.w    $0002
                dc.l    $E4050000, $0000FFF8, $F40B0004, $0002FFF1
Offset_0x074384:
                dc.w    $0001
                dc.l    $F20B0000, $0000FFF2
Offset_0x07438E:
                dc.w    $0001
                dc.l    $F40B0000, $0000FFF0
Offset_0x074398:
                dc.w    $0001
                dc.l    $F30B0000, $0000FFF2
Offset_0x0743A2:
                dc.w    $0001
                dc.l    $F20B0000, $0000FFF2
Offset_0x0743AC:
                dc.w    $0001
                dc.l    $F20B0000, $0000FFF2
Offset_0x0743B6:
                dc.w    $0001
                dc.l    $F00B0000, $0000FFF1
Offset_0x0743C0:
                dc.w    $0001
                dc.l    $ED0B0000, $0000FFF0
Offset_0x0743CA:
                dc.w    $0001
                dc.l    $EC0B0000, $0000FFF1
Offset_0x0743D4:
                dc.w    $0002
                dc.l    $F4090000, $0000FFF3, $04050006, $0003FFF3
Offset_0x0743E6:
                dc.w    $0002
                dc.l    $F2070000, $0000FFF0, $EC030008, $00040000
Offset_0x0743F8:
                dc.w    $0001
                dc.l    $F8090000, $0000FFE0
Offset_0x074402:
                dc.w    $0001
                dc.l    $F8090000, $0000FFE0
Offset_0x07440C:
                dc.w    $0001
                dc.l    $F8090000, $0000FFE0
Offset_0x074416:
                dc.w    $0001
                dc.l    $F8090000, $0000FFE0
Offset_0x074420:
                dc.w    $0002
                dc.l    $E8090000, $0000FFF4, $F80D0006, $0003FFF4
Offset_0x074432:
                dc.w    $0002
                dc.l    $E8090000, $0000FFF4, $F80D0006, $0003FFF4
Offset_0x074444:
                dc.w    $0001
                dc.l    $FD090000, $0000FFE3
Offset_0x07444E:
                dc.w    $0001
                dc.l    $FD090000, $0000FFE3
Offset_0x074458:
                dc.w    $0001
                dc.l    $FD090000, $0000FFE3
Offset_0x074462:
                dc.w    $0001
                dc.l    $FD090000, $0000FFE3
;-------------------------------------------------------------------------------
Miles_Dyn_Script:                                              ; Offset_0x07446C
                dc.w    Offset_0x074582-Miles_Dyn_Script
                dc.w    Offset_0x074584-Miles_Dyn_Script
                dc.w    Offset_0x07458A-Miles_Dyn_Script
                dc.w    Offset_0x074590-Miles_Dyn_Script
                dc.w    Offset_0x074596-Miles_Dyn_Script
                dc.w    Offset_0x07459C-Miles_Dyn_Script
                dc.w    Offset_0x0745A0-Miles_Dyn_Script
                dc.w    Offset_0x0745A4-Miles_Dyn_Script
                dc.w    Offset_0x0745AA-Miles_Dyn_Script
                dc.w    Offset_0x0745B0-Miles_Dyn_Script
                dc.w    Offset_0x0745B4-Miles_Dyn_Script
                dc.w    Offset_0x0745B8-Miles_Dyn_Script
                dc.w    Offset_0x0745BC-Miles_Dyn_Script
                dc.w    Offset_0x0745C0-Miles_Dyn_Script
                dc.w    Offset_0x0745C4-Miles_Dyn_Script
                dc.w    Offset_0x0745CC-Miles_Dyn_Script
                dc.w    Offset_0x0745D4-Miles_Dyn_Script
                dc.w    Offset_0x0745DC-Miles_Dyn_Script
                dc.w    Offset_0x0745E4-Miles_Dyn_Script
                dc.w    Offset_0x0745EC-Miles_Dyn_Script
                dc.w    Offset_0x0745F4-Miles_Dyn_Script
                dc.w    Offset_0x0745FC-Miles_Dyn_Script
                dc.w    Offset_0x074604-Miles_Dyn_Script
                dc.w    Offset_0x07460C-Miles_Dyn_Script
                dc.w    Offset_0x074614-Miles_Dyn_Script
                dc.w    Offset_0x07461C-Miles_Dyn_Script
                dc.w    Offset_0x074624-Miles_Dyn_Script
                dc.w    Offset_0x07462C-Miles_Dyn_Script
                dc.w    Offset_0x074634-Miles_Dyn_Script
                dc.w    Offset_0x07463C-Miles_Dyn_Script
                dc.w    Offset_0x074644-Miles_Dyn_Script
                dc.w    Offset_0x07464C-Miles_Dyn_Script
                dc.w    Offset_0x074654-Miles_Dyn_Script
                dc.w    Offset_0x07465C-Miles_Dyn_Script
                dc.w    Offset_0x074664-Miles_Dyn_Script
                dc.w    Offset_0x07466C-Miles_Dyn_Script
                dc.w    Offset_0x074674-Miles_Dyn_Script
                dc.w    Offset_0x07467C-Miles_Dyn_Script
                dc.w    Offset_0x074684-Miles_Dyn_Script
                dc.w    Offset_0x07468A-Miles_Dyn_Script
                dc.w    Offset_0x074692-Miles_Dyn_Script
                dc.w    Offset_0x074698-Miles_Dyn_Script
                dc.w    Offset_0x0746A0-Miles_Dyn_Script
                dc.w    Offset_0x0746A6-Miles_Dyn_Script
                dc.w    Offset_0x0746AE-Miles_Dyn_Script
                dc.w    Offset_0x0746B4-Miles_Dyn_Script
                dc.w    Offset_0x0746BC-Miles_Dyn_Script
                dc.w    Offset_0x0746C2-Miles_Dyn_Script
                dc.w    Offset_0x0746C8-Miles_Dyn_Script
                dc.w    Offset_0x0746C2-Miles_Dyn_Script
                dc.w    Offset_0x0746CE-Miles_Dyn_Script
                dc.w    Offset_0x0746D4-Miles_Dyn_Script
                dc.w    Offset_0x0746DA-Miles_Dyn_Script
                dc.w    Offset_0x0746E2-Miles_Dyn_Script
                dc.w    Offset_0x0746EA-Miles_Dyn_Script
                dc.w    Offset_0x0746F2-Miles_Dyn_Script
                dc.w    Offset_0x0746FA-Miles_Dyn_Script
                dc.w    Offset_0x074702-Miles_Dyn_Script
                dc.w    Offset_0x07470A-Miles_Dyn_Script
                dc.w    Offset_0x074712-Miles_Dyn_Script
                dc.w    Offset_0x07471A-Miles_Dyn_Script
                dc.w    Offset_0x074712-Miles_Dyn_Script
                dc.w    Offset_0x074722-Miles_Dyn_Script
                dc.w    Offset_0x07472A-Miles_Dyn_Script
                dc.w    Offset_0x074732-Miles_Dyn_Script
                dc.w    Offset_0x07473A-Miles_Dyn_Script
                dc.w    Offset_0x074742-Miles_Dyn_Script
                dc.w    Offset_0x07474A-Miles_Dyn_Script
                dc.w    Offset_0x074752-Miles_Dyn_Script
                dc.w    Offset_0x07475A-Miles_Dyn_Script
                dc.w    Offset_0x074762-Miles_Dyn_Script
                dc.w    Offset_0x074766-Miles_Dyn_Script
                dc.w    Offset_0x07476A-Miles_Dyn_Script
                dc.w    Offset_0x07476E-Miles_Dyn_Script
                dc.w    Offset_0x074772-Miles_Dyn_Script
                dc.w    Offset_0x074776-Miles_Dyn_Script
                dc.w    Offset_0x07477A-Miles_Dyn_Script
                dc.w    Offset_0x07477E-Miles_Dyn_Script
                dc.w    Offset_0x074782-Miles_Dyn_Script
                dc.w    Offset_0x074786-Miles_Dyn_Script
                dc.w    Offset_0x07478A-Miles_Dyn_Script
                dc.w    Offset_0x07478E-Miles_Dyn_Script
                dc.w    Offset_0x074792-Miles_Dyn_Script
                dc.w    Offset_0x074796-Miles_Dyn_Script
                dc.w    Offset_0x07479A-Miles_Dyn_Script
                dc.w    Offset_0x07479E-Miles_Dyn_Script
                dc.w    Offset_0x0747A2-Miles_Dyn_Script
                dc.w    Offset_0x0747A6-Miles_Dyn_Script
                dc.w    Offset_0x0747AA-Miles_Dyn_Script
                dc.w    Offset_0x0747AE-Miles_Dyn_Script
                dc.w    Offset_0x0747B4-Miles_Dyn_Script
                dc.w    Offset_0x0747BA-Miles_Dyn_Script
                dc.w    Offset_0x0747BE-Miles_Dyn_Script
                dc.w    Offset_0x0747C2-Miles_Dyn_Script
                dc.w    Offset_0x0747C6-Miles_Dyn_Script
                dc.w    Offset_0x0747C6-Miles_Dyn_Script
                dc.w    Offset_0x0747CC-Miles_Dyn_Script
                dc.w    Offset_0x0747D0-Miles_Dyn_Script
                dc.w    Offset_0x0747D4-Miles_Dyn_Script
                dc.w    Offset_0x0747D8-Miles_Dyn_Script
                dc.w    Offset_0x0747DE-Miles_Dyn_Script
                dc.w    Offset_0x0747E4-Miles_Dyn_Script
                dc.w    Offset_0x0747EA-Miles_Dyn_Script
                dc.w    Offset_0x0747F0-Miles_Dyn_Script
                dc.w    Offset_0x0747F6-Miles_Dyn_Script
                dc.w    Offset_0x0747FC-Miles_Dyn_Script
                dc.w    Offset_0x074802-Miles_Dyn_Script
                dc.w    Offset_0x074808-Miles_Dyn_Script
                dc.w    Offset_0x07480C-Miles_Dyn_Script
                dc.w    Offset_0x074812-Miles_Dyn_Script
                dc.w    Offset_0x074818-Miles_Dyn_Script
                dc.w    Offset_0x07481E-Miles_Dyn_Script
                dc.w    Offset_0x074818-Miles_Dyn_Script
                dc.w    Offset_0x074824-Miles_Dyn_Script
                dc.w    Offset_0x074824-Miles_Dyn_Script
                dc.w    Offset_0x07482A-Miles_Dyn_Script
                dc.w    Offset_0x074830-Miles_Dyn_Script
                dc.w    Offset_0x074834-Miles_Dyn_Script
                dc.w    Offset_0x074838-Miles_Dyn_Script
                dc.w    Offset_0x07483E-Miles_Dyn_Script
                dc.w    Offset_0x074842-Miles_Dyn_Script
                dc.w    Offset_0x074846-Miles_Dyn_Script
                dc.w    Offset_0x07484A-Miles_Dyn_Script
                dc.w    Offset_0x07484E-Miles_Dyn_Script
                dc.w    Offset_0x074852-Miles_Dyn_Script
                dc.w    Offset_0x074856-Miles_Dyn_Script
                dc.w    Offset_0x07485A-Miles_Dyn_Script
                dc.w    Offset_0x07485E-Miles_Dyn_Script
                dc.w    Offset_0x074864-Miles_Dyn_Script
                dc.w    Offset_0x07476E-Miles_Dyn_Script
                dc.w    Offset_0x074772-Miles_Dyn_Script
                dc.w    Offset_0x074776-Miles_Dyn_Script
                dc.w    Offset_0x07477A-Miles_Dyn_Script
                dc.w    Offset_0x07486A-Miles_Dyn_Script
                dc.w    Offset_0x074870-Miles_Dyn_Script
                dc.w    Offset_0x07476E-Miles_Dyn_Script
                dc.w    Offset_0x074772-Miles_Dyn_Script
                dc.w    Offset_0x074776-Miles_Dyn_Script
                dc.w    Offset_0x07477A-Miles_Dyn_Script
Offset_0x074582:
                dc.w    $0000
Offset_0x074584:
                dc.w    $0002
                dc.w    $5000, $5006
Offset_0x07458A:
                dc.w    $0002
                dc.w    $500C, $5006
Offset_0x074590:
                dc.w    $0002
                dc.w    $5012, $5006
Offset_0x074596:
                dc.w    $0002
                dc.w    $5018, $5006
Offset_0x07459C:
                dc.w    $0001
                dc.w    $B01E
Offset_0x0745A0:
                dc.w    $0001
                dc.w    $B02A
Offset_0x0745A4:
                dc.w    $0002
                dc.w    $5036, $503C
Offset_0x0745AA:
                dc.w    $0002
                dc.w    $5036, $5042
Offset_0x0745B0:
                dc.w    $0001
                dc.w    $7048
Offset_0x0745B4:
                dc.w    $0001
                dc.w    $B050
Offset_0x0745B8:
                dc.w    $0001
                dc.w    $B05C
Offset_0x0745BC:
                dc.w    $0001
                dc.w    $5068
Offset_0x0745C0:
                dc.w    $0001
                dc.w    $B06E
Offset_0x0745C4:
                dc.w    $0003
                dc.w    $507A, $7080, $50CA
Offset_0x0745CC:
                dc.w    $0003
                dc.w    $5088, $708E, $50D0
Offset_0x0745D4:
                dc.w    $0003
                dc.w    $5096, $509C, $50D6
Offset_0x0745DC:
                dc.w    $0003
                dc.w    $50A2, $50A8, $50DC
Offset_0x0745E4:
                dc.w    $0003
                dc.w    $507A, $70AE, $50CA
Offset_0x0745EC:
                dc.w    $0003
                dc.w    $5088, $70B6, $50D0
Offset_0x0745F4:
                dc.w    $0003
                dc.w    $5096, $50BE, $50D6
Offset_0x0745FC:
                dc.w    $0003
                dc.w    $50A2, $50C4, $50DC
Offset_0x074604:
                dc.w    $0003
                dc.w    $10E2, $30E4, $B0E8
Offset_0x07460C:
                dc.w    $0003
                dc.w    $30F4, $B0F8, $3104
Offset_0x074614:
                dc.w    $0003
                dc.w    $3108, $310C, $B110
Offset_0x07461C:
                dc.w    $0003
                dc.w    $111C, $F11E, $112E
Offset_0x074624:
                dc.w    $0003
                dc.w    $10E2, $30E4, $B130
Offset_0x07462C:
                dc.w    $0003
                dc.w    $30F4, $B13C, $3148
Offset_0x074634:
                dc.w    $0003
                dc.w    $3108, $310C, $B14C
Offset_0x07463C:
                dc.w    $0003
                dc.w    $111C, $F158, $1168
Offset_0x074644:
                dc.w    $0003
                dc.w    $716A, $7172, $71CA
Offset_0x07464C:
                dc.w    $0003
                dc.w    $717A, $7182, $71D2
Offset_0x074654:
                dc.w    $0003
                dc.w    $718A, $7192, $71DA
Offset_0x07465C:
                dc.w    $0003
                dc.w    $719A, $71A2, $75BE
Offset_0x074664:
                dc.w    $0003
                dc.w    $716A, $71AA, $71CA
Offset_0x07466C:
                dc.w    $0003
                dc.w    $717A, $71B2, $71D2
Offset_0x074674:
                dc.w    $0003
                dc.w    $718A, $71BA, $71DA
Offset_0x07467C:
                dc.w    $0003
                dc.w    $719A, $71C2, $75BE
Offset_0x074684:
                dc.w    $0002
                dc.w    $11EA, $F1EC
Offset_0x07468A:
                dc.w    $0003
                dc.w    $31FC, $1200, $F202
Offset_0x074692:
                dc.w    $0002
                dc.w    $1212, $F214
Offset_0x074698:
                dc.w    $0003
                dc.w    $1224, $1226, $F228
Offset_0x0746A0:
                dc.w    $0002
                dc.w    $11EA, $F238
Offset_0x0746A6:
                dc.w    $0003
                dc.w    $1248, $1200, $F24A
Offset_0x0746AE:
                dc.w    $0002
                dc.w    $1212, $F25A
Offset_0x0746B4:
                dc.w    $0003
                dc.w    $126A, $1224, $F26C
Offset_0x0746BC:
                dc.w    $0002
                dc.w    $F27C, $729C
Offset_0x0746C2:
                dc.w    $0002
                dc.w    $F28C, $32A4
Offset_0x0746C8:
                dc.w    $0002
                dc.w    $F27C, $32A8
Offset_0x0746CE:
                dc.w    $0002
                dc.w    $F27C, $72AC
Offset_0x0746D4:
                dc.w    $0002
                dc.w    $F28C, $72AC
Offset_0x0746DA:
                dc.w    $0003
                dc.w    $12B4, $B2B6, $B2D2
Offset_0x0746E2:
                dc.w    $0003
                dc.w    $32C2, $B2C6, $32DE
Offset_0x0746EA:
                dc.w    $0003
                dc.w    $12B4, $B2B6, $32E2
Offset_0x0746F2:
                dc.w    $0003
                dc.w    $32C2, $B2C6, $32E6
Offset_0x0746FA:
                dc.w    $0003
                dc.w    $12B4, $B2B6, $B2EA
Offset_0x074702:
                dc.w    $0003
                dc.w    $32C2, $B2C6, $B2EA
Offset_0x07470A:
                dc.w    $0003
                dc.w    $52F6, $72FC, $7312
Offset_0x074712:
                dc.w    $0003
                dc.w    $5304, $730A, $331E
Offset_0x07471A:
                dc.w    $0003
                dc.w    $52F6, $72FC, $331A
Offset_0x074722:
                dc.w    $0003
                dc.w    $52F6, $72FC, $7322
Offset_0x07472A:
                dc.w    $0003
                dc.w    $5304, $730A, $7322
Offset_0x074732:
                dc.w    $0003
                dc.w    $B32A, $3336, $B2D2
Offset_0x07473A:
                dc.w    $0003
                dc.w    $B33A, $3346, $32DE
Offset_0x074742:
                dc.w    $0003
                dc.w    $B32A, $3336, $32E2
Offset_0x07474A:
                dc.w    $0003
                dc.w    $B33A, $3346, $32E6
Offset_0x074752:
                dc.w    $0003
                dc.w    $B32A, $3336, $B2EA
Offset_0x07475A:
                dc.w    $0003
                dc.w    $B33A, $3346, $B2EA
Offset_0x074762:
                dc.w    $0001
                dc.w    $F34A
Offset_0x074766:
                dc.w    $0001
                dc.w    $F35A
Offset_0x07476A:
                dc.w    $0001
                dc.w    $F36A
Offset_0x07476E:
                dc.w    $0001
                dc.w    $50CA
Offset_0x074772:
                dc.w    $0001
                dc.w    $50D0
Offset_0x074776:
                dc.w    $0001
                dc.w    $50D6
Offset_0x07477A:
                dc.w    $0001
                dc.w    $50DC
Offset_0x07477E:
                dc.w    $0001
                dc.w    $537A
Offset_0x074782:
                dc.w    $0001
                dc.w    $5380
Offset_0x074786:
                dc.w    $0001
                dc.w    $5386
Offset_0x07478A:
                dc.w    $0001
                dc.w    $538C
Offset_0x07478E:
                dc.w    $0001
                dc.w    $71CA
Offset_0x074792:
                dc.w    $0001
                dc.w    $71D2
Offset_0x074796:
                dc.w    $0001
                dc.w    $71DA
Offset_0x07479A:
                dc.w    $0001
                dc.w    $75BE
Offset_0x07479E:
                dc.w    $0001
                dc.w    $7392
Offset_0x0747A2:
                dc.w    $0001
                dc.w    $739A
Offset_0x0747A6:
                dc.w    $0001
                dc.w    $73A2
Offset_0x0747AA:
                dc.w    $0001
                dc.w    $73AA
Offset_0x0747AE:
                dc.w    $0002
                dc.w    $33B2, $B3B6
Offset_0x0747B4:
                dc.w    $0002
                dc.w    $33B2, $B3C2
Offset_0x0747BA:
                dc.w    $0001
                dc.w    $B3CE
Offset_0x0747BE:
                dc.w    $0001
                dc.w    $F3DA
Offset_0x0747C2:
                dc.w    $0001
                dc.w    $F3EA
Offset_0x0747C6:
                dc.w    $0002
                dc.w    $F3FA, $740A
Offset_0x0747CC:
                dc.w    $0001
                dc.w    $F412
Offset_0x0747D0:
                dc.w    $0001
                dc.w    $F422
Offset_0x0747D4:
                dc.w    $0001
                dc.w    $F432
Offset_0x0747D8:
                dc.w    $0002
                dc.w    $5442, $7448
Offset_0x0747DE:
                dc.w    $0002
                dc.w    $5442, $5450
Offset_0x0747E4:
                dc.w    $0002
                dc.w    $5442, $5456
Offset_0x0747EA:
                dc.w    $0002
                dc.w    $5442, $545C
Offset_0x0747F0:
                dc.w    $0002
                dc.w    $5462, $7468
Offset_0x0747F6:
                dc.w    $0002
                dc.w    $5470, $7476
Offset_0x0747FC:
                dc.w    $0002
                dc.w    $147E, $B480
Offset_0x074802:
                dc.w    $0002
                dc.w    $548C, $7492
Offset_0x074808:
                dc.w    $0001
                dc.w    $F49A
Offset_0x07480C:
                dc.w    $0002
                dc.w    $F4AA, $34BA
Offset_0x074812:
                dc.w    $0002
                dc.w    $F4BE, $34CE
Offset_0x074818:
                dc.w    $0002
                dc.w    $34D2, $B4D6
Offset_0x07481E:
                dc.w    $0002
                dc.w    $74E2, $74E2
Offset_0x074824:
                dc.w    $0002
                dc.w    $74EA, $34F2
Offset_0x07482A:
                dc.w    $0002
                dc.w    $34F6, $B4FA
Offset_0x074830:
                dc.w    $0001
                dc.w    $F506
Offset_0x074834:
                dc.w    $0001
                dc.w    $B516
Offset_0x074838:
                dc.w    $0002
                dc.w    $3522, $B526
Offset_0x07483E:
                dc.w    $0001
                dc.w    $B532
Offset_0x074842:
                dc.w    $0001
                dc.w    $B53E
Offset_0x074846:
                dc.w    $0001
                dc.w    $B54A
Offset_0x07484A:
                dc.w    $0001
                dc.w    $B556
Offset_0x07484E:
                dc.w    $0001
                dc.w    $B562
Offset_0x074852:
                dc.w    $0001
                dc.w    $B56E
Offset_0x074856:
                dc.w    $0001
                dc.w    $B57A
Offset_0x07485A:
                dc.w    $0001
                dc.w    $B586
Offset_0x07485E:
                dc.w    $0002
                dc.w    $5592, $3598
Offset_0x074864:
                dc.w    $0002
                dc.w    $759C, $35A4
Offset_0x07486A:
                dc.w    $0002
                dc.w    $55A8, $75AE
Offset_0x074870:
                dc.w    $0002
                dc.w    $55A8, $75B6
;-------------------------------------------------------------------------------
Art_SEGA:                                                      ; Offset_0x074876
                incbin  'data\art\sega.nem'

Art_SEGA_Some_Blocks:                                          ; Offset_0x074CF6
                incbin  'data\art\segablck.nem'
SEGA_Mappings:                                                 ; Offset_0x074D0E
                incbin  'data\mappings\sega.eni'
TS_Wings_Sonic_Mappings:                                       ; Offset_0x074DC6
                incbin  'data\mappings\titlescr.eni'   
Title_Screen_Bg_Mappings:                                      ; Offset_0x074F1E
                incbin  'data\mappings\titscrbg.eni'     
Title_Screen_R_Bg_Mappings:                                    ; Offset_0x0751D2               
                incbin  'data\mappings\titscrb2.eni'                                                 
Art_Title_Screen_Bg_Wings:                                     ; Offset_0x07541A 
                incbin  'data\art\titlescr.nem' ; Title Screen Wings and background                                  
Art_Title_Screen_Sonic_Miles:                                  ; Offset_0x076D7C
                incbin  'data\art\sncmlscr.nem' ; Sonic And Miles in Title Screen
Art_FireBall:                                                  ; Offset_0x0778C0
                incbin  'data\art\fireball.nem'
Art_GHz_Waterfall:                                             ; Offset_0x077A36
                incbin  'data\ghz\watrfall.nem' 
Art_HTz_Lava_Bubble:                                           ; Offset_0x077B3C
                incbin  'data\htz\lvbubble.nem'                 
Art_GHz_Bridge:                                                ; Offset_0x077C8A
                incbin  'data\ghz\bridge.nem' 
Art_HTz_Teleferic:                                             ; Offset_0x077D62
                incbin  'data\htz\telefrcs.nem'               
Art_HTz_Automatic_Door:                                        ; Offset_0x078056 
                incbin  'data\htz\autodoor.nem'                  
Art_HTz_See_saw:                                               ; Offset_0x0780CE
                incbin  'data\htz\see-saw.nem'   
Art_Unk_Fireball:                                              ; Offset_0x078266
                incbin  'data\art\unkfball.nem'                    
Art_HTz_Rock:                                                  ; Offset_0x078374  
                incbin  'data\htz\rock.nem'       
Art_HTz_See_saw_badnick:                                       ; Offset_0x0784AA
                incbin  'data\htz\see-sawb.nem'                                  
Art_Mz_Rotating_Gear:                                          ; Offset_0x078516
                incbin  'data\mz\gear.nem'  
Art_Mz_Gear_Holes:                                             ; Offset_0x07896E
                incbin  'data\mz\gearhole.nem'  
Art_Mz_Harpon_Platform:                                        ; Offset_0x078A16
                incbin  'data\mz\harp_ptf.nem' 
Art_Mz_Steam:                                                  ; Offset_0x078AE4
                incbin  'data\mz\steam.nem'  
Art_Mz_Harpon:                                                 ; Offset_0x078BEE
                incbin  'data\mz\harpoon.nem' 
Art_Mz_Screw_Nut:                                              ; Offset_0x078CB0
                incbin  'data\mz\screwnut.nem' 
Art_Mz_Lava_Bubble:                                            ; Offset_0x078D26
                incbin  'data\mz\lvbubble.nem' 
Art_Mz_Elevator:                                               ; Offset_0x078DDC
                incbin  'data\mz\elevator.nem'  
Art_Mz_Parallelogram_Elevator:                                 ; Offset_0x078E4C
                incbin  'data\mz\parallel.nem'                
Art_Mz_Miscellaneous:                                          ; Offset_0x0790F8
                incbin  'data\mz\miscelns.nem'
Art_Mz_Mini_Gear:                                              ; Offset_0x07919A
                incbin  'data\mz\minigear.nem' 
Art_Mz_Teleport_Flash:                                         ; Offset_0x07927C
                incbin  'data\mz\tlpflash.nem'                
Art_Boss_Switch:                                               ; Offset_0x079288  
                incbin  'data\sfz\b_switch.nem' 
Art_Breakable_Wall:                                            ; Offset_0x0792F6                 
                incbin  'data\sfz\brk_wall.nem'                           
Art_HPz_Bridge:                                                ; Offset_0x0793DA
                incbin  'data\hpz\bridge.nem'
Art_HPz_Waterfall:                                             ; Offset_0x079552
                incbin  'data\hpz\watrfall.nem' 
Art_HPz_Emerald:                                               ; Offset_0x0798B4
                incbin  'data\hpz\emerald.nem'  
Art_HPz_Platform:                                              ; Offset_0x079B26
                incbin  'data\hpz\platform.nem'   
Art_HPz_Orbs_2:                                                ; Offset_0x079BE6
                incbin  'data\hpz\orbs.nem'
Art_HPz_Unknow_Platform:                                       ; Offset_0x079E22
                incbin  'data\hpz\unkptfm.nem'  
Art_OOz_Giant_Spikeball:                                       ; Offset_0x079FBC
                incbin  'data\ooz\gspkball.nem'
Art_OOz_Touch_Boost_Up:                                        ; Offset_0x07A1B4
                incbin  'data\ooz\boost_up.nem' 
Art_OOz_Break_To_Boost_Horizontal:                             ; Offset_0x07A24A
                incbin  'data\ooz\brkbst_h.nem'
Art_OOz_Oil:                                                   ; Offset_0x07A2B6
                incbin  'data\ooz\oil.nem'
Art_OOz_Oil_01:                                                ; Offset_0x07A432
                incbin  'data\ooz\oil_01.nem'
Art_OOz_Ball:                                                  ; Offset_0x07A55E
                incbin  'data\ooz\ball.nem'
Art_OOz_Cannon:                                                ; Offset_0x07A67E
                incbin  'data\ooz\cannon.nem'   
Art_OOz_Collapsing_Platform:                                   ; Offset_0x07A96E
                incbin  'data\ooz\platform.nem'
Art_OOz_Spring_Push_Boost:                                     ; Offset_0x07AC02
                incbin  'data\ooz\spngpush.nem'
Art_OOz_Swing_Platform:                                        ; Offset_0x07ADC4
                incbin  'data\ooz\swngptfm.nem'
Art_OOz_Break_To_Boost_Vertical:                               ; Offset_0x07AFE6
                incbin  'data\ooz\brkbst_v.nem'
Art_OOz_Elevator:                                              ; Offset_0x07B056
                incbin  'data\ooz\elevator.nem'
Art_OOz_Fans:                                                  ; Offset_0x07B1F2
                incbin  'data\ooz\fans.nem'
Art_OOz_Fire_Booster:                                          ; Offset_0x07B4B2
                incbin  'data\ooz\fire_bst.nem'                    
Art_DHz_Box:                                                   ; Offset_0x07B59E
                incbin  'data\dhz\box.nem'
Art_DHz_Collapsing_Platform:                                   ; Offset_0x07B7DC
                incbin  'data\dhz\clp_ptfm.nem' 
Art_DHz_Vines:                                                 ; Offset_0x07B986
                incbin  'data\dhz\vines.nem'
Art_DHz_Vines_01:                                              ; Offset_0x07BA7E
                incbin  'data\dhz\vines_1.nem'
Art_DHz_Bridge:                                                ; Offset_0x07BB28
                incbin  'data\dhz\bridge.nem'     
Art_CNz_Green_Platforms:                                       ; Offset_0x07BB98
                incbin  'data\cnz\greenptf.nem' 
Art_CNz_Spikeball_Slot_Machine:                                ; Offset_0x07BC00
                incbin  'data\cnz\spikball.nem'
Art_CNz_Box:                                                   ; Offset_0x07BC60
                incbin  'data\cnz\box.nem'
Art_CNz_Elevator:                                              ; Offset_0x07BD4C
                incbin  'data\cnz\elevator.nem'
Art_CNz_Slot_Machine_Starter:                                  ; Offset_0x07BDBE
                incbin  'data\cnz\slotmach.nem'
Art_CNz_Blue_Bumper:                                           ; Offset_0x07BE2C
                incbin  'data\cnz\bbumpers.nem'
Art_CNz_Bumpers:                                               ; Offset_0x07BEB6
                incbin  'data\cnz\bumpers.nem'
Art_CNz_Diagonal_Launcher:                                     ; Offset_0x07C048
                incbin  'data\cnz\d_launch.nem'
Art_CNz_Vertical_Launcher:                                     ; Offset_0x07C22E
                incbin  'data\cnz\v_launch.nem'
Art_CNz_Green_Bumpers:                                         ; Offset_0x07C364
                incbin  'data\cnz\gbumpers.nem'
Art_CNz_Flippers:                                              ; Offset_0x07C48A
                incbin  'data\cnz\flippers.nem'
Art_CPz_Triangle_Platform:                                     ; Offset_0x07C7AE
                incbin  'data\cpz\tri_ptfm.nem'                                                                                                              
Art_Water_Surface:                                             ; Offset_0x07C8FC
                incbin  'data\art\watrsurf.nem'      
Art_CPz_Speed_Booster:                                         ; Offset_0x07CA6C
                incbin  'data\cpz\speedbst.nem'
Art_CPz_Worms:                                                 ; Offset_0x07CAD4
                incbin  'data\cpz\worms.nem'
Art_CPz_Metal_Structure:                                       ; Offset_0x07CB46
                incbin  'data\cpz\metal_st.nem'
Art_CPz_Breakable_Block:                                       ; Offset_0x07CD50
                incbin  'data\cpz\brkblock.nem'
Art_CPz_Automatic_Door:                                        ; Offset_0x07CD90
                incbin  'data\cpz\autodoor.nem'
Art_CPz_Open_Close_Platform:                                   ; Offset_0x07CDFC
                incbin  'data\cpz\oc_ptfrm.nem'
Art_CPz_Platforms:                                             ; Offset_0x07CFDE
                incbin  'data\cpz\platform.nem'
Art_CPz_Spring_Tubes:                                          ; Offset_0x07D19E
                incbin  'data\cpz\spgtubes.nem'  
Art_NGHz_Water_Surface:                                        ; Offset_0x07D39A
                incbin  'data\nghz\watrsurf.nem' 
Art_NGHz_Leaves:                                               ; Offset_0x07D480
                incbin  'data\nghz\leaves.nem' 
Art_NGHz_Arrow_Shooter:                                        ; Offset_0x07D50C
                incbin  'data\nghz\arrow_s.nem'
Art_NGHz_Automatic_Door:                                       ; Offset_0x07D66A
                incbin  'data\nghz\autodoor.nem'                                                         
Art_Switch:                                                    ; Offset_0x07D702
                incbin  'data\art\switch.nem'                                
Art_Vertical_Spring:                                           ; Offset_0x07D7DA
                incbin  'data\art\v_spring.nem' 
Art_Horizontal_Spring:                                         ; Offset_0x07D8F6
                incbin  'data\art\h_spring.nem' 
Art_Diagonal_Spring:                                           ; Offset_0x07D9C0                               
                incbin  'data\art\d_spring.nem' 
Art_Head_Up_Display:                                           ; Offset_0x07DB94
                incbin  'data\art\hud.nem'                
Art_Head_Up_Display_Sonic:                                     ; Offset_0x07DC9C  
                incbin  'data\art\hudsonic.nem'     
Art_Rings:                                                     ; Offset_0x07DDB2  
                incbin  'data\art\rings.nem'     
Art_Monitors:                                                  ; Offset_0x07DEA6
                incbin  'data\art\monitors.nem' 
Art_Spikes:                                                    ; Offset_0x07E2D0
                incbin  'data\art\spikes.nem'                  
Art_Hit_Enemy_Points:                                          ; Offset_0x07E320  
                incbin  'data\art\points.nem' 
Art_LampPost:                                                  ; Offset_0x07E3FA
                incbin  'data\art\lamppost.nem'
Art_End_Panel:                                                 ; Offset_0x07E4A0
                incbin  'data\art\endpanel.nem' 
Art_Diagonal_Spring_01:                                        ; Offset_0x07EA76
                incbin  'data\art\dspring1.nem' 
Art_DHz_Horizontal_Spikes:                                     ; Offset_0x07EBC6
                incbin  'data\dhz\h_spikes.nem'    
Art_Oxygen_Bubbles:                                            ; Offset_0x07EC42                  
                incbin  'data\art\oxygen.nem'                 
Art_Bubbles:                                                   ; Offset_0x07EE0E
                incbin  'data\art\bubbles.nem'                               
Art_Oxygen_Numbers:                                            ; Offset_0x07EEAC
                incbin  'data\art\oxygnumb.dat' 
Art_Game_Over_Time_Over:                                       ; Offset_0x07F32C
                incbin  'data\art\gt_over.nem'                
Art_Explosion:                                                 ; Offset_0x07F4BE
                incbin  'data\art\explosn.nem'    
Art_Blue_Bird:                                                 ; Offset_0x07F872
                incbin  'data\art\bluebird.nem' 
Art_Squirrel:                                                  ; Offset_0x07F9B4
                incbin  'data\art\squirrel.nem'  
Art_Mouse:                                                     ; Offset_0x07FB18
                incbin  'data\art\mouse.nem' 
Art_Chicken:                                                   ; Offset_0x07FC52
                incbin  'data\art\chicken.nem' 
Art_Monkey:                                                    ; Offset_0x07FDB4
                incbin  'data\art\monkey.nem'
Art_Pigeon:                                                    ; Offset_0x07FEF4
                incbin  'data\art\pigeon.nem'
Art_Pig:                                                       ; Offset_0x080022
                incbin  'data\art\pig.nem'
Art_Seal:                                                      ; Offset_0x080158
                incbin  'data\art\seal.nem'
Art_Penguin:                                                   ; Offset_0x080274
                incbin  'data\art\penguin.nem' 
Art_Turtle:                                                    ; Offset_0x0803F0
                incbin  'data\art\turtle.nem'
Art_Bear:                                                      ; Offset_0x0805A2
                incbin  'data\art\bear.nem'
Art_Rabbit:                                                    ; Offset_0x0806E4
                incbin  'data\art\rabbit.nem'
Art_GHz_Buzzer:                                                ; Offset_0x08083C
                incbin  'data\ghz\buzzer.nem' 
Art_Batbot:                                                    ; Offset_0x080A3C
                incbin  'data\hpz\batbot.nem' 
Art_Octus:                                                     ; Offset_0x080D92
                incbin  'data\ooz\octus.nem'                
Art_Rhinobot:                                                  ; Offset_0x0810B2
                incbin  'data\hpz\rhinobot.nem'
Art_Dinobot:                                                   ; Offset_0x08147A
                incbin  'data\hpz\dinobot.nem'       
Art_Aquis:                                                     ; Offset_0x081850
                incbin  'data\ooz\aquis.nem'                           
Art_GHz_Masher:                                                ; Offset_0x081BB0                
                incbin  'data\ghz\masher.nem'     
Art_Robotnik_Ship:                                             ; Offset_0x081DBC
                incbin  'data\art\robotnik.nem' 
Art_CPz_Boss:                                                  ; Offset_0x0824F8
                incbin  'data\cpz\boss.nem'
Art_Boss_Explosions:                                           ; Offset_0x082A56
                incbin  'data\art\explosns.nem'
Art_Ship_Boost:                                                ; Offset_0x0830DE
                incbin  'data\art\shpboost.nem'
Art_Boss_Smokes:                                               ; Offset_0x08315C
                incbin  'data\art\boss_smk.nem'                       
Art_GHz_Boss_Car:                                              ; Offset_0x083242
                incbin  'data\ghz\boss_car.nem' 
Art_GHz_Boss_Blades:                                           ; Offset_0x083A2E                
                incbin  'data\ghz\b_blades.nem'
Art_HTz_Boss_Fire_Cannon:                                      ; Offset_0x083B22
                incbin  'data\htz\bossfire.nem'
Art_NGHz_Boss:                                                 ; Offset_0x0842EE
                incbin  'data\nghz\boss.nem'        
Art_DHz_Boss:                                                  ; Offset_0x084D44
                incbin  'data\dhz\boss.nem'
Art_CNz_Boss:                                                  ; Offset_0x085C82
                incbin  'data\cnz\boss.nem'
Art_OOz_Boss:                                                  ; Offset_0x0864AC
                incbin  'data\ooz\boss.nem'
Art_Mz_Boss_Balls_And_Robotniks:                               ; Offset_0x086F7C
                incbin  'data\mz\bossball.nem'
Art_DHz_Boss_Rocks:                                            ; Offset_0x0876BA
                incbin  'data\dhz\bossrock.dat'       
Art_Whisp:                                                     ; Offset_0x0877BA
                incbin  'data\nghz\whisp.nem'
Art_Grounder:                                                  ; Offset_0x0878E4
                incbin  'data\nghz\grounder.nem' 
Art_Chop_Chop:                                                 ; Offset_0x087D70
                incbin  'data\nghz\chopchop.nem'      
Art_Rexon:                                                     ; Offset_0x087FC2
                incbin  'data\htz\rexon.nem'                            
Art_Spiker:                                                    ; Offset_0x088180
                incbin  'data\htz\spiker.nem'     
Art_Nebula:                                                    ; Offset_0x088318
                incbin  'data\scz\nebula.nem'  
Art_Turtloid:                                                  ; Offset_0x088538
                incbin  'data\scz\turtloid.nem'                                                       
Art_GHz_Coconuts:                                              ; Offset_0x088A50  
                incbin  'data\ghz\coconuts.nem'  
Art_Crawlton:                                                  ; Offset_0x088D0C
                incbin  'data\dhz\crawlton.nem'     
Art_Flasher:                                                   ; Offset_0x088E34
                incbin  'data\dhz\flasher.nem'                                 
Art_Slicer:                                                    ; Offset_0x088F56   
                incbin  'data\mz\slicer.nem'  
Art_Shellcracker:                                              ; Offset_0x08922E
                incbin  'data\mz\shellcrc.nem' 
Art_Asteron:                                                   ; Offset_0x0894D6   
                incbin  'data\mz\asteron.nem'     
Art_Lander:                                                    ; Offset_0x089606
                incbin  'data\cpz\lander.nem'
Art_Grabber:                                                   ; Offset_0x08988A
                incbin  'data\cpz\grabber.nem'                           
Art_Clucker:                                                   ; Offset_0x089BB2
                incbin  'data\sfz\clucker.nem'  
Art_Balkiry:                                                   ; Offset_0x089DEC 
                incbin  'data\sfz\balkiry.nem'  
Art_Metal_Sonic:                                               ; Offset_0x089FE8
                incbin  'data\dez\metalsnc.nem'                  
Art_Tornado:                                                   ; Offset_0x08AE1A
                incbin  'data\sfz\tornado.nem'
Art_SFz_Cannon:                                                ; Offset_0x08B376
                incbin  'data\sfz\cannon.nem'
Art_Chain_Hook:                                                ; Offset_0x08B55E
                incbin  'data\sfz\chainhook.nem' 
Art_Hatchways:                                                 ; Offset_0x08B716
                incbin  'data\sfz\hatchways.nem'  
Art_Conveyor_Belts_Wheels:                                     ; Offset_0x08B9AE
                incbin  'data\sfz\cb_wheels.nem'
Art_SFz_Platform:                                              ; Offset_0x08BB44 
                incbin  'data\sfz\platform.nem'
Art_Vertical_Laser:                                            ; Offset_0x08BC44
                incbin  'data\sfz\verlaser.nem'
Art_Clouds:                                                    ; Offset_0x08BCD2
                incbin  'data\sfz\clouds.nem'
Art_Horizontal_Laser:                                          ; Offset_0x08BE18
                incbin  'data\sfz\horlaser.nem'
Art_Speed_Boost:                                               ; Offset_0x08BE78
                incbin  'data\sfz\spdboost.nem'
Art_SFz_Elevators:                                             ; Offset_0x08BEE2
                incbin  'data\sfz\elevator.nem'
Art_Engine_Part:                                               ; Offset_0x08BFCC
                incbin  'data\sfz\engnpart.nem'
Art_Vertical_Helix:                                            ; Offset_0x08C08E
                incbin  'data\sfz\verhelix.nem'
Art_Horizontal_Helix:                                          ; Offset_0x08C0BE   
                incbin  'data\sfz\horhelix.nem'
Art_Small_Helix:                                               ; Offset_0x08C1E6
                incbin  'data\sfz\smallhlx.nem' 
Art_Rocket_Flame:                                              ; Offset_0x08C29A
                incbin  'data\sfz\rktflame.nem'   
Art_Spikeball_Laser:  ; Não usado                              ; Offset_0x08C30E
                incbin  'data\sfz\spkblasr.nem'                  
Art_Robotnik_Faces:                                            ; Offset_0x08CA5C
                incbin  'data\dez\rbtkface.nem'
Art_Robotnik:                                                  ; Offset_0x08CC30
                incbin  'data\dez\robotnik.nem'
Art_Robotnik_Body:                                             ; Offset_0x08D028
                incbin  'data\dez\rbtkbody.nem'        
Art_Robotnik_Window:                                           ; Offset_0x08D16C
                incbin  'data\dez\robotnkw.nem'    
Art_Robotnik_Final:                                            ; Offset_0x08D1FA  
                incbin  'data\dez\rbtnkfnl.nem'                       
Art_Crawl:                                                     ; Offset_0x08E37A
                incbin  'data\cnz\crawl.nem'                
Green_Hill_Blocks:                                             ; Offset_0x08E6D0
                incbin  'data\ghz\blocks.kos'
                dc.w    $0000
Green_Hill_Tiles:                                              ; Offset_0x08F480
                incbin  'data\ghz\tiles.nem'                 
Hill_Top_16x16_Map:                                            ; Offset_0x0922E6                   
                incbin  'data\htz\htz_16.dat' 
Hill_Top_Tiles:                                                ; Offset_0x092A96
                incbin  'data\htz\tiles.nem'                 
Green_Hill_Chunks:                                             ; Offset_0x093EBC                
                incbin  'data\ghz\chunks.kos'        
                dc.w    $0000, $0000, $0000, $0000, $0000, $0000        
Metropolis_Blocks:                                             ; Offset_0x09715C  
                incbin  'data\mz\blocks.kos'
                dc.w    $0000, $0000, $0000, $0000
Metropolis_Tiles:                                              ; Offset_0x097CEC
                incbin  'data\mz\tiles.nem' 
Metropolis_Chunks:                                             ; Offset_0x09B01C                 
                incbin  'data\mz\chunks.kos'     
                dc.w    $0000
Hidden_Palace_Blocks:
Hidden_Palace_Tiles:
Hidden_Palace_Chunks:                 
                
Oil_Ocean_Blocks:                                              ; Offset_0x09DCBC
                incbin  'data\ooz\blocks.kos'
                dc.w    $0000, $0000, $0000, $0000
Oil_Ocean_Tiles:                                               ; Offset_0x09EB5C
                incbin  'data\ooz\tiles.nem' 
Oil_Ocean_Chunks:                                              ; Offset_0x0A15BE                 
                incbin  'data\ooz\chunks.kos'
                dc.w    $0000, $0000, $0000  
Dust_Hill_Blocks:                                              ; Offset_0x0A3A8E                  
                incbin  'data\dhz\blocks.kos'  
                dc.w    $0000, $0000                                  
Dust_Hill_Tiles:                                               ; Offset_0x0A4AFE
                incbin  'data\dhz\tiles.nem' 
Dust_Hill_Chunks:                                              ; Offset_0x0A8420                  
                incbin  'data\dhz\chunks.kos'  
                dc.w    $0000, $0000
Casino_Night_Blocks:                                           ; Offset_0x0AAF90     
                incbin  'data\cnz\blocks.kos'
                dc.w    $0000 
Casino_Night_Tiles:                                            ; Offset_0x0AB860
                incbin  'data\cnz\tiles.nem' 
Casino_Night_Chunks:                                           ; Offset_0x0AE598                
                incbin  'data\cnz\chunks.kos' 
                dc.w    $0000 
Chemical_Plant_Blocks:                                         ; Offset_0x0B0A98 
                incbin  'data\cpz\blocks.kos'
                dc.w    $0000, $0000, $0000, $0000, $0000
Chemical_Plant_Tiles:                                          ; Offset_0x0B19D8
                incbin  'data\cpz\tiles.nem' 
Chemical_Plant_Chunks:                                         ; Offset_0x0B55E2    
                incbin  'data\cpz\chunks.kos' 
                dc.w    $0000, $0000, $0000, $0000, $0000, $0000, $0000              
Neo_Green_Hill_Blocks:                                         ; Offset_0x0B7E62   
                incbin  'data\nghz\blocks.kos'
                dc.w    $0000, $0000, $0000
Neo_Green_Hill_Tiles:                                          ; Offset_0x0B9142
                incbin  'data\nghz\tiles.nem' 
Neo_Green_Hill_Chunks:                                         ; Offset_0x0BE7C4   
                incbin  'data\nghz\chunks.kos' 
                dc.w    $0000, $0000, $0000
Sky_Fortress_Blocks:                                           ; Offset_0x0C1404  
                incbin  'data\sfz\blocks.kos'  
                dc.w    $0000, $0000, $0000, $0000   
Sky_Fortress_Tiles:                                            ; Offset_0x0C2394 
                incbin  'data\sfz\tiles.nem' 
Art_SFz_Robotnik_Ship:                                         ; Offset_0x0C5A7C                                            
                incbin  'data\sfz\rbtnkshp.nem'                  
Sky_Fortress_Chunks:                                           ; Offset_0x0C61FE                        
                incbin  'data\sfz\chunks.kos'       
                dc.w    $0000, $0000, $0000, $0000, $0000        
;===============================================================================
; Dados usado pelos Estágios Especiais
; ->>>
;===============================================================================                        
Offset_0x0C853E:
                incbin  'data\ss\0x0C853E.dat' 
Offset_0x0C89E2:
                incbin  'data\ss\0x0C89E2.dat' 
Offset_0x0C8FB0:
                incbin  'data\ss\0x0C8FB0.dat' 
Offset_0x0C9568:
                incbin  'data\ss\0x0C9568.dat' 
Offset_0x0C9BCC:
                incbin  'data\ss\0x0C9BCC.dat' 
Offset_0x0CA1F8:
                incbin  'data\ss\0x0CA1F8.dat' 
Offset_0x0CA8B4:
                incbin  'data\ss\0x0CA8B4.dat'
Offset_0x0CAEBC:
                incbin  'data\ss\0x0CAEBC.dat'
Offset_0x0CB3FA:
                incbin  'data\ss\0x0CB3FA.dat'
Offset_0x0CB97E:
                incbin  'data\ss\0x0CB97E.dat'
Offset_0x0CBEF8:
                incbin  'data\ss\0x0CBEF8.dat'
Offset_0x0CC418:
                incbin  'data\ss\0x0CC418.dat'
Offset_0x0CC88C:
                incbin  'data\ss\0x0CC88C.dat'
Offset_0x0CCCF6:
                incbin  'data\ss\0x0CCCF6.dat'
Offset_0x0CD1BA:
                incbin  'data\ss\0x0CD1BA.dat'
Offset_0x0CD63A:
                incbin  'data\ss\0x0CD63A.dat'
Offset_0x0CDA84:
                incbin  'data\ss\0x0CDA84.dat'
Offset_0x0CDEC6:
                incbin  'data\ss\0x0CDEC6.dat'
Offset_0x0CE544:
                incbin  'data\ss\0x0CE544.dat'
Offset_0x0CEAE0:
                incbin  'data\ss\0x0CEAE0.dat'
Offset_0x0CF03A:
                incbin  'data\ss\0x0CF03A.dat'
Offset_0x0CF636:
                incbin  'data\ss\0x0CF636.dat'
Offset_0x0CFAE6:
                incbin  'data\ss\0x0CFAE6.dat'
Offset_0x0CFFE8:
                incbin  'data\ss\0x0CFFE8.dat'
Offset_0x0D0400:
                incbin  'data\ss\0x0D0400.dat'
Offset_0x0D084E:
                incbin  'data\ss\0x0D084E.dat'
Offset_0x0D0CCC:
                incbin  'data\ss\0x0D0CCC.dat'
Offset_0x0D115C:
                incbin  'data\ss\0x0D115C.dat'
Offset_0x0D1626:
                incbin  'data\ss\0x0D1626.dat'
Offset_0x0D1BB2:
                incbin  'data\ss\0x0D1BB2.dat'
Offset_0x0D229A:
                incbin  'data\ss\0x0D229A.dat'
Offset_0x0D29E0:
                incbin  'data\ss\0x0D29E0.dat'
Offset_0x0D3036:
                incbin  'data\ss\0x0D3036.dat'
Offset_0x0D3592:
                incbin  'data\ss\0x0D3592.dat'
Offset_0x0D3B3C:
                incbin  'data\ss\0x0D3B3C.dat'
Offset_0x0D41D0:
                incbin  'data\ss\0x0D41D0.dat'
Offset_0x0D47E4:
                incbin  'data\ss\0x0D47E4.dat'
Offset_0x0D4C68:
                incbin  'data\ss\0x0D4C68.dat'
Offset_0x0D50D6:
                incbin  'data\ss\0x0D50D6.dat'
Offset_0x0D554C:
                incbin  'data\ss\0x0D554C.dat'
Offset_0x0D59E4:
                incbin  'data\ss\0x0D59E4.dat'
Offset_0x0D5E8A:
                incbin  'data\ss\0x0D5E8A.dat'
Offset_0x0D6232:
                incbin  'data\ss\0x0D6232.dat'
Offset_0x0D6626:
                incbin  'data\ss\0x0D6626.dat'
Offset_0x0D6A5E:
                incbin  'data\ss\0x0D6A5E.dat'
Offset_0x0D6EF0:
                incbin  'data\ss\0x0D6EF0.dat'
Offset_0x0D73B2:
                incbin  'data\ss\0x0D73B2.dat'
Offset_0x0D77BA:
                incbin  'data\ss\0x0D77BA.dat'
Offset_0x0D7C50:
                incbin  'data\ss\0x0D7C50.dat'
Offset_0x0D8108:
                incbin  'data\ss\0x0D8108.dat'
Offset_0x0D875A:
                incbin  'data\ss\0x0D875A.dat'
Offset_0x0D8CC0:
                incbin  'data\ss\0x0D8CC0.dat'
Offset_0x0D91E8:
                incbin  'data\ss\0x0D91E8.dat'
Offset_0x0D979C:
                incbin  'data\ss\0x0D979C.dat'
Offset_0x0D9D8E:
                incbin  'data\ss\0x0D9D8E.dat'
Offset_0x0DA222:
                incbin  'data\ss\0x0DA222.dat'
Offset_0x0DA672: 
                incbin  'data\ss\0x0DA672.dat'
Art_Sonic_In_Special_Stage:                                    ; Offset_0x0DAC46
                incbin  'data\ss\sonic.nem'
Art_Sonic_Diagonal_In_Special_Stage:                           ; Offset_0x0DB248
                incbin  'data\ss\sonic_d.nem'
Art_Sonic_Horizontal_In_Special_Stage:                         ; Offset_0x0DBFE2
                incbin  'data\ss\sonic_h.nem'
Art_Sonic_Spin_In_Special_Stage:                               ; Offset_0x0DC534
                incbin  'data\ss\sonic_s.nem'
SS_Background_Tiles:                                           ; Offset_0x0DC626                       
                incbin  'data\ss\backgrnd.nem'                                   
Offset_0x0DCA9C:
                incbin  'data\ss\0x0DCA9C.dat'
Offset_0x0DCBCA:
                incbin  'data\ss\0x0DCBCA.dat'
Art_SS_HUD_Font:                                               ; Offset_0x0DCD48
                incbin  'data\ss\hud_font.nem'                
Art_SS_Start_Traffic_Lights:                                   ; Offset_0x0DD042
                incbin  'data\ss\trafficl.nem' 
Art_SS_Rings:                                                  ; Offset_0x0DD27E 
                incbin  'data\ss\rings.nem' 
Art_SS_Player_Shadow:                                          ; Offset_0x0DD7E6
                incbin  'data\ss\p_shadow.nem' 
Art_SS_Player_Diagonal_Shadow:                                 ; Offset_0x0DD89C
                incbin  'data\ss\d_shadow.nem' 
Art_SS_Player_Vertical_Shadow:                                 ; Offset_0x0DD962
                incbin  'data\ss\v_shadow.nem'
Art_Miles_In_Special_Stage:                                    ; Offset_0x0DD9CA
                incbin  'data\ss\miles.nem'
Art_Miles_Diagonal_In_Special_Stage:                           ; Offset_0x0DDE5A 
                incbin  'data\ss\miles_d.nem'
Art_Miles_Horizontal_In_Special_Stage:                         ; Offset_0x0DE96C
                incbin  'data\ss\miles_h.nem'
Art_Miles_Spin_In_Special_Stage:                               ; Offset_0x0DED4A
                incbin  'data\ss\miles_s.nem'
Art_Miles_Tail_In_Special_Stage:                               ; Offset_0x0DEE0C  
                incbin  'data\ss\miles_t.nem'
Art_Miles_Tail_Diagonal_In_Special_Stage:                      ; Offset_0x0DF12A          
                incbin  'data\ss\miles_td.nem'
Art_Miles_Tail_Horizontal_In_Special_Stage:                    ; Offset_0x0DF492
                incbin  'data\ss\miles_th.nem'
Art_SS_Bombs_Explosion:                                        ; Offset_0x0DF804
                incbin  'data\ss\bombsexp.nem'                 
Art_SS_Bombs:                                                  ; Offset_0x0DFB38
                incbin  'data\ss\bombs.nem'   
Art_SS_Emerald:                                                ; Offset_0x0DFF28
                incbin  'data\ss\emerald.nem'
Art_SS_Wings_Hand:                                             ; Offset_0x0E0170
                incbin  'data\ss\winghand.nem'                                   
;===============================================================================
; Dados usado pelos Estágios Especiais
; <<<-
;=============================================================================== 
                dc.w    $0000, $0000
Previous_Build_SS_Overwrite_Data:                              ; Offset_0x0E052C
                incbin  'data\ss\pb_E052C.dat'
Previous_Build_SS_Data_00:                                     ; Offset_0x0E0924
                incbin  'data\ss\0x0D9D8E.dat'
Previous_Build_SS_Data_01:                                     ; Offset_0x0E0DB8
                incbin  'data\ss\0x0DA222.dat'  
Previous_Build_SS_Data_02:                                     ; Offset_0x0E1208 
                incbin  'data\ss\0x0DA672.dat'    
Previous_Build_Art_Sonic_In_Special_Stage:                     ; Offset_0x0E17DC
                incbin  'data\ss\sonic.nem'  
Previous_Build_Art_Sonic_Diagonal_In_Special_Stage_Overwrite:  ; Offset_0x0E1DDE
                incbin  'data\ss\pb_snc_d.nem'                                                                                                                                                                                                
;===============================================================================
; Leiaute dos objetos nas fases
; ->>>
;===============================================================================                       
Objects_Layout:                                                ; Offset_0x0E2000   
                dc.w    GHz_Obj_Act1-Objects_Layout            ; Offset_0x0E204A
                dc.w    GHz_Obj_Act2-Objects_Layout            ; Offset_0x0E22F6
                dc.w    Lvl1_Obj_Act1-Objects_Layout           ; Offset_0x0E662E
                dc.w    Lvl1_Obj_Act2-Objects_Layout           ; Offset_0x0E662E
                dc.w    Wz_Obj_Act1-Objects_Layout             ; Offset_0x0E662E
                dc.w    Wz_Obj_Act2-Objects_Layout             ; Offset_0x0E662E
                dc.w    Lvl3_Obj_Act1-Objects_Layout           ; Offset_0x0E662E
                dc.w    Lvl3_Obj_Act2-Objects_Layout           ; Offset_0x0E662E
                dc.w    Mz_Obj_Act1-Objects_Layout             ; Offset_0x0E2638
                dc.w    Mz_Obj_Act2-Objects_Layout             ; Offset_0x0E2AA6
                dc.w    Mz_Obj_Act3-Objects_Layout             ; Offset_0x0E2FB0
                dc.w    Mz_Obj_Act4-Objects_Layout             ; Offset_0x0E2FB0
                dc.w    SFz_Obj_Act1-Objects_Layout            ; Offset_0x0E35C2
                dc.w    SFz_Obj_Act2-Objects_Layout            ; Offset_0x0E37CC
                dc.w    HTz_Obj_Act1-Objects_Layout            ; Offset_0x0E37D2
                dc.w    HTz_Obj_Act2-Objects_Layout            ; Offset_0x0E3A90
                dc.w    HPz_Obj_Act1-Objects_Layout            ; Offset_0x0E3F82
                dc.w    HPz_Obj_Act2-Objects_Layout            ; Offset_0x0E4096
                dc.w    Lvl9_Obj_Act1-Objects_Layout           ; Offset_0x0E662E
                dc.w    Lvl9_Obj_Act2-Objects_Layout           ; Offset_0x0E662E
                dc.w    OOz_Obj_Act1-Objects_Layout            ; Offset_0x0E40A2
                dc.w    OOz_Obj_Act2-Objects_Layout            ; Offset_0x0E42EE
                dc.w    DHz_Obj_Act1-Objects_Layout            ; Offset_0x0E44F2
                dc.w    DHz_Obj_Act2-Objects_Layout            ; Offset_0x0E47C8
                dc.w    CNz_Obj_Act1-Objects_Layout            ; Offset_0x0E4ADA
                dc.w    CNz_Obj_Act2-Objects_Layout            ; Offset_0x0E4FF6
                dc.w    CPz_Obj_Act1-Objects_Layout            ; Offset_0x0E53F8
                dc.w    CPz_Obj_Act2-Objects_Layout            ; Offset_0x0E5746
                dc.w    DEz_Obj_Act1-Objects_Layout            ; Offset_0x0E5B06
                dc.w    DEz_Obj_Act2-Objects_Layout            ; Offset_0x0E5B2A
                dc.w    NGHz_Obj_Act1-Objects_Layout           ; Offset_0x0E5B30
                dc.w    NGHz_Obj_Act2-Objects_Layout           ; Offset_0x0E5FE0
                dc.w    SCz_Obj_Act1-Objects_Layout            ; Offset_0x0E64BA
                dc.w    SCz_Obj_Act2-Objects_Layout            ; Offset_0x0E6628
;-------------------------------------------------------------------------------                 
                dc.w    $FFFF, $0000, $0000                       
GHz_Obj_Act1:                                                  ; Offset_0x0E204A
                incbin  'data\ghz\obj_act1.dat'                                  
GHz_Obj_Act2:                                                  ; Offset_0x0E22F6  
                incbin  'data\ghz\obj_act2.dat'
Mz_Obj_Act1:                                                   ; Offset_0x0E2638
                incbin  'data\mz\obj_act1.dat'
Mz_Obj_Act2:                                                   ; Offset_0x0E2AA6   
                incbin  'data\mz\obj_act2.dat'
Mz_Obj_Act3:                                                   ; Offset_0x0E2FB0                   
Mz_Obj_Act4:                                                   ; Offset_0x0E2FB0  
                incbin  'data\mz\obj_act3.dat'
SFz_Obj_Act1:                                                  ; Offset_0x0E35C2     
                incbin  'data\sfz\obj_act.dat'
SFz_Obj_Act2:                                                  ; Offset_0x0E37CC
                dc.w    $FFFF, $0000, $0000  
HTz_Obj_Act1:                                                  ; Offset_0x0E37D2      
                incbin  'data\htz\obj_act1.dat'
HTz_Obj_Act2:                                                  ; Offset_0x0E3A90       
                incbin  'data\htz\obj_act2.dat'
HPz_Obj_Act1:                                                  ; Offset_0x0E3F82
                incbin  'data\hpz\obj_act.dat'
HPz_Obj_Act2:                                                  ; Offset_0x0E4096       
                dc.w    $FFFF, $0000, $0000 
                dc.w    $FFFF, $0000, $0000 
OOz_Obj_Act1:                                                  ; Offset_0x0E40A2  
                incbin  'data\ooz\obj_act1.dat'
OOz_Obj_Act2:                                                  ; Offset_0x0E42EE  
                incbin  'data\ooz\obj_act2.dat'
DHz_Obj_Act1:                                                  ; Offset_0x0E44F2    
                incbin  'data\dhz\obj_act1.dat'
DHz_Obj_Act2:                                                  ; Offset_0x0E47C8    
                incbin  'data\dhz\obj_act2.dat'
CNz_Obj_Act1:                                                  ; Offset_0x0E4ADA    
                incbin  'data\cnz\obj_act1.dat'
CNz_Obj_Act2:                                                  ; Offset_0x0E4FF6    
                incbin  'data\cnz\obj_act2.dat'
CPz_Obj_Act1:                                                  ; Offset_0x0E53F8     
                incbin  'data\cpz\obj_act1.dat'
CPz_Obj_Act2:                                                  ; Offset_0x0E5746     
                incbin  'data\cpz\obj_act2.dat'
DEz_Obj_Act1:                                                  ; Offset_0x0E5B06        
                incbin  'data\dez\obj_act.dat'
DEz_Obj_Act2:                                                  ; Offset_0x0E5B2A
                dc.w    $FFFF, $0000, $0000
NGHz_Obj_Act1:                                                 ; Offset_0x0E5B30          
                incbin  'data\nghz\obj_act1.dat'
NGHz_Obj_Act2:                                                 ; Offset_0x0E5FE0         
                incbin  'data\nghz\obj_act2.dat'
SCz_Obj_Act1:                                                  ; Offset_0x0E64BA
                incbin  'data\scz\obj_act.dat'
SCz_Obj_Act2:                                                  ; Offset_0x0E6628 
                dc.w    $FFFF, $0000, $0000 
                
Lvl1_Obj_Act1:                                                 ; Offset_0x0E662E
Lvl1_Obj_Act2:                                                 ; Offset_0x0E662E 
Wz_Obj_Act1:                                                   ; Offset_0x0E662E 
Wz_Obj_Act2:                                                   ; Offset_0x0E662E  
Lvl3_Obj_Act1:                                                 ; Offset_0x0E662E
Lvl3_Obj_Act2:                                                 ; Offset_0x0E662E   
Lvl9_Obj_Act1:                                                 ; Offset_0x0E662E
Lvl9_Obj_Act2:                                                 ; Offset_0x0E662E
                dc.w    $FFFF, $0000, $0000  
                dc.w    $FFFF, $0000, $0000           
;===============================================================================
; Leiaute dos objetos nas fases
; <<<-
;===============================================================================  
                dc.w    $0000 
Previous_Build_Art_SS_Bombs_Explosion_Overwrite:               ; Offset_0x0E663C
                incbin  'data\ss\pb_bmbex.nem'                 
Previous_Build_Art_SS_Bombs:                                   ; Offset_0x0E66CE
                incbin  'data\ss\bombs.nem' 
Previous_Build_Art_SS_Emerald:                                 ; Offset_0x0E6ABE
                incbin  'data\ss\emerald.nem'   
Previous_Build_Art_SS_Wings_Hand:                              ; Offset_0x0E6D06
                incbin  'data\ss\winghand.nem'    
                dc.w    $0000       
Unknow_Data_0x0E70C0:                                          ; Offset_0x0E70C0
                incbin  'data\all\unkE70C0.dat'                                                            
;===============================================================================
; Leiaute dos anéis nas fases
; ->>>
;===============================================================================  
Rings_Layout:                                                  ; Offset_0x0E8000
                dc.w    GHz_Rng_Act1-Rings_Layout              ; Offset_0x0E8044
                dc.w    GHz_Rng_Act2-Rings_Layout              ; Offset_0x0E81E2
                dc.w    Lvl1_Rng_Act1-Rings_Layout             ; Offset_0x0E8400
                dc.w    Lvl1_Rng_Act2-Rings_Layout             ; Offset_0x0E8402
                dc.w    Wz_Rng_Act1-Rings_Layout               ; Offset_0x0E8404
                dc.w    Wz_Rng_Act2-Rings_Layout               ; Offset_0x0E8406
                dc.w    Lvl3_Rng_Act1-Rings_Layout             ; Offset_0x0E8408
                dc.w    Lvl3_Rng_Act2-Rings_Layout             ; Offset_0x0E840A
                dc.w    Mz_Rng_Act1-Rings_Layout               ; Offset_0x0E840C
                dc.w    Mz_Rng_Act2-Rings_Layout               ; Offset_0x0E8686
                dc.w    Mz_Rng_Act3-Rings_Layout               ; Offset_0x0E88A4
                dc.w    Mz_Rng_Act4-Rings_Layout               ; Offset_0x0E89AA
                dc.w    SFz_Rng_Act1-Rings_Layout              ; Offset_0x0E89AC
                dc.w    SFz_Rng_Act2-Rings_Layout              ; Offset_0x0E8B1A
                dc.w    HTz_Rng_Act1-Rings_Layout              ; Offset_0x0E8B1C
                dc.w    HTz_Rng_Act2-Rings_Layout              ; Offset_0x0E8C12
                dc.w    HPz_Rng_Act1-Rings_Layout              ; Offset_0x0E8D74
                dc.w    HPz_Rng_Act2-Rings_Layout              ; Offset_0x0E8EE6
                dc.w    Lvl9_Rng_Act1-Rings_Layout             ; Offset_0x0E8EE8
                dc.w    Lvl9_Rng_Act2-Rings_Layout             ; Offset_0x0E8EEA
                dc.w    OOz_Rng_Act1-Rings_Layout              ; Offset_0x0E8EEC
                dc.w    OOz_Rng_Act2-Rings_Layout              ; Offset_0x0E8FDE
                dc.w    DHz_Rng_Act1-Rings_Layout              ; Offset_0x0E90A8
                dc.w    DHz_Rng_Act2-Rings_Layout              ; Offset_0x0E9296
                dc.w    CNz_Rng_Act1-Rings_Layout              ; Offset_0x0E9460
                dc.w    CNz_Rng_Act2-Rings_Layout              ; Offset_0x0E965A
                dc.w    CPz_Rng_Act1-Rings_Layout              ; Offset_0x0E986C
                dc.w    CPz_Rng_Act2-Rings_Layout              ; Offset_0x0E99DE
                dc.w    DEz_Rng_Act1-Rings_Layout              ; Offset_0x0E9B90
                dc.w    DEz_Rng_Act2-Rings_Layout              ; Offset_0x0E9B92
                dc.w    NGHz_Rng_Act1-Rings_Layout             ; Offset_0x0E9B94
                dc.w    NGHz_Rng_Act2-Rings_Layout             ; Offset_0x0E9CEA
                dc.w    SCz_Rng_Act1-Rings_Layout              ; Offset_0x0E9F24
                dc.w    SCz_Rng_Act2-Rings_Layout              ; Offset_0x0E9F9A   

GHz_Rng_Act1:                                                  ; Offset_0x0E8044
                incbin  'data\ghz\rng_act1.dat'
GHz_Rng_Act2:                                                  ; Offset_0x0E81E2
                incbin  'data\ghz\rng_act2.dat'
Lvl1_Rng_Act1:                                                 ; Offset_0x0E8400
                dc.w    $FFFF
Lvl1_Rng_Act2:                                                 ; Offset_0x0E8402
                dc.w    $FFFF
Wz_Rng_Act1:                                                   ; Offset_0x0E8404
                dc.w    $FFFF
Wz_Rng_Act2:                                                   ; Offset_0x0E8406
                dc.w    $FFFF
Lvl3_Rng_Act1:                                                 ; Offset_0x0E8408
                dc.w    $FFFF
Lvl3_Rng_Act2:                                                 ; Offset_0x0E840A
                dc.w    $FFFF
Mz_Rng_Act1:                                                   ; Offset_0x0E840C
                incbin  'data\mz\rng_act1.dat'
Mz_Rng_Act2:                                                   ; Offset_0x0E8686
                incbin  'data\mz\rng_act2.dat'
Mz_Rng_Act3:                                                   ; Offset_0x0E88A4
                incbin  'data\mz\rng_act3.dat'
Mz_Rng_Act4:                                                   ; Offset_0x0E89AA
                dc.w    $FFFF
SFz_Rng_Act1:                                                  ; Offset_0x0E89AC
                incbin  'data\sfz\rng_act.dat'
SFz_Rng_Act2:                                                  ; Offset_0x0E8B1A
                dc.w    $FFFF
HTz_Rng_Act1:                                                  ; Offset_0x0E8B1C
                incbin  'data\htz\rng_act1.dat'
HTz_Rng_Act2:                                                  ; Offset_0x0E8C12
                incbin  'data\htz\rng_act2.dat'
HPz_Rng_Act1:                                                  ; Offset_0x0E8D74
                incbin  'data\hpz\rng_act.dat'
HPz_Rng_Act2:                                                  ; Offset_0x0E8EE6
                dc.w    $FFFF
Lvl9_Rng_Act1:                                                 ; Offset_0x0E8EE8
                dc.w    $FFFF
Lvl9_Rng_Act2:                                                 ; Offset_0x0E8EEA
                dc.w    $FFFF
OOz_Rng_Act1:                                                  ; Offset_0x0E8EEC
                incbin  'data\ooz\rng_act1.dat'
OOz_Rng_Act2:                                                  ; Offset_0x0E8FDE
                incbin  'data\ooz\rng_act2.dat'
DHz_Rng_Act1:                                                  ; Offset_0x0E90A8
                incbin  'data\dhz\rng_act1.dat'
DHz_Rng_Act2:                                                  ; Offset_0x0E9296
                incbin  'data\dhz\rng_act2.dat'
CNz_Rng_Act1:                                                  ; Offset_0x0E9460
                incbin  'data\cnz\rng_act1.dat'
CNz_Rng_Act2:                                                  ; Offset_0x0E965A
                incbin  'data\cnz\rng_act2.dat'
CPz_Rng_Act1:                                                  ; Offset_0x0E986C
                incbin  'data\cpz\rng_act1.dat'
CPz_Rng_Act2:                                                  ; Offset_0x0E99DE
                incbin  'data\cpz\rng_act2.dat'
DEz_Rng_Act1:                                                  ; Offset_0x0E9B90
                dc.w    $FFFF
DEz_Rng_Act2:                                                  ; Offset_0x0E9B92
                dc.w    $FFFF
NGHz_Rng_Act1:                                                 ; Offset_0x0E9B94
                incbin  'data\nghz\rng_act1.dat'
NGHz_Rng_Act2:                                                 ; Offset_0x0E9CEA
                incbin  'data\nghz\rng_act2.dat'
SCz_Rng_Act1:                                                  ; Offset_0x0E9F24
                incbin  'data\scz\rng_act.dat'
SCz_Rng_Act2:                                                  ; Offset_0x0E9F9A   
                dc.w    $FFFF               
;===============================================================================
; Leiaute dos anéis nas fases
; <<<-
;===============================================================================  
Unknow_Data_0x0E9F9C:                                          ; Offset_0x0E9F9C
                incbin  'data\all\unkE9F9C.dat'                            
;===============================================================================
; Rotina para carregar o driver de som 
; ->>>
;=============================================================================== 
SoundDriverLoad:                                               ; Offset_0x0EC000
                move    SR, -(A7)                                               
                movem.l D0-D7/A0-A6, -(A7)                                      
                move    #$2700, SR                                              
                lea     (Z80_Bus_Request), A3                        ; $00A11100
                lea     (Z80_Reset), A2                              ; $00A11200
                moveq   #$00, D2                                                
                move.w  #$0100, D1                                              
                move.w  D1, (A3)                                                
                move.w  D1, (A2)                                                
Offset_0x0EC020:
                btst    D2, (A3)                                                
                bne.s   Offset_0x0EC020                                         
                jsr     Offset_0x0EC03C(PC)                                     
                move.w  D2, (A2)                                                
                move.w  D2, (A3)                                                
                moveq   #$17, D0                                                
Offset_0x0EC02E:
                dbra    D0, Offset_0x0EC02E                                     
                move.w  D1, (A2)                                                
                movem.l (A7)+, D0-D7/A0-A6                                      
                move    (A7)+, SR                                               
                rts                                                             
;-------------------------------------------------------------------------------
Offset_0x0EC03C:
                lea     Z80_Sound_Driver(PC), A6               ; Offset_0x0EC0DC                              
                move.w  #$0E98, D7                                              
                moveq   #$00, D6                                                
                lea     (Z80_RAM_Start), A5                          ; $00A00000
                moveq   #$00, D5                                                
                lea     (Z80_RAM_Start), A4                          ; $00A00000
Offset_0x0EC054:
                lsr.w   #$01, D6                                                
                btst    #$08, D6                                                
                bne.s   Offset_0x0EC066                                         
                jsr     Offset_0x0EC0D2(PC)                                     
                move.b  D0, D6                                                  
                ori.w   #$FF00, D6                                              
Offset_0x0EC066:
                btst    #$00, D6                                                
                beq.s   Offset_0x0EC078                                         
                jsr     Offset_0x0EC0D2(PC)                                     
                move.b  D0, (A5)+                                               
                addq.w  #$01, D5                                                
                bra     Offset_0x0EC054                                         
Offset_0x0EC078:
                jsr     Offset_0x0EC0D2(PC)                                     
                moveq   #$00, D4                                                
                move.b  D0, D4                                                  
                jsr     Offset_0x0EC0D2(PC)                                     
                move.b  D0, D3                                                  
                andi.w  #$000F, D3                                              
                addq.w  #$02, D3                                                
                andi.w  #$00F0, D0                                              
                lsl.w   #$04, D0                                                
                add.w   D0, D4                                                  
                addi.w  #$0012, D4                                              
                andi.w  #$0FFF, D4                                              
                move.w  D5, D0                                                  
                andi.w  #$F000, D0                                              
                add.w   D0, D4                                                  
                cmp.w   D4, D5                                                  
                bcc.s   Offset_0x0EC0C0                                         
                subi.w  #$1000, D4                                              
                bcc.s   Offset_0x0EC0C0                                         
                add.w   D3, D5                                                  
                addq.w  #$01, D5                                                
Offset_0x0EC0B2:
                move.b  #$00, (A5)+                                             
                addq.w  #$01, D4                                                
                dbra    D3, Offset_0x0EC0B2                                     
                bra     Offset_0x0EC054                                         
Offset_0x0EC0C0:
                add.w   D3, D5                                                  
                addq.w  #$01, D5                                                
Offset_0x0EC0C4:
                move.b  $00(A4, D4), (A5)+                                      
                addq.w  #$01, D4                                                
                dbra    D3, Offset_0x0EC0C4                                     
                bra     Offset_0x0EC054   
;-------------------------------------------------------------------------------
Offset_0x0EC0D2:
                move.b  (A6)+, D0                                               
                subq.w  #$01, D7                                                
                bne.s   Offset_0x0EC0DA                                         
                addq.w  #$04, A7                                                
Offset_0x0EC0DA:
                rts      
;-------------------------------------------------------------------------------
Z80_Sound_Driver:                                              ; Offset_0x0EC0DC
                incbin  'data\sounds\snd_drv.dat'        
;-------------------------------------------------------------------------------  
                cnop    $000000, $0ED000
DAC_Sample_00:                                                 ; Offset_0x0ED000  
                incbin  'data\sounds\DAC_00.bin'
DAC_Sample_01:                                                 ; Offset_0x0ED294 
                incbin  'data\sounds\DAC_01.bin' 
DAC_Sample_02:                                                 ; Offset_0x0ED9B7 
                incbin  'data\sounds\DAC_02.bin'   
DAC_Sample_03:                                                 ; Offset_0x0EE56C  
                incbin  'data\sounds\DAC_03.bin'                           
DAC_Sample_04:                                                 ; Offset_0x0EED7A  
                incbin  'data\sounds\DAC_04.bin' 
DAC_Sample_05:                                                 ; Offset_0x0EF2F0  
                incbin  'data\sounds\DAC_05.bin'  
DAC_Sample_06:                                                 ; Offset_0x0EFA3C  
                incbin  'data\sounds\DAC_06.bin' 
;------------------------------------------------------------------------------- 
Music_00_Ptr equ  (Music_00&$FFFF)|$8000  
Music_02_Ptr equ  (Music_02&$FFFF)|$8000  
Music_03_Ptr equ  (Music_03&$FFFF)|$8000  
Music_04_Ptr equ  (Music_04&$FFFF)|$8000  
Music_05_Ptr equ  (Music_05&$FFFF)|$8000  
Music_06_Ptr equ  (Music_06&$FFFF)|$8000 

Music_81_Ptr equ  (Music_Versus_Result_Final&$FFFF)|$8000  
Music_82_Ptr equ  (Music_Green_Hill&$FFFF)|$8000  
Music_83_Ptr equ  (Music_Hidden_Palace_Beta&$FFFF)|$8000  
Music_84_Ptr equ  (Music_Oil_Ocean_Final&$FFFF)|$8000  
Music_85_Ptr equ  (Music_Metropolis&$FFFF)|$8000  
Music_86_Ptr equ  (Music_Hill_Top&$FFFF)|$8000  
Music_87_Ptr equ  (Music_Neo_Green_Hill&$FFFF)|$8000  
Music_88_Ptr equ  (Music_Oil_Ocean_Beta&$FFFF)|$8000  
Music_89_Ptr equ  (Music_Casino_Night&$FFFF)|$8000  
Music_8A_Ptr equ  (Music_Death_Egg&$FFFF)|$8000  
Music_8B_Ptr equ  (Music_Dust_Hill&$FFFF)|$8000  
Music_8C_Ptr equ  (Music_Green_Hill_Versus_Final&$FFFF)|$8000  
Music_8D_Ptr equ  (Music_Sky_Chase&$FFFF)|$8000  
Music_8E_Ptr equ  (Music_Chemical_Plant&$FFFF)|$8000  
Music_8F_Ptr equ  (Music_Sky_Fortress&$FFFF)|$8000  
Music_90_Ptr equ  (Music_Hidden_Palace_Final&$FFFF)|$8000  
Music_91_Ptr equ  (Music_Level_Select_Menu&$FFFF)|$8000  
Music_92_Ptr equ  (Music_Special_Stage&$FFFF)|$8000  
Music_93_Ptr equ  (Music_Level_Boss&$FFFF)|$8000  
Music_94_Ptr equ  (Music_Final_Boss&$FFFF)|$8000  
Music_95_Ptr equ  (Music_End_Sequence&$FFFF)|$8000  
Music_96_Ptr equ  (Music_Super_Sonic&$FFFF)|$8000  
Music_97_Ptr equ  (Music_Invencibility&$FFFF)|$8000  
Music_98_Ptr equ  (Music_Extra_Life&$FFFF)|$8000  
Music_99_Ptr equ  (Music_Title_Screen&$FFFF)|$8000  
Music_9A_Ptr equ  (Music_Level_Results&$FFFF)|$8000  
Music_9B_Ptr equ  (Music_Time_Over_Game_Over&$FFFF)|$8000  
Music_9C_Ptr equ  (Music_Continue&$FFFF)|$8000  
Music_9D_Ptr equ  (Music_Get_Emerald&$FFFF)|$8000  
Music_9E_Ptr equ  (Music_Credits&$FFFF)|$8000  
Music_9F_Ptr equ  (Music_Panic&$FFFF)|$8000     
;-------------------------------------------------------------------------------   
Music_81_To_87:                                                ; Offset_0x0F0000                
                dc.w    (((Music_98_Ptr>>$08)|(Music_98_Ptr<<$08))&$FFFF) 
                dc.w    (((Music_9C_Ptr>>$08)|(Music_9C_Ptr<<$08))&$FFFF)
                dc.w    (((Music_9D_Ptr>>$08)|(Music_9D_Ptr<<$08))&$FFFF)
                dc.w    (((Music_90_Ptr>>$08)|(Music_90_Ptr<<$08))&$FFFF)
                dc.w    (((Music_9F_Ptr>>$08)|(Music_9F_Ptr<<$08))&$FFFF)
                dc.w    (((Music_9E_Ptr>>$08)|(Music_9E_Ptr<<$08))&$FFFF)
Music_Extra_Life:                                              ; Offset_0x0F000C
                incbin  'data\sounds\1up_98.snd'
Music_Continue:                                                ; Offset_0x0F00F9
                incbin  'data\sounds\cont_9c.snd'  
Music_Get_Emerald:                                             ; Offset_0x0F0256
                incbin  'data\sounds\emrld_9d.snd'
Music_Hidden_Palace_Final:                                     ; Offset_0x0F0324
                incbin  'data\sounds\hpz_90.snd'  
Music_Panic:                                                   ; Offset_0x0F0583
                incbin  'data\sounds\pnc_9f.snd'  
Music_Credits:                                                 ; Offset_0x0F06AD
                incbin  'data\sounds\credt_9e.snd'
;-------------------------------------------------------------------------------                                                    
                cnop $0,$F1E8C
Sega_Snd:                                                      ; Offset_0x0F1E8C
                incbin  'data\sounds\sega.snd'    
                dc.w    (((Music_88_Ptr>>$08)|(Music_88_Ptr<<$08))&$FFFF) 
                dc.w    (((Music_82_Ptr>>$08)|(Music_82_Ptr<<$08))&$FFFF) 
                dc.w    (((Music_85_Ptr>>$08)|(Music_85_Ptr<<$08))&$FFFF) 
                dc.w    (((Music_89_Ptr>>$08)|(Music_89_Ptr<<$08))&$FFFF)                  
                dc.w    (((Music_8B_Ptr>>$08)|(Music_8B_Ptr<<$08))&$FFFF)                  
                dc.w    (((Music_83_Ptr>>$08)|(Music_83_Ptr<<$08))&$FFFF)
                dc.w    (((Music_87_Ptr>>$08)|(Music_87_Ptr<<$08))&$FFFF)                   
                dc.w    (((Music_8A_Ptr>>$08)|(Music_8A_Ptr<<$08))&$FFFF)                 
                dc.w    (((Music_92_Ptr>>$08)|(Music_92_Ptr<<$08))&$FFFF)                  
                dc.w    (((Music_91_Ptr>>$08)|(Music_91_Ptr<<$08))&$FFFF)                  
                dc.w    (((Music_95_Ptr>>$08)|(Music_95_Ptr<<$08))&$FFFF)                
                dc.w    (((Music_94_Ptr>>$08)|(Music_94_Ptr<<$08))&$FFFF) 
                dc.w    (((Music_8E_Ptr>>$08)|(Music_8E_Ptr<<$08))&$FFFF)                   
                dc.w    (((Music_93_Ptr>>$08)|(Music_93_Ptr<<$08))&$FFFF)                 
                dc.w    (((Music_8D_Ptr>>$08)|(Music_8D_Ptr<<$08))&$FFFF)                  
                dc.w    (((Music_84_Ptr>>$08)|(Music_84_Ptr<<$08))&$FFFF)                    
                dc.w    (((Music_8F_Ptr>>$08)|(Music_8F_Ptr<<$08))&$FFFF)                  
                dc.w    (((Music_8C_Ptr>>$08)|(Music_8C_Ptr<<$08))&$FFFF) 
                dc.w    (((Music_81_Ptr>>$08)|(Music_81_Ptr<<$08))&$FFFF) 
                dc.w    (((Music_96_Ptr>>$08)|(Music_96_Ptr<<$08))&$FFFF) 
                dc.w    (((Music_86_Ptr>>$08)|(Music_86_Ptr<<$08))&$FFFF) 
                dc.w    (((Music_97_Ptr>>$08)|(Music_97_Ptr<<$08))&$FFFF) 
                dc.w    (((Music_99_Ptr>>$08)|(Music_99_Ptr<<$08))&$FFFF) 
                dc.w    (((Music_9A_Ptr>>$08)|(Music_9A_Ptr<<$08))&$FFFF)                
                dc.w    (((Music_9B_Ptr>>$08)|(Music_9B_Ptr<<$08))&$FFFF) 
Music_Oil_Ocean_Beta:                                          ; Offset_0x0F8032
                incbin  'data\sounds\ooz_88.snd'  
Music_Green_Hill:                                              ; Offset_0x0F85B4
                incbin  'data\sounds\ghz_82.snd'  
Music_Metropolis:                                              ; Offset_0x0F8D26
                incbin  'data\sounds\mz_85.snd' 
Music_Casino_Night:                                            ; Offset_0x0F92A1
                incbin  'data\sounds\cnz_89.snd'  
Music_Dust_Hill:                                               ; Offset_0x0F99BE
                incbin  'data\sounds\dhz_8b.snd'   
Music_Hidden_Palace_Beta:                                      ; Offset_0x0FA05E
                incbin  'data\sounds\hpz_83.snd'  
Music_Neo_Green_Hill:                                          ; Offset_0x0FA541
                incbin  'data\sounds\nghz_87.snd' 
Music_Death_Egg:                                               ; Offset_0x0FACCE
                incbin  'data\sounds\dez_8a.snd'    
Music_Special_Stage:                                           ; Offset_0x0FB1B5
                incbin  'data\sounds\ss_92.snd'   
Music_Level_Select_Menu:                                       ; Offset_0x0FB7BC
                incbin  'data\sounds\menu_91.snd'   
Music_End_Sequence:                                            ; Offset_0x0FB937
                incbin  'data\sounds\endsq_95.snd'     
Music_Final_Boss:                                              ; Offset_0x0FBF30
                incbin  'data\sounds\dezfb_94.snd'  
Music_Chemical_Plant:                                          ; Offset_0x0FC268
                incbin  'data\sounds\cpz_8e.snd'     
Music_Level_Boss:                                              ; Offset_0x0FC8B3
                incbin  'data\sounds\boss_93.snd'      
Music_Sky_Chase:                                               ; Offset_0x0FCB85
                incbin  'data\sounds\scz_8d.snd'    
Music_Oil_Ocean_Final:                                         ; Offset_0x0FCF88
                incbin  'data\sounds\ooz_84.snd'     
Music_Sky_Fortress:                                            ; Offset_0x0FD40C
                incbin  'data\sounds\sfz_8f.snd'  
Music_Green_Hill_Versus_Final:                                 ; Offset_0x0FD839
                incbin  'data\sounds\ghzvs_8c.snd'    
Music_Versus_Result_Final:                                     ; Offset_0x0FDD52
                incbin  'data\sounds\vsres_81.snd'
Music_Super_Sonic:                                             ; Offset_0x0FE1B5
                incbin  'data\sounds\super_96.snd'   
Music_Hill_Top:                                                ; Offset_0x0FE4A8
                incbin  'data\sounds\htz_86.snd'  
Music_Invencibility:                                           ; Offset_0x0FE930
                incbin  'data\sounds\invcb_97.snd'                 
Music_Title_Screen:                                            ; Offset_0x0FEAFB
                incbin  'data\sounds\tscr_99.snd'   
Music_Level_Results:                                           ; Offset_0x0FECED
                incbin  'data\sounds\lres_9A.snd'                                                                                                                                                                                                                                                                                                                                          
Music_Time_Over_Game_Over:                                     ; Offset_0x0FEE42
                incbin  'data\sounds\tgovr_9B.snd'                                    
;-------------------------------------------------------------------------------  
Sfx_A0_Ptr   equ     (Sfx_A0&$FFFF)|$8000   
Sfx_A1_Ptr   equ     (Sfx_A1&$FFFF)|$8000    
Sfx_A2_Ptr   equ     (Sfx_A2&$FFFF)|$8000    
Sfx_A3_Ptr   equ     (Sfx_A3&$FFFF)|$8000  
Sfx_A4_Ptr   equ     (Sfx_A4&$FFFF)|$8000 
Sfx_A5_Ptr   equ     (Sfx_A5&$FFFF)|$8000  
Sfx_A6_Ptr   equ     (Sfx_A6&$FFFF)|$8000   
Sfx_A7_Ptr   equ     (Sfx_A7&$FFFF)|$8000    
Sfx_A8_Ptr   equ     (Sfx_A8&$FFFF)|$8000    
Sfx_A9_Ptr   equ     (Sfx_A9&$FFFF)|$8000  
Sfx_AA_Ptr   equ     (Sfx_AA&$FFFF)|$8000 
Sfx_AB_Ptr   equ     (Sfx_AB&$FFFF)|$8000  
Sfx_AC_Ptr   equ     (Sfx_AC&$FFFF)|$8000   
Sfx_AD_Ptr   equ     (Sfx_AD&$FFFF)|$8000    
Sfx_AE_Ptr   equ     (Sfx_AE&$FFFF)|$8000    
Sfx_AF_Ptr   equ     (Sfx_AF&$FFFF)|$8000  
Sfx_B0_Ptr   equ     (Sfx_B0&$FFFF)|$8000 
Sfx_B1_Ptr   equ     (Sfx_B1&$FFFF)|$8000  
Sfx_B2_Ptr   equ     (Sfx_B2&$FFFF)|$8000   
Sfx_B3_Ptr   equ     (Sfx_B3&$FFFF)|$8000    
Sfx_B4_Ptr   equ     (Sfx_B4&$FFFF)|$8000    
Sfx_B5_Ptr   equ     (Sfx_B5&$FFFF)|$8000  
Sfx_B6_Ptr   equ     (Sfx_B6&$FFFF)|$8000 
Sfx_B7_Ptr   equ     (Sfx_B7&$FFFF)|$8000  
Sfx_B8_Ptr   equ     (Sfx_B8&$FFFF)|$8000    
Sfx_B9_Ptr   equ     (Sfx_B9&$FFFF)|$8000  
Sfx_BA_Ptr   equ     (Sfx_BA&$FFFF)|$8000 
Sfx_BB_Ptr   equ     (Sfx_BB&$FFFF)|$8000  
Sfx_BC_Ptr   equ     (Sfx_BC&$FFFF)|$8000   
Sfx_BD_Ptr   equ     (Sfx_BD&$FFFF)|$8000    
Sfx_BE_Ptr   equ     (Sfx_BE&$FFFF)|$8000    
Sfx_BF_Ptr   equ     (Sfx_BF&$FFFF)|$8000 
Sfx_C0_Ptr   equ     (Sfx_C0&$FFFF)|$8000 
Sfx_C1_Ptr   equ     (Sfx_C1&$FFFF)|$8000  
Sfx_C2_Ptr   equ     (Sfx_C2&$FFFF)|$8000   
Sfx_C3_Ptr   equ     (Sfx_C3&$FFFF)|$8000    
Sfx_C4_Ptr   equ     (Sfx_C4&$FFFF)|$8000    
Sfx_C5_Ptr   equ     (Sfx_C5&$FFFF)|$8000  
Sfx_C6_Ptr   equ     (Sfx_C6&$FFFF)|$8000 
Sfx_C7_Ptr   equ     (Sfx_C7&$FFFF)|$8000  
Sfx_C8_Ptr   equ     (Sfx_C8&$FFFF)|$8000    
Sfx_C9_Ptr   equ     (Sfx_C9&$FFFF)|$8000  
Sfx_CA_Ptr   equ     (Sfx_CA&$FFFF)|$8000 
Sfx_CB_Ptr   equ     (Sfx_CB&$FFFF)|$8000  
Sfx_CC_Ptr   equ     (Sfx_CC&$FFFF)|$8000   
Sfx_CD_Ptr   equ     (Sfx_CD&$FFFF)|$8000    
Sfx_CE_Ptr   equ     (Sfx_CE&$FFFF)|$8000    
Sfx_CF_Ptr   equ     (Sfx_CF&$FFFF)|$8000 
Sfx_D0_Ptr   equ     (Sfx_D0&$FFFF)|$8000 
Sfx_D1_Ptr   equ     (Sfx_D1&$FFFF)|$8000  
Sfx_D2_Ptr   equ     (Sfx_D2&$FFFF)|$8000   
Sfx_D3_Ptr   equ     (Sfx_D3&$FFFF)|$8000    
Sfx_D4_Ptr   equ     (Sfx_D4&$FFFF)|$8000    
Sfx_D5_Ptr   equ     (Sfx_D5&$FFFF)|$8000  
Sfx_D6_Ptr   equ     (Sfx_D6&$FFFF)|$8000 
Sfx_D7_Ptr   equ     (Sfx_D7&$FFFF)|$8000  
Sfx_D8_Ptr   equ     (Sfx_D8&$FFFF)|$8000    
Sfx_D9_Ptr   equ     (Sfx_D9&$FFFF)|$8000  
Sfx_DA_Ptr   equ     (Sfx_DA&$FFFF)|$8000 
Sfx_DB_Ptr   equ     (Sfx_DB&$FFFF)|$8000  
Sfx_DC_Ptr   equ     (Sfx_DC&$FFFF)|$8000   
Sfx_DD_Ptr   equ     (Sfx_DD&$FFFF)|$8000    
Sfx_DE_Ptr   equ     (Sfx_DE&$FFFF)|$8000    
Sfx_DF_Ptr   equ     (Sfx_DF&$FFFF)|$8000 
Sfx_E0_Ptr   equ     (Sfx_E0&$FFFF)|$8000 
Sfx_E1_Ptr   equ     (Sfx_E1&$FFFF)|$8000  
Sfx_E2_Ptr   equ     (Sfx_E2&$FFFF)|$8000   
Sfx_E3_Ptr   equ     (Sfx_E3&$FFFF)|$8000    
Sfx_E4_Ptr   equ     (Sfx_E4&$FFFF)|$8000    
Sfx_E5_Ptr   equ     (Sfx_E5&$FFFF)|$8000 
Sfx_E6_Ptr   equ     (Sfx_E6&$FFFF)|$8000 
Sfx_E7_Ptr   equ     (Sfx_E7&$FFFF)|$8000  
Sfx_E8_Ptr   equ     (Sfx_E8&$FFFF)|$8000    
Sfx_E9_Ptr   equ     (Sfx_E9&$FFFF)|$8000  
Sfx_EA_Ptr   equ     (Sfx_EA&$FFFF)|$8000 
Sfx_EB_Ptr   equ     (Sfx_EB&$FFFF)|$8000  
;-------------------------------------------------------------------------------          
Sfx_A0_To_F9:                                                  ; Offset_0x0FEF91      
                dc.w    (((Sfx_A0_Ptr>>$08)|(Sfx_A0_Ptr<<$08))&$FFFF)      
                dc.w    (((Sfx_A1_Ptr>>$08)|(Sfx_A1_Ptr<<$08))&$FFFF) 
                dc.w    (((Sfx_A2_Ptr>>$08)|(Sfx_A2_Ptr<<$08))&$FFFF)   
                dc.w    (((Sfx_A3_Ptr>>$08)|(Sfx_A3_Ptr<<$08))&$FFFF)
                dc.w    (((Sfx_A4_Ptr>>$08)|(Sfx_A4_Ptr<<$08))&$FFFF) 
                dc.w    (((Sfx_A5_Ptr>>$08)|(Sfx_A5_Ptr<<$08))&$FFFF)   
                dc.w    (((Sfx_A6_Ptr>>$08)|(Sfx_A6_Ptr<<$08))&$FFFF)      
                dc.w    (((Sfx_A7_Ptr>>$08)|(Sfx_A7_Ptr<<$08))&$FFFF) 
                dc.w    (((Sfx_A8_Ptr>>$08)|(Sfx_A8_Ptr<<$08))&$FFFF)   
                dc.w    (((Sfx_A9_Ptr>>$08)|(Sfx_A9_Ptr<<$08))&$FFFF)
                dc.w    (((Sfx_AA_Ptr>>$08)|(Sfx_AA_Ptr<<$08))&$FFFF) 
                dc.w    (((Sfx_AB_Ptr>>$08)|(Sfx_AB_Ptr<<$08))&$FFFF) 
                dc.w    (((Sfx_AC_Ptr>>$08)|(Sfx_AC_Ptr<<$08))&$FFFF)   
                dc.w    (((Sfx_AD_Ptr>>$08)|(Sfx_AD_Ptr<<$08))&$FFFF)
                dc.w    (((Sfx_AE_Ptr>>$08)|(Sfx_AE_Ptr<<$08))&$FFFF) 
                dc.w    (((Sfx_AF_Ptr>>$08)|(Sfx_AF_Ptr<<$08))&$FFFF)
                dc.w    (((Sfx_B0_Ptr>>$08)|(Sfx_B0_Ptr<<$08))&$FFFF)      
                dc.w    (((Sfx_B1_Ptr>>$08)|(Sfx_B1_Ptr<<$08))&$FFFF) 
                dc.w    (((Sfx_B2_Ptr>>$08)|(Sfx_B2_Ptr<<$08))&$FFFF)   
                dc.w    (((Sfx_B3_Ptr>>$08)|(Sfx_B3_Ptr<<$08))&$FFFF)
                dc.w    (((Sfx_B4_Ptr>>$08)|(Sfx_B4_Ptr<<$08))&$FFFF) 
                dc.w    (((Sfx_B5_Ptr>>$08)|(Sfx_B5_Ptr<<$08))&$FFFF)   
                dc.w    (((Sfx_B6_Ptr>>$08)|(Sfx_B6_Ptr<<$08))&$FFFF)      
                dc.w    (((Sfx_B7_Ptr>>$08)|(Sfx_B7_Ptr<<$08))&$FFFF) 
                dc.w    (((Sfx_B8_Ptr>>$08)|(Sfx_B8_Ptr<<$08))&$FFFF)   
                dc.w    (((Sfx_B9_Ptr>>$08)|(Sfx_B9_Ptr<<$08))&$FFFF)
                dc.w    (((Sfx_BA_Ptr>>$08)|(Sfx_BA_Ptr<<$08))&$FFFF) 
                dc.w    (((Sfx_BB_Ptr>>$08)|(Sfx_BB_Ptr<<$08))&$FFFF) 
                dc.w    (((Sfx_BC_Ptr>>$08)|(Sfx_BC_Ptr<<$08))&$FFFF)   
                dc.w    (((Sfx_BD_Ptr>>$08)|(Sfx_BD_Ptr<<$08))&$FFFF)
                dc.w    (((Sfx_BE_Ptr>>$08)|(Sfx_BE_Ptr<<$08))&$FFFF) 
                dc.w    (((Sfx_BF_Ptr>>$08)|(Sfx_BF_Ptr<<$08))&$FFFF) 
                dc.w    (((Sfx_C0_Ptr>>$08)|(Sfx_C0_Ptr<<$08))&$FFFF)      
                dc.w    (((Sfx_C1_Ptr>>$08)|(Sfx_C1_Ptr<<$08))&$FFFF) 
                dc.w    (((Sfx_C2_Ptr>>$08)|(Sfx_C2_Ptr<<$08))&$FFFF)   
                dc.w    (((Sfx_C3_Ptr>>$08)|(Sfx_C3_Ptr<<$08))&$FFFF)
                dc.w    (((Sfx_C4_Ptr>>$08)|(Sfx_C4_Ptr<<$08))&$FFFF) 
                dc.w    (((Sfx_C5_Ptr>>$08)|(Sfx_C5_Ptr<<$08))&$FFFF)   
                dc.w    (((Sfx_C6_Ptr>>$08)|(Sfx_C6_Ptr<<$08))&$FFFF)      
                dc.w    (((Sfx_C7_Ptr>>$08)|(Sfx_C7_Ptr<<$08))&$FFFF) 
                dc.w    (((Sfx_C8_Ptr>>$08)|(Sfx_C8_Ptr<<$08))&$FFFF)   
                dc.w    (((Sfx_C9_Ptr>>$08)|(Sfx_C9_Ptr<<$08))&$FFFF)
                dc.w    (((Sfx_CA_Ptr>>$08)|(Sfx_CA_Ptr<<$08))&$FFFF) 
                dc.w    (((Sfx_CB_Ptr>>$08)|(Sfx_CB_Ptr<<$08))&$FFFF) 
                dc.w    (((Sfx_CC_Ptr>>$08)|(Sfx_CC_Ptr<<$08))&$FFFF)   
                dc.w    (((Sfx_CD_Ptr>>$08)|(Sfx_CD_Ptr<<$08))&$FFFF)
                dc.w    (((Sfx_CE_Ptr>>$08)|(Sfx_CE_Ptr<<$08))&$FFFF) 
                dc.w    (((Sfx_CF_Ptr>>$08)|(Sfx_CF_Ptr<<$08))&$FFFF) 
                dc.w    (((Sfx_D0_Ptr>>$08)|(Sfx_D0_Ptr<<$08))&$FFFF) 
                dc.w    (((Sfx_D1_Ptr>>$08)|(Sfx_D1_Ptr<<$08))&$FFFF) 
                dc.w    (((Sfx_D2_Ptr>>$08)|(Sfx_D2_Ptr<<$08))&$FFFF)   
                dc.w    (((Sfx_D3_Ptr>>$08)|(Sfx_D3_Ptr<<$08))&$FFFF)
                dc.w    (((Sfx_D4_Ptr>>$08)|(Sfx_D4_Ptr<<$08))&$FFFF) 
                dc.w    (((Sfx_D5_Ptr>>$08)|(Sfx_D5_Ptr<<$08))&$FFFF)   
                dc.w    (((Sfx_D6_Ptr>>$08)|(Sfx_D6_Ptr<<$08))&$FFFF)      
                dc.w    (((Sfx_D7_Ptr>>$08)|(Sfx_D7_Ptr<<$08))&$FFFF) 
                dc.w    (((Sfx_D8_Ptr>>$08)|(Sfx_D8_Ptr<<$08))&$FFFF)   
                dc.w    (((Sfx_D9_Ptr>>$08)|(Sfx_D9_Ptr<<$08))&$FFFF)
                dc.w    (((Sfx_DA_Ptr>>$08)|(Sfx_DA_Ptr<<$08))&$FFFF) 
                dc.w    (((Sfx_DB_Ptr>>$08)|(Sfx_DB_Ptr<<$08))&$FFFF) 
                dc.w    (((Sfx_DC_Ptr>>$08)|(Sfx_DC_Ptr<<$08))&$FFFF)   
                dc.w    (((Sfx_DD_Ptr>>$08)|(Sfx_DD_Ptr<<$08))&$FFFF)
                dc.w    (((Sfx_DE_Ptr>>$08)|(Sfx_DE_Ptr<<$08))&$FFFF) 
                dc.w    (((Sfx_DF_Ptr>>$08)|(Sfx_DF_Ptr<<$08))&$FFFF) 
                dc.w    (((Sfx_E0_Ptr>>$08)|(Sfx_E0_Ptr<<$08))&$FFFF) 
                dc.w    (((Sfx_E1_Ptr>>$08)|(Sfx_E1_Ptr<<$08))&$FFFF) 
                dc.w    (((Sfx_E2_Ptr>>$08)|(Sfx_E2_Ptr<<$08))&$FFFF)   
                dc.w    (((Sfx_E3_Ptr>>$08)|(Sfx_E3_Ptr<<$08))&$FFFF)
                dc.w    (((Sfx_E4_Ptr>>$08)|(Sfx_E4_Ptr<<$08))&$FFFF) 
                dc.w    (((Sfx_E5_Ptr>>$08)|(Sfx_E5_Ptr<<$08))&$FFFF)   
                dc.w    (((Sfx_E6_Ptr>>$08)|(Sfx_E6_Ptr<<$08))&$FFFF)      
                dc.w    (((Sfx_E7_Ptr>>$08)|(Sfx_E7_Ptr<<$08))&$FFFF) 
                dc.w    (((Sfx_E8_Ptr>>$08)|(Sfx_E8_Ptr<<$08))&$FFFF)   
                dc.w    (((Sfx_E9_Ptr>>$08)|(Sfx_E9_Ptr<<$08))&$FFFF)
                dc.w    (((Sfx_EA_Ptr>>$08)|(Sfx_EA_Ptr<<$08))&$FFFF) 
                dc.w    (((Sfx_EB_Ptr>>$08)|(Sfx_EB_Ptr<<$08))&$FFFF) 
;-------------------------------------------------------------------------------
Sfx_A0:                                                        ; Offset_0x0FF029
                incbin  'data\sounds\sfx_A0.snd'
Sfx_A1:                                                        ; Offset_0x0FF03F
                incbin  'data\sounds\sfx_A1.snd'
Sfx_A2:                                                        ; Offset_0x0FF069
                incbin  'data\sounds\sfx_A2.snd'
Sfx_A3:                                                        ; Offset_0x0FF088
                incbin  'data\sounds\sfx_A3.snd'
Sfx_A4:                                                        ; Offset_0x0FF0BA
                incbin  'data\sounds\sfx_A4.snd'
Sfx_A5:                                                        ; Offset_0x0FF0EF
                incbin  'data\sounds\sfx_A5.snd'
Sfx_A6:                                                        ; Offset_0x0FF11B
                incbin  'data\sounds\sfx_A6.snd'
Sfx_A7:                                                        ; Offset_0x0FF14A
                incbin  'data\sounds\sfx_A7.snd'
Sfx_A8:                                                        ; Offset_0x0FF179
                incbin  'data\sounds\sfx_A8.snd'
Sfx_A9:                                                        ; Offset_0x0FF193
                incbin  'data\sounds\sfx_A9.snd'
Sfx_AA:                                                        ; Offset_0x0FF1A5
                incbin  'data\sounds\sfx_AA.snd'
Sfx_AB:                                                        ; Offset_0x0FF1E6
                incbin  'data\sounds\sfx_AB.snd'
Sfx_AC:                                                        ; Offset_0x0FF205
                incbin  'data\sounds\sfx_AC.snd'
Sfx_AD:                                                        ; Offset_0x0FF239
                incbin  'data\sounds\sfx_AD.snd'
Sfx_AE:                                                        ; Offset_0x0FF26F
                incbin  'data\sounds\sfx_AE.snd'
Sfx_AF:                                                        ; Offset_0x0FF2B9
                incbin  'data\sounds\sfx_AF.snd'
Sfx_B0:                                                        ; Offset_0x0FF2E6
                incbin  'data\sounds\sfx_B0.snd'
Sfx_B1:                                                        ; Offset_0x0FF317
                incbin  'data\sounds\sfx_B1.snd'
Sfx_B2:                                                        ; Offset_0x0FF343
                incbin  'data\sounds\sfx_B2.snd'
Sfx_B3:                                                        ; Offset_0x0FF392
                incbin  'data\sounds\sfx_B3.snd'
Sfx_B4:                                                        ; Offset_0x0FF3C3
                incbin  'data\sounds\sfx_B4.snd'
Sfx_B5:                                                        ; Offset_0x0FF41E
                incbin  'data\sounds\sfx_B5.snd'
Sfx_B6:                                                        ; Offset_0x0FF433
                incbin  'data\sounds\sfx_B6.snd'
Sfx_B7:                                                        ; Offset_0x0FF450
                incbin  'data\sounds\sfx_B7.snd'
Sfx_B8:                                                        ; Offset_0x0FF48B
                incbin  'data\sounds\sfx_B8.snd'
Sfx_B9:                                                        ; Offset_0x0FF4A8
                incbin  'data\sounds\sfx_B9.snd'
Sfx_BA:                                                        ; Offset_0x0FF4F2
                incbin  'data\sounds\sfx_BA.snd'
Sfx_BB:                                                        ; Offset_0x0FF51A
                incbin  'data\sounds\sfx_BB.snd'
Sfx_BC:                                                        ; Offset_0x0FF545
                incbin  'data\sounds\sfx_BC.snd'
Sfx_BD:                                                        ; Offset_0x0FF586
                incbin  'data\sounds\sfx_BD.snd'
Sfx_BE:                                                        ; Offset_0x0FF5D9
                incbin  'data\sounds\sfx_BE.snd'
Sfx_BF:                                                        ; Offset_0x0FF613
                incbin  'data\sounds\sfx_BF.snd'
Sfx_C0:                                                        ; Offset_0x0FF685
                incbin  'data\sounds\sfx_C0.snd'
Sfx_C1:                                                        ; Offset_0x0FF6B3
                incbin  'data\sounds\sfx_C1.snd'
Sfx_C2:                                                        ; Offset_0x0FF6ED  
                incbin  'data\sounds\sfx_C2.snd'
Sfx_C3:                                                        ; Offset_0x0FF6FE  
                incbin  'data\sounds\sfx_C3.snd'
Sfx_C4:                                                        ; Offset_0x0FF778  
                incbin  'data\sounds\sfx_C4.snd'
Sfx_C5:                                                        ; Offset_0x0FF7A0  
                incbin  'data\sounds\sfx_C5.snd'
Sfx_C6:                                                        ; Offset_0x0FF807 
                incbin  'data\sounds\sfx_C6.snd'
Sfx_C7:                                                        ; Offset_0x0FF82F
                incbin  'data\sounds\sfx_C7.snd'
Sfx_C8:                                                        ; Offset_0x0FF85D
                incbin  'data\sounds\sfx_C8.snd'
Sfx_C9:                                                        ; Offset_0x0FF86E
                incbin  'data\sounds\sfx_C9.snd'
Sfx_CA:                                                        ; Offset_0x0FF89B
                incbin  'data\sounds\sfx_CA.snd'
Sfx_CB:                                                        ; Offset_0x0FF8C8
                incbin  'data\sounds\sfx_CB.snd'
Sfx_CC:                                                        ; Offset_0x0FF8FB  
                incbin  'data\sounds\sfx_CC.snd'
Sfx_CD:                                                        ; Offset_0x0FF935 
                incbin  'data\sounds\sfx_CD.snd'
Sfx_CE:                                                        ; Offset_0x0FF942  
                incbin  'data\sounds\sfx_CE.snd'
Sfx_CF:                                                        ; Offset_0x0FF957  
                incbin  'data\sounds\sfx_CF.snd'
Sfx_D0:                                                        ; Offset_0x0FF98E  
                incbin  'data\sounds\sfx_D0.snd'
Sfx_D1:                                                        ; Offset_0x0FF9C1  
                incbin  'data\sounds\sfx_D1.snd'
Sfx_D2:                                                        ; Offset_0x0FF9FA   
                incbin  'data\sounds\sfx_D2.snd'
Sfx_D3:                                                        ; Offset_0x0FFA37   
                incbin  'data\sounds\sfx_D3.snd'
Sfx_D4:                                                        ; Offset_0x0FFA76   
                incbin  'data\sounds\sfx_D4.snd'
Sfx_D5:                                                        ; Offset_0x0FFAB7   
                incbin  'data\sounds\sfx_D5.snd'
Sfx_D6:                                                        ; Offset_0x0FFAE1  
                incbin  'data\sounds\sfx_D6.snd'
Sfx_D7:                                                        ; Offset_0x0FFB26  
                incbin  'data\sounds\sfx_D7.snd'
Sfx_D8:                                                        ; Offset_0x0FFB4E  
                incbin  'data\sounds\sfx_D8.snd'
Sfx_D9:                                                        ; Offset_0x0FFB78   
                incbin  'data\sounds\sfx_D9.snd'
Sfx_DA:                                                        ; Offset_0x0FFBD1   
                incbin  'data\sounds\sfx_DA.snd'
Sfx_DB:                                                        ; Offset_0x0FFBFE  
                incbin  'data\sounds\sfx_DB.snd'
Sfx_DC:                                                        ; Offset_0x0FFC32 
                incbin  'data\sounds\sfx_DC.snd'
Sfx_DD:                                                        ; Offset_0x0FFC79
                incbin  'data\sounds\sfx_DD.snd'
Sfx_DE:                                                        ; Offset_0x0FFCA1
                incbin  'data\sounds\sfx_DE.snd'
Sfx_DF:                                                        ; Offset_0x0FFCDB 
                incbin  'data\sounds\sfx_DF.snd'
Sfx_E0:                                                        ; Offset_0x0FFD77  
                incbin  'data\sounds\sfx_E0.snd'
Sfx_E1:                                                        ; Offset_0x0FFDB2 
                incbin  'data\sounds\sfx_E1.snd'
Sfx_E2:                                                        ; Offset_0x0FFE0F  
                incbin  'data\sounds\sfx_E2.snd'
Sfx_E3:                                                        ; Offset_0x0FFE46  
                incbin  'data\sounds\sfx_E3.snd'
Sfx_E4:                                                        ; Offset_0x0FFE75   
                incbin  'data\sounds\sfx_E4.snd'
Sfx_E5:                                                        ; Offset_0x0FFE9D   
                incbin  'data\sounds\sfx_E5.snd'
Sfx_E6:                                                        ; Offset_0x0FFEBE     
                incbin  'data\sounds\sfx_E6.snd'
Sfx_E7:                                                        ; Offset_0x0FFEF8    
                incbin  'data\sounds\sfx_E7.snd'
Sfx_E8:                                                        ; Offset_0x0FFF19    
                incbin  'data\sounds\sfx_E8.snd'
Sfx_E9:                                                        ; Offset_0x0FFF43     
                incbin  'data\sounds\sfx_E9.snd'
Sfx_EA:                                                        ; Offset_0x0FFF80      
                incbin  'data\sounds\sfx_EA.snd'
Sfx_EB:                                                        ; Offset_0x0FFFAB   
                incbin  'data\sounds\sfx_EB.snd'                                                                                                                                                                                                      
;===============================================================================
; Rotina para carregar o driver de som 
; <<<-
;===============================================================================